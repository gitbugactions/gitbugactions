{
    "repository": "aldjemy/aldjemy",
    "clone_url": "https://github.com/aldjemy/aldjemy.git",
    "timestamp": "2023-05-29T14:13:22.669538Z",
    "clone_success": true,
    "number of actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Build/pytest] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/pytest]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/pytest]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/pytest]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/aldjemy-aldjemy] user=0 workdir=\n[Build/pytest]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[Build/pytest]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[Build/pytest] \ud83e\uddea  Matrix: map[django-version:3.2 python-version:3.7]\n[Build/pytest] \u2b50 Run Main actions/checkout@v3\n[Build/pytest]   \u2705  Success - Main actions/checkout@v3\n[Build/pytest] \u2b50 Run Main Set up Python 3.7\n[Build/pytest]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[Build/pytest]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[Build/pytest]   \u2753  ::group::Installed versions\n[Build/pytest]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: \n[Build/pytest]   \ud83d\udcac  ::debug::explicit? false\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Build/pytest]   \ud83d\udcac  ::debug::explicit? true\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Build/pytest]   \ud83d\udcac  ::debug::explicit? true\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Build/pytest]   \ud83d\udcac  ::debug::explicit? true\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Build/pytest]   \ud83d\udcac  ::debug::explicit? true\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Build/pytest]   \ud83d\udcac  ::debug::explicit? true\n[Build/pytest]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Build/pytest]   \ud83d\udcac  ::debug::explicit? true\n[Build/pytest]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Build/pytest]   \ud83d\udcac  ::debug::matched: 3.7.11\n[Build/pytest]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[Build/pytest]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[Build/pytest]   | Successfully set up CPython (3.7.11)\n[Build/pytest]   \u2753  ::endgroup::\n[Build/pytest]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[Build/pytest]   \u2705  Success - Main Set up Python 3.7\n[Build/pytest]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[Build/pytest]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[Build/pytest]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Build/pytest]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Build/pytest]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Build/pytest]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[Build/pytest]   \u2699  ::set-output:: python-version=3.7.11\n[Build/pytest]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[Build/pytest]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[Build/pytest]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[Build/pytest] \u2b50 Run Main Install prerequisites\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Build/pytest]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[Build/pytest]   | Collecting pip\n[Build/pytest]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[Build/pytest]   | Collecting build\n[Build/pytest]   |   Downloading build-0.10.0-py3-none-any.whl (17 kB)\n[Build/pytest]   | Collecting tomli>=1.1.0\n[Build/pytest]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[Build/pytest]   | Collecting packaging>=19.0\n[Build/pytest]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[Build/pytest]   | Collecting importlib-metadata>=0.22\n[Build/pytest]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[Build/pytest]   | Collecting pyproject_hooks\n[Build/pytest]   |   Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[Build/pytest]   | Collecting typing-extensions>=3.6.4\n[Build/pytest]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[Build/pytest]   | Collecting zipp>=0.5\n[Build/pytest]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[Build/pytest]   | Installing collected packages: zipp, typing-extensions, tomli, pyproject-hooks, packaging, importlib-metadata, pip, build\n[Build/pytest]   |   Attempting uninstall: pip\n[Build/pytest]   |     Found existing installation: pip 21.2.4\n[Build/pytest]   |     Uninstalling pip-21.2.4:\n[Build/pytest]   |       Successfully uninstalled pip-21.2.4\n[Build/pytest]   | Successfully installed build-0.10.0 importlib-metadata-6.6.0 packaging-23.1 pip-23.1.2 pyproject-hooks-1.0.0 tomli-2.0.1 typing-extensions-4.6.2 zipp-3.15.0\n[Build/pytest]   \u2705  Success - Main Install prerequisites\n[Build/pytest] \u2b50 Run Main Build package\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Build/pytest]   | * Creating venv isolated environment...\n[Build/pytest]   | * Installing packages in isolated environment... (hatchling)\n[Build/pytest]   | * Getting build dependencies for sdist...\n[Build/pytest]   | * Building sdist...\n[Build/pytest]   | * Building wheel from sdist\n[Build/pytest]   | * Creating venv isolated environment...\n[Build/pytest]   | * Installing packages in isolated environment... (hatchling)\n[Build/pytest]   | * Getting build dependencies for wheel...\n[Build/pytest]   | * Building wheel...\n[Build/pytest]   | Successfully built aldjemy-2.7.tar.gz and aldjemy-2.7-py3-none-any.whl\n[Build/pytest]   \u2705  Success - Main Build package\n[Build/pytest] \u2b50 Run Main Install with Django 3.2\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Build/pytest]   | Processing ./dist/aldjemy-2.7-py3-none-any.whl\n[Build/pytest]   | Collecting django~=3.2.0\n[Build/pytest]   |   Downloading Django-3.2.19-py3-none-any.whl (7.9 MB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 7.9/7.9 MB 39.6 MB/s eta 0:00:00\n[Build/pytest]   | Collecting sqlalchemy<2,>=1.4 (from aldjemy==2.7)\n[Build/pytest]   |   Downloading SQLAlchemy-1.4.48-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 30.7 MB/s eta 0:00:00\n[Build/pytest]   | Collecting black (from aldjemy==2.7)\n[Build/pytest]   |   Downloading black-23.3.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 33.7 MB/s eta 0:00:00\n[Build/pytest]   | Collecting isort (from aldjemy==2.7)\n[Build/pytest]   |   Downloading isort-5.11.5-py3-none-any.whl (104 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 104.1/104.1 kB 4.2 MB/s eta 0:00:00\n[Build/pytest]   | Collecting psycopg2-binary (from aldjemy==2.7)\n[Build/pytest]   |   Downloading psycopg2_binary-2.9.6-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.0/3.0 MB 28.2 MB/s eta 0:00:00\n[Build/pytest]   | Collecting pytest (from aldjemy==2.7)\n[Build/pytest]   |   Downloading pytest-7.3.1-py3-none-any.whl (320 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 320.5/320.5 kB 7.8 MB/s eta 0:00:00\n[Build/pytest]   | Collecting pytest-cov (from aldjemy==2.7)\n[Build/pytest]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[Build/pytest]   | Collecting pytest-django (from aldjemy==2.7)\n[Build/pytest]   |   Downloading pytest_django-4.5.2-py3-none-any.whl (20 kB)\n[Build/pytest]   | Collecting asgiref<4,>=3.3.2 (from django~=3.2.0)\n[Build/pytest]   |   Downloading asgiref-3.7.2-py3-none-any.whl (24 kB)\n[Build/pytest]   | Collecting pytz (from django~=3.2.0)\n[Build/pytest]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 22.7 MB/s eta 0:00:00\n[Build/pytest]   | Collecting sqlparse>=0.2.2 (from django~=3.2.0)\n[Build/pytest]   |   Downloading sqlparse-0.4.4-py3-none-any.whl (41 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.2/41.2 kB 2.6 MB/s eta 0:00:00\n[Build/pytest]   | Requirement already satisfied: typing-extensions>=4 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from asgiref<4,>=3.3.2->django~=3.2.0) (4.6.2)\n[Build/pytest]   | Requirement already satisfied: importlib-metadata in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from sqlalchemy<2,>=1.4->aldjemy==2.7) (6.6.0)\n[Build/pytest]   | Collecting greenlet!=0.4.17 (from sqlalchemy<2,>=1.4->aldjemy==2.7)\n[Build/pytest]   |   Downloading greenlet-2.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (566 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 566.1/566.1 kB 19.4 MB/s eta 0:00:00\n[Build/pytest]   | Collecting click>=8.0.0 (from black->aldjemy==2.7)\n[Build/pytest]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 11.1 MB/s eta 0:00:00\n[Build/pytest]   | Collecting mypy-extensions>=0.4.3 (from black->aldjemy==2.7)\n[Build/pytest]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[Build/pytest]   | Requirement already satisfied: packaging>=22.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from black->aldjemy==2.7) (23.1)\n[Build/pytest]   | Collecting pathspec>=0.9.0 (from black->aldjemy==2.7)\n[Build/pytest]   |   Using cached pathspec-0.11.1-py3-none-any.whl (29 kB)\n[Build/pytest]   | Collecting platformdirs>=2 (from black->aldjemy==2.7)\n[Build/pytest]   |   Downloading platformdirs-3.5.1-py3-none-any.whl (15 kB)\n[Build/pytest]   | Requirement already satisfied: tomli>=1.1.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from black->aldjemy==2.7) (2.0.1)\n[Build/pytest]   | Collecting typed-ast>=1.4.2 (from black->aldjemy==2.7)\n[Build/pytest]   |   Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 843.7/843.7 kB 30.6 MB/s eta 0:00:00\n[Build/pytest]   | Collecting iniconfig (from pytest->aldjemy==2.7)\n[Build/pytest]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[Build/pytest]   | Collecting pluggy<2.0,>=0.12 (from pytest->aldjemy==2.7)\n[Build/pytest]   |   Using cached pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[Build/pytest]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->aldjemy==2.7)\n[Build/pytest]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[Build/pytest]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->aldjemy==2.7)\n[Build/pytest]   |   Downloading coverage-7.2.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[Build/pytest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.5/225.5 kB 21.7 MB/s eta 0:00:00\n[Build/pytest]   | Requirement already satisfied: zipp>=0.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from importlib-metadata->sqlalchemy<2,>=1.4->aldjemy==2.7) (3.15.0)\n[Build/pytest]   | Installing collected packages: pytz, typed-ast, sqlparse, psycopg2-binary, platformdirs, pathspec, mypy-extensions, isort, iniconfig, greenlet, exceptiongroup, coverage, asgiref, sqlalchemy, pluggy, django, click, pytest, black, aldjemy, pytest-django, pytest-cov\n[Build/pytest]   | Successfully installed aldjemy-2.7 asgiref-3.7.2 black-23.3.0 click-8.1.3 coverage-7.2.6 django-3.2.19 exceptiongroup-1.1.1 greenlet-2.0.2 iniconfig-2.0.0 isort-5.11.5 mypy-extensions-1.0.0 pathspec-0.11.1 platformdirs-3.5.1 pluggy-1.0.0 psycopg2-binary-2.9.6 pytest-7.3.1 pytest-cov-4.1.0 pytest-django-4.5.2 pytz-2023.3 sqlalchemy-1.4.48 sqlparse-0.4.4 typed-ast-1.5.4\n[Build/pytest]   | \n[Build/pytest]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[Build/pytest]   | [notice] To update, run: pip install --upgrade pip\n[Build/pytest]   \u2705  Success - Main Install with Django 3.2\n[Build/pytest] \u2b50 Run Main Run tests\n[Build/pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[Build/pytest]   | ============================= test session starts ==============================\n[Build/pytest]   | platform linux -- Python 3.7.11, pytest-7.3.1, pluggy-1.0.0\n[Build/pytest]   | django: settings: test_project.settings (from ini)\n[Build/pytest]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/aldjemy-aldjemy\n[Build/pytest]   | configfile: tox.ini\n[Build/pytest]   | plugins: django-4.5.2, cov-4.1.0\n[Build/pytest]   | collected 20 items\n[Build/pytest]   | \n[Build/pytest]   | test_project/pg/tests.py EEE                                             [ 15%]\n[Build/pytest]   | test_project/sample/tests.py EEEEEEEEEEEEEE                              [ 85%]\n[Build/pytest]   | test_project/pg/tests.py EEE                                             [100%]\n[Build/pytest]   | \n[Build/pytest]   | ==================================== ERRORS ====================================\n[Build/pytest]   | ______________ ERROR at setup of TestJsonField.test_model_creates ______________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_model_creates>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ___________ ERROR at setup of TestDateRangeField.test_model_creates ____________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_model_creates>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ____ ERROR at setup of RegressionTests.test_transaction_is_not_rolled_back _____\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_transaction_is_not_rolled_back>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ___________ ERROR at setup of SimpleTest.test_aldjemy_initialization ___________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_aldjemy_initialization>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ____________ ERROR at setup of SimpleTest.test_engine_override_test ____________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_aldjemy_initialization>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | __________________ ERROR at setup of SimpleTest.test_querying __________________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_aldjemy_initialization>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | _________________ ERROR at setup of SimpleTest.test_user_model _________________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_aldjemy_initialization>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | _______________ ERROR at setup of AliasesTest.test_engines_cache _______________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_engines_cache>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ___________________ ERROR at setup of AliasesTest.test_logs ____________________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_engines_cache>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | _________________ ERROR at setup of AliasesTest.test_sessions __________________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_engines_cache>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | _________________ ERROR at setup of AldjemyMetaTests.test_meta _________________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_meta>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ______ ERROR at setup of CustomMetaDataTests.test_custom_metadata_schema _______\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_custom_metadata_schema>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | __ ERROR at setup of CustomMetaDataTests.test_custom_metadata_schema_aliased ___\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_custom_metadata_schema>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | _____ ERROR at setup of CustomMetaDataTests.test_many_to_many_through_self _____\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_custom_metadata_schema>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | _ ERROR at setup of CustomMetaDataTests.test_many_to_many_through_self_aliased _\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_custom_metadata_schema>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ________ ERROR at setup of ForeignKeyTests.test_foreign_key_through_pk _________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_foreign_key_through_pk>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ___ ERROR at setup of ForeignKeyTests.test_foreign_key_through_unique_field ____\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_foreign_key_through_pk>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | __________ ERROR at setup of TestArrayField.test_sa_objects_fetching ___________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_sa_objects_fetching>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | __ ERROR at setup of TestArrayField.test_sa_sql_expression_language_fetching ___\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_sa_objects_fetching>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | ______________ ERROR at setup of TestArrayField.test_tic_tac_toe _______________\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with super()._nodb_cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:301: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <contextlib._GeneratorContextManager object at 0x7ff772c838d0>\n[Build/pytest]   | \n[Build/pytest]   |     def __enter__(self):\n[Build/pytest]   |         # do not keep args and kwds alive unnecessarily\n[Build/pytest]   |         # they are only needed for recreation, which is not possible anymore\n[Build/pytest]   |         del self.args, self.kwds, self.func\n[Build/pytest]   |         try:\n[Build/pytest]   | >           return next(self.gen)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff7730e8950>\n[Build/pytest]   | \n[Build/pytest]   |     @contextmanager\n[Build/pytest]   |     def _nodb_cursor(self):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Return a cursor from an alternative connection to be used when there is\n[Build/pytest]   |         no need to access the main database, specifically for test db\n[Build/pytest]   |         creation/deletion. This also prevents the production database from\n[Build/pytest]   |         being exposed to potential child threads while (or after) the test\n[Build/pytest]   |         database is destroyed. Refs #10868, #17786, #16969.\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         conn = self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n[Build/pytest]   |         try:\n[Build/pytest]   | >           with conn.cursor() as cursor:\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:620: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def cursor(self):\n[Build/pytest]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[Build/pytest]   | >       return self._cursor()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | name = None\n[Build/pytest]   | \n[Build/pytest]   |     def _cursor(self, name=None):\n[Build/pytest]   | >       self.ensure_connection()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7ff772cb5610>\n[Build/pytest]   | exc_type = <class 'psycopg2.OperationalError'>\n[Build/pytest]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the serv...432 failed: Cannot assign requested address\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[Build/pytest]   | traceback = <traceback object at 0x7ff772ebac30>\n[Build/pytest]   | \n[Build/pytest]   |     def __exit__(self, exc_type, exc_value, traceback):\n[Build/pytest]   |         if exc_type is None:\n[Build/pytest]   |             return\n[Build/pytest]   |         for dj_exc_type in (\n[Build/pytest]   |                 DataError,\n[Build/pytest]   |                 OperationalError,\n[Build/pytest]   |                 IntegrityError,\n[Build/pytest]   |                 InternalError,\n[Build/pytest]   |                 ProgrammingError,\n[Build/pytest]   |                 NotSupportedError,\n[Build/pytest]   |                 DatabaseError,\n[Build/pytest]   |                 InterfaceError,\n[Build/pytest]   |                 Error,\n[Build/pytest]   |         ):\n[Build/pytest]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[Build/pytest]   |             if issubclass(exc_type, db_exc_type):\n[Build/pytest]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[Build/pytest]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[Build/pytest]   |                 # the connection unusable.\n[Build/pytest]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[Build/pytest]   |                     self.wrapper.errors_occurred = True\n[Build/pytest]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772c83550>\n[Build/pytest]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | During handling of the above exception, another exception occurred:\n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def ensure_connection(self):\n[Build/pytest]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[Build/pytest]   |         if self.connection is None:\n[Build/pytest]   |             with self.wrap_database_errors:\n[Build/pytest]   | >               self.connect()\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>,)\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def connect(self):\n[Build/pytest]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[Build/pytest]   |         # Check for invalid configurations.\n[Build/pytest]   |         self.check_settings()\n[Build/pytest]   |         # In case the previous connection was closed while in an atomic block\n[Build/pytest]   |         self.in_atomic_block = False\n[Build/pytest]   |         self.savepoint_ids = []\n[Build/pytest]   |         self.needs_rollback = False\n[Build/pytest]   |         # Reset parameters defining when to close the connection\n[Build/pytest]   |         max_age = self.settings_dict['CONN_MAX_AGE']\n[Build/pytest]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[Build/pytest]   |         self.closed_in_transaction = False\n[Build/pytest]   |         self.errors_occurred = False\n[Build/pytest]   |         # Establish the connection\n[Build/pytest]   |         conn_params = self.get_connection_params()\n[Build/pytest]   | >       self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>, {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...})\n[Build/pytest]   | kwargs = {}\n[Build/pytest]   | \n[Build/pytest]   |     @functools.wraps(func)\n[Build/pytest]   |     def inner(*args, **kwargs):\n[Build/pytest]   |         if not os.environ.get('DJANGO_ALLOW_ASYNC_UNSAFE'):\n[Build/pytest]   |             # Detect a running event loop in this thread.\n[Build/pytest]   |             try:\n[Build/pytest]   |                 event_loop = get_running_loop()\n[Build/pytest]   |             except RuntimeError:\n[Build/pytest]   |                 pass\n[Build/pytest]   |             else:\n[Build/pytest]   |                 if PY37 or event_loop.is_running():\n[Build/pytest]   |                     raise SynchronousOnlyOperation(message)\n[Build/pytest]   |         # Pass onwards.\n[Build/pytest]   | >       return func(*args, **kwargs)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7ff772cb5f50>\n[Build/pytest]   | conn_params = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | \n[Build/pytest]   |     @async_unsafe\n[Build/pytest]   |     def get_new_connection(self, conn_params):\n[Build/pytest]   | >       connection = Database.connect(**conn_params)\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | \n[Build/pytest]   | The above exception was the direct cause of the following exception:\n[Build/pytest]   | \n[Build/pytest]   | request = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_sa_objects_fetching>>\n[Build/pytest]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7ff776e5f4d0>\n[Build/pytest]   | \n[Build/pytest]   |     @pytest.fixture(autouse=True, scope=\"class\")\n[Build/pytest]   |     def _django_setup_unittest(\n[Build/pytest]   |         request,\n[Build/pytest]   |         django_db_blocker: \"_DatabaseBlocker\",\n[Build/pytest]   |     ) -> Generator[None, None, None]:\n[Build/pytest]   |         \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\n[Build/pytest]   |         if not django_settings_is_configured() or not is_django_unittest(request):\n[Build/pytest]   |             yield\n[Build/pytest]   |             return\n[Build/pytest]   |     \n[Build/pytest]   |         # Fix/patch pytest.\n[Build/pytest]   |         # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\n[Build/pytest]   |         # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\n[Build/pytest]   |         from _pytest.unittest import TestCaseFunction\n[Build/pytest]   |         original_runtest = TestCaseFunction.runtest\n[Build/pytest]   |     \n[Build/pytest]   |         def non_debugging_runtest(self) -> None:\n[Build/pytest]   |             self._testcase(result=self)\n[Build/pytest]   |     \n[Build/pytest]   |         try:\n[Build/pytest]   |             TestCaseFunction.runtest = non_debugging_runtest  # type: ignore[assignment]\n[Build/pytest]   |     \n[Build/pytest]   | >           request.getfixturevalue(\"django_db_setup\")\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/plugin.py:490: \n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_django/fixtures.py:125: in django_db_setup\n[Build/pytest]   |     **setup_databases_args\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/test/utils.py:183: in setup_databases\n[Build/pytest]   |     serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:57: in create_test_db\n[Build/pytest]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/creation.py:191: in _create_test_db\n[Build/pytest]   |     with self._nodb_cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[Build/pytest]   |     return next(self.gen)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:319: in _nodb_cursor\n[Build/pytest]   |     with conn.cursor() as cursor:\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:259: in cursor\n[Build/pytest]   |     return self._cursor()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\n[Build/pytest]   |     self.ensure_connection()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/utils.py:90: in __exit__\n[Build/pytest]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:219: in ensure_connection\n[Build/pytest]   |     self.connect()\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/base/base.py:200: in connect\n[Build/pytest]   |     self.connection = self.get_new_connection(conn_params)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/utils/asyncio.py:33: in inner\n[Build/pytest]   |     return func(*args, **kwargs)\n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:187: in get_new_connection\n[Build/pytest]   |     connection = Database.connect(**conn_params)\n[Build/pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Build/pytest]   | \n[Build/pytest]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=aldjemy'\n[Build/pytest]   | connection_factory = None, cursor_factory = None\n[Build/pytest]   | kwargs = {'database': 'aldjemy', 'host': 'localhost', 'password': 'postgres', 'port': '5432', ...}\n[Build/pytest]   | kwasync = {}\n[Build/pytest]   | \n[Build/pytest]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         Create a new database connection.\n[Build/pytest]   |     \n[Build/pytest]   |         The connection parameters can be specified as a string:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         or using a set of keyword arguments:\n[Build/pytest]   |     \n[Build/pytest]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[Build/pytest]   |     \n[Build/pytest]   |         Or as a mix of both. The basic connection parameters are:\n[Build/pytest]   |     \n[Build/pytest]   |         - *dbname*: the database name\n[Build/pytest]   |         - *database*: the database name (only as keyword argument)\n[Build/pytest]   |         - *user*: user name used to authenticate\n[Build/pytest]   |         - *password*: password used to authenticate\n[Build/pytest]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[Build/pytest]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *connection_factory* parameter a different class or connections\n[Build/pytest]   |         factory can be specified. It should be a callable object taking a dsn\n[Build/pytest]   |         argument.\n[Build/pytest]   |     \n[Build/pytest]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[Build/pytest]   |         used by cursor().\n[Build/pytest]   |     \n[Build/pytest]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[Build/pytest]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[Build/pytest]   |     \n[Build/pytest]   |         Any other keyword parameter will be passed to the underlying client\n[Build/pytest]   |         library: the list of supported parameters depends on the library version.\n[Build/pytest]   |     \n[Build/pytest]   |         \"\"\"\n[Build/pytest]   |         kwasync = {}\n[Build/pytest]   |         if 'async' in kwargs:\n[Build/pytest]   |             kwasync['async'] = kwargs.pop('async')\n[Build/pytest]   |         if 'async_' in kwargs:\n[Build/pytest]   |             kwasync['async_'] = kwargs.pop('async_')\n[Build/pytest]   |     \n[Build/pytest]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[Build/pytest]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[Build/pytest]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | E       connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | \n[Build/pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[Build/pytest]   | =============================== warnings summary ===============================\n[Build/pytest]   | test_project/pg/tests.py::TestJsonField::test_model_creates\n[Build/pytest]   |   /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:310: RuntimeWarning: Normally Django will use a connection to the 'postgres' database to avoid running initialization queries against the production database when it's not needed (for example, when running tests). Django was unable to create a connection to the 'postgres' database and will use the first PostgreSQL database instead.\n[Build/pytest]   |     RuntimeWarning\n[Build/pytest]   | \n[Build/pytest]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[Build/pytest]   | =========================== short test summary info ============================\n[Build/pytest]   | ERROR test_project/pg/tests.py::TestJsonField::test_model_creates - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/pg/tests.py::TestDateRangeField::test_model_creates - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/pg/tests.py::RegressionTests::test_transaction_is_not_rolled_back - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::SimpleTest::test_aldjemy_initialization - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::SimpleTest::test_engine_override_test - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::SimpleTest::test_querying - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::SimpleTest::test_user_model - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::AliasesTest::test_engines_cache - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::AliasesTest::test_logs - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::AliasesTest::test_sessions - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::AldjemyMetaTests::test_meta - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::CustomMetaDataTests::test_custom_metadata_schema - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::CustomMetaDataTests::test_custom_metadata_schema_aliased - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::CustomMetaDataTests::test_many_to_many_through_self - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::CustomMetaDataTests::test_many_to_many_through_self_aliased - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::ForeignKeyTests::test_foreign_key_through_pk - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/sample/tests.py::ForeignKeyTests::test_foreign_key_through_unique_field - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/pg/tests.py::TestArrayField::test_sa_objects_fetching - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/pg/tests.py::TestArrayField::test_sa_sql_expression_language_fetching - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ERROR test_project/pg/tests.py::TestArrayField::test_tic_tac_toe - django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | connection to server at \"localhost\" (::1), port 5432 failed: Cannot assign requested address\n[Build/pytest]   | \tIs the server running on that host and accepting TCP/IP connections?\n[Build/pytest]   | ======================== 1 warning, 20 errors in 10.42s ========================\n[Build/pytest]   \u274c  Failure - Main Run tests\n[Build/pytest] exitcode '1': failure\n[Build/pytest] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'pytest' failed\n"
}