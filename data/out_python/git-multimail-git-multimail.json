{
    "repository": "git-multimail/git-multimail",
    "clone_url": "https://github.com/git-multimail/git-multimail.git",
    "timestamp": "2023-05-29T14:39:01.190226Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[main/build] \ud83d\ude80  Start image=crawlergpt:latest\n[main/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[main/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[main/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[main/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail] user=0 workdir=\n[main/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[main/build] \ud83e\uddea  Matrix: map[python-version:2.7]\n[main/build] \u2b50 Run Main actions/checkout@v3\n[main/build]   \u2705  Success - Main actions/checkout@v3\n[main/build] \u2b50 Run Main Set up Python 2.7\n[main/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[main/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[main/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[main/build]   \ud83d\udcac  ::debug::Semantic version spec of 2.7 is 2.7\n[main/build]   \ud83d\udcac  ::debug::isExplicit: \n[main/build]   \ud83d\udcac  ::debug::explicit? false\n[main/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[main/build]   \ud83d\udcac  ::debug::explicit? true\n[main/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[main/build]   \ud83d\udcac  ::debug::explicit? true\n[main/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[main/build]   \ud83d\udcac  ::debug::explicit? true\n[main/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[main/build]   \ud83d\udcac  ::debug::explicit? true\n[main/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[main/build]   \ud83d\udcac  ::debug::explicit? true\n[main/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[main/build]   \ud83d\udcac  ::debug::explicit? true\n[main/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[main/build]   \ud83d\udcac  ::debug::matched: 2.7.18\n[main/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/2.7.18/x64\n[main/build]   \ud83d\udcac  ::debug::Found tool in cache Python 2.7.18 x64\n[main/build]   | Successfully setup CPython (2.7.18)\n[main/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[main/build]   \u2705  Success - Main Set up Python 2.7\n[main/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/2.7.18/x64/lib\n[main/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/2.7.18/x64\n[main/build]   \u2699  ::set-output:: python-version=2.7.18\n[main/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/2.7.18/x64\n[main/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/2.7.18/x64/bin\n[main/build] \u2b50 Run Main Install common dependencies\n[main/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[main/build]   | DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.\n[main/build]   | Requirement already up-to-date: pip in /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages (20.3.4)\n[main/build]   | DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.\n[main/build]   | Collecting pycodestyle\n[main/build]   |   Downloading pycodestyle-2.8.0-py2.py3-none-any.whl (42 kB)\n[main/build]   | Collecting pyflakes\n[main/build]   |   Downloading pyflakes-2.4.0-py2.py3-none-any.whl (69 kB)\n[main/build]   | Installing collected packages: pycodestyle, pyflakes\n[main/build]   | Successfully installed pycodestyle-2.8.0 pyflakes-2.4.0\n[main/build]   \u2705  Success - Main Install common dependencies\n[main/build] \u2b50 Run Main Test\n[main/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[main/build]   | rm -f -r test-results\n[main/build]   | make aggregate-results-and-cleanup\n[main/build]   | make[1]: Entering directory '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t'\n[main/build]   | *** 00-sanity.t ***\n[main/build]   | # python version: 2.7.18\n[main/build]   | # pycodestyle version: 2.8.0\n[main/build]   | # git version: 2.33.0\n[main/build]   | # rstcheck version: unavailable\n[main/build]   | #   (please install it with e.g. 'pip install rstcheck' to allow sanity checks)\n[main/build]   | # pyflakes version: Linux\n[main/build]   | # pyflakes3 version: unavailable\n[main/build]   | #   (please install it to run the complete testsuite)\n[main/build]   | #\n[main/build]   | expecting success: \n[main/build]   | \tpyflakes $D/..\n[main/build]   | \n[main/build]   | ok 1 - pyflakes\n[main/build]   | \n[main/build]   | skipping test: pyflakes3 \n[main/build]   | \tpyflakes3 $D/..\n[main/build]   | \n[main/build]   | ok 2 # skip pyflakes3 (missing pyflakes3)\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tif \"$MULTIMAIL\" --stdout \\\n[main/build]   | \t\tHEAD HEAD^ HEAD \\\n[main/build]   | \t\t --recipient=recipient@example.com >out 2>err\n[main/build]   | \tthen\n[main/build]   | \t\techo \"Command ran OK, now checking stderr\"\n[main/build]   | \telse\n[main/build]   | \t\techo \"Error running $MULTIMAIL, output below:\" &&\n[main/build]   | \t\tcat out && cat err && false\n[main/build]   | \tfi &&\n[main/build]   | \tcat <<-\\EOF >expect-err &&\n[main/build]   | \t*** Push-update of strange reference 'HEAD'\n[main/build]   | \t***  - incomplete email generated.\n[main/build]   | \tSending notification emails to: recipient@example.com\n[main/build]   | \tEOF\n[main/build]   | \ttest_cmp err expect-err &&\n[main/build]   | \techo \"stderr OK, now checking stdout\" &&\n[main/build]   | \tgrep \"^To: recipient@example.com\" out &&\n[main/build]   | \techo \"Everything all right.\"\n[main/build]   | \n[main/build]   | Command ran OK, now checking stderr\n[main/build]   | stderr OK, now checking stdout\n[main/build]   | To: recipient@example.com\n[main/build]   | Everything all right.\n[main/build]   | ok 3 - Simple but verbose git-multimail run\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tpycodestyle \"$D\"/../\"$f\" --ignore=E402,E123,E741,E722,W504 --max-line-length=99\n[main/build]   |     \n[main/build]   | /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/pycodestyle.py:2665: UserWarning: [pep8] section is deprecated. Use [pycodestyle].\n[main/build]   |   warnings.warn('[pep8] section is deprecated. Use [pycodestyle].')\n[main/build]   | ok 4 - pycodestyle git-multimail/git_multimail.py\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tpycodestyle \"$D\"/../\"$f\" --ignore=E402,E123,E741,E722,W504 --max-line-length=99\n[main/build]   |     \n[main/build]   | /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/pycodestyle.py:2665: UserWarning: [pep8] section is deprecated. Use [pycodestyle].\n[main/build]   |   warnings.warn('[pep8] section is deprecated. Use [pycodestyle].')\n[main/build]   | ok 5 - pycodestyle t/test-env\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tpycodestyle \"$D\"/../\"$f\" --ignore=E402,E123,E741,E722,W504 --max-line-length=99\n[main/build]   |     \n[main/build]   | /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/pycodestyle.py:2665: UserWarning: [pep8] section is deprecated. Use [pycodestyle].\n[main/build]   |   warnings.warn('[pep8] section is deprecated. Use [pycodestyle].')\n[main/build]   | ok 6 - pycodestyle setup.py\n[main/build]   | \n[main/build]   | skipping test: rstcheck README.rst \n[main/build]   | \tstatus=0 &&\n[main/build]   | \t{ rstcheck \"$D\"/../\"$f\" >rstcheck.out 2>&1 || status=$?; } &&\n[main/build]   | \tif grep -qFx \"Success! No issues detected.\" rstcheck.out; then\n[main/build]   | \t\treturn 0;\n[main/build]   | \tfi &&\n[main/build]   | \tcat rstcheck.out &&\n[main/build]   | \t! test -s rstcheck.out &&\n[main/build]   | \treturn $status\n[main/build]   |     \n[main/build]   | ok 7 # skip rstcheck README.rst (missing rstcheck)\n[main/build]   | \n[main/build]   | skipping test: rstcheck CONTRIBUTING.rst \n[main/build]   | \tstatus=0 &&\n[main/build]   | \t{ rstcheck \"$D\"/../\"$f\" >rstcheck.out 2>&1 || status=$?; } &&\n[main/build]   | \tif grep -qFx \"Success! No issues detected.\" rstcheck.out; then\n[main/build]   | \t\treturn 0;\n[main/build]   | \tfi &&\n[main/build]   | \tcat rstcheck.out &&\n[main/build]   | \t! test -s rstcheck.out &&\n[main/build]   | \treturn $status\n[main/build]   |     \n[main/build]   | ok 8 # skip rstcheck CONTRIBUTING.rst (missing rstcheck)\n[main/build]   | \n[main/build]   | skipping test: rstcheck doc/gitolite.rst \n[main/build]   | \tstatus=0 &&\n[main/build]   | \t{ rstcheck \"$D\"/../\"$f\" >rstcheck.out 2>&1 || status=$?; } &&\n[main/build]   | \tif grep -qFx \"Success! No issues detected.\" rstcheck.out; then\n[main/build]   | \t\treturn 0;\n[main/build]   | \tfi &&\n[main/build]   | \tcat rstcheck.out &&\n[main/build]   | \t! test -s rstcheck.out &&\n[main/build]   | \treturn $status\n[main/build]   |     \n[main/build]   | ok 9 # skip rstcheck doc/gitolite.rst (missing rstcheck)\n[main/build]   | \n[main/build]   | skipping test: rstcheck doc/gerrit.rst \n[main/build]   | \tstatus=0 &&\n[main/build]   | \t{ rstcheck \"$D\"/../\"$f\" >rstcheck.out 2>&1 || status=$?; } &&\n[main/build]   | \tif grep -qFx \"Success! No issues detected.\" rstcheck.out; then\n[main/build]   | \t\treturn 0;\n[main/build]   | \tfi &&\n[main/build]   | \tcat rstcheck.out &&\n[main/build]   | \t! test -s rstcheck.out &&\n[main/build]   | \treturn $status\n[main/build]   |     \n[main/build]   | ok 10 # skip rstcheck doc/gerrit.rst (missing rstcheck)\n[main/build]   | \n[main/build]   | skipping test: rstcheck t/README.rst \n[main/build]   | \tstatus=0 &&\n[main/build]   | \t{ rstcheck \"$D\"/../\"$f\" >rstcheck.out 2>&1 || status=$?; } &&\n[main/build]   | \tif grep -qFx \"Success! No issues detected.\" rstcheck.out; then\n[main/build]   | \t\treturn 0;\n[main/build]   | \tfi &&\n[main/build]   | \tcat rstcheck.out &&\n[main/build]   | \t! test -s rstcheck.out &&\n[main/build]   | \treturn $status\n[main/build]   |     \n[main/build]   | ok 11 # skip rstcheck t/README.rst (missing rstcheck)\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tgrep \"^multimailhook.\" $D/../git-multimail/README.rst >variables-lines.txt &&\n[main/build]   | \tvariables=$(sed \"s/, /\\n/g\" <variables-lines.txt |\n[main/build]   | \t\t    sed \"s/multimailhook\\.//\") &&\n[main/build]   | \t(\n[main/build]   | \tcd \"$D\" &&\n[main/build]   | \tstatus=0 &&\n[main/build]   | \tfor v in $variables; do\n[main/build]   | \t\tif ! git grep -i \"^[^#]*$v\" >/dev/null\n[main/build]   | \t\tthen\n[main/build]   | \t\t\techo \"No occurrence of documented variable $v in testsuite\" &&\n[main/build]   | \t\t\tstatus=1\n[main/build]   | \t\tfi\n[main/build]   | \tdone\n[main/build]   | \treturn $status\n[main/build]   | \t)\n[main/build]   | \n[main/build]   | ok 12 - Tests for each configuration variable\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tcd \"$D\" &&\n[main/build]   | \tstatus=0 &&\n[main/build]   | \tfor v in $(cat untested-variables.txt); do\n[main/build]   | \t\tif git grep -i \"^[^#]*$v\" $(git ls-files | grep -v untested-variables)>/dev/null\n[main/build]   | \t\tthen\n[main/build]   | \t\t\techo \"$v appears in untested-variables.txt but also in the testsuite\" &&\n[main/build]   | \t\t\tstatus=1\n[main/build]   | \t\tfi\n[main/build]   | \tdone &&\n[main/build]   | \treturn $status\n[main/build]   | \n[main/build]   | ok 13 - list of untested variables is accurate\n[main/build]   | \n[main/build]   | # passed all 13 test(s)\n[main/build]   | 1..13\n[main/build]   | *** check-ref.t ***\n[main/build]   | expecting success: \n[main/build]   | \tTESTREPO=$(\"$SHARNESS_TEST_DIRECTORY/create-test-repo\") &&\n[main/build]   | \n[main/build]   | \tcd \"$TESTREPO\"\n[main/build]   | \n[main/build]   | hint: Using 'master' as the name for the initial branch. This default branch name\n[main/build]   | hint: is subject to change. To configure the initial branch name to use in all\n[main/build]   | hint: of your new repositories, which will suppress this warning, call:\n[main/build]   | hint: \n[main/build]   | hint: \tgit config --global init.defaultBranch <name>\n[main/build]   | hint: \n[main/build]   | hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\n[main/build]   | hint: 'development'. The just-created branch can be renamed via this command:\n[main/build]   | hint: \n[main/build]   | hint: \tgit branch -m <name>\n[main/build]   | hint: You have created a nested tag. The object referred to by your new tag is\n[main/build]   | hint: already a tag. If you meant to tag the object that it points to, use:\n[main/build]   | hint: \n[main/build]   | hint: \tgit tag -f recursive-tag refs/tags/tag-annotated^{}\n[main/build]   | hint: Disable this message with \"git config advice.nestedTag false\"\n[main/build]   | hint: You have created a nested tag. The object referred to by your new tag is\n[main/build]   | hint: already a tag. If you meant to tag the object that it points to, use:\n[main/build]   | hint: \n[main/build]   | hint: \tgit tag -f tree-tag tree^{}\n[main/build]   | hint: Disable this message with \"git config advice.nestedTag false\"\n[main/build]   | ok 1 - Setup test repo\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/../git-multimail/git_multimail.py --check-ref-filter >actual &&\n[main/build]   | \tcat <<-\\EOF >expect &&\n[main/build]   | DoSend/DontSend filter regex (inclusion): .*\n[main/build]   | Include/Exclude filter regex (exclusion): ^refs/notes/\n[main/build]   | \n[main/build]   | Refs marked as EXCLUDE are excluded by either refFilterInclusionRegex\n[main/build]   | or refFilterExclusionRegex. No emails will be sent for commits included\n[main/build]   | in these refs.\n[main/build]   | Refs marked as DONT-SEND are excluded by either refFilterDoSendRegex or\n[main/build]   | refFilterDontSendRegex, but not by either refFilterInclusionRegex or\n[main/build]   | refFilterExclusionRegex. Emails will be sent for commits included in these\n[main/build]   | refs only when the commit reaches a ref which isn't excluded.\n[main/build]   | Refs marked as DO-SEND are not excluded by any filter. Emails will\n[main/build]   | be sent normally for commits included in these refs.\n[main/build]   | \n[main/build]   | refs/foo/bar DO-SEND\n[main/build]   | refs/heads/feature DO-SEND\n[main/build]   | refs/heads/foo DO-SEND\n[main/build]   | refs/heads/formatting DO-SEND\n[main/build]   | refs/heads/master DO-SEND\n[main/build]   | refs/heads/release DO-SEND\n[main/build]   | refs/remotes/remote DO-SEND\n[main/build]   | refs/tags/recursive-tag DO-SEND\n[main/build]   | refs/tags/tag DO-SEND\n[main/build]   | refs/tags/tag-annotated DO-SEND\n[main/build]   | refs/tags/tag-annotated-new-content DO-SEND\n[main/build]   | refs/tags/tree DO-SEND\n[main/build]   | refs/tags/tree-tag DO-SEND\n[main/build]   | EOF\n[main/build]   | \ttest_cmp actual expect\n[main/build]   | \n[main/build]   | ok 2 - --check-ref-filter with no filter\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/../git-multimail/git_multimail.py -c multimailhook.refFilterExclusionRegex=release --check-ref-filter >actual &&\n[main/build]   | \tcat <<-\\EOF >expect &&\n[main/build]   | DoSend/DontSend filter regex (inclusion): .*\n[main/build]   | Include/Exclude filter regex (exclusion): release|^refs/notes/\n[main/build]   | \n[main/build]   | Refs marked as EXCLUDE are excluded by either refFilterInclusionRegex\n[main/build]   | or refFilterExclusionRegex. No emails will be sent for commits included\n[main/build]   | in these refs.\n[main/build]   | Refs marked as DONT-SEND are excluded by either refFilterDoSendRegex or\n[main/build]   | refFilterDontSendRegex, but not by either refFilterInclusionRegex or\n[main/build]   | refFilterExclusionRegex. Emails will be sent for commits included in these\n[main/build]   | refs only when the commit reaches a ref which isn't excluded.\n[main/build]   | Refs marked as DO-SEND are not excluded by any filter. Emails will\n[main/build]   | be sent normally for commits included in these refs.\n[main/build]   | \n[main/build]   | refs/foo/bar DO-SEND\n[main/build]   | refs/heads/feature DO-SEND\n[main/build]   | refs/heads/foo DO-SEND\n[main/build]   | refs/heads/formatting DO-SEND\n[main/build]   | refs/heads/master DO-SEND\n[main/build]   | refs/heads/release EXCLUDE\n[main/build]   | refs/remotes/remote DO-SEND\n[main/build]   | refs/tags/recursive-tag DO-SEND\n[main/build]   | refs/tags/tag DO-SEND\n[main/build]   | refs/tags/tag-annotated DO-SEND\n[main/build]   | refs/tags/tag-annotated-new-content DO-SEND\n[main/build]   | refs/tags/tree DO-SEND\n[main/build]   | refs/tags/tree-tag DO-SEND\n[main/build]   | EOF\n[main/build]   | \ttest_cmp actual expect\n[main/build]   | \n[main/build]   | ok 3 - --check-ref-filter with exclude filter\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/../git-multimail/git_multimail.py -c multimailhook.refFilterDoSendRegex=annotated --check-ref-filter >actual &&\n[main/build]   | \tcat <<-\\EOF >expect &&\n[main/build]   | DoSend/DontSend filter regex (inclusion): annotated\n[main/build]   | Include/Exclude filter regex (exclusion): ^refs/notes/\n[main/build]   | \n[main/build]   | Refs marked as EXCLUDE are excluded by either refFilterInclusionRegex\n[main/build]   | or refFilterExclusionRegex. No emails will be sent for commits included\n[main/build]   | in these refs.\n[main/build]   | Refs marked as DONT-SEND are excluded by either refFilterDoSendRegex or\n[main/build]   | refFilterDontSendRegex, but not by either refFilterInclusionRegex or\n[main/build]   | refFilterExclusionRegex. Emails will be sent for commits included in these\n[main/build]   | refs only when the commit reaches a ref which isn't excluded.\n[main/build]   | Refs marked as DO-SEND are not excluded by any filter. Emails will\n[main/build]   | be sent normally for commits included in these refs.\n[main/build]   | \n[main/build]   | refs/foo/bar DONT-SEND\n[main/build]   | refs/heads/feature DONT-SEND\n[main/build]   | refs/heads/foo DONT-SEND\n[main/build]   | refs/heads/formatting DONT-SEND\n[main/build]   | refs/heads/master DONT-SEND\n[main/build]   | refs/heads/release DONT-SEND\n[main/build]   | refs/remotes/remote DONT-SEND\n[main/build]   | refs/tags/recursive-tag DONT-SEND\n[main/build]   | refs/tags/tag DONT-SEND\n[main/build]   | refs/tags/tag-annotated DO-SEND\n[main/build]   | refs/tags/tag-annotated-new-content DO-SEND\n[main/build]   | refs/tags/tree DONT-SEND\n[main/build]   | refs/tags/tree-tag DONT-SEND\n[main/build]   | EOF\n[main/build]   | \ttest_cmp actual expect\n[main/build]   | \n[main/build]   | ok 4 - --check-ref-filter with dosend filter\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/../git-multimail/git_multimail.py -c multimailhook.refFilterExclusionRegex=/f -c multimailhook.refFilterDontSendRegex=^refs/heads --check-ref-filter >actual &&\n[main/build]   | \tcat <<-\\EOF >expect &&\n[main/build]   | DoSend/DontSend filter regex (exclusion): ^refs/heads\n[main/build]   | Include/Exclude filter regex (exclusion): /f|^refs/notes/\n[main/build]   | \n[main/build]   | Refs marked as EXCLUDE are excluded by either refFilterInclusionRegex\n[main/build]   | or refFilterExclusionRegex. No emails will be sent for commits included\n[main/build]   | in these refs.\n[main/build]   | Refs marked as DONT-SEND are excluded by either refFilterDoSendRegex or\n[main/build]   | refFilterDontSendRegex, but not by either refFilterInclusionRegex or\n[main/build]   | refFilterExclusionRegex. Emails will be sent for commits included in these\n[main/build]   | refs only when the commit reaches a ref which isn't excluded.\n[main/build]   | Refs marked as DO-SEND are not excluded by any filter. Emails will\n[main/build]   | be sent normally for commits included in these refs.\n[main/build]   | \n[main/build]   | refs/foo/bar EXCLUDE\n[main/build]   | refs/heads/feature EXCLUDE\n[main/build]   | refs/heads/foo EXCLUDE\n[main/build]   | refs/heads/formatting EXCLUDE\n[main/build]   | refs/heads/master DONT-SEND\n[main/build]   | refs/heads/release DONT-SEND\n[main/build]   | refs/remotes/remote DO-SEND\n[main/build]   | refs/tags/recursive-tag DO-SEND\n[main/build]   | refs/tags/tag DO-SEND\n[main/build]   | refs/tags/tag-annotated DO-SEND\n[main/build]   | refs/tags/tag-annotated-new-content DO-SEND\n[main/build]   | refs/tags/tree DO-SEND\n[main/build]   | refs/tags/tree-tag DO-SEND\n[main/build]   | EOF\n[main/build]   | \ttest_cmp actual expect\n[main/build]   | \n[main/build]   | ok 5 - --check-ref-filter with both filters\n[main/build]   | \n[main/build]   | # passed all 5 test(s)\n[main/build]   | 1..5\n[main/build]   | *** email-content.t ***\n[main/build]   | expecting success: \n[main/build]   | \tTESTREPO=$(\"$SHARNESS_TEST_DIRECTORY/create-test-repo\") &&\n[main/build]   | \n[main/build]   | \tcd \"$TESTREPO\"\n[main/build]   | \n[main/build]   | hint: Using 'master' as the name for the initial branch. This default branch name\n[main/build]   | hint: is subject to change. To configure the initial branch name to use in all\n[main/build]   | hint: of your new repositories, which will suppress this warning, call:\n[main/build]   | hint: \n[main/build]   | hint: \tgit config --global init.defaultBranch <name>\n[main/build]   | hint: \n[main/build]   | hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\n[main/build]   | hint: 'development'. The just-created branch can be renamed via this command:\n[main/build]   | hint: \n[main/build]   | hint: \tgit branch -m <name>\n[main/build]   | hint: You have created a nested tag. The object referred to by your new tag is\n[main/build]   | hint: already a tag. If you meant to tag the object that it points to, use:\n[main/build]   | hint: \n[main/build]   | hint: \tgit tag -f recursive-tag refs/tags/tag-annotated^{}\n[main/build]   | hint: Disable this message with \"git config advice.nestedTag false\"\n[main/build]   | hint: You have created a nested tag. The object referred to by your new tag is\n[main/build]   | hint: already a tag. If you meant to tag the object that it points to, use:\n[main/build]   | hint: \n[main/build]   | hint: \tgit tag -f tree-tag tree^{}\n[main/build]   | hint: Disable this message with \"git config advice.nestedTag false\"\n[main/build]   | ok 1 - Setup test repo\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file create-master ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_create refs/heads/master\n[main/build]   | \t) >create-master 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat create-master &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content create-master email-content.d/create-master\n[main/build]   | \t\n[main/build]   | Generating emails to file create-master ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/create-master ...\n[main/build]   | ok 2 - Create a ref\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file headers ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.mailingList=mailing-list-config@example.com \\\n[main/build]   | \t\t-c multimailhook.replyTo=reply-to-config@example.com \\\n[main/build]   | \t\t-c multimailhook.from=from-config@example.com --show-env 2>&1 |\n[main/build]   | \tsed \"s/\\(repo_path\\|fqdn\\) : .*/\\1 : '...'/\"\n[main/build]   | \t) >headers 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat headers &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content headers email-content.d/headers\n[main/build]   | \t\n[main/build]   | Generating emails to file headers ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/headers ...\n[main/build]   | ok 3 - To/From/Reply-to headers\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file headers-specific ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.mailingList=mailing-list-config@example.com \\\n[main/build]   | \t\t-c multimailhook.refChangeList=refchange-list-config@example.com \\\n[main/build]   | \t\t-c multimailhook.commitList=commit-list-config@example.com \\\n[main/build]   | \t\t-c multimailhook.replyToCommit=reply-to-commit@example.com \\\n[main/build]   | \t\t-c multimailhook.replyToRefChange=reply-to-refchange@example.com \\\n[main/build]   | \t\t-c multimailhook.fromRefChange=from-refchange@example.com \\\n[main/build]   | \t\t-c multimailhook.fromCommit=from-commit@example.com \\\n[main/build]   | \t\t-c multimailhook.from=from-config@example.com\n[main/build]   | \t) >headers-specific 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat headers-specific &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content headers-specific email-content.d/headers-specific\n[main/build]   | \t\n[main/build]   | Generating emails to file headers-specific ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/headers-specific ...\n[main/build]   | ok 4 - To/From/Reply-to headers\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file ignoremerges ...' && \n[main/build]   | \tif ( \n[main/build]   | \tMULTIMAIL=$SHARNESS_TEST_DIRECTORY/test_templates.py &&\n[main/build]   | \ttest_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.excludeMergeRevisions=true\n[main/build]   | \t) >ignoremerges 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat ignoremerges &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content ignoremerges email-content.d/ignoremerges\n[main/build]   | \t\n[main/build]   | Generating emails to file ignoremerges ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/ignoremerges ...\n[main/build]   | ok 5 - excludeMergeRevisions\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file emailprefix ...' && \n[main/build]   | \tif ( \n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.emailPrefix=\"XXX{%(repo_shortname)s}YYY<%(repo_shortname)s>ZZZ\" &&\n[main/build]   | \ttest_must_fail verbose_do test_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.emailPrefix=\"XXX{%(repo_shortnam)s}YYY<%(repo_shortname)s>ZZZ\"\n[main/build]   | \t) >emailprefix 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat emailprefix &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content emailprefix email-content.d/emailprefix\n[main/build]   | \t\n[main/build]   | Generating emails to file emailprefix ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/emailprefix ...\n[main/build]   | ok 6 - emailPrefix\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file diff-log ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.refChangeShowLog=true \\\n[main/build]   | \t\t-c multimailhook.logOpts=\"--format=short --stat\" \\\n[main/build]   | \t\t-c multimailhook.commitLogOpts=\"-p --raw\" \\\n[main/build]   | \t\t-c multimailhook.diffOpts=\"-p\" \\\n[main/build]   | \t) >diff-log 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat diff-log &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content diff-log email-content.d/diff-log\n[main/build]   | \t\n[main/build]   | Generating emails to file diff-log ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/diff-log ...\n[main/build]   | ok 7 - custom diff & log\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file html ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_update refs/heads/master refs/heads/master^^ -c multimailhook.commitEmailFormat=html\n[main/build]   | \t) >html 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat html &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content html email-content.d/html\n[main/build]   | \t\n[main/build]   | Generating emails to file html ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/html ...\n[main/build]   | ok 7 - HTML messages\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file url ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_update refs/heads/master refs/heads/master^ \\\n[main/build]   | \t\t-c multimailhook.commitBrowseURL=\"https://github.com/git-multimail/git-multimail/commit/%(id)s\" \\\n[main/build]   | \t\t-c multimailhook.commitEmailFormat=html &&\n[main/build]   | \ttest_update refs/heads/master refs/heads/master^ \\\n[main/build]   | \t\t-c multimailhook.commitBrowseURL=\"https://github.com/git-multimail/git-multimail/commit/\" \\\n[main/build]   | \t\t-c multimailhook.commitEmailFormat=text &&\n[main/build]   | \ttest_update refs/heads/master refs/heads/master^ \\\n[main/build]   | \t\t-c multimailhook.commitBrowseURL=\"https://example.com/path\\\"with<spe\\cial%%chars/%(newrev)s/this-comes-after-id\" \\\n[main/build]   | \t\t-c multimailhook.commitEmailFormat=html &&\n[main/build]   | \ttest_update refs/heads/master refs/heads/master^ \\\n[main/build]   | \t\t-c multimailhook.commitBrowseURL=\"https://example.com/path\\\"with<spe\\cial\\>chars/%()s\" \\\n[main/build]   | \t\t-c multimailhook.commitEmailFormat=text\n[main/build]   | \t) >url 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat url &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content url email-content.d/url\n[main/build]   | \t\n[main/build]   | Generating emails to file url ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/url ...\n[main/build]   | ok 8 - message including a URL\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file combined-url ...' && \n[main/build]   | \tif ( \n[main/build]   | \tverbose_do git config multimailhook.refchangelist \"Commit List <commitlist@example.com>\"\n[main/build]   | \ttest_update refs/heads/master refs/heads/master^ \\\n[main/build]   | \t\t-c multimailhook.commitBrowseURL=\"https://example.com/path\\\"with<spe\\cial%%chars/%(newrev)s/this-comes-after-id\" \\\n[main/build]   | \t\t-c multimailhook.commitEmailFormat=html &&\n[main/build]   | \ttest_update refs/heads/master refs/heads/master^ \\\n[main/build]   | \t\t-c multimailhook.commitBrowseURL=\"https://example.com/path\\\"with<spe\\cial\\>chars/%()s\" \\\n[main/build]   | \t\t-c multimailhook.commitEmailFormat=text\n[main/build]   | \tverbose_do git config multimailhook.refchangelist \"Refchange List <refchangelist@example.com>\"\n[main/build]   | \t) >combined-url 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat combined-url &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content combined-url email-content.d/combined-url\n[main/build]   | \t\n[main/build]   | Generating emails to file combined-url ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/combined-url ...\n[main/build]   | ok 9 - combined message including a URL\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file html-templates ...' && \n[main/build]   | \tif ( \n[main/build]   | \tMULTIMAIL=$SHARNESS_TEST_DIRECTORY/test_templates.py &&\n[main/build]   | \tverbose_do test_update refs/heads/master \\\n[main/build]   | \t\trefs/heads/master^^ -c multimailhook.commitEmailFormat=html &&\n[main/build]   | \tverbose_do test_update refs/heads/master \\\n[main/build]   | \t\trefs/heads/master^^ -c multimailhook.commitEmailFormat=html \\\n[main/build]   | \t\t\t\t    -c multimailhook.htmlInIntro=true\n[main/build]   | \tverbose_do test_update refs/heads/master \\\n[main/build]   | \t\trefs/heads/master^^ -c multimailhook.commitEmailFormat=html \\\n[main/build]   | \t\t\t\t    -c multimailhook.htmlInIntro=true \\\n[main/build]   | \t\t\t\t    -c multimailhook.htmlInFooter=true\n[main/build]   | \t) >html-templates 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat html-templates &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content html-templates email-content.d/html-templates\n[main/build]   | \t\n[main/build]   | Generating emails to file html-templates ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/html-templates ...\n[main/build]   | ok 10 - HTML message with template override\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file simple-tag ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_create refs/tags/tag &&\n[main/build]   | \ttest_update refs/tags/tag refs/heads/master &&\n[main/build]   | \ttest_delete refs/tags/tag\n[main/build]   | \t) >simple-tag 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat simple-tag &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content simple-tag email-content.d/simple-tag\n[main/build]   | \t\n[main/build]   | Generating emails to file simple-tag ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/simple-tag ...\n[main/build]   | ok 11 - tag create/update/delete\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file annotated-tag ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_create refs/tags/tag-annotated &&\n[main/build]   | \ttest_update refs/tags/tag-annotated refs/heads/master &&\n[main/build]   | \ttest_delete refs/tags/tag-annotated\n[main/build]   | \t) >annotated-tag 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat annotated-tag &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content annotated-tag email-content.d/annotated-tag\n[main/build]   | \t\n[main/build]   | Generating emails to file annotated-tag ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/annotated-tag ...\n[main/build]   | ok 12 - annotated tag create/update/delete\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file annotated-tag-content ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_create refs/tags/tag-annotated-new-content &&\n[main/build]   | \ttest_update refs/tags/tag-annotated-new-content refs/heads/master &&\n[main/build]   | \ttest_delete refs/tags/tag-annotated-new-content\n[main/build]   | \t) >annotated-tag-content 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat annotated-tag-content &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content annotated-tag-content email-content.d/annotated-tag-content\n[main/build]   | \t\n[main/build]   | Generating emails to file annotated-tag-content ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/annotated-tag-content ...\n[main/build]   | ok 13 - annotated tag create/update/delete (new content)\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file annotated-tag-tree ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_create refs/tags/tree-tag &&\n[main/build]   | \ttest_update refs/tags/tree-tag refs/heads/master &&\n[main/build]   | \ttest_delete refs/tags/tree-tag &&\n[main/build]   | \ttest_create refs/tags/recursive-tag &&\n[main/build]   | \ttest_update refs/tags/recursive-tag refs/heads/master &&\n[main/build]   | \ttest_delete refs/tags/recursive-tag\n[main/build]   | \t) >annotated-tag-tree 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat annotated-tag-tree &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content annotated-tag-tree email-content.d/annotated-tag-tree\n[main/build]   | \t\n[main/build]   | Generating emails to file annotated-tag-tree ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/annotated-tag-tree ...\n[main/build]   | ok 14 - annotated tag create/update/delete (tag to tree and recursive)\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file max ...' && \n[main/build]   | \tif ( \n[main/build]   | \tverbose_do test_update refs/heads/master foo \\\n[main/build]   | \t\t-c multimailhook.refFilterDontSendRegex=^refs/heads/feature$ \\\n[main/build]   | \t\t-c multimailhook.maxCommitEmails=4 &&\n[main/build]   | \tverbose_do test_update refs/heads/master foo \\\n[main/build]   | \t\t-c multimailhook.refFilterDontSendRegex=^refs/heads/feature$ \\\n[main/build]   | \t\t-c multimailhook.emailMaxLines=10 \\\n[main/build]   | \t\t-c multimailhook.emailMaxLineLength=15 &&\n[main/build]   | \tverbose_do test_update refs/heads/formatting formatting^^ \\\n[main/build]   | \t\t-c multimailhook.emailMaxLines=1 \\\n[main/build]   | \t\t-c multimailhook.emailMaxLineLength=15 &&\n[main/build]   | \tverbose_do test_update refs/heads/formatting formatting^^ \\\n[main/build]   | \t\t-c multimailhook.emailMaxLines=1 \\\n[main/build]   | \t\t-c multimailhook.emailMaxLineLength=15 \\\n[main/build]   | \t\t-c multimailhook.subjectMaxLength=20 &&\n[main/build]   | \tverbose_do test_update refs/heads/formatting formatting^^ \\\n[main/build]   | \t\t-c multimailhook.emailMaxLines=0 \\\n[main/build]   | \t\t-c multimailhook.emailMaxLineLength=0 \\\n[main/build]   | \t\t-c multimailhook.subjectMaxLength=0\n[main/build]   | \t) >max 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat max &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content max email-content.d/max\n[main/build]   | \t\n[main/build]   | Generating emails to file max ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/max ...\n[main/build]   | ok 15 - restrict email count and size\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file ref-filter ...' && \n[main/build]   | \tif ( \n[main/build]   | \techo \"** Expected below: error\" &&\n[main/build]   | \tverbose_do test_must_fail test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterExclusionRegex=^refs/heads/master$ -c multimailhook.refFilterInclusionRegex=whatever &&\n[main/build]   | \techo \"** Expected below: error\" &&\n[main/build]   | \tverbose_do test_must_fail test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterDontSendRegex=^refs/heads/master$ -c multimailhook.refFilterDoSendRegex=whatever &&\n[main/build]   | \techo \"** Expected below: no output\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterExclusionRegex=^refs/heads/master$ &&\n[main/build]   | \n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.refFilterExclusionRegex=^refs/heads/foo$ \\\n[main/build]   | \t\t-c multimailhook.refFilterExclusionRegex=^refs/heads/master$ \\\n[main/build]   | \t\t-c multimailhook.refFilterExclusionRegex=^refs/heads/bar$ &&\n[main/build]   | \n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ \\\n[main/build]   | \t\t-c multimailhook.refFilterExclusionRegex=\"^refs/heads/foo$ ^refs/heads/master$ ^refs/heads/bar$\" \\\n[main/build]   | \n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterInclusionRegex=^refs/heads/feature$ &&\n[main/build]   | \n[main/build]   | \techo \"** Expected below: no output, we should match a substring anywhere in the ref\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterExclusionRegex=master$ &&\n[main/build]   | \n[main/build]   | \techo \"** Expected below: a refchange email with all commits marked as new\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterInclusionRegex=^refs/heads/master$ &&\n[main/build]   | \n[main/build]   | \techo \"** Expected below: a refchange email with m1 and a5 marked as new and others as add\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master refs/heads/master^^ -c multimailhook.refFilterDoSendRegex=^refs/heads/master$ &&\n[main/build]   | \n[main/build]   | \techo \"** Expected below: a refchange email with f1, f2, f3 marked as add and others as new\" &&\n[main/build]   | \techo \"   (f1, f2, f3 were made on a DontSend feature branch, hence completely excluded)\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master foo -c multimailhook.refFilterDontSendRegex=^refs/heads/feature$\n[main/build]   | \n[main/build]   | \techo \"** Expected below: nothing, the branch is marked as dontSend\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master foo -c multimailhook.refFilterDontSendRegex=^refs/heads/master$\n[main/build]   | \n[main/build]   | \techo \"** Expected below: nothing, the branch is not marked as doSend\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master foo -c multimailhook.refFilterDoSendRegex=^refs/heads/feature$\n[main/build]   | \n[main/build]   | \techo \"** Expected below: a refchange email with all marked as new\" &&\n[main/build]   | \techo \"   (ExclusionRegex just ignores pushes to feature, but not commits made on feature)\" &&\n[main/build]   | \tverbose_do test_update refs/heads/master foo -c multimailhook.refFilterExclusionRegex=^refs/heads/feature$\n[main/build]   | \t) >ref-filter 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat ref-filter &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content ref-filter email-content.d/ref-filter\n[main/build]   | \t\n[main/build]   | Generating emails to file ref-filter ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/ref-filter ...\n[main/build]   | ok 16 - refFilter inclusion/exclusion/doSend/DontSend\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tgit checkout --detach master &&\n[main/build]   | \t( echo \"Contenu accentu\u00e9\\n\u00e9\\n1\u00e9234567890\\n12\u00e934567890\\n123\u00e94567890\"\n[main/build]   | \t  printf \"Non-UTF-8\\n\\3511234567890\\n1\\351234567890\\n12\\35134567890\\n123\\3514567890\\n\" ) \\\n[main/build]   | \t   >fichier-accentu\u00e9.txt &&\n[main/build]   | \tgit add fichier-accentu\u00e9.txt &&\n[main/build]   | \tgit commit -m \"Message accentu\u00e9\" --author=\"S\u00e9bastien <sebastien@example.com>\"\n[main/build]   | \n[main/build]   | HEAD is now at 902dfe1 a5\n[main/build]   | [detached HEAD ccb5fb6] Message accentu\u00e9\n[main/build]   |  Author: S\u00e9bastien <sebastien@example.com>\n[main/build]   |  1 file changed, 10 insertions(+)\n[main/build]   |  create mode 100644 \"fichier-accentu\\303\\251.txt\"\n[main/build]   | ok 17 - Non-ascii characters in email (setup)\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file accent-python2 ...' && \n[main/build]   | \t\ttest_when_finished \"git checkout master && git branch -D m\u00e2st\u00e9r\" &&\n[main/build]   | \tif ( \n[main/build]   | \tgit checkout -b m\u00e2st\u00e9r &&\n[main/build]   | \tverbose_do test_update refs/heads/m\u00e2st\u00e9r refs/heads/m\u00e2st\u00e9r^ \\\n[main/build]   | \t\t -c multimailhook.from=author &&\n[main/build]   | \tverbose_do test_update refs/heads/m\u00e2st\u00e9r refs/heads/m\u00e2st\u00e9r^ \\\n[main/build]   | \t\t-c multimailhook.from=author \\\n[main/build]   | \t\t-c multimailhook.emailMaxLineLength=10 \\\n[main/build]   | \t\t-c multimailhook.subjectMaxLength=0 &&\n[main/build]   | \tverbose_do test_update refs/heads/m\u00e2st\u00e9r refs/heads/m\u00e2st\u00e9r^ \\\n[main/build]   | \t\t-c multimailhook.from=author \\\n[main/build]   | \t\t-c multimailhook.emailMaxLineLength=10 \\\n[main/build]   | \t\t-c multimailhook.subjectMaxLength=0 \\\n[main/build]   | \t\t-c multimailhook.emailStrictUTF8=false\n[main/build]   | \t) >accent-python2 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat accent-python2 &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content accent-python2 email-content.d/accent-python2\n[main/build]   | \t\n[main/build]   | Generating emails to file accent-python2 ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/accent-python2 ...\n[main/build]   | Switched to branch 'master'\n[main/build]   | Deleted branch m\u00e2st\u00e9r (was ccb5fb6).\n[main/build]   | ok 18 - Non-ascii characters in email (test)\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file head ...' && \n[main/build]   | \tif ( \n[main/build]   | \ttest_update HEAD HEAD^\n[main/build]   | \t) >head 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat head &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content head email-content.d/head\n[main/build]   | \t\n[main/build]   | Generating emails to file head ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/head ...\n[main/build]   | ok 19 - Push to HEAD\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file gerrit ...' && \n[main/build]   | \tif ( \n[main/build]   | \t# (no verbose_do since \"$MULTIMAIL\" changes from a machine to another)\n[main/build]   | \ttest_when_finished \"git checkout -b master && git branch -d mast\u00e8r\" &&\n[main/build]   | \tgit checkout -b mast\u00e8r && git branch -d master &&\n[main/build]   | \techo \\$ git_multimail.py --stdout --oldrev refs/heads/mast\u00e8r^ --newrev refs/heads/mast\u00e8r --refname mast\u00e8r --project d\u00e9mo-project --submitter \"S\u00fbb Mitter (sub.mitter@example.com)\" &&\n[main/build]   | \t{ \"$PYTHON\" \"$MULTIMAIL\" --stdout --oldrev refs/heads/mast\u00e8r^ --newrev refs/heads/mast\u00e8r --refname mast\u00e8r --project d\u00e9mo-project --submitter \"S\u00fbb Mitter (sub.mitter@example.com)\" >out ; RETCODE=$? ; } &&\n[main/build]   | \tcat out &&\n[main/build]   | \ttest $RETCODE = 0 &&\n[main/build]   | \tgit checkout -b master && git branch -d mast\u00e8r &&\n[main/build]   | \techo \\$ git_multimail.py -c multimailhook.from= -c multimailhook.reponame= --stdout --oldrev refs/heads/master^ --newrev refs/heads/master --refname master --project demo-project --submitter \"Sub M\u00eetter (sub.mitter@example.com)\" &&\n[main/build]   | \t{ \"$PYTHON\" \"$MULTIMAIL\" -c multimailhook.from= -c multimailhook.reponame= --stdout --oldrev refs/heads/master^ --newrev refs/heads/master --refname master --project demo-project --submitter \"Sub M\u00eetter (sub.mitter@example.com)\" >out ; RETCODE=$? ; } &&\n[main/build]   | \tRETCODE=$? &&\n[main/build]   | \tcat out &&\n[main/build]   | \ttest $RETCODE = 0 &&\n[main/build]   | \techo \\$ git_multimail.py -c multimailhook.from= --stdout --oldrev refs/heads/master^ --newrev refs/heads/master --refname master --project demo-project --submitter \"Submitter without Email\" &&\n[main/build]   | \t{ \"$PYTHON\" \"$MULTIMAIL\" -c multimailhook.from= --stdout --oldrev refs/heads/master^ --newrev refs/heads/master --refname master --project demo-project --submitter \"Submitter without Email\" >out ; RETCODE=$? ; } &&\n[main/build]   | \tRETCODE=$? &&\n[main/build]   | \tcat out &&\n[main/build]   | \ttest $RETCODE = 0\n[main/build]   | \t) >gerrit 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat gerrit &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content gerrit email-content.d/gerrit\n[main/build]   | \t\n[main/build]   | Generating emails to file gerrit ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/gerrit ...\n[main/build]   | ok 20 - Gerrit environment\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file stash ...' && \n[main/build]   | \tif ( \n[main/build]   | \t# (no verbose_do since \"$MULTIMAIL\" changes from a machine to another)\n[main/build]   | \techo \\$ git_multimail.py --stdout refs/heads/master refs/heads/master^ refs/heads/master --stash-repo d\u00e9mo-project --stash-user \"Stash S\u00fbb Mitter <sub.mitter@example.com>\" &&\n[main/build]   | \t{ \"$PYTHON\" \"$MULTIMAIL\" --stdout refs/heads/master refs/heads/master^ refs/heads/master --stash-repo d\u00e9mo-project --stash-user \"Stash S\u00fbb Mitter <sub.mitter@example.com>\" >out ; RETCODE=$? ; } &&\n[main/build]   | \tcat out &&\n[main/build]   | \ttest $RETCODE = 0 &&\n[main/build]   | \techo \\$ git_multimail.py -c multimailhook.from= -c multimailhook.reponame= --stdout refs/heads/master refs/heads/master^ refs/heads/master --stash-repo stash-d\u00e9mo-project --stash-user \"Stash Sub M\u00eetter <sub.mitter@example.com>\" &&\n[main/build]   | \t{ \"$PYTHON\" \"$MULTIMAIL\" -c multimailhook.from= -c multimailhook.reponame= --stdout refs/heads/master refs/heads/master^ refs/heads/master --stash-repo stash-d\u00e9mo-project --stash-user \"Stash Sub M\u00eetter <sub.mitter@example.com>\" >out ; RETCODE=$? ; } &&\n[main/build]   | \tRETCODE=$? &&\n[main/build]   | \tcat out &&\n[main/build]   | \ttest $RETCODE = 0\n[main/build]   | \t) >stash 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat stash &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content stash email-content.d/stash\n[main/build]   | \t\n[main/build]   | Generating emails to file stash ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/stash ...\n[main/build]   | ok 21 - Stash environment\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tlog 'Generating emails to file all ...' && \n[main/build]   | \t\tsave_git_config &&\n[main/build]   | \tif ( \n[main/build]   | \t. \"$SHARNESS_TEST_DIRECTORY\"/generate-test-emails\n[main/build]   | \t) >all 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\techo 'Email content generated successfully.'\n[main/build]   | \telse\n[main/build]   | \t\techo 'Error while generating email content:' &&\n[main/build]   | \t\tcat all &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi &&\n[main/build]   | \tcheck_email_content all email-content.d/all\n[main/build]   | \t\n[main/build]   | Generating emails to file all ...\n[main/build]   | Email content generated successfully.\n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/all ...\n[main/build]   | ok 22 - Tests in generate-test-emails\n[main/build]   | \n[main/build]   | checking known breakage: \n[main/build]   | \tgit checkout --detach master &&\n[main/build]   | \ttest_when_finished \"git checkout master\" &&\n[main/build]   | \techo \"Contenu accentu\u00e9\" >fichier-accentu\u00e9.txt &&\n[main/build]   | \tgit add fichier-accentu\u00e9.txt &&\n[main/build]   | \tgit commit -m \"Message accentu\u00e9\" --author=\"S\u00e9bastien <s\u00e9bastien@example.com>\" &&\n[main/build]   | \tlog \"Generating emails ...\" &&\n[main/build]   | \tif ! ( test_update HEAD HEAD^ -c multimailhook.from=author ) >accent 2>&1\n[main/build]   | \tthen\n[main/build]   | \t\tlog \"Email generation failed:\" &&\n[main/build]   | \t\tcat accent &&\n[main/build]   | \t\tfalse\n[main/build]   | \tfi\n[main/build]   | \n[main/build]   | HEAD is now at 902dfe1 a5\n[main/build]   | [detached HEAD 43d999c] Message accentu\u00e9\n[main/build]   |  Author: S\u00e9bastien <s\u00e9bastien@example.com>\n[main/build]   |  1 file changed, 1 insertion(+)\n[main/build]   |  create mode 100644 \"fichier-accentu\\303\\251.txt\"\n[main/build]   | Generating emails ...\n[main/build]   | Warning: you are leaving 1 commit behind, not connected to\n[main/build]   | any of your branches:\n[main/build]   | \n[main/build]   |   43d999c Message accentu\u00e9\n[main/build]   | \n[main/build]   | If you want to keep it by creating a new branch, this may be a good time\n[main/build]   | to do so with:\n[main/build]   | \n[main/build]   |  git branch <new-branch-name> 43d999c\n[main/build]   | \n[main/build]   | Switched to branch 'master'\n[main/build]   | email-content.t: 16: eval: cannot open accent-address: No such file\n[main/build]   | error: Could not access '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/trash directory.email-content/test-repo.git/accent-address.filtered'\n[main/build]   | ERROR: \n[main/build]   | ===========================================================================\n[main/build]   | FAILURE!\n[main/build]   | Please investigate the discrepancies shown above.\n[main/build]   | If you are sure that your version is correct, then please\n[main/build]   | \n[main/build]   |     cp '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/trash directory.email-content/test-repo.git/accent-address.filtered' '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/accent-address'\n[main/build]   | \n[main/build]   | and commit.\n[main/build]   | ok 23 - Non-ascii characters in email (address part) # TODO known breakage vanished\n[main/build]   | \n[main/build]   | checking known breakage: \n[main/build]   | \tcheck_email_content accent-address email-content.d/accent-address\n[main/build]   | \n[main/build]   | Comparing generated emails to /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/email-content.d/accent-address ...\n[main/build]   | not ok 24 - Non-ascii characters in email (address part): content check # TODO known breakage\n[main/build]   | \n[main/build]   | # 1 known breakage(s) vanished; please update test(s)\n[main/build]   | # still have 1 known breakage(s)\n[main/build]   | # passed all remaining 22 test(s)\n[main/build]   | 1..24\n[main/build]   | *** logging.t ***\n[main/build]   | expecting success: \n[main/build]   | \tgit init . &&\n[main/build]   | \tgit config user.name \"John Smith\" &&\n[main/build]   | \tgit config user.email \"John@example.com\" &&\n[main/build]   | \tgit config multimailhook.mailingList foo@example.com &&\n[main/build]   | \techo one >file && git add . && git commit -m one &&\n[main/build]   | \techo two >file && git add . && git commit -m two\n[main/build]   | \n[main/build]   | hint: Using 'master' as the name for the initial branch. This default branch name\n[main/build]   | hint: is subject to change. To configure the initial branch name to use in all\n[main/build]   | hint: of your new repositories, which will suppress this warning, call:\n[main/build]   | hint: \n[main/build]   | hint: \tgit config --global init.defaultBranch <name>\n[main/build]   | hint: \n[main/build]   | hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\n[main/build]   | hint: 'development'. The just-created branch can be renamed via this command:\n[main/build]   | hint: \n[main/build]   | hint: \tgit branch -m <name>\n[main/build]   | Initialized empty Git repository in /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/trash directory.logging/.git/\n[main/build]   | [master (root-commit) 899d257] one\n[main/build]   |  1 file changed, 1 insertion(+)\n[main/build]   |  create mode 100644 file\n[main/build]   | [master ca07aa8] two\n[main/build]   |  1 file changed, 1 insertion(+), 1 deletion(-)\n[main/build]   | ok 1 - setup\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t\"$PYTHON\" \"$MULTIMAIL\" --stdout \\\n[main/build]   | \t\t-c multimailhook.logFile=logFile.txt \\\n[main/build]   | \t\trefs/heads/master HEAD^ HEAD >stdout 2>stderr &&\n[main/build]   | \ttest -s stdout &&\n[main/build]   | \t! grep -F \"[\" stderr &&\n[main/build]   | \tgrep \"^Sending\" stderr &&\n[main/build]   | \t! grep -F \"[DEBUG]\" logFile.txt &&\n[main/build]   | \tgrep -F \"[INFO ]  Sending notification emails to: foo@example.com\" logFile.txt\n[main/build]   | \n[main/build]   | Sending notification emails to: foo@example.com\n[main/build]   | 2023-05-29 14:41:30,884 [INFO ]  Sending notification emails to: foo@example.com\n[main/build]   | ok 2 - log to file\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \trm -f logFile.txt errorLogFile.txt &&\n[main/build]   | \ttest_must_fail \"$PYTHON\" \"$MULTIMAIL\" \\\n[main/build]   | \t\t-c multimailhook.mailer=nosuchmailer \\\n[main/build]   | \t\t-c multimailhook.errorLogFile=errorLogFile.txt \\\n[main/build]   | \t\trefs/heads/master HEAD^ HEAD &&\n[main/build]   | \t! grep -F \"[DEBUG]\" errorLogFile.txt &&\n[main/build]   | \t! grep -F \"[INFO]\" errorLogFile.txt &&\n[main/build]   | \tgrep -F \"[ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \\\"nosuchmailer\\\"\" errorLogFile.txt\n[main/build]   | \n[main/build]   | fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | please use one of \"smtp\" or \"sendmail\".\n[main/build]   | 2023-05-29 14:41:32,141 [ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | ok 3 - log errors to file\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \trm -f logFile.txt errorLogFile.txt &&\n[main/build]   | \ttest_must_fail \"$PYTHON\" \"$MULTIMAIL\" \\\n[main/build]   | \t\t-c multimailhook.mailer=nosuchmailer \\\n[main/build]   | \t\t-c multimailhook.errorLogFile=errorLogFile.txt \\\n[main/build]   | \t\t-c multimailhook.logFile=logFile.txt \\\n[main/build]   | \t\trefs/heads/master HEAD^ HEAD >stdout 2>stderr &&\n[main/build]   | \ttest -e stdout && ! test -s stdout &&\n[main/build]   | \t! grep -F \"[\" stderr &&\n[main/build]   | \tgrep \"^fatal: \" stderr &&\n[main/build]   | \t! grep -F \"[DEBUG]\" errorLogFile.txt &&\n[main/build]   | \tgrep -F \"[ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \\\"nosuchmailer\\\"\" errorLogFile.txt &&\n[main/build]   | \tgrep -F \"[ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \\\"nosuchmailer\\\"\" logFile.txt\n[main/build]   | \n[main/build]   | fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | 2023-05-29 14:41:32,599 [ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | 2023-05-29 14:41:32,598 [ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | ok 4 - log errors to both file\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \trm -f logFile.txt errorLogFile.txt debugLogFile.txt &&\n[main/build]   | \ttest_must_fail \"$PYTHON\" \"$MULTIMAIL\" \\\n[main/build]   | \t\t-c multimailhook.mailer=nosuchmailer \\\n[main/build]   | \t\t-c multimailhook.debugLogFile=debugLogFile.txt \\\n[main/build]   | \t\t-c multimailhook.logFile=logFile.txt \\\n[main/build]   | \t\trefs/heads/master HEAD^ HEAD &&\n[main/build]   | \t! grep -F \"[DEBUG]\" logFile.txt &&\n[main/build]   | \tgrep -F \"[ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \\\"nosuchmailer\\\"\" debugLogFile.txt &&\n[main/build]   | \tgrep -F \"[ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \\\"nosuchmailer\\\"\" logFile.txt\n[main/build]   | \n[main/build]   | fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | please use one of \"smtp\" or \"sendmail\".\n[main/build]   | 2023-05-29 14:41:33,493 [ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | 2023-05-29 14:41:33,493 [ERROR]  fatal: multimailhook.mailer is set to an incorrect value: \"nosuchmailer\"\n[main/build]   | ok 5 - log debug to both file\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t\"$PYTHON\" \"$MULTIMAIL\" --stdout \\\n[main/build]   | \t\t-c multimailhook.verbose=1 \\\n[main/build]   | \t\trefs/heads/master HEAD^ HEAD 2>stderr\n[main/build]   | \tgrep \"^run_as_update_hook: \" stderr\n[main/build]   | \n[main/build]   | ===========================================================================\n[main/build]   | Date: Mon, 29 May 2023 14:41:34 +0000\n[main/build]   | To: foo@example.com\n[main/build]   | Subject: [trash directory.logging] branch master updated: two\n[main/build]   | MIME-Version: 1.0\n[main/build]   | Content-Type: text/plain; charset=utf-8\n[main/build]   | Content-Transfer-Encoding: 8bit\n[main/build]   | Message-ID: <168537129430.14510.8730708174394994186@51699ea160f0>\n[main/build]   | From: John Smith <John@example.com>\n[main/build]   | Reply-To: John Smith <John@example.com>\n[main/build]   | X-Git-Host: 51699ea160f0\n[main/build]   | X-Git-Repo: trash directory.logging\n[main/build]   | X-Git-Refname: refs/heads/master\n[main/build]   | X-Git-Reftype: branch\n[main/build]   | X-Git-Oldrev: 899d2577fde006725dc0d47e8e024f30102ce114\n[main/build]   | X-Git-Newrev: ca07aa817ef711cdebb70cad3b646ebd0544734b\n[main/build]   | X-Git-Rev: ca07aa817ef711cdebb70cad3b646ebd0544734b\n[main/build]   | X-Git-NotificationType: ref_changed_plus_diff\n[main/build]   | X-Git-Multimail-Version: 1.7.dev (1.5.0-27-g0a56f8a)\n[main/build]   | Auto-Submitted: auto-generated\n[main/build]   | \n[main/build]   | This is an automated email from the git hooks/post-receive script.\n[main/build]   | \n[main/build]   | unknown user pushed a commit to branch master\n[main/build]   | in repository trash directory.logging.\n[main/build]   | \n[main/build]   | The following commit(s) were added to refs/heads/master by this push:\n[main/build]   |      new ca07aa8  two\n[main/build]   | ca07aa8 is described below\n[main/build]   | \n[main/build]   | commit ca07aa817ef711cdebb70cad3b646ebd0544734b\n[main/build]   | Author: John Smith <John@example.com>\n[main/build]   | AuthorDate: Sat Mar 3 11:46:40 1973 +0200\n[main/build]   | \n[main/build]   |     two\n[main/build]   | ---\n[main/build]   |  file | 2 +-\n[main/build]   |  1 file changed, 1 insertion(+), 1 deletion(-)\n[main/build]   | \n[main/build]   | diff --git a/file b/file\n[main/build]   | index 5626abf..f719efd 100644\n[main/build]   | --- a/file\n[main/build]   | +++ b/file\n[main/build]   | @@ -1 +1 @@\n[main/build]   | -one\n[main/build]   | +two\n[main/build]   | \n[main/build]   | -- \n[main/build]   | To stop receiving notification emails like this one, please contact\n[main/build]   | the administrator of this repository.\n[main/build]   | ===========================================================================\n[main/build]   | run_as_update_hook: refname=refs/heads/master, oldrev=HEAD^, newrev=HEAD, force_send=False\n[main/build]   | ok 6 - verbose output\n[main/build]   | \n[main/build]   | # passed all 6 test(s)\n[main/build]   | 1..6\n[main/build]   | *** test-cli.t ***\n[main/build]   | expecting success: \n[main/build]   | \t$MULTIMAIL --help >actual &&\n[main/build]   | \tgrep -e ^Usage: -e ^[Oo]ptions: actual\n[main/build]   | \n[main/build]   | Usage: git_multimail.py [OPTIONS]\n[main/build]   | Options:\n[main/build]   | ok 1 - --help\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t$MULTIMAIL --version >actual &&\n[main/build]   | \t$MULTIMAIL -v >actual-short &&\n[main/build]   | \ttest_cmp actual actual-short &&\n[main/build]   | \tgrep \"^git-multimail version\" actual\n[main/build]   | \n[main/build]   | git-multimail version 1.7.dev (1.5.0-27-g0a56f8a)\n[main/build]   | ok 2 - -v, --version\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \tgit init test-repo-cli.git &&\n[main/build]   | \tcd test-repo-cli.git &&\n[main/build]   | \tGIT_AUTHOR_DATE=\"100000000 +0200\" &&\n[main/build]   | \tGIT_COMMITTER_DATE=\"100000010 +0200\" &&\n[main/build]   | \tGIT_AUTHOR_NAME=\"Auth Or\" &&\n[main/build]   | \tGIT_AUTHOR_EMAIL=\"Auth.Or@example.com\" &&\n[main/build]   | \tGIT_COMMITTER_NAME=\"Comm Itter\" &&\n[main/build]   | \tGIT_COMMITTER_EMAIL=\"Comm.Itter@example.com\" &&\n[main/build]   | \texport GIT_AUTHOR_DATE GIT_COMMITTER_DATE GIT_AUTHOR_NAME \\\n[main/build]   | \t    GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL &&\n[main/build]   | \techo one   >file && git add . && git commit -m one &&\n[main/build]   | \techo two   >file && git commit -am two &&\n[main/build]   | \techo three >file && git commit -am three &&\n[main/build]   | \tgit checkout -b branch HEAD^ &&\n[main/build]   | \techo 3 >file && git commit -am 3 &&\n[main/build]   | \techo 4 >file && git commit -am 4 &&\n[main/build]   | \t! git merge master &&\n[main/build]   | \techo merge >file && git commit -am merge &&\n[main/build]   | \tgit log --oneline --decorate --graph\n[main/build]   | \n[main/build]   | hint: Using 'master' as the name for the initial branch. This default branch name\n[main/build]   | hint: is subject to change. To configure the initial branch name to use in all\n[main/build]   | hint: of your new repositories, which will suppress this warning, call:\n[main/build]   | hint: \n[main/build]   | hint: \tgit config --global init.defaultBranch <name>\n[main/build]   | hint: \n[main/build]   | hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\n[main/build]   | hint: 'development'. The just-created branch can be renamed via this command:\n[main/build]   | hint: \n[main/build]   | hint: \tgit branch -m <name>\n[main/build]   | Initialized empty Git repository in /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/trash directory.test-cli/test-repo-cli.git/.git/\n[main/build]   | [master (root-commit) 1f637ff] one\n[main/build]   |  Author: Auth Or <Auth.Or@example.com>\n[main/build]   |  1 file changed, 1 insertion(+)\n[main/build]   |  create mode 100644 file\n[main/build]   | [master 2d1d4d5] two\n[main/build]   |  Author: Auth Or <Auth.Or@example.com>\n[main/build]   |  1 file changed, 1 insertion(+), 1 deletion(-)\n[main/build]   | [master 286d6ea] three\n[main/build]   |  Author: Auth Or <Auth.Or@example.com>\n[main/build]   |  1 file changed, 1 insertion(+), 1 deletion(-)\n[main/build]   | Switched to a new branch 'branch'\n[main/build]   | [branch fc31b0f] 3\n[main/build]   |  Author: Auth Or <Auth.Or@example.com>\n[main/build]   |  1 file changed, 1 insertion(+), 1 deletion(-)\n[main/build]   | [branch 7289a60] 4\n[main/build]   |  Author: Auth Or <Auth.Or@example.com>\n[main/build]   |  1 file changed, 1 insertion(+), 1 deletion(-)\n[main/build]   | Auto-merging file\n[main/build]   | CONFLICT (content): Merge conflict in file\n[main/build]   | Automatic merge failed; fix conflicts and then commit the result.\n[main/build]   | [branch 39fbacf] merge\n[main/build]   |  Author: Auth Or <Auth.Or@example.com>\n[main/build]   | *   39fbacf (HEAD -> branch) merge\n[main/build]   | |\\  \n[main/build]   | | * 286d6ea (master) three\n[main/build]   | * | 7289a60 4\n[main/build]   | * | fc31b0f 3\n[main/build]   | |/  \n[main/build]   | * 2d1d4d5 two\n[main/build]   | * 1f637ff one\n[main/build]   | ok 3 - setup test repo\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \t$MULTIMAIL $options refs/heads/master master^^ master >out &&\n[main/build]   | \tgrep \"add .* three\" out &&\n[main/build]   | \tgrep \"add .* two\" out &&\n[main/build]   | \ttest $(grep -c Subject out) -eq 1 &&\n[main/build]   | \t$MULTIMAIL --force-send $options refs/heads/master master^^ master >out &&\n[main/build]   | \tgrep \"new .* three\" out &&\n[main/build]   | \tgrep \"new .* two\" out &&\n[main/build]   | \ttest $(grep -c Subject out) -eq 3\n[main/build]   | \n[main/build]   | Sending notification emails to: recipient@example.com\n[main/build]   |      add 286d6ea  three\n[main/build]   |      add 2d1d4d5  two\n[main/build]   | Sending notification emails to: recipient@example.com\n[main/build]   |      new 286d6ea  three\n[main/build]   |      new 2d1d4d5  two\n[main/build]   | ok 4 - --force-send does consider everything new\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \ttest_must_fail $MULTIMAIL --stdout refs/heads/master master^^ master 2>err &&\n[main/build]   | \tgrep \"No email recipients configured\" err\n[main/build]   | \n[main/build]   | No email recipients configured!\n[main/build]   | ok 5 - error if no recipient is configured\n[main/build]   | \n[main/build]   | expecting success: \n[main/build]   | \techo some-text | GIT_MULTIMAIL_CHECK_SETUP=true /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t/../git-multimail/git_multimail.py \t\t-c multimailhook.mailingList=list@example.com \t\t-c multimailhook.sendmailCommand=config-sendmail-command \t\t| sed -e 's/\\(    \\(fqdn\\|pusher\\|repo_path\\) : \\).*/\\1.../' \t\t>actual &&\n[main/build]   | \tcat <<-EOF >expected &&\n[main/build]   | \tEnvironment values:\n[main/build]   | \t    administrator : 'the administrator of this repository'\n[main/build]   | \t    charset : 'utf-8'\n[main/build]   | \t    emailprefix : '[test-repo-cli] '\n[main/build]   | \t    fqdn : ...\n[main/build]   | \t    projectdesc : 'UNNAMED PROJECT'\n[main/build]   | \t    pusher : ...\n[main/build]   | \t    repo_path : ...\n[main/build]   | \t    repo_shortname : 'test-repo-cli'\n[main/build]   | \n[main/build]   | \tNow, checking that git-multimail's standard input is properly set ...\n[main/build]   | \tPlease type some text and then press Return\n[main/build]   | \tYou have just entered:\n[main/build]   | \tsome-text\n[main/build]   | \tgit-multimail seems properly set up.\n[main/build]   | \tEOF\n[main/build]   | \ttest_cmp actual expected\n[main/build]   | \n[main/build]   | ok 6 - GIT_MULTIMAIL_CHECK_SETUP\n[main/build]   | \n[main/build]   | # passed all 6 test(s)\n[main/build]   | 1..6\n[main/build]   | *** unit-tests.t ***\n[main/build]   | expecting success: \n[main/build]   |     \"$PYTHON\" \"$SHARNESS_TEST_DIRECTORY\"/test-env\n[main/build]   | \n[main/build]   | ...................................\n[main/build]   | ----------------------------------------------------------------------\n[main/build]   | Ran 35 tests in 9.453s\n[main/build]   | \n[main/build]   | OK\n[main/build]   | ok 1 - test-env\n[main/build]   | \n[main/build]   | # passed all 1 test(s)\n[main/build]   | 1..1\n[main/build]   | make aggregate-results\n[main/build]   | make[2]: Entering directory '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t'\n[main/build]   | for f in test-results/*.counts; do \\\n[main/build]   | \techo \"$f\"; \\\n[main/build]   | done | '/bin/sh' 'aggregate-results.sh'\n[main/build]   | fixed   1\n[main/build]   | success 47\n[main/build]   | failed  0\n[main/build]   | broken  1\n[main/build]   | total   55\n[main/build]   | make[2]: Leaving directory '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t'\n[main/build]   | make clean\n[main/build]   | make[2]: Entering directory '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t'\n[main/build]   | rm -f -r 'trash directory'.* test-results\n[main/build]   | rm -f .prove\n[main/build]   | make[2]: Leaving directory '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t'\n[main/build]   | make[1]: Leaving directory '/tmp/de65f406-fe28-11ed-a890-af2cc187fc11/git-multimail-git-multimail/t'\n[main/build]   \u2705  Success - Main Test\n[main/build] \u2b50 Run Main Check that no untracked files are left by testing\n[main/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[main/build]   | ?? .github/workflows/main-crawler.yml\n[main/build]   \u274c  Failure - Main Check that no untracked files are left by testing\n[main/build] exitcode '1': failure\n[main/build] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'build' failed\n"
}