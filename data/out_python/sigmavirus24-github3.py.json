{
    "repository": "sigmavirus24/github3.py",
    "clone_url": "https://github.com/sigmavirus24/github3.py.git",
    "timestamp": "2023-05-29T14:24:19.213610Z",
    "clone_success": true,
    "number of actions": 4,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Python tests/test] \ud83d\ude80  Start image=crawlergpt:latest\n[Python tests/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Python tests/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python tests/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python tests/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py] user=0 workdir=\n[Python tests/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4.2.0\n[Python tests/test] \ud83e\uddea  Matrix: map[python:map[ALLOW_FAILURE:false TOXENV:py37 VERSION:3.7]]\n[Python tests/test] \u2b50 Run Main Check out the repository\n[Python tests/test]   \u2705  Success - Main Check out the repository\n[Python tests/test] \u2b50 Run Main Setup Python\n[Python tests/test]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4.2.0/ dst=/var/run/act/actions/actions-setup-python@v4.2.0/\n[Python tests/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4.2.0/] user=0 workdir=\n[Python tests/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4.2.0/dist/setup/index.js] user= workdir=\n[Python tests/test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[Python tests/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: \n[Python tests/test]   \ud83d\udcac  ::debug::explicit? false\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Python tests/test]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Python tests/test]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Python tests/test]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Python tests/test]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Python tests/test]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Python tests/test]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Python tests/test]   \ud83d\udcac  ::debug::matched: 3.7.11\n[Python tests/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[Python tests/test]   | \n[Python tests/test]   \u2699  ::set-output:: python-version=3.7.11\n[Python tests/test]   | \n[Python tests/test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[Python tests/test]   | Successfully set up CPython (3.7.11)\n[Python tests/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4.2.0/.github/python.json\n[Python tests/test]   \u2705  Success - Main Setup Python\n[Python tests/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[Python tests/test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[Python tests/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[Python tests/test] \u2b50 Run Main Upgrade pip\n[Python tests/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Python tests/test]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[Python tests/test]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python tests/test]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python tests/test]   | pip 21.2.4 from /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pip (python 3.7)\n[Python tests/test]   \u2705  Success - Main Upgrade pip\n[Python tests/test] \u2b50 Run Main Install Tox\n[Python tests/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Python tests/test]   | Collecting tox\n[Python tests/test]   |   Downloading tox-4.5.2-py3-none-any.whl (148 kB)\n[Python tests/test]   | Collecting importlib-metadata>=6.6\n[Python tests/test]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[Python tests/test]   | Collecting typing-extensions>=4.6.2\n[Python tests/test]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[Python tests/test]   | Collecting virtualenv>=20.23\n[Python tests/test]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[Python tests/test]   | Collecting colorama>=0.4.6\n[Python tests/test]   |   Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n[Python tests/test]   | Collecting pyproject-api>=1.5.1\n[Python tests/test]   |   Downloading pyproject_api-1.5.1-py3-none-any.whl (12 kB)\n[Python tests/test]   | Collecting pluggy>=1\n[Python tests/test]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[Python tests/test]   | Collecting packaging>=23.1\n[Python tests/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[Python tests/test]   | Collecting filelock>=3.12\n[Python tests/test]   |   Downloading filelock-3.12.0-py3-none-any.whl (10 kB)\n[Python tests/test]   | Collecting tomli>=2.0.1\n[Python tests/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[Python tests/test]   | Collecting chardet>=5.1\n[Python tests/test]   |   Downloading chardet-5.1.0-py3-none-any.whl (199 kB)\n[Python tests/test]   | Collecting cachetools>=5.3\n[Python tests/test]   |   Downloading cachetools-5.3.1-py3-none-any.whl (9.3 kB)\n[Python tests/test]   | Collecting platformdirs>=3.5.1\n[Python tests/test]   |   Downloading platformdirs-3.5.1-py3-none-any.whl (15 kB)\n[Python tests/test]   | Collecting zipp>=0.5\n[Python tests/test]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[Python tests/test]   | Collecting distlib<1,>=0.3.6\n[Python tests/test]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[Python tests/test]   | Installing collected packages: zipp, typing-extensions, tomli, platformdirs, packaging, importlib-metadata, filelock, distlib, virtualenv, pyproject-api, pluggy, colorama, chardet, cachetools, tox\n[Python tests/test]   | Successfully installed cachetools-5.3.1 chardet-5.1.0 colorama-0.4.6 distlib-0.3.6 filelock-3.12.0 importlib-metadata-6.6.0 packaging-23.1 platformdirs-3.5.1 pluggy-1.0.0 pyproject-api-1.5.1 tomli-2.0.1 tox-4.5.2 typing-extensions-4.6.2 virtualenv-20.23.0 zipp-3.15.0\n[Python tests/test]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[Python tests/test]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[Python tests/test]   | 4.5.2 from /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/tox/__init__.py\n[Python tests/test]   \u2705  Success - Main Install Tox\n[Python tests/test] \u2b50 Run Main Run Tox\n[Python tests/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[Python tests/test]   | py37: install_deps> python -I -m pip install 'requests>=2.0'\n[Python tests/test]   | .pkg: install_requires> python -I -m pip install 'hatchling>=1.14.1'\n[Python tests/test]   | .pkg: _optional_hooks> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True hatchling.build\n[Python tests/test]   | .pkg: get_requires_for_build_sdist> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True hatchling.build\n[Python tests/test]   | .pkg: freeze> python -m pip freeze --all\n[Python tests/test]   | .pkg: editables==0.3,hatchling==1.17.0,importlib-metadata==6.6.0,packaging==23.1,pathspec==0.11.1,pip==23.1.2,pluggy==1.0.0,setuptools==67.7.2,tomli==2.0.1,trove-classifiers==2023.5.24,typing_extensions==4.6.2,wheel==0.40.0,zipp==3.15.0\n[Python tests/test]   | .pkg: build_sdist> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True hatchling.build\n[Python tests/test]   | py37: install_package_deps> python -I -m pip install 'PyJWT[crypto]>=2.3.0' 'betamax>=0.5.1' 'betamax_matchers>=0.3.0' 'pytest-xdist[psutil]' 'pytest>=7.0' 'python-dateutil>=2.6.0' 'requests>=2.18' 'uritemplate>=3.0.0'\n[Python tests/test]   | py37: install_package> python -I -m pip install --force-reinstall --no-deps /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py/.tox/.tmp/package/1/github3.py-4.0.1.tar.gz\n[Python tests/test]   | py37: freeze> python -m pip freeze --all\n[Python tests/test]   | py37: betamax==0.8.1,betamax-matchers==0.4.0,certifi==2023.5.7,cffi==1.15.1,charset-normalizer==3.1.0,cryptography==40.0.2,exceptiongroup==1.1.1,execnet==1.9.0,github3.py @ file:///tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py/.tox/.tmp/package/1/github3.py-4.0.1.tar.gz#sha256=18b6219fe17426329d5d0cce9a0a2260d943f97fb859fdbf7c18d11fab8017b5,idna==3.4,importlib-metadata==6.6.0,iniconfig==2.0.0,packaging==23.1,pip==23.1.2,pluggy==1.0.0,psutil==5.9.5,pycparser==2.21,PyJWT==2.7.0,pytest==7.3.1,pytest-xdist==3.3.1,python-dateutil==2.8.2,requests==2.31.0,requests-toolbelt==1.0.0,setuptools==67.7.2,six==1.16.0,tomli==2.0.1,typing_extensions==4.6.2,uritemplate==4.1.1,urllib3==2.0.2,wheel==0.40.0,zipp==3.15.0\n[Python tests/test]   | py37: commands[0]> pytest\n[Python tests/test]   | bringing up nodes...\n[Python tests/test]   | bringing up nodes...\n[Python tests/test]   | \n[Python tests/test]   | ....................................................s..................... [  5%]\n[Python tests/test]   | ........................................................................ [ 10%]\n[Python tests/test]   | ........................................................................ [ 16%]\n[Python tests/test]   | .......................................................................... [ 22%]\n[Python tests/test]   | ......................x................................................. [ 28%]\n[Python tests/test]   | ........................................................................ [ 34%]\n[Python tests/test]   | ........................................................................ [ 40%]\n[Python tests/test]   | ........F............................................................... [ 46%]\n[Python tests/test]   | ........................................................................ [ 51%]\n[Python tests/test]   | ........................F............................................... [ 57%]\n[Python tests/test]   | ........................................................................ [ 63%]\n[Python tests/test]   | ........................................................................ [ 69%]\n[Python tests/test]   | ......................................................................... [ 74%]\n[Python tests/test]   | ...................................F.................................... [ 80%]\n[Python tests/test]   | .....................................................x................... [ 86%]\n[Python tests/test]   | ........................................................................ [ 92%]\n[Python tests/test]   | ........................................................................ [ 98%]\n[Python tests/test]   | ..............F........                                                  [100%]\n[Python tests/test]   | =================================== FAILURES ===================================\n[Python tests/test]   | ___________________________ TestRepoCommit.test_diff ___________________________\n[Python tests/test]   | [gw25] linux -- Python 3.7.11 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py/.tox/py37/bin/python\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f239096d0>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   | >               yield\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:705: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f239096d0>, amt = 10240\n[Python tests/test]   | \n[Python tests/test]   |     def _raw_read(\n[Python tests/test]   |         self,\n[Python tests/test]   |         amt: int | None = None,\n[Python tests/test]   |     ) -> bytes:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Reads `amt` of bytes from the socket.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         if self._fp is None:\n[Python tests/test]   |             return None  # type: ignore[return-value]\n[Python tests/test]   |     \n[Python tests/test]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[Python tests/test]   |     \n[Python tests/test]   |         with self._error_catcher():\n[Python tests/test]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[Python tests/test]   |             if amt is not None and amt != 0 and not data:\n[Python tests/test]   |                 # Platform-specific: Buggy versions of Python.\n[Python tests/test]   |                 # Close the connection when no data is returned\n[Python tests/test]   |                 #\n[Python tests/test]   |                 # This is redundant to what httplib/http.client _should_\n[Python tests/test]   |                 # already do.  However, versions of python released before\n[Python tests/test]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[Python tests/test]   |                 # not properly close the connection in all cases. There is\n[Python tests/test]   |                 # no harm in redundantly calling close.\n[Python tests/test]   |                 self._fp.close()\n[Python tests/test]   |                 if (\n[Python tests/test]   |                     self.enforce_content_length\n[Python tests/test]   |                     and self.length_remaining is not None\n[Python tests/test]   |                     and self.length_remaining != 0\n[Python tests/test]   |                 ):\n[Python tests/test]   |                     # This is an edge case that httplib failed to cover due\n[Python tests/test]   |                     # to concerns of backward compatibility. We're\n[Python tests/test]   |                     # addressing it here to make sure IncompleteRead is\n[Python tests/test]   |                     # raised during streaming, so all calls with incorrect\n[Python tests/test]   |                     # Content-Length are caught.\n[Python tests/test]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(25640 bytes read, -48 more expected)\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: IncompleteRead\n[Python tests/test]   | \n[Python tests/test]   | The above exception was the direct cause of the following exception:\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f239096d0>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(25640 bytes read, -48 more expected)', IncompleteRead(25640 bytes read, -48 more expected))\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:722: ProtocolError\n[Python tests/test]   | \n[Python tests/test]   | During handling of the above exception, another exception occurred:\n[Python tests/test]   | \n[Python tests/test]   | self = <tests.integration.test_repos_repo.TestRepoCommit testMethod=test_diff>\n[Python tests/test]   | \n[Python tests/test]   |     def test_diff(self):\n[Python tests/test]   |         \"\"\"Test the ability to retrieve a diff for a commit.\"\"\"\n[Python tests/test]   |         cassette_name = self.cassette_name(\"diff\")\n[Python tests/test]   |         with self.recorder.use_cassette(cassette_name):\n[Python tests/test]   |             repository = self.gh.repository(\"sigmavirus24\", \"github3.py\")\n[Python tests/test]   |             commit = repository.commit(\n[Python tests/test]   |                 \"51cfbf8cbf98b0ba5006b3490f553bc05d4461e4\"\n[Python tests/test]   |             )\n[Python tests/test]   | >           diff = commit.diff()\n[Python tests/test]   | \n[Python tests/test]   | tests/integration/test_repos_repo.py:1591: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/repos/commit.py:91: in diff\n[Python tests/test]   |     self._api, headers={\"Accept\": \"application/vnd.github.diff\"}\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:216: in _get\n[Python tests/test]   |     return self._request(\"get\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:201: in _request\n[Python tests/test]   |     return request_method(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:602: in get\n[Python tests/test]   |     return self.request(\"GET\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/session.py:171: in request\n[Python tests/test]   |     response = super().request(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[Python tests/test]   |     resp = self.send(prep, **send_kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[Python tests/test]   |     r.content\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:899: in content\n[Python tests/test]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:816: in generate\n[Python tests/test]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:935: in stream\n[Python tests/test]   |     data = self.read(amt=amt, decode_content=decode_content)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:906: in read\n[Python tests/test]   |     data = self._raw_read(amt)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: in _raw_read\n[Python tests/test]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[Python tests/test]   |     self.gen.throw(type, value, traceback)\n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f239096d0>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   |     \n[Python tests/test]   |             # If no exception is thrown, we should avoid cleaning up\n[Python tests/test]   |             # unnecessarily.\n[Python tests/test]   |             clean_exit = True\n[Python tests/test]   |         finally:\n[Python tests/test]   |             # If we didn't terminate cleanly, we need to throw away our\n[Python tests/test]   |             # connection.\n[Python tests/test]   |             if not clean_exit:\n[Python tests/test]   |                 # The response may not be closed but we're not going to use it\n[Python tests/test]   |                 # anymore so close it now to ensure that the connection is\n[Python tests/test]   |                 # released back to the pool.\n[Python tests/test]   |                 if self._original_response:\n[Python tests/test]   | >                   self._original_response.close()\n[Python tests/test]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:735: AttributeError\n[Python tests/test]   | __________________________ TestRepoCommit.test_patch ___________________________\n[Python tests/test]   | [gw25] linux -- Python 3.7.11 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py/.tox/py37/bin/python\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f238fe550>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   | >               yield\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:705: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f238fe550>, amt = 10240\n[Python tests/test]   | \n[Python tests/test]   |     def _raw_read(\n[Python tests/test]   |         self,\n[Python tests/test]   |         amt: int | None = None,\n[Python tests/test]   |     ) -> bytes:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Reads `amt` of bytes from the socket.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         if self._fp is None:\n[Python tests/test]   |             return None  # type: ignore[return-value]\n[Python tests/test]   |     \n[Python tests/test]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[Python tests/test]   |     \n[Python tests/test]   |         with self._error_catcher():\n[Python tests/test]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[Python tests/test]   |             if amt is not None and amt != 0 and not data:\n[Python tests/test]   |                 # Platform-specific: Buggy versions of Python.\n[Python tests/test]   |                 # Close the connection when no data is returned\n[Python tests/test]   |                 #\n[Python tests/test]   |                 # This is redundant to what httplib/http.client _should_\n[Python tests/test]   |                 # already do.  However, versions of python released before\n[Python tests/test]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[Python tests/test]   |                 # not properly close the connection in all cases. There is\n[Python tests/test]   |                 # no harm in redundantly calling close.\n[Python tests/test]   |                 self._fp.close()\n[Python tests/test]   |                 if (\n[Python tests/test]   |                     self.enforce_content_length\n[Python tests/test]   |                     and self.length_remaining is not None\n[Python tests/test]   |                     and self.length_remaining != 0\n[Python tests/test]   |                 ):\n[Python tests/test]   |                     # This is an edge case that httplib failed to cover due\n[Python tests/test]   |                     # to concerns of backward compatibility. We're\n[Python tests/test]   |                     # addressing it here to make sure IncompleteRead is\n[Python tests/test]   |                     # raised during streaming, so all calls with incorrect\n[Python tests/test]   |                     # Content-Length are caught.\n[Python tests/test]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(26668 bytes read, -48 more expected)\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: IncompleteRead\n[Python tests/test]   | \n[Python tests/test]   | The above exception was the direct cause of the following exception:\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f238fe550>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(26668 bytes read, -48 more expected)', IncompleteRead(26668 bytes read, -48 more expected))\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:722: ProtocolError\n[Python tests/test]   | \n[Python tests/test]   | During handling of the above exception, another exception occurred:\n[Python tests/test]   | \n[Python tests/test]   | self = <tests.integration.test_repos_repo.TestRepoCommit testMethod=test_patch>\n[Python tests/test]   | \n[Python tests/test]   |     def test_patch(self):\n[Python tests/test]   |         \"\"\"Test the ability to retrieve a patch for a commit.\"\"\"\n[Python tests/test]   |         cassette_name = self.cassette_name(\"patch\")\n[Python tests/test]   |         with self.recorder.use_cassette(cassette_name):\n[Python tests/test]   |             repository = self.gh.repository(\"sigmavirus24\", \"github3.py\")\n[Python tests/test]   |             commit = repository.commit(\n[Python tests/test]   |                 \"51cfbf8cbf98b0ba5006b3490f553bc05d4461e4\"\n[Python tests/test]   |             )\n[Python tests/test]   | >           patch = commit.patch()\n[Python tests/test]   | \n[Python tests/test]   | tests/integration/test_repos_repo.py:1603: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/repos/commit.py:104: in patch\n[Python tests/test]   |     self._api, headers={\"Accept\": \"application/vnd.github.patch\"}\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:216: in _get\n[Python tests/test]   |     return self._request(\"get\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:201: in _request\n[Python tests/test]   |     return request_method(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:602: in get\n[Python tests/test]   |     return self.request(\"GET\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/session.py:171: in request\n[Python tests/test]   |     response = super().request(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[Python tests/test]   |     resp = self.send(prep, **send_kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[Python tests/test]   |     r.content\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:899: in content\n[Python tests/test]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:816: in generate\n[Python tests/test]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:935: in stream\n[Python tests/test]   |     data = self.read(amt=amt, decode_content=decode_content)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:906: in read\n[Python tests/test]   |     data = self._raw_read(amt)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: in _raw_read\n[Python tests/test]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[Python tests/test]   |     self.gen.throw(type, value, traceback)\n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f238fe550>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   |     \n[Python tests/test]   |             # If no exception is thrown, we should avoid cleaning up\n[Python tests/test]   |             # unnecessarily.\n[Python tests/test]   |             clean_exit = True\n[Python tests/test]   |         finally:\n[Python tests/test]   |             # If we didn't terminate cleanly, we need to throw away our\n[Python tests/test]   |             # connection.\n[Python tests/test]   |             if not clean_exit:\n[Python tests/test]   |                 # The response may not be closed but we're not going to use it\n[Python tests/test]   |                 # anymore so close it now to ensure that the connection is\n[Python tests/test]   |                 # released back to the pool.\n[Python tests/test]   |                 if self._original_response:\n[Python tests/test]   | >                   self._original_response.close()\n[Python tests/test]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:735: AttributeError\n[Python tests/test]   | __________________________ TestComparison.test_patch ___________________________\n[Python tests/test]   | [gw31] linux -- Python 3.7.11 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py/.tox/py37/bin/python\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7fe213fd0e10>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   | >               yield\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:705: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7fe213fd0e10>, amt = 10240\n[Python tests/test]   | \n[Python tests/test]   |     def _raw_read(\n[Python tests/test]   |         self,\n[Python tests/test]   |         amt: int | None = None,\n[Python tests/test]   |     ) -> bytes:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Reads `amt` of bytes from the socket.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         if self._fp is None:\n[Python tests/test]   |             return None  # type: ignore[return-value]\n[Python tests/test]   |     \n[Python tests/test]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[Python tests/test]   |     \n[Python tests/test]   |         with self._error_catcher():\n[Python tests/test]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[Python tests/test]   |             if amt is not None and amt != 0 and not data:\n[Python tests/test]   |                 # Platform-specific: Buggy versions of Python.\n[Python tests/test]   |                 # Close the connection when no data is returned\n[Python tests/test]   |                 #\n[Python tests/test]   |                 # This is redundant to what httplib/http.client _should_\n[Python tests/test]   |                 # already do.  However, versions of python released before\n[Python tests/test]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[Python tests/test]   |                 # not properly close the connection in all cases. There is\n[Python tests/test]   |                 # no harm in redundantly calling close.\n[Python tests/test]   |                 self._fp.close()\n[Python tests/test]   |                 if (\n[Python tests/test]   |                     self.enforce_content_length\n[Python tests/test]   |                     and self.length_remaining is not None\n[Python tests/test]   |                     and self.length_remaining != 0\n[Python tests/test]   |                 ):\n[Python tests/test]   |                     # This is an edge case that httplib failed to cover due\n[Python tests/test]   |                     # to concerns of backward compatibility. We're\n[Python tests/test]   |                     # addressing it here to make sure IncompleteRead is\n[Python tests/test]   |                     # raised during streaming, so all calls with incorrect\n[Python tests/test]   |                     # Content-Length are caught.\n[Python tests/test]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(39803372 bytes read, -10248 more expected)\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: IncompleteRead\n[Python tests/test]   | \n[Python tests/test]   | The above exception was the direct cause of the following exception:\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7fe213fd0e10>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(39803372 bytes read, -10248 more expected)', IncompleteRead(39803372 bytes read, -10248 more expected))\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:722: ProtocolError\n[Python tests/test]   | \n[Python tests/test]   | During handling of the above exception, another exception occurred:\n[Python tests/test]   | \n[Python tests/test]   | self = <tests.integration.test_repos_repo.TestComparison testMethod=test_patch>\n[Python tests/test]   | \n[Python tests/test]   |     def test_patch(self):\n[Python tests/test]   |         \"\"\"Test the ability to retrieve a diff for a comparison.\"\"\"\n[Python tests/test]   |         cassette_name = self.cassette_name(\"patch\")\n[Python tests/test]   |         with self.recorder.use_cassette(cassette_name):\n[Python tests/test]   |             repository = self.gh.repository(\"sigmavirus24\", \"github3.py\")\n[Python tests/test]   |             comparison = repository.compare_commits(\n[Python tests/test]   |                 base=\"master\", head=\"develop\"\n[Python tests/test]   |             )\n[Python tests/test]   | >           patch = comparison.patch()\n[Python tests/test]   | \n[Python tests/test]   | tests/integration/test_repos_repo.py:1632: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/repos/comparison.py:110: in patch\n[Python tests/test]   |     self._api, headers={\"Accept\": \"application/vnd.github.patch\"}\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:216: in _get\n[Python tests/test]   |     return self._request(\"get\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:201: in _request\n[Python tests/test]   |     return request_method(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:602: in get\n[Python tests/test]   |     return self.request(\"GET\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/session.py:171: in request\n[Python tests/test]   |     response = super().request(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[Python tests/test]   |     resp = self.send(prep, **send_kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[Python tests/test]   |     r.content\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:899: in content\n[Python tests/test]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:816: in generate\n[Python tests/test]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:935: in stream\n[Python tests/test]   |     data = self.read(amt=amt, decode_content=decode_content)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:906: in read\n[Python tests/test]   |     data = self._raw_read(amt)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: in _raw_read\n[Python tests/test]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[Python tests/test]   |     self.gen.throw(type, value, traceback)\n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7fe213fd0e10>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   |     \n[Python tests/test]   |             # If no exception is thrown, we should avoid cleaning up\n[Python tests/test]   |             # unnecessarily.\n[Python tests/test]   |             clean_exit = True\n[Python tests/test]   |         finally:\n[Python tests/test]   |             # If we didn't terminate cleanly, we need to throw away our\n[Python tests/test]   |             # connection.\n[Python tests/test]   |             if not clean_exit:\n[Python tests/test]   |                 # The response may not be closed but we're not going to use it\n[Python tests/test]   |                 # anymore so close it now to ensure that the connection is\n[Python tests/test]   |                 # released back to the pool.\n[Python tests/test]   |                 if self._original_response:\n[Python tests/test]   | >                   self._original_response.close()\n[Python tests/test]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:735: AttributeError\n[Python tests/test]   | ___________________________ TestComparison.test_diff ___________________________\n[Python tests/test]   | [gw25] linux -- Python 3.7.11 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py/.tox/py37/bin/python\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f22f7c210>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   | >               yield\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:705: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f22f7c210>, amt = 10240\n[Python tests/test]   | \n[Python tests/test]   |     def _raw_read(\n[Python tests/test]   |         self,\n[Python tests/test]   |         amt: int | None = None,\n[Python tests/test]   |     ) -> bytes:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Reads `amt` of bytes from the socket.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         if self._fp is None:\n[Python tests/test]   |             return None  # type: ignore[return-value]\n[Python tests/test]   |     \n[Python tests/test]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[Python tests/test]   |     \n[Python tests/test]   |         with self._error_catcher():\n[Python tests/test]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[Python tests/test]   |             if amt is not None and amt != 0 and not data:\n[Python tests/test]   |                 # Platform-specific: Buggy versions of Python.\n[Python tests/test]   |                 # Close the connection when no data is returned\n[Python tests/test]   |                 #\n[Python tests/test]   |                 # This is redundant to what httplib/http.client _should_\n[Python tests/test]   |                 # already do.  However, versions of python released before\n[Python tests/test]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[Python tests/test]   |                 # not properly close the connection in all cases. There is\n[Python tests/test]   |                 # no harm in redundantly calling close.\n[Python tests/test]   |                 self._fp.close()\n[Python tests/test]   |                 if (\n[Python tests/test]   |                     self.enforce_content_length\n[Python tests/test]   |                     and self.length_remaining is not None\n[Python tests/test]   |                     and self.length_remaining != 0\n[Python tests/test]   |                 ):\n[Python tests/test]   |                     # This is an edge case that httplib failed to cover due\n[Python tests/test]   |                     # to concerns of backward compatibility. We're\n[Python tests/test]   |                     # addressing it here to make sure IncompleteRead is\n[Python tests/test]   |                     # raised during streaming, so all calls with incorrect\n[Python tests/test]   |                     # Content-Length are caught.\n[Python tests/test]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(24841106 bytes read, -6696 more expected)\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: IncompleteRead\n[Python tests/test]   | \n[Python tests/test]   | The above exception was the direct cause of the following exception:\n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f22f7c210>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(24841106 bytes read, -6696 more expected)', IncompleteRead(24841106 bytes read, -6696 more expected))\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:722: ProtocolError\n[Python tests/test]   | \n[Python tests/test]   | During handling of the above exception, another exception occurred:\n[Python tests/test]   | \n[Python tests/test]   | self = <tests.integration.test_repos_repo.TestComparison testMethod=test_diff>\n[Python tests/test]   | \n[Python tests/test]   |     def test_diff(self):\n[Python tests/test]   |         \"\"\"Test the ability to retrieve a diff for a comparison.\"\"\"\n[Python tests/test]   |         cassette_name = self.cassette_name(\"diff\")\n[Python tests/test]   |         with self.recorder.use_cassette(cassette_name):\n[Python tests/test]   |             repository = self.gh.repository(\"sigmavirus24\", \"github3.py\")\n[Python tests/test]   |             comparison = repository.compare_commits(\n[Python tests/test]   |                 base=\"master\", head=\"develop\"\n[Python tests/test]   |             )\n[Python tests/test]   | >           diff = comparison.diff()\n[Python tests/test]   | \n[Python tests/test]   | tests/integration/test_repos_repo.py:1620: \n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/repos/comparison.py:97: in diff\n[Python tests/test]   |     self._api, headers={\"Accept\": \"application/vnd.github.diff\"}\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:216: in _get\n[Python tests/test]   |     return self._request(\"get\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/models.py:201: in _request\n[Python tests/test]   |     return request_method(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:602: in get\n[Python tests/test]   |     return self.request(\"GET\", url, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/github3/session.py:171: in request\n[Python tests/test]   |     response = super().request(*args, **kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[Python tests/test]   |     resp = self.send(prep, **send_kwargs)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[Python tests/test]   |     r.content\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:899: in content\n[Python tests/test]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/requests/models.py:816: in generate\n[Python tests/test]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:935: in stream\n[Python tests/test]   |     data = self.read(amt=amt, decode_content=decode_content)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:906: in read\n[Python tests/test]   |     data = self._raw_read(amt)\n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:830: in _raw_read\n[Python tests/test]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[Python tests/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[Python tests/test]   |     self.gen.throw(type, value, traceback)\n[Python tests/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/test]   | \n[Python tests/test]   | self = <urllib3.response.HTTPResponse object at 0x7f3f22f7c210>\n[Python tests/test]   | \n[Python tests/test]   |     @contextmanager\n[Python tests/test]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         Catch low-level python exceptions, instead re-raising urllib3\n[Python tests/test]   |         variants, so that low-level exceptions are not leaked in the\n[Python tests/test]   |         high-level api.\n[Python tests/test]   |     \n[Python tests/test]   |         On exit, release the connection back to the pool.\n[Python tests/test]   |         \"\"\"\n[Python tests/test]   |         clean_exit = False\n[Python tests/test]   |     \n[Python tests/test]   |         try:\n[Python tests/test]   |             try:\n[Python tests/test]   |                 yield\n[Python tests/test]   |     \n[Python tests/test]   |             except SocketTimeout as e:\n[Python tests/test]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[Python tests/test]   |                 # there is yet no clean way to get at it from this context.\n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except BaseSSLError as e:\n[Python tests/test]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[Python tests/test]   |                 if \"read operation timed out\" not in str(e):\n[Python tests/test]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[Python tests/test]   |                     raise SSLError(e) from e\n[Python tests/test]   |     \n[Python tests/test]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[Python tests/test]   |     \n[Python tests/test]   |             except (HTTPException, OSError) as e:\n[Python tests/test]   |                 # This includes IncompleteRead.\n[Python tests/test]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[Python tests/test]   |     \n[Python tests/test]   |             # If no exception is thrown, we should avoid cleaning up\n[Python tests/test]   |             # unnecessarily.\n[Python tests/test]   |             clean_exit = True\n[Python tests/test]   |         finally:\n[Python tests/test]   |             # If we didn't terminate cleanly, we need to throw away our\n[Python tests/test]   |             # connection.\n[Python tests/test]   |             if not clean_exit:\n[Python tests/test]   |                 # The response may not be closed but we're not going to use it\n[Python tests/test]   |                 # anymore so close it now to ensure that the connection is\n[Python tests/test]   |                 # released back to the pool.\n[Python tests/test]   |                 if self._original_response:\n[Python tests/test]   | >                   self._original_response.close()\n[Python tests/test]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[Python tests/test]   | \n[Python tests/test]   | .tox/py37/lib/python3.7/site-packages/urllib3/response.py:735: AttributeError\n[Python tests/test]   | =========================== short test summary info ============================\n[Python tests/test]   | FAILED tests/integration/test_repos_repo.py::TestRepoCommit::test_diff - Attr...\n[Python tests/test]   | FAILED tests/integration/test_repos_repo.py::TestRepoCommit::test_patch - Att...\n[Python tests/test]   | FAILED tests/integration/test_repos_repo.py::TestComparison::test_patch - Att...\n[Python tests/test]   | FAILED tests/integration/test_repos_repo.py::TestComparison::test_diff - Attr...\n[Python tests/test]   | 4 failed, 1246 passed, 1 skipped, 2 xfailed in 10.00s\n[Python tests/test]   | py37: exit 1 (11.25 seconds) /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/sigmavirus24-github3.py> pytest pid=167\n[Python tests/test]   | .pkg: _exit> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True hatchling.build\n[Python tests/test]   |   py37: FAIL code 1 (54.07=setup[42.83]+cmd[11.25] seconds)\n[Python tests/test]   |   evaluation failed :( (54.25 seconds)\n[Python tests/test]   \u274c  Failure - Main Run Tox\n[Python tests/test] exitcode '1': failure\n[Python tests/test] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'test' failed\n"
}