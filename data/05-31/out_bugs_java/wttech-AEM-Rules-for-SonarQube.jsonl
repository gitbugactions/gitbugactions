{"repository": "wttech/AEM-Rules-for-SonarQube", "clone_url": "https://github.com/wttech/AEM-Rules-for-SonarQube.git", "timestamp": "2023-05-30T19:21:33.029314Z", "commit_hash": "82f4782b03e1128d302ac312503c7beaeba454fc", "commit_message": "Merge pull request #168 from Cognifide/bug-duplicated-htl-11\n\nhtl-11 - bugfix - fix duplicated violations", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java\nindex 37c1ed3..b4847f2 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java\n@@ -59,7 +59,7 @@ public class AvoidExtraSlyTagsCheck extends AbstractHtlCheck {\n         Optional.ofNullable(node.getParent())\n                 .ifPresent(tagNode ->\n                 {\n-                    if (tagNode.getNodeName().equalsIgnoreCase(SLY_TAG)) {\n+                    if (tagNode.getNodeName().equalsIgnoreCase(SLY_TAG) && tagNode.getChildren().size() <= 1) {\n                         tagNode.getAttributes().stream()\n                                 .map(Attribute::getName)\n                                 .filter(SLY_ATTRIBUTES::contains)\n", "test_patch": "diff --git a/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html b/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html\nindex 2f46b0e..e051b0e 100644\n--- a/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html\n+++ b/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html\n@@ -33,10 +33,16 @@\n     </div>\n </sly>\n \n-\n <div class=\"myComponent\"\n      data-sly-test=\"${model.visible}\"\n      data-sly-use=\"com.example.HeroModel\">\n     <h1>${model.headline}</h1>\n     <p>${model.text}</p>\n </div>\n+\n+<sly data-sly-test=\"${model.isVisible}\">\n+    <p>Caption 1</p>\n+    <p>Caption 2</p>\n+    <p>Caption 3</p>\n+    <p>Caption 4</p>\n+</sly>\n"}
{"repository": "wttech/AEM-Rules-for-SonarQube", "clone_url": "https://github.com/wttech/AEM-Rules-for-SonarQube.git", "timestamp": "2023-05-30T19:26:28.659237Z", "commit_hash": "ddcb75a638a05e357cbdab1bdd062322a45f7cef", "commit_message": "htl-10 - bugfix - fix duplicated violations\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java\nindex 37c1ed3..b4847f2 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/AvoidExtraSlyTagsCheck.java\n@@ -59,7 +59,7 @@ public class AvoidExtraSlyTagsCheck extends AbstractHtlCheck {\n         Optional.ofNullable(node.getParent())\n                 .ifPresent(tagNode ->\n                 {\n-                    if (tagNode.getNodeName().equalsIgnoreCase(SLY_TAG)) {\n+                    if (tagNode.getNodeName().equalsIgnoreCase(SLY_TAG) && tagNode.getChildren().size() <= 1) {\n                         tagNode.getAttributes().stream()\n                                 .map(Attribute::getName)\n                                 .filter(SLY_ATTRIBUTES::contains)\n", "test_patch": "diff --git a/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html b/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html\nindex 2f46b0e..e051b0e 100644\n--- a/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html\n+++ b/src/test/files/checks/htl/AvoidExtraSlyTagsCheck.html\n@@ -33,10 +33,16 @@\n     </div>\n </sly>\n \n-\n <div class=\"myComponent\"\n      data-sly-test=\"${model.visible}\"\n      data-sly-use=\"com.example.HeroModel\">\n     <h1>${model.headline}</h1>\n     <p>${model.text}</p>\n </div>\n+\n+<sly data-sly-test=\"${model.isVisible}\">\n+    <p>Caption 1</p>\n+    <p>Caption 2</p>\n+    <p>Caption 3</p>\n+    <p>Caption 4</p>\n+</sly>\n"}
{"repository": "wttech/AEM-Rules-for-SonarQube", "clone_url": "https://github.com/wttech/AEM-Rules-for-SonarQube.git", "timestamp": "2023-05-30T19:31:41.531454Z", "commit_hash": "970b7f027a68abf58497f1d083735a4571d6502f", "commit_message": "Merge pull request #166 from Cognifide/issue-109_2\n\nIssue-109 Use HTL comments FIX for multiline comments and exceptions.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/cognifide/aemrules/htl/checks/DisplayContextInConditionalCommentsCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/DisplayContextInConditionalCommentsCheck.java\nindex e0b131d..a21dbc7 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/DisplayContextInConditionalCommentsCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/DisplayContextInConditionalCommentsCheck.java\n@@ -22,13 +22,13 @@ package com.cognifide.aemrules.htl.checks;\n import com.cognifide.aemrules.metadata.Metadata;\n import com.cognifide.aemrules.tag.Tags;\n import com.cognifide.aemrules.version.AemVersion;\n+import java.util.regex.Pattern;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.sling.scripting.sightly.impl.compiler.Syntax;\n import org.sonar.check.Priority;\n import org.sonar.check.Rule;\n import org.sonar.plugins.html.node.CommentNode;\n \n-import java.util.regex.Pattern;\n-\n @Rule(\n         key = DisplayContextInConditionalCommentsCheck.RULE_KEY,\n         name = DisplayContextInConditionalCommentsCheck.RULE_MESSAGE,\n@@ -51,7 +51,7 @@ public class DisplayContextInConditionalCommentsCheck extends AbstractHtlCheck {\n \n     @Override\n     public void comment(CommentNode node) {\n-        String code = node.getCode();\n+        String code = StringUtils.deleteWhitespace(node.getCode());\n         if(isConditionalComment(code)){\n             getExpressions(code).stream()\n                     .filter(expression -> !expression.containsOption(Syntax.CONTEXT_OPTION))\ndiff --git a/src/main/java/com/cognifide/aemrules/htl/checks/HtlCommentsCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/HtlCommentsCheck.java\nindex 968c12f..0088a33 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/HtlCommentsCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/HtlCommentsCheck.java\n@@ -22,7 +22,13 @@ package com.cognifide.aemrules.htl.checks;\n import com.cognifide.aemrules.metadata.Metadata;\n import com.cognifide.aemrules.tag.Tags;\n import com.cognifide.aemrules.version.AemVersion;\n+import com.google.common.collect.Lists;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.sling.scripting.sightly.impl.compiler.Syntax;\n import org.sonar.check.Priority;\n import org.sonar.check.Rule;\n@@ -46,18 +52,45 @@ public class HtlCommentsCheck extends AbstractHtlCheck {\n \n   static final String RULE_MESSAGE = \"Always use HTL style of comments\";\n \n+  private static final List<String> SSI_ELEMENTS = Lists\n+      .newArrayList(\"comment\", \"config\", \"echo\", \"exec\", \"fsize\", \"flastmod\", \"include\", \"printenv\",\n+          \"set\");\n+\n   private static final Pattern CONDITIONAL_COMMENT_PATTERN = Pattern\n-      .compile(\"<!--\\\\[if.*!\\\\[endif\\\\]-->\");\n+      .compile(\"<!--\\\\[.*]-->\");\n+\n+  private static final Pattern ESI_COMMENT_PATTERN = Pattern\n+      .compile(\"<!--esi.*-->\");\n+\n+  private static final List<Pattern> EXCEPTIONS = buildExceptionList();\n \n   @Override\n   public void comment(CommentNode node) {\n-    String code = node.getCode();\n-    if (!Syntax.isSightlyComment(code) && !isConditionalComment(code)) {\n+    String code = StringUtils.deleteWhitespace(node.getCode());\n+    if (!Syntax.isSightlyComment(code) && !isException(code)) {\n       createViolation(node.getStartLinePosition(), RULE_MESSAGE);\n     }\n   }\n \n-  private boolean isConditionalComment(String code) {\n-    return CONDITIONAL_COMMENT_PATTERN.matcher(code).matches();\n+  private boolean isException(String code) {\n+    return EXCEPTIONS.stream()\n+        .map(pattern -> pattern.matcher(code))\n+        .anyMatch(Matcher::matches);\n+  }\n+\n+  private static List<Pattern> buildExceptionList() {\n+    List<Pattern> result = new ArrayList<>();\n+    result.add(CONDITIONAL_COMMENT_PATTERN);\n+    result.add(ESI_COMMENT_PATTERN);\n+    result.addAll(buildSsiRegex(SSI_ELEMENTS));\n+\n+    return result;\n+  }\n+\n+  private static List<Pattern> buildSsiRegex(List<String> elements) {\n+    return elements.stream()\n+        .map(e -> \"<!--#\" + e + \".*-->\")\n+        .map(Pattern::compile)\n+        .collect(Collectors.toList());\n   }\n }\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/files/checks/htl/HtlCommentsCheck.html b/src/test/files/checks/htl/HtlCommentsCheck.html\nindex 6f4d2f6..e0b15f2 100644\n--- a/src/test/files/checks/htl/HtlCommentsCheck.html\n+++ b/src/test/files/checks/htl/HtlCommentsCheck.html\n@@ -1,5 +1,23 @@\n-<!--/* Good, this comment will not be rendered */-->\n+<!--esi\n+<esi:include src=\"{{_result.editorialUrl}}\"/>\n+-->\n+\n+<!--/*\n+Good, this comment will not be rendered\n+*/-->\n \n <!-- Potentially bad, plain HTML comments will be visible on the page --> <!--/* Non-Compliant */-->\n \n-<!--[if IE]>${site.root @ context='uri'}\"><![endif]-->\n\\ No newline at end of file\n+<!--[if IE]>\n+${site.root @ context='uri'}\">\n+<![endif]-->\n+\n+<!--\n+[{{_response.statusCode}}]\n+-->\n+\n+<!--#config echomsg=\"[Value Undefined]\" -->\n+\n+<!--#echo\n+encoding=\"entity\" var=\"QUERY_STRING\"\n+-->\n\\ No newline at end of file\n"}
{"repository": "wttech/AEM-Rules-for-SonarQube", "clone_url": "https://github.com/wttech/AEM-Rules-for-SonarQube.git", "timestamp": "2023-05-30T19:36:32.952347Z", "commit_hash": "da32f6f406ec804fceae4891769197e93aae6cab", "commit_message": "Merge pull request #164 from Cognifide/issue-111-bugfix\n\n#111 - bugfix - htl-10, support for call attributes with expressions", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java\nindex 01c5004..4dd2858 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java\n@@ -24,11 +24,15 @@ import com.cognifide.aemrules.tag.Tags;\n import com.cognifide.aemrules.version.AemVersion;\n import com.google.common.collect.ImmutableList;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.sling.scripting.sightly.compiler.expression.Expression;\n import org.sonar.check.Priority;\n import org.sonar.check.Rule;\n import org.sonar.plugins.html.node.Attribute;\n import org.sonar.plugins.html.node.TagNode;\n \n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n @Rule(\n         key = UseSlyTagsOverRedundantMarkupCheck.RULE_KEY,\n         name = UseSlyTagsOverRedundantMarkupCheck.RULE_MESSAGE,\n@@ -58,24 +62,40 @@ public class UseSlyTagsOverRedundantMarkupCheck extends AbstractHtlCheck {\n             \"data-sly-call\");\n \n     @Override\n-    public void startElement(TagNode node) {\n-        if (containsRedundantMarkup(node)) {\n+    public void startHtlElement(List<Expression> expressions, TagNode node) {\n+        if (isWrappedInRedundantMarkup(node, expressions)) {\n             createViolation(node.getStartLinePosition(), RULE_VIOLATION);\n         }\n     }\n \n-    private boolean containsRedundantMarkup(TagNode node) {\n+    private boolean isWrappedInRedundantMarkup(TagNode node, List<Expression> expressions) {\n         return !StringUtils.equalsAnyIgnoreCase(SLY_TAG, node.getNodeName()) &&\n-                isReferenceBlockStatement(node) &&\n+                containsSlyCallAttributeWithExpression(node, expressions) &&\n                 node.getChildren().isEmpty();\n     }\n \n-    private boolean isReferenceBlockStatement(TagNode node) {\n+    private boolean isUsingCallAttributes(TagNode node){\n         return node.getAttributes().stream()\n                 .map(Attribute::getName)\n                 .map(s -> StringUtils.substringBefore(s, \".\"))\n                 .anyMatch(SLY_ATTRIBUTES::contains);\n     }\n \n+\n+    private boolean containsSlyCallAttributeWithExpression(TagNode node, List<Expression> expressions) {\n+        if (expressions.isEmpty()) {\n+            return isUsingCallAttributes(node);\n+        }\n+\n+        List<String> slyAttributesExpression = node.getAttributes().stream()\n+                .filter(attribute -> SLY_ATTRIBUTES.contains(attribute.getName()))\n+                .map(Attribute::getValue)\n+                .collect(Collectors.toList());\n+\n+        return expressions.stream()\n+                .map(Expression::getRawText)\n+                .anyMatch(slyAttributesExpression::contains);\n+    }\n+\n }\n \n", "test_patch": "diff --git a/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html b/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html\nindex ef302ac..aa0ddc9 100644\n--- a/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html\n+++ b/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html\n@@ -37,3 +37,14 @@\n     <h1>${model.headline}</h1>\n     <p>${model.text}</p>\n </div>\n+\n+\n+<div data-sly-use.model=\"com.example.model.PageConfig\"\n+        id=\"banner\"\n+        class=\"component-banner\"\n+        data-config=\"${model.json}\">\n+</div>\n+\n+<div data-sly-call=\"${lib.two @ title=properties.jcr:title, resource=resource.parent}\"></div> <!--/* Non-Compliant */-->\n+\n+\n"}
{"repository": "wttech/AEM-Rules-for-SonarQube", "clone_url": "https://github.com/wttech/AEM-Rules-for-SonarQube.git", "timestamp": "2023-05-30T19:41:20.303069Z", "commit_hash": "ecdd2155c5e285acb5faad9bd0ed5968776a51b2", "commit_message": "Merge pull request #162 from Cognifide/issue-112-bugfix\n\nIssue 112 bugfix", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/cognifide/aemrules/htl/checks/PlaceTemplatesInSeparateFilesCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/PlaceTemplatesInSeparateFilesCheck.java\nindex 28f2645..c904c52 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/PlaceTemplatesInSeparateFilesCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/PlaceTemplatesInSeparateFilesCheck.java\n@@ -22,28 +22,32 @@ package com.cognifide.aemrules.htl.checks;\n import com.cognifide.aemrules.metadata.Metadata;\n import com.cognifide.aemrules.tag.Tags;\n import com.cognifide.aemrules.version.AemVersion;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n import org.apache.commons.lang.StringUtils;\n import org.apache.sling.scripting.sightly.compiler.expression.Expression;\n+import org.apache.sling.scripting.sightly.compiler.expression.ExpressionNode;\n import org.apache.sling.scripting.sightly.compiler.expression.nodes.Identifier;\n+import org.apache.sling.scripting.sightly.compiler.expression.nodes.PropertyAccess;\n import org.sonar.check.Priority;\n import org.sonar.check.Rule;\n import org.sonar.plugins.html.node.Attribute;\n import org.sonar.plugins.html.node.TagNode;\n \n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n @Rule(\n-    key = PlaceTemplatesInSeparateFilesCheck.RULE_KEY,\n-    name = PlaceTemplatesInSeparateFilesCheck.RULE_MESSAGE,\n-    priority = Priority.MINOR,\n-    tags = Tags.AEM\n+        key = PlaceTemplatesInSeparateFilesCheck.RULE_KEY,\n+        name = PlaceTemplatesInSeparateFilesCheck.RULE_MESSAGE,\n+        priority = Priority.MINOR,\n+        tags = Tags.AEM\n )\n @AemVersion(\n-    from = \"6.0\"\n+        from = \"6.0\"\n )\n @Metadata(\n-    technicalDebt = \"15min\"\n+        technicalDebt = \"15min\"\n )\n public class PlaceTemplatesInSeparateFilesCheck extends AbstractHtlCheck {\n \n@@ -55,7 +59,7 @@ public class PlaceTemplatesInSeparateFilesCheck extends AbstractHtlCheck {\n \n     private Map<Integer, String> templatesCalls;\n \n-    public  PlaceTemplatesInSeparateFilesCheck() {\n+    public PlaceTemplatesInSeparateFilesCheck() {\n         templatesDefinition = new HashMap<>();\n         templatesCalls = new HashMap<>();\n     }\n@@ -63,12 +67,12 @@ public class PlaceTemplatesInSeparateFilesCheck extends AbstractHtlCheck {\n     @Override\n     public void startHtlElement(List<Expression> expressions, TagNode node) {\n         node.getAttributes().stream()\n-            .filter(this::isTemplateAttribute)\n-            .forEach(attribute -> templatesDefinition.put(attribute.getLine(), getTemplateName(attribute)));\n+                .filter(this::isTemplateAttribute)\n+                .forEach(attribute -> templatesDefinition.put(attribute.getLine(), getTemplateName(attribute)));\n \n         node.getAttributes().stream()\n-            .filter(this::isCallAttribute)\n-            .forEach(attribute -> templatesCalls.put(attribute.getLine(), getTemplateUsage(attribute)));\n+                .filter(this::isCallAttribute)\n+                .forEach(attribute -> templatesCalls.put(attribute.getLine(), getTemplateUsage(attribute)));\n     }\n \n     @Override\n@@ -94,12 +98,24 @@ public class PlaceTemplatesInSeparateFilesCheck extends AbstractHtlCheck {\n \n     private String getTemplateUsage(Attribute attribute) {\n         return getExpressions(attribute.getValue()).stream()\n-            .map(Expression::getRoot)\n-            .filter(Identifier.class::isInstance)\n-            .map(Identifier.class::cast)\n-            .map(Identifier::getName)\n-            .findFirst()\n-            .orElse(StringUtils.EMPTY);\n+                .map(Expression::getRoot)\n+                .map(this::extractIdentifier)\n+                .filter(Objects::nonNull)\n+                .map(Identifier.class::cast)\n+                .map(Identifier::getName)\n+                .findFirst()\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n+    private ExpressionNode extractIdentifier(ExpressionNode expressionNode) {\n+        if (expressionNode instanceof Identifier) {\n+            return expressionNode;\n+        } else if (expressionNode instanceof PropertyAccess) {\n+            PropertyAccess propertyAccess = (PropertyAccess) expressionNode;\n+            return propertyAccess.getTarget();\n+        } else {\n+            return null;\n+        }\n     }\n \n     private void checkTemplateUsage() {\n@@ -107,10 +123,16 @@ public class PlaceTemplatesInSeparateFilesCheck extends AbstractHtlCheck {\n             String templateUsage = callEntry.getValue();\n             for (Map.Entry<Integer, String> templateEntry : templatesDefinition.entrySet()) {\n                 String templateDefinitionName = templateEntry.getValue();\n-                if (StringUtils.equals(templateUsage, templateDefinitionName)) {\n-                    createViolation(callEntry.getKey(), RULE_MESSAGE);\n+                if (StringUtils.equals(templateUsage, templateDefinitionName) &&\n+                        isDuplicated(templateEntry)) {\n+                    createViolation(templateEntry.getKey(), RULE_MESSAGE);\n                 }\n             }\n         }\n     }\n+\n+    private boolean isDuplicated(Map.Entry<Integer, String> templateEntry) {\n+        return getHtmlSourceCode().getIssues().stream()\n+                .noneMatch(htmlIssue -> Objects.equals(htmlIssue.line(), templateEntry.getKey()) && htmlIssue.ruleKey().rule().equalsIgnoreCase(RULE_KEY));\n+    }\n }\n", "test_patch": "diff --git a/src/test/files/checks/htl/PlaceTemplatesInSeparateFilesCheck.html b/src/test/files/checks/htl/PlaceTemplatesInSeparateFilesCheck.html\nindex 00abe7e..7711620 100644\n--- a/src/test/files/checks/htl/PlaceTemplatesInSeparateFilesCheck.html\n+++ b/src/test/files/checks/htl/PlaceTemplatesInSeparateFilesCheck.html\n@@ -19,14 +19,34 @@\n     #L%\n \n -->\n-<template data-sly-template.template=\"${@ source, description}\">\n+<template data-sly-template.template=\"${@ source, description}\"> <!--/* Non-Compliant */-->\n     <img src=\"${source}\" alt=\"${description}\" title=\"${description}\"/>\n </template>\n \n <div class=\"image-component\" data-sly-use.model=\"com.example.Image\">\n-    <sly data-sly-call=\"${template}\"></sly> <!--/* Non-Compliant */-->\n+    <sly data-sly-call=\"${template}\"></sly>\n+    <div data-sly-call=\"${template.property}\"></div>\n </div>\n \n <div class=\"image-component\" data-sly-use.model=\"com.example.Image\">\n-    <sly data-sly-call=\"${template @ source=model.src, description=model.altText}\"></sly> <!--/* Non-Compliant */-->\n-</div>\n\\ No newline at end of file\n+    <sly data-sly-call=\"${template @ source=model.src, description=model.altText}\"></sly>\n+</div>\n+\n+<template data-sly-template.one>template text</template><!--/* Non-Compliant */-->\n+<div data-sly-call=\"${one}\"></div>\n+<span data-sly-call=\"${one}\"></span>\n+<span data-sly-call=\"${one}\"></span>\n+\n+<template data-sly-template.two=\"${@ title, resource='The resource of the parent node'}\"> <!--/* Non-Compliant */-->\n+    <h1>${title}</h1>\n+    <p>Parent: ${resource.name}</p>\n+</template>\n+<div data-sly-call=\"${two @ title=properties.jcr:title, resource=resource.parent}\"></div>\n+\n+<div data-sly-call=\"${component @ title=properties.jcr:title, resource=resource.parent}\"></div>\n+\n+<div data-sly-use.lib=\"templateLib.html\" data-sly-call=\"${lib.one}\"></div>\n+\n+<div data-sly-call=\"${four @ title=properties.jcr:title, resource=resource.parent}\"></div>\n+\n+<div data-sly-call=\"${example @ title=properties.jcr:title, resource=resource.parent}\"></div>\n"}
{"repository": "wttech/AEM-Rules-for-SonarQube", "clone_url": "https://github.com/wttech/AEM-Rules-for-SonarQube.git", "timestamp": "2023-05-30T19:46:04.525961Z", "commit_hash": "e690b5a1458e0d36b22c60266a76bda7239e701f", "commit_message": "#111 - bugfix - htl-10, support for call attributes with expressions\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java b/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java\nindex 01c5004..a321595 100644\n--- a/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java\n+++ b/src/main/java/com/cognifide/aemrules/htl/checks/UseSlyTagsOverRedundantMarkupCheck.java\n@@ -24,11 +24,15 @@ import com.cognifide.aemrules.tag.Tags;\n import com.cognifide.aemrules.version.AemVersion;\n import com.google.common.collect.ImmutableList;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.sling.scripting.sightly.compiler.expression.Expression;\n import org.sonar.check.Priority;\n import org.sonar.check.Rule;\n import org.sonar.plugins.html.node.Attribute;\n import org.sonar.plugins.html.node.TagNode;\n \n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n @Rule(\n         key = UseSlyTagsOverRedundantMarkupCheck.RULE_KEY,\n         name = UseSlyTagsOverRedundantMarkupCheck.RULE_MESSAGE,\n@@ -58,24 +62,39 @@ public class UseSlyTagsOverRedundantMarkupCheck extends AbstractHtlCheck {\n             \"data-sly-call\");\n \n     @Override\n-    public void startElement(TagNode node) {\n-        if (containsRedundantMarkup(node)) {\n+    public void startHtlElement(List<Expression> expressions, TagNode node) {\n+        if (isWrappedInRedundantMarkup(node, expressions)) {\n             createViolation(node.getStartLinePosition(), RULE_VIOLATION);\n         }\n     }\n \n-    private boolean containsRedundantMarkup(TagNode node) {\n+    private boolean isWrappedInRedundantMarkup(TagNode node, List<Expression> expressions) {\n         return !StringUtils.equalsAnyIgnoreCase(SLY_TAG, node.getNodeName()) &&\n-                isReferenceBlockStatement(node) &&\n+                containsSlyCallAttributeWithExpression(node, expressions) &&\n                 node.getChildren().isEmpty();\n     }\n \n-    private boolean isReferenceBlockStatement(TagNode node) {\n+    private boolean isUsingCallAttributes(TagNode node){\n         return node.getAttributes().stream()\n                 .map(Attribute::getName)\n                 .map(s -> StringUtils.substringBefore(s, \".\"))\n                 .anyMatch(SLY_ATTRIBUTES::contains);\n     }\n \n+\n+    private boolean containsSlyCallAttributeWithExpression(TagNode node, List<Expression> expressions) {\n+        if (expressions.isEmpty()) {\n+            return isUsingCallAttributes(node);\n+        }\n+\n+        List<String> slyAttributesExpression = node.getAttributes().stream()\n+                .filter(attribute -> SLY_ATTRIBUTES.contains(attribute.getName()))\n+                .map(Attribute::getValue)\n+                .collect(Collectors.toList());\n+\n+        return expressions.stream()\n+                .anyMatch(expression -> slyAttributesExpression.contains(expression.getRawText()));\n+    }\n+\n }\n \n", "test_patch": "diff --git a/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html b/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html\nindex ef302ac..aa0ddc9 100644\n--- a/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html\n+++ b/src/test/files/checks/htl/UseSlyTagsOverRedundantMarkupCheck.html\n@@ -37,3 +37,14 @@\n     <h1>${model.headline}</h1>\n     <p>${model.text}</p>\n </div>\n+\n+\n+<div data-sly-use.model=\"com.example.model.PageConfig\"\n+        id=\"banner\"\n+        class=\"component-banner\"\n+        data-config=\"${model.json}\">\n+</div>\n+\n+<div data-sly-call=\"${lib.two @ title=properties.jcr:title, resource=resource.parent}\"></div> <!--/* Non-Compliant */-->\n+\n+\n"}
