{"repository": "alibaba/transmittable-thread-local", "clone_url": "https://github.com/alibaba/transmittable-thread-local.git", "timestamp": "2023-05-31T18:33:33.052093Z", "commit_hash": "e87f532bfeb0c444296ff2234f7ac39fbb50af3f", "commit_message": "fix: using `PriorityBlockingQueue` for non `runnable` #361\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java b/src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java\nindex 677647a..dfa07f1 100644\n--- a/src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java\n+++ b/src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java\n@@ -185,6 +185,7 @@ public final class TtlExecutors {\n      * @since 2.10.0\n      */\n     @NonNull\n+    @SuppressWarnings(\"ConstantConditions\")\n     public static ThreadFactory getDefaultDisableInheritableThreadFactory() {\n         return getDisableInheritableThreadFactory(Executors.defaultThreadFactory());\n     }\n@@ -241,11 +242,11 @@ public final class TtlExecutors {\n     public static Comparator<Runnable> getTtlRunnableUnwrapComparator(@Nullable Comparator<Runnable> comparator) {\n         if (comparator == null || isTtlRunnableUnwrapComparator(comparator)) return comparator;\n \n-        return new TtlRunnableUnwrapComparator(comparator);\n+        return new TtlUnwrapComparator<Runnable>(comparator);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private static final Comparator<Runnable> INSTANCE = new TtlRunnableUnwrapComparator(ComparableComparator.INSTANCE);\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    private static final Comparator INSTANCE = new TtlUnwrapComparator(ComparableComparator.INSTANCE);\n \n     /**\n      * {@code TtlRunnableUnwrapComparator} that compares {@link Comparable Comparable} objects.\n@@ -254,8 +255,9 @@ public final class TtlExecutors {\n      * @since 2.12.3\n      */\n     @NonNull\n+    @SuppressWarnings(\"unchecked\")\n     public static Comparator<Runnable> getTtlRunnableUnwrapComparatorForComparableRunnable() {\n-        return INSTANCE;\n+        return (Comparator<Runnable>) INSTANCE;\n     }\n \n     /**\n@@ -266,7 +268,7 @@ public final class TtlExecutors {\n      * @since 2.12.3\n      */\n     public static boolean isTtlRunnableUnwrapComparator(@Nullable Comparator<Runnable> comparator) {\n-        return comparator instanceof TtlRunnableUnwrapComparator;\n+        return comparator instanceof TtlUnwrapComparator;\n     }\n \n     /**\n@@ -282,7 +284,7 @@ public final class TtlExecutors {\n     public static Comparator<Runnable> unwrap(@Nullable Comparator<Runnable> comparator) {\n         if (!isTtlRunnableUnwrapComparator(comparator)) return comparator;\n \n-        return ((TtlRunnableUnwrapComparator) comparator).unwrap();\n+        return ((TtlUnwrapComparator<Runnable>) comparator).unwrap();\n     }\n \n     private TtlExecutors() {\ndiff --git a/src/main/java/com/alibaba/ttl/threadpool/TtlRunnableUnwrapComparator.java b/src/main/java/com/alibaba/ttl/threadpool/TtlRunnableUnwrapComparator.java\ndeleted file mode 100644\nindex b42b310..0000000\n--- a/src/main/java/com/alibaba/ttl/threadpool/TtlRunnableUnwrapComparator.java\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-package com.alibaba.ttl.threadpool;\n-\n-import com.alibaba.ttl.TtlRunnable;\n-import com.alibaba.ttl.spi.TtlWrapper;\n-import edu.umd.cs.findbugs.annotations.NonNull;\n-\n-import java.util.Comparator;\n-\n-/**\n- * @see TtlExecutors#getTtlRunnableUnwrapComparator(Comparator)\n- * @see TtlExecutors#isTtlRunnableUnwrapComparator(Comparator)\n- * @see TtlExecutors#unwrap(Comparator)\n- * @since 2.12.3\n- */\n-final class TtlRunnableUnwrapComparator implements Comparator<Runnable>, TtlWrapper<Comparator<Runnable>> {\n-    private final Comparator<Runnable> comparator;\n-\n-    public TtlRunnableUnwrapComparator(@NonNull Comparator<Runnable> comparator) {\n-        this.comparator = comparator;\n-    }\n-\n-    @Override\n-    public int compare(Runnable o1, Runnable o2) {\n-        return comparator.compare(TtlRunnable.unwrap(o1), TtlRunnable.unwrap(o2));\n-    }\n-\n-    @NonNull\n-    @Override\n-    public Comparator<Runnable> unwrap() {\n-        return comparator;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        TtlRunnableUnwrapComparator that = (TtlRunnableUnwrapComparator) o;\n-\n-        return comparator.equals(that.comparator);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return comparator.hashCode();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"TtlRunnableUnwrapComparator{comparator=\" + comparator + '}';\n-    }\n-}\ndiff --git a/src/main/java/com/alibaba/ttl/threadpool/TtlUnwrapComparator.java b/src/main/java/com/alibaba/ttl/threadpool/TtlUnwrapComparator.java\nnew file mode 100644\nindex 0000000..43863a5\n--- /dev/null\n+++ b/src/main/java/com/alibaba/ttl/threadpool/TtlUnwrapComparator.java\n@@ -0,0 +1,52 @@\n+package com.alibaba.ttl.threadpool;\n+\n+import com.alibaba.ttl.TtlUnwrap;\n+import com.alibaba.ttl.spi.TtlWrapper;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * @see TtlExecutors#getTtlRunnableUnwrapComparator(Comparator)\n+ * @see TtlExecutors#isTtlRunnableUnwrapComparator(Comparator)\n+ * @see TtlExecutors#unwrap(Comparator)\n+ * @since 2.12.3\n+ */\n+final class TtlUnwrapComparator<T> implements Comparator<T>, TtlWrapper<Comparator<T>> {\n+    private final Comparator<T> comparator;\n+\n+    public TtlUnwrapComparator(@NonNull Comparator<T> comparator) {\n+        this.comparator = comparator;\n+    }\n+\n+    @Override\n+    public int compare(T o1, T o2) {\n+        return comparator.compare(TtlUnwrap.unwrap(o1), TtlUnwrap.unwrap(o2));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Comparator<T> unwrap() {\n+        return comparator;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        TtlUnwrapComparator<?> that = (TtlUnwrapComparator<?>) o;\n+\n+        return comparator.equals(that.comparator);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return comparator.hashCode();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TtlUnwrapComparator{comparator=\" + comparator + '}';\n+    }\n+}\n", "test_patch": "diff --git a/src/test/java/com/alibaba/ttl/threadpool/TtlExecutorsTest.kt b/src/test/java/com/alibaba/ttl/threadpool/TtlExecutorsTest.kt\nindex 06a796d..15be6b4 100644\n--- a/src/test/java/com/alibaba/ttl/threadpool/TtlExecutorsTest.kt\n+++ b/src/test/java/com/alibaba/ttl/threadpool/TtlExecutorsTest.kt\n@@ -145,16 +145,16 @@ class TtlExecutorsTest {\n \n         getTtlRunnableUnwrapComparator(comparator).let {\n             // use class name check instead of type check by\n-            //     assertTrue(it is TtlRunnableUnwrapComparator)\n+            //     assertTrue(it is TtlUnwrapComparator)\n             //\n             // avoid test error under java 11 using TTL Agent:\n             //\n             // java.lang.IllegalAccessError:\n-            //   failed to access class com.alibaba.ttl.threadpool.TtlRunnableUnwrapComparator\n+            //   failed to access class com.alibaba.ttl.threadpool.TtlUnwrapComparator\n             //     from class com.alibaba.ttl.threadpool.TtlExecutorsTest\n-            //   (com.alibaba.ttl.threadpool.TtlRunnableUnwrapComparator is in unnamed module of loader 'bootstrap';\n+            //   (com.alibaba.ttl.threadpool.TtlUnwrapComparator is in unnamed module of loader 'bootstrap';\n             //     com.alibaba.ttl.threadpool.TtlExecutorsTest is in unnamed module of loader 'app')\n-            assertEquals(\"com.alibaba.ttl.threadpool.TtlRunnableUnwrapComparator\", it!!.javaClass.name)\n+            assertEquals(\"com.alibaba.ttl.threadpool.TtlUnwrapComparator\", it!!.javaClass.name)\n \n             assertTrue(isTtlRunnableUnwrapComparator(it))\n \n"}
