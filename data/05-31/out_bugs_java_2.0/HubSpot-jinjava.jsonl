{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T19:39:43.404703Z", "commit_hash": "2995079f3b107fa5c04d6dd420a25ee3037d4ddf", "commit_message": "Fix eager set.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\nindex 9223b0f..5f0ec6f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n@@ -41,6 +41,7 @@ public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n     InterpretException e\n   ) {\n     interpreter.getContext().checkNumberOfDeferredTokens();\n+    EagerExecutionResult eagerExecutionResult;\n     try (InterpreterScopeClosable c = interpreter.enterScope()) {\n       MacroFunction caller = new MacroFunction(\n         tagNode.getChildren(),\n@@ -52,117 +53,117 @@ public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n         interpreter.getPosition()\n       );\n       interpreter.getContext().addGlobalMacro(caller);\n-      EagerExecutionResult eagerExecutionResult = EagerContextWatcher.executeInChildContext(\n-        eagerInterpreter ->\n-          EagerExpressionResolver.resolveExpression(\n-            tagNode.getHelpers().trim(),\n-            interpreter\n-          ),\n-        interpreter,\n-        EagerContextWatcher\n-          .EagerChildContextConfig.newBuilder()\n-          .withTakeNewValue(true)\n-          .withPartialMacroEvaluation(\n-            interpreter.getConfig().isNestedInterpretationEnabled()\n-          )\n-          .build()\n-      );\n-      PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n-      if (\n-        !eagerExecutionResult.getResult().isFullyResolved() ||\n-        interpreter.getContext().isDeferredExecutionMode()\n-      ) {\n-        prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n-      } else {\n-        interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n-      }\n-      if (eagerExecutionResult.getResult().isFullyResolved()) {\n-        // Possible macro/set tag in front of this one.\n-        return (\n-          prefixToPreserveState.toString() +\n-          EagerExpressionStrategy.postProcessResult(\n-            new ExpressionToken(\n-              tagNode.getHelpers(),\n-              tagNode.getLineNumber(),\n-              tagNode.getStartPosition(),\n-              tagNode.getSymbols()\n+      eagerExecutionResult =\n+        EagerContextWatcher.executeInChildContext(\n+          eagerInterpreter ->\n+            EagerExpressionResolver.resolveExpression(\n+              tagNode.getHelpers().trim(),\n+              interpreter\n             ),\n-            eagerExecutionResult.getResult().toString(true),\n-            interpreter\n-          )\n+          interpreter,\n+          EagerContextWatcher\n+            .EagerChildContextConfig.newBuilder()\n+            .withTakeNewValue(true)\n+            .withPartialMacroEvaluation(\n+              interpreter.getConfig().isNestedInterpretationEnabled()\n+            )\n+            .build()\n         );\n-      }\n-      caller.setDeferred(true);\n-      prefixToPreserveState.putAll(\n-        EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n-          eagerExecutionResult.getResult().getDeferredWords(),\n+      caller.setDeferred(!eagerExecutionResult.getResult().isFullyResolved());\n+    }\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() ||\n+      interpreter.getContext().isDeferredExecutionMode()\n+    ) {\n+      prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n+    } else {\n+      interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n+    }\n+    if (eagerExecutionResult.getResult().isFullyResolved()) {\n+      // Possible macro/set tag in front of this one.\n+      return (\n+        prefixToPreserveState.toString() +\n+        EagerExpressionStrategy.postProcessResult(\n+          new ExpressionToken(\n+            tagNode.getHelpers(),\n+            tagNode.getLineNumber(),\n+            tagNode.getStartPosition(),\n+            tagNode.getSymbols()\n+          ),\n+          eagerExecutionResult.getResult().toString(true),\n           interpreter\n         )\n       );\n+    }\n \n-      LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n-        interpreter.getConfig().getMaxOutputSize(),\n-        \" \"\n-      );\n-      joiner\n-        .add(tagNode.getSymbols().getExpressionStartWithTag())\n-        .add(tagNode.getTag().getName())\n-        .add(eagerExecutionResult.getResult().toString().trim())\n-        .add(tagNode.getSymbols().getExpressionEndWithTag());\n-      prefixToPreserveState.withAllInFront(\n-        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-          interpreter,\n-          new DeferredToken(\n-            new TagToken(\n-              joiner.toString(),\n-              tagNode.getLineNumber(),\n-              tagNode.getStartPosition(),\n-              tagNode.getSymbols()\n-            ),\n-            eagerExecutionResult\n-              .getResult()\n-              .getDeferredWords()\n-              .stream()\n-              .filter(\n-                word ->\n-                  !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n-              )\n-              .collect(Collectors.toSet())\n-          )\n-        )\n-      );\n-      StringBuilder result = new StringBuilder(prefixToPreserveState + joiner.toString());\n-      interpreter.getContext().setDynamicVariableResolver(s -> DeferredValue.instance());\n-      if (!tagNode.getChildren().isEmpty()) {\n-        result.append(\n-          EagerContextWatcher\n-            .executeInChildContext(\n-              eagerInterpreter ->\n-                EagerExpressionResult.fromString(\n-                  renderChildren(tagNode, eagerInterpreter)\n-                ),\n-              interpreter,\n-              EagerContextWatcher\n-                .EagerChildContextConfig.newBuilder()\n-                .withForceDeferredExecutionMode(true)\n-                .build()\n+    prefixToPreserveState.putAll(\n+      EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n+        eagerExecutionResult.getResult().getDeferredWords(),\n+        interpreter\n+      )\n+    );\n+\n+    LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n+      interpreter.getConfig().getMaxOutputSize(),\n+      \" \"\n+    );\n+    joiner\n+      .add(tagNode.getSymbols().getExpressionStartWithTag())\n+      .add(tagNode.getTag().getName())\n+      .add(eagerExecutionResult.getResult().toString().trim())\n+      .add(tagNode.getSymbols().getExpressionEndWithTag());\n+    prefixToPreserveState.withAllInFront(\n+      EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+        interpreter,\n+        new DeferredToken(\n+          new TagToken(\n+            joiner.toString(),\n+            tagNode.getLineNumber(),\n+            tagNode.getStartPosition(),\n+            tagNode.getSymbols()\n+          ),\n+          eagerExecutionResult\n+            .getResult()\n+            .getDeferredWords()\n+            .stream()\n+            .filter(\n+              word ->\n+                !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n             )\n-            .asTemplateString()\n-        );\n-      }\n-      if (\n-        StringUtils.isNotBlank(tagNode.getEndName()) &&\n-        (\n-          !(getTag() instanceof FlexibleTag) ||\n-          ((FlexibleTag) getTag()).hasEndTag((TagToken) tagNode.getMaster())\n+            .collect(Collectors.toSet())\n         )\n-      ) {\n-        result.append(EagerReconstructionUtils.reconstructEnd(tagNode));\n-      } // Possible set tag in front of this one.\n-      return EagerReconstructionUtils.wrapInAutoEscapeIfNeeded(\n-        result.toString(),\n-        interpreter\n+      )\n+    );\n+    StringBuilder result = new StringBuilder(prefixToPreserveState + joiner.toString());\n+    interpreter.getContext().setDynamicVariableResolver(s -> DeferredValue.instance());\n+    if (!tagNode.getChildren().isEmpty()) {\n+      result.append(\n+        EagerContextWatcher\n+          .executeInChildContext(\n+            eagerInterpreter ->\n+              EagerExpressionResult.fromString(renderChildren(tagNode, eagerInterpreter)),\n+            interpreter,\n+            EagerContextWatcher\n+              .EagerChildContextConfig.newBuilder()\n+              .withForceDeferredExecutionMode(true)\n+              .build()\n+          )\n+          .asTemplateString()\n       );\n     }\n+    if (\n+      StringUtils.isNotBlank(tagNode.getEndName()) &&\n+      (\n+        !(getTag() instanceof FlexibleTag) ||\n+        ((FlexibleTag) getTag()).hasEndTag((TagToken) tagNode.getMaster())\n+      )\n+    ) {\n+      result.append(EagerReconstructionUtils.reconstructEnd(tagNode));\n+    } // Possible set tag in front of this one.\n+    return EagerReconstructionUtils.wrapInAutoEscapeIfNeeded(\n+      result.toString(),\n+      interpreter\n+    );\n   }\n }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java\nindex 78b1679..8f40963 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java\n@@ -66,12 +66,12 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n   @Test\n   public void itResolvesFromSet() {\n     String template =\n-      \"{% set bar={} %}\" +\n-      \"{% macro foo(bar, foobar, other) %}\" +\n-      \" {% do bar.update({'a': 'b'}) %} \" +\n-      \" {{ foobar }}  {{ bar }} and {{ other }}\" +\n+      \"{% macro foo(foobar, other) %}\" +\n+      \" {% do foobar.update({'a': 'b'} ) %} \" +\n+      \" {{ foobar }}  and {{ other }}\" +\n       \"{% endmacro %}\" +\n-      \"{% call foo(bar, foobar, deferred) %} {% endcall %}\" +\n+      \"{% set bar = {}  %}\" +\n+      \"{% call foo(bar, deferred) %} {% endcall %}\" +\n       \"{{ bar }}\";\n     String firstPass = interpreter.render(template);\n     assertThat(firstPass).isEqualTo(template);\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T19:48:13.243897Z", "commit_hash": "6b6461c9bb594118126f6707c3b66077ec27eb6f", "commit_message": "Improve for loop explosion success rate.\nNow that we have better tracking of the prefix to preserve state, we can separate the collection expression execution from the iterating of the for loop.\nThis leads to better explosion success where we can now support exploding for loops even when there are modifications inside for loops with deferred tokens\nAdditionally, for loop evaluation will be faster as we don't need to re-run the for loop\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex 49cadd0..e38d244 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n@@ -44,7 +44,6 @@ import java.beans.Introspector;\n import java.beans.PropertyDescriptor;\n import java.util.ConcurrentModificationException;\n import java.util.List;\n-import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.regex.Matcher;\n@@ -151,6 +150,20 @@ public class ForTag implements Tag {\n         String.format(\"%s in %s\", String.join(\", \", loopVars), e.getDeferredEvalResult())\n       );\n     }\n+    return renderForCollection(\n+      tagNode,\n+      interpreter,\n+      loopVarsAndExpression.getLeft(),\n+      collection\n+    );\n+  }\n+\n+  public String renderForCollection(\n+    TagNode tagNode,\n+    JinjavaInterpreter interpreter,\n+    List<String> loopVars,\n+    Object collection\n+  ) {\n     ForLoop loop = ObjectIterator.getLoop(collection);\n \n     try (InterpreterScopeClosable c = interpreter.enterScope()) {\n@@ -190,8 +203,8 @@ public class ForTag implements Tag {\n         } else {\n           for (int loopVarIndex = 0; loopVarIndex < loopVars.size(); loopVarIndex++) {\n             String loopVar = loopVars.get(loopVarIndex);\n-            if (Map.Entry.class.isAssignableFrom(val.getClass())) {\n-              Map.Entry<String, Object> entry = (Entry<String, Object>) val;\n+            if (Entry.class.isAssignableFrom(val.getClass())) {\n+              Entry<String, Object> entry = (Entry<String, Object>) val;\n               Object entryVal = null;\n \n               if (loopVars.indexOf(loopVar) == 0) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\nindex f313d42..e600667 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n@@ -4,6 +4,7 @@ import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildBlockSetTag\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildSetTag;\n \n import com.google.common.annotations.Beta;\n+import com.hubspot.jinjava.interpret.DeferredLazyReferenceSource;\n import com.hubspot.jinjava.interpret.DeferredValueShadow;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.LazyReference;\n@@ -55,8 +56,13 @@ public class EagerExecutionResult {\n       .entrySet()\n       .stream()\n       .filter(\n-        entry ->\n-          !(interpreter.getContext().get(entry.getKey()) instanceof DeferredValueShadow)\n+        entry -> {\n+          Object contextValue = interpreter.getContext().get(entry.getKey());\n+          if (contextValue instanceof DeferredLazyReferenceSource) {\n+            ((DeferredLazyReferenceSource) contextValue).setReconstructed(true);\n+          }\n+          return (contextValue != null && !(contextValue instanceof DeferredValueShadow));\n+        }\n       )\n       .collect(Collectors.toList());\n     prefixToPreserveState.putAll(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex 733886a..37d34ce 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n@@ -39,45 +39,67 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n \n   @Override\n   public String innerInterpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n-    Set<DeferredToken> addedTokens = new HashSet<>();\n-    EagerExecutionResult result = EagerContextWatcher.executeInChildContext(\n-      eagerInterpreter -> {\n-        EagerExpressionResult expressionResult = EagerExpressionResult.fromSupplier(\n-          () -> getTag().interpretUnchecked(tagNode, eagerInterpreter),\n-          eagerInterpreter\n-        );\n-        addedTokens.addAll(eagerInterpreter.getContext().getDeferredTokens());\n-        return expressionResult;\n-      },\n+    Pair<List<String>, String> loopVarsAndExpression = getTag()\n+      .getLoopVarsAndExpression((TagToken) tagNode.getMaster());\n+    EagerExecutionResult collectionResult = EagerContextWatcher.executeInChildContext(\n+      eagerInterpreter ->\n+        EagerExpressionResolver.resolveExpression(\n+          '[' + loopVarsAndExpression.getRight() + ']',\n+          interpreter\n+        ),\n       interpreter,\n       EagerContextWatcher\n         .EagerChildContextConfig.newBuilder()\n         .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n         .build()\n     );\n-    if (\n-      result.getResult().getResolutionState() == ResolutionState.NONE ||\n-      (\n-        !result.getResult().isFullyResolved() &&\n-        !result.getSpeculativeBindings().isEmpty()\n-      )\n-    ) {\n-      EagerReconstructionUtils.resetSpeculativeBindings(interpreter, result);\n-      interpreter.getContext().removeDeferredTokens(addedTokens);\n-      throw new DeferredValueException(\n-        result.getResult().getResolutionState() == ResolutionState.NONE\n-          ? result.getResult().toString()\n-          : \"Modification inside partially evaluated for loop\"\n-      );\n-    }\n-    if (result.getResult().isFullyResolved()) {\n-      return result.getResult().toString(true);\n-    } else {\n-      return EagerReconstructionUtils.wrapInChildScope(\n-        result.getResult().toString(true),\n-        interpreter\n+    if (collectionResult.getResult().isFullyResolved()) {\n+      Set<DeferredToken> addedTokens = new HashSet<>();\n+      EagerExecutionResult result = EagerContextWatcher.executeInChildContext(\n+        eagerInterpreter -> {\n+          EagerExpressionResult expressionResult = EagerExpressionResult.fromSupplier(\n+            () ->\n+              getTag()\n+                .renderForCollection(\n+                  tagNode,\n+                  eagerInterpreter,\n+                  loopVarsAndExpression.getLeft(),\n+                  collectionResult.getResult().toList().get(0)\n+                ),\n+            eagerInterpreter\n+          );\n+          addedTokens.addAll(eagerInterpreter.getContext().getDeferredTokens());\n+          return expressionResult;\n+        },\n+        interpreter,\n+        EagerContextWatcher\n+          .EagerChildContextConfig.newBuilder()\n+          .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n+          .withTakeNewValue(true)\n+          .build()\n       );\n+      if (result.getResult().getResolutionState() == ResolutionState.NONE) {\n+        EagerReconstructionUtils.resetSpeculativeBindings(interpreter, collectionResult);\n+        EagerReconstructionUtils.resetSpeculativeBindings(interpreter, result);\n+        interpreter.getContext().removeDeferredTokens(addedTokens);\n+        throw new DeferredValueException(result.getResult().toString());\n+      }\n+      if (result.getResult().isFullyResolved()) {\n+        return result.getResult().toString(true);\n+      } else {\n+        return (\n+          result\n+            .getPrefixToPreserveState()\n+            .withAllInFront(collectionResult.getPrefixToPreserveState()) +\n+          EagerReconstructionUtils.wrapInChildScope(\n+            result.getResult().toString(true),\n+            interpreter\n+          )\n+        );\n+      }\n     }\n+    EagerReconstructionUtils.resetSpeculativeBindings(interpreter, collectionResult);\n+    throw new DeferredValueException(collectionResult.getResult().toString());\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex ece9cd0..ee19385 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -209,10 +209,10 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n   ) {\n     String combined = output + getDoTagToPreserve(interpreter, currentImportAlias);\n     // So that any set variables other than the alias won't exist outside the child's scope\n-    if (interpreter.getContext().isDeferredExecutionMode()) {\n-      return EagerReconstructionUtils.wrapInChildScope(combined, interpreter);\n-    }\n-    return combined;\n+    //    if (interpreter.getContext().isDeferredExecutionMode()) {\n+    return EagerReconstructionUtils.wrapInChildScope(combined, interpreter);\n+    //    }\n+    //    return combined;\n   }\n \n   private String getSetTagForDeferredChildBindings(\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\nindex f7f342f..21ab191 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n@@ -790,7 +790,8 @@ public class EagerReconstructionUtils {\n    *   * When doing some eager execution and then needing to repeat the same execution in deferred execution mode.\n    *   <p>\n    *   * When rendering logic which takes place in its own child scope (for tag, macro function, set block) and there\n-   *   speculative bindings. These must be deferred and the execution must run again so they don't get reconstructed\n+   *   are speculative bindings.\n+   *   These must be deferred and the execution must run again, so they don't get reconstructed\n    *   within the child scope, and can instead be reconstructed in their original scopes.\n    * @param interpreter The JinjavaInterpreter\n    * @param eagerExecutionResult The execution result which contains information about which bindings were modified\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 61c4ca6..c302781 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1141,7 +1141,7 @@ public class EagerTest {\n \n   @Test\n   public void itHandlesReferenceModificationWhenSourceIsLost() {\n-    expectedTemplateInterpreter.assertExpectedOutput(\n+    expectedTemplateInterpreter.assertExpectedOutputNonIdempotent(\n       \"handles-reference-modification-when-source-is-lost\"\n     );\n   }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerForTagTest.java\nindex 4a7dd16..bbfb3c5 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerForTagTest.java\n@@ -11,6 +11,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.ForTagTest;\n import com.hubspot.jinjava.mode.EagerExecutionMode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n+import java.util.List;\n import java.util.Optional;\n import org.junit.After;\n import org.junit.Before;\n@@ -215,7 +216,7 @@ public class EagerForTagTest extends ForTagTest {\n   }\n \n   @Test\n-  public void itDoesNotSwallowDeferredValueException() {\n+  public void itCanNowHandleModificationInPartiallyDeferredLoop() {\n     interpreter.getContext().registerTag(new EagerDoTag());\n     interpreter.getContext().registerTag(new EagerIfTag());\n     interpreter.getContext().registerTag(new EagerSetTag());\n@@ -223,18 +224,29 @@ public class EagerForTagTest extends ForTagTest {\n     String input =\n       \"{% set my_list = [] %}\" +\n       \"{% for i in range(401) %}\" +\n-      \"{{ my_list.append(i) }}\" +\n+      \"{% do my_list.append(i) %}\" +\n       \"{% endfor %}\" +\n-      \"{% for i in my_list.append(1) ? [0, 1] : [0] %}\" +\n+      \"{% for i in my_list.append(-1) ? [0, 1] : [0] %}\" +\n       \"{% for j in deferred %}\" +\n       \"{% if loop.first %}\" +\n-      \"{% do my_list.append(1) %}\" +\n+      \"{% do my_list.append(i) %}\" +\n       \"{% endif %}\" +\n       \"{% endfor %}\" +\n       \"{% endfor %}\" +\n       \"{{ my_list }}\";\n-    interpreter.render(input);\n-    assertThat(interpreter.getContext().getDeferredNodes()).isNotEmpty();\n+    String initialResult = interpreter.render(input);\n+    assertThat(interpreter.getContext().getDeferredNodes()).isEmpty();\n+    interpreter.getContext().put(\"deferred\", ImmutableList.of(1, 2));\n+    interpreter.render(initialResult);\n+    assertThat(interpreter.getContext().get(\"my_list\")).isInstanceOf(List.class);\n+    assertThat((List<Long>) interpreter.getContext().get(\"my_list\"))\n+      .as(\n+        \"Appends 401 numbers and then appends '-1', running the 'i' loop twice,\" +\n+        \"which runs the 'j' loop, the first time appending the value of 'i', which will be '0', then '1'\"\n+      )\n+      .hasSize(404)\n+      .containsSequence(400L, -1L, 0L, 1L);\n+    assertThat(interpreter.getContext().getDeferredNodes()).isEmpty();\n   }\n \n   public static boolean inForLoop() {\ndiff --git a/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja b/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\nindex 234c34f..4ba7ddf 100644\n--- a/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\n+++ b/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\n@@ -1,4 +1,8 @@\n-{% set my_list = [] %}{% for i in [0, 1] %}\n+{% set my_list = [] %}{% for __ignored__ in [0] %}\n+{% for j in deferred %}\n+{% do my_list.append(1) %}\n+{% endfor %}\n+\n {% for j in deferred %}\n {% do my_list.append(1) %}\n {% endfor %}\ndiff --git a/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja b/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\nindex d0600b6..dfd7333 100644\n--- a/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\n+++ b/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\n@@ -1,4 +1,23 @@\n-{% set foo = 'start' %}{% for i in [0, 1] %}\n+{% set foo = 'start' %}{% for __ignored__ in [0] %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n+\n+{% set foo = 'starta' %}{% do bar1.update({'foo': foo}) %}\n+\n+{% endif %}\n+\n+{% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n+{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n+{{ bar1.foo }}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n+\n+{% set foo = filter:join.filter([foo, 'a'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n+\n+{% endif %}\n+\n+{% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n+{% do bar2.update({'import_resource_path': 'deferred-modification.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n+{{ bar2.foo }}\n+\n {% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n \n {% set foo = filter:join.filter([foo, 'a'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\nindex 1b388c6..0e0fad4 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n@@ -4,8 +4,8 @@ Hello {{ myname }}\n {% enddo %}foo: Hello {{ myname }}\n bar: {{ bar }}\n ---\n-{% set myname = deferred + 7 %}{% do %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n+{% set myname = deferred + 7 %}{% do %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}{% for __ignored__ in [0] %}\n {% set bar = myname + 19 %}{% do simple.update({'bar': bar}) %}\n Hello {{ myname }}\n-{% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% enddo %}simple.foo: {% set deferred_import_resource_path = 'macro-and-set.jinja' %}{% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{{ simple.foo() }}\n+{% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}simple.foo: {% set deferred_import_resource_path = 'macro-and-set.jinja' %}{% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{{ simple.foo() }}\n simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-double-import-modification.expected.jinja b/src/test/resources/eager/handles-double-import-modification.expected.jinja\nindex 2a509a0..1e75a3d 100644\n--- a/src/test/resources/eager/handles-double-import-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-double-import-modification.expected.jinja\n@@ -1,20 +1,20 @@\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar1.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n-{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n+{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n ---\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar2.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n-{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n+{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n ---\n {{ bar1.foo }}\n {{ bar2.foo }}\ndiff --git a/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja b/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja\nindex dd63c3d..507ab1d 100644\n--- a/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja\n@@ -4,7 +4,7 @@ C: {{ c_list }}.{% endmacro %}{{ c(b_list) }}{% set b_list = a_list %}{% do b_li\n B: {% set b_list = a_list %}{{ b_list }}.{% endset %}{{ __macro_b_125206_temp_variable_0__ }}{% do a_list.append(deferred ? 'A' : '') %}\n A: {{ a_list }}.\n ---\n-{% set a_list = ['a'] %}{% for i in [0] %}{% set b_list = a_list %}{% do b_list.append('b') %}{% for __ignored__ in [0] %}{% set c_list = b_list %}{% do c_list.append(deferred ? 'c' : '') %}\n-C: {{ c_list }}.{% endfor %}{% do b_list.append(deferred ? 'B' : '') %}\n-B: {{ b_list }}.{% endfor %}{% do a_list.append(deferred ? 'A' : '') %}\n+{% set a_list = ['a', 'b'] %}{% for __ignored__ in [0] %}{% set b_list = a_list %}{% for __ignored__ in [0] %}{% set c_list = a_list %}{% do c_list.append(deferred ? 'c' : '') %}\n+C: {% set c_list = a_list %}{{ c_list }}.{% endfor %}{% set b_list = a_list %}{% do b_list.append(deferred ? 'B' : '') %}\n+B: {% set b_list = a_list %}{{ b_list }}.{% endfor %}{% do a_list.append(deferred ? 'A' : '') %}\n A: {{ a_list }}.\ndiff --git a/src/test/resources/eager/handles-reference-modification-when-source-is-lost.expected.jinja b/src/test/resources/eager/handles-reference-modification-when-source-is-lost.expected.jinja\nindex 5d7fc15..3001acc 100644\n--- a/src/test/resources/eager/handles-reference-modification-when-source-is-lost.expected.jinja\n+++ b/src/test/resources/eager/handles-reference-modification-when-source-is-lost.expected.jinja\n@@ -1,13 +1,13 @@\n-{% set a_list = ['a'] %}{% for i in [0] %}{% set b_list = a_list %}{% do b_list.append(deferred) %}\n+{% set a_list = ['a'] %}{% for __ignored__ in [0] %}{% set b_list = a_list %}{% do b_list.append(deferred) %}\n {% endfor %}\n {{ a_list }}\n ---\n {% for __ignored__ in [0] %}\n \n-{% set a_list = [] %}{% for i in [0] %}\n+{% set a_list = [] %}{% for __ignored__ in [0] %}\n {% if deferred %}\n-{% set b_list = a_list %}\n-{% do b_list.append(1) %}\n+{% set b_list = [] %}\n+{% set b_list = a_list %}{% do b_list.append(1) %}\n {% endif %}\n {% endfor %}\n {{ a_list }}\ndiff --git a/src/test/resources/eager/reconstructs-map-node.expected.expected.jinja b/src/test/resources/eager/reconstructs-map-node.expected.expected.jinja\nindex aea7505..e66867c 100644\n--- a/src/test/resources/eager/reconstructs-map-node.expected.expected.jinja\n+++ b/src/test/resources/eager/reconstructs-map-node.expected.expected.jinja\n@@ -1,3 +1,5 @@\n+First key is foo.\n+\n foo ff\n bar bb\n ['resolved', 'resolved']\ndiff --git a/src/test/resources/eager/reconstructs-map-node.expected.jinja b/src/test/resources/eager/reconstructs-map-node.expected.jinja\nindex a1d272f..98b3f99 100644\n--- a/src/test/resources/eager/reconstructs-map-node.expected.jinja\n+++ b/src/test/resources/eager/reconstructs-map-node.expected.jinja\n@@ -1,7 +1,13 @@\n-{% set my_list = [] %}{% for key, val in [fn:map_entry('foo', 'ff'), fn:map_entry('bar', 'bb')] %}{% do my_list.append(deferred) %}\n-{{ key ~ ' ' ~ val }}{% endfor %}\n+{% if deferred %}\n+{% set foo = [fn:map_entry('foo', 'ff'), fn:map_entry('bar', 'bb')] %}\n+{% endif %}\n+First key is {{ foo[0].key }}.\n+{% set my_list = [] %}{% for __ignored__ in [0] %}{% do my_list.append(deferred) %}\n+foo ff{% do my_list.append(deferred) %}\n+bar bb{% endfor %}\n {{ my_list }}\n \n-{% set my_list = [] %}{% for i in [fn:map_entry('foo', 'ff'), fn:map_entry('bar', 'bb')] %}{% do my_list.append(deferred) %}\n-{{ i.key }}{% endfor %}\n-{{ my_list }}\n+{% set my_list = [] %}{% for __ignored__ in [0] %}{% do my_list.append(deferred) %}\n+foo{% do my_list.append(deferred) %}\n+bar{% endfor %}\n+{{ my_list }}\n\\ No newline at end of file\ndiff --git a/src/test/resources/eager/reconstructs-map-node.jinja b/src/test/resources/eager/reconstructs-map-node.jinja\nindex 1a3858a..80acfeb 100644\n--- a/src/test/resources/eager/reconstructs-map-node.jinja\n+++ b/src/test/resources/eager/reconstructs-map-node.jinja\n@@ -1,4 +1,8 @@\n {% set my_list = [] %}\n+{% if deferred %}\n+{% set foo = {'foo': 'ff', 'bar': 'bb'}.items() %}\n+{% endif %}\n+First key is {{ foo[0].key }}.\n {% for key, val in {'foo': 'ff', 'bar': 'bb'}.items() -%}\n {% do my_list.append(deferred) %}\n {{ key ~ ' ' ~ val }}\ndiff --git a/src/test/resources/eager/reverts-modification-with-deferred-loop.expected.jinja b/src/test/resources/eager/reverts-modification-with-deferred-loop.expected.jinja\nindex 0f3b95d..f1de11b 100644\n--- a/src/test/resources/eager/reverts-modification-with-deferred-loop.expected.jinja\n+++ b/src/test/resources/eager/reverts-modification-with-deferred-loop.expected.jinja\n@@ -1,4 +1,10 @@\n-{% set my_list = [] %}{% for i in [0, 1] %}\n+{% set my_list = [] %}{% for __ignored__ in [0] %}\n+{% for j in deferred %}\n+{% if loop.first %}\n+{% do my_list.append(1) %}\n+{% endif %}\n+{% endfor %}\n+\n {% for j in deferred %}\n {% if loop.first %}\n {% do my_list.append(1) %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T19:57:00.785524Z", "commit_hash": "d83402fafd449705abf0704d09e64d8da6839e8f", "commit_message": "Merge pull request #1036 from HubSpot/revert-1035-revert-1032-revamp-prefix-and-eager-macro-a\n\nRevert \"Revert \"Track modified variables better in child-scoped eager execution\"\"", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/interpret/Context.java b/src/main/java/com/hubspot/jinjava/interpret/Context.java\nindex f02bdef..ffbcc7b 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/Context.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/Context.java\n@@ -393,23 +393,7 @@ public class Context extends ScopeMap<String, Object> {\n \n   @Beta\n   public void handleDeferredToken(DeferredToken deferredToken) {\n-    deferredTokens.add(deferredToken);\n-\n-    if (\n-      deferredToken.getImportResourcePath() == null ||\n-      deferredToken.getImportResourcePath().equals(get(Context.IMPORT_RESOURCE_PATH_KEY))\n-    ) {\n-      DeferredValueUtils.findAndMarkDeferredProperties(this, deferredToken);\n-    }\n-    if (getParent() != null) {\n-      Context parent = getParent();\n-      //Ignore global context\n-      if (parent.getParent() != null) {\n-        parent.handleDeferredToken(deferredToken);\n-      } else {\n-        checkNumberOfDeferredTokens();\n-      }\n-    }\n+    deferredToken.addTo(this);\n   }\n \n   @Beta\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java\nindex 4a00e35..2a2e818 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java\n@@ -3,21 +3,15 @@ package com.hubspot.jinjava.interpret;\n import com.google.common.annotations.Beta;\n \n @Beta\n-public class DeferredLazyReferenceSource implements DeferredValue {\n+public class DeferredLazyReferenceSource extends DeferredValueImpl {\n   private static final DeferredLazyReferenceSource INSTANCE = new DeferredLazyReferenceSource();\n \n-  private Object originalValue;\n   private boolean reconstructed;\n \n   private DeferredLazyReferenceSource() {}\n \n   private DeferredLazyReferenceSource(Object originalValue) {\n-    this.originalValue = originalValue;\n-  }\n-\n-  @Override\n-  public Object getOriginalValue() {\n-    return originalValue;\n+    super(originalValue);\n   }\n \n   public static DeferredLazyReferenceSource instance() {\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java\nindex 19bc899..8cd6bfc 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java\n@@ -15,4 +15,8 @@ public interface DeferredValue {\n   static DeferredValue instance(Object originalValue) {\n     return DeferredValueImpl.instance(originalValue);\n   }\n+\n+  static DeferredValueShadow shadowInstance(Object originalValue) {\n+    return DeferredValueShadow.instance(originalValue);\n+  }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredValueImpl.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredValueImpl.java\nindex 9cf6dfd..0dc7f26 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredValueImpl.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredValueImpl.java\n@@ -7,9 +7,9 @@ public class DeferredValueImpl implements DeferredValue {\n \n   private Object originalValue;\n \n-  private DeferredValueImpl() {}\n+  protected DeferredValueImpl() {}\n \n-  private DeferredValueImpl(Object originalValue) {\n+  protected DeferredValueImpl(Object originalValue) {\n     this.originalValue = originalValue;\n   }\n \n@@ -18,11 +18,11 @@ public class DeferredValueImpl implements DeferredValue {\n     return originalValue;\n   }\n \n-  public static DeferredValue instance() {\n+  protected static DeferredValue instance() {\n     return INSTANCE;\n   }\n \n-  public static DeferredValue instance(Object originalValue) {\n+  protected static DeferredValue instance(Object originalValue) {\n     return new DeferredValueImpl(originalValue);\n   }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredValueShadow.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredValueShadow.java\nnew file mode 100644\nindex 0000000..c1dddf7\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredValueShadow.java\n@@ -0,0 +1,25 @@\n+package com.hubspot.jinjava.interpret;\n+\n+import com.google.common.annotations.Beta;\n+\n+/**\n+ * A deferred value which represents that a value was deferred within this context,\n+ * but it is does not overwrite the actual key in which the original value resides on the context.\n+ */\n+@Beta\n+public class DeferredValueShadow extends DeferredValueImpl {\n+\n+  protected DeferredValueShadow() {}\n+\n+  protected DeferredValueShadow(Object originalValue) {\n+    super(originalValue);\n+  }\n+\n+  protected static DeferredValueShadow instance() {\n+    return new DeferredValueShadow();\n+  }\n+\n+  protected static DeferredValueShadow instance(Object originalValue) {\n+    return new DeferredValueShadow(originalValue);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex cb29f75..4d215f0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -14,6 +14,7 @@ import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.Logging;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -48,9 +49,12 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n         .build()\n     );\n \n-    StringBuilder prefixToPreserveState = new StringBuilder();\n-    if (interpreter.getContext().isDeferredExecutionMode()) {\n-      prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() ||\n+      interpreter.getContext().isDeferredExecutionMode()\n+    ) {\n+      prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n     } else {\n       interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n     }\n@@ -60,8 +64,8 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n         prefixToPreserveState.toString() + postProcessResult(master, result, interpreter)\n       );\n     }\n-    prefixToPreserveState.append(\n-      EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+    prefixToPreserveState.putAll(\n+      EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n         eagerExecutionResult.getResult().getDeferredWords(),\n         interpreter\n       )\n@@ -70,7 +74,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n       eagerExecutionResult.getResult().toString(),\n       interpreter\n     );\n-    prefixToPreserveState.append(\n+    prefixToPreserveState.withAllInFront(\n       EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n         interpreter,\n         new DeferredToken(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\nindex 8faf0a5..7f9c14f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n@@ -1,15 +1,12 @@\n package com.hubspot.jinjava.lib.fn;\n \n import com.hubspot.jinjava.el.ext.AbstractCallableMethod;\n-import com.hubspot.jinjava.el.ext.DeferredParsingException;\n-import com.hubspot.jinjava.el.ext.eager.MacroFunctionTempVariable;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.Context.TemporaryValueClosable;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.tree.Node;\n-import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n@@ -17,7 +14,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * Function definition parsed from a jinjava template, stored in global macros registry in interpreter context.\n@@ -26,19 +22,19 @@ import java.util.concurrent.atomic.AtomicInteger;\n  *\n  */\n public class MacroFunction extends AbstractCallableMethod {\n-  private final List<Node> content;\n+  public static final String KWARGS_KEY = \"kwargs\";\n+  public static final String VARARGS_KEY = \"varargs\";\n+  protected final List<Node> content;\n \n-  private final boolean caller;\n+  protected final boolean caller;\n \n-  private final Context localContextScope;\n+  protected final Context localContextScope;\n \n-  private final int definitionLineNumber;\n+  protected final int definitionLineNumber;\n \n-  private final int definitionStartPosition;\n+  protected final int definitionStartPosition;\n \n-  private boolean deferred;\n-\n-  private AtomicInteger callCount = new AtomicInteger();\n+  protected boolean deferred;\n \n   public MacroFunction(\n     List<Node> content,\n@@ -74,33 +70,10 @@ public class MacroFunction extends AbstractCallableMethod {\n     Map<String, Object> kwargMap,\n     List<Object> varArgs\n   ) {\n-    int currentCallCount = callCount.getAndIncrement();\n     JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n     Optional<String> importFile = getImportFile(interpreter);\n     try (InterpreterScopeClosable c = interpreter.enterScope()) {\n-      String result = getEvaluationResult(argMap, kwargMap, varArgs, interpreter);\n-      if (\n-        !interpreter.getContext().getDeferredNodes().isEmpty() ||\n-        !interpreter.getContext().getDeferredTokens().isEmpty()\n-      ) {\n-        if (!interpreter.getContext().isPartialMacroEvaluation()) {\n-          String tempVarName = MacroFunctionTempVariable.getVarName(\n-            getName(),\n-            hashCode(),\n-            currentCallCount\n-          );\n-          interpreter\n-            .getContext()\n-            .getParent()\n-            .put(tempVarName, new MacroFunctionTempVariable(result));\n-          throw new DeferredParsingException(this, tempVarName);\n-        }\n-        if (interpreter.getContext().isDeferredExecutionMode()) {\n-          return EagerReconstructionUtils.wrapInChildScope(result, interpreter);\n-        }\n-      }\n-\n-      return result;\n+      return getEvaluationResult(argMap, kwargMap, varArgs, interpreter);\n     } finally {\n       importFile.ifPresent(path -> interpreter.getContext().getCurrentPathStack().pop());\n     }\n@@ -165,9 +138,9 @@ public class MacroFunction extends AbstractCallableMethod {\n       interpreter.getContext().put(argEntry.getKey(), argEntry.getValue());\n     }\n     // parameter map\n-    interpreter.getContext().put(\"kwargs\", kwargMap);\n+    interpreter.getContext().put(KWARGS_KEY, kwargMap);\n     // varargs list\n-    interpreter.getContext().put(\"varargs\", varArgs);\n+    interpreter.getContext().put(VARARGS_KEY, varArgs);\n \n     LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n       interpreter.getConfig().getMaxOutputSize()\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\nindex 892f5f6..2c11014 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\n@@ -2,8 +2,9 @@ package com.hubspot.jinjava.lib.fn.eager;\n \n import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableMap;\n-import com.hubspot.jinjava.el.ext.AbstractCallableMethod;\n import com.hubspot.jinjava.el.ext.AstMacroFunction;\n+import com.hubspot.jinjava.el.ext.DeferredParsingException;\n+import com.hubspot.jinjava.el.ext.eager.MacroFunctionTempVariable;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.DeferredValue;\n@@ -12,68 +13,167 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.lib.tag.MacroTag;\n+import com.hubspot.jinjava.lib.tag.eager.EagerExecutionResult;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.util.EagerContextWatcher;\n+import com.hubspot.jinjava.util.EagerContextWatcher.EagerChildContextConfig;\n+import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.StringJoiner;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n \n @Beta\n-public class EagerMacroFunction extends AbstractCallableMethod {\n-  private String fullName;\n-  private MacroFunction macroFunction;\n-  private JinjavaInterpreter interpreter;\n+public class EagerMacroFunction extends MacroFunction {\n+  private AtomicInteger callCount = new AtomicInteger();\n+  private boolean reconstructing = false;\n \n   public EagerMacroFunction(\n-    String fullName,\n-    MacroFunction macroFunction,\n-    JinjavaInterpreter interpreter\n+    List<Node> content,\n+    String name,\n+    LinkedHashMap<String, Object> argNamesWithDefaults,\n+    boolean caller,\n+    Context localContextScope,\n+    int lineNumber,\n+    int startPosition\n   ) {\n     super(\n-      macroFunction.getName(),\n-      getLinkedHashmap(macroFunction.getArguments(), macroFunction.getDefaults())\n+      content,\n+      name,\n+      argNamesWithDefaults,\n+      caller,\n+      localContextScope,\n+      lineNumber,\n+      startPosition\n     );\n-    this.fullName = fullName;\n-    this.macroFunction = macroFunction;\n-    this.interpreter = interpreter;\n   }\n \n-  private static LinkedHashMap<String, Object> getLinkedHashmap(\n-    List<String> args,\n-    Map<String, Object> defaults\n+  public Object doEvaluate(\n+    Map<String, Object> argMap,\n+    Map<String, Object> kwargMap,\n+    List<Object> varArgs\n   ) {\n-    LinkedHashMap<String, Object> linkedHashMap = new LinkedHashMap<>();\n-    for (String arg : args) {\n-      linkedHashMap.put(arg, defaults.get(arg));\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+    if (reconstructing) {\n+      Optional<String> importFile = getImportFile(interpreter);\n+      try (InterpreterScopeClosable c = interpreter.enterScope()) {\n+        EagerExecutionResult result = eagerEvaluateInDeferredExecutionMode(\n+          () -> getEvaluationResultDirectly(argMap, kwargMap, varArgs, interpreter),\n+          interpreter\n+        );\n+        if (!result.getResult().isFullyResolved()) {\n+          result =\n+            eagerEvaluateInDeferredExecutionMode(\n+              () -> getEvaluationResultDirectly(argMap, kwargMap, varArgs, interpreter),\n+              interpreter\n+            );\n+        }\n+        return result.asTemplateString();\n+      } finally {\n+        importFile.ifPresent(\n+          path -> interpreter.getContext().getCurrentPathStack().pop()\n+        );\n+      }\n     }\n-    return linkedHashMap;\n+\n+    int currentCallCount = callCount.getAndIncrement();\n+    EagerExecutionResult eagerExecutionResult = eagerEvaluate(\n+      () -> super.doEvaluate(argMap, kwargMap, varArgs).toString(),\n+      EagerChildContextConfig\n+        .newBuilder()\n+        .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n+        .withTakeNewValue(true)\n+        .build(),\n+      interpreter\n+    );\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() &&\n+      (\n+        !interpreter.getContext().isPartialMacroEvaluation() ||\n+        !eagerExecutionResult.getSpeculativeBindings().isEmpty() ||\n+        interpreter.getContext().isDeferredExecutionMode()\n+      )\n+    ) {\n+      PrefixToPreserveState prefixToPreserveState = EagerReconstructionUtils.resetAndDeferSpeculativeBindings(\n+        interpreter,\n+        eagerExecutionResult\n+      );\n+\n+      String tempVarName = MacroFunctionTempVariable.getVarName(\n+        getName(),\n+        hashCode(),\n+        currentCallCount\n+      );\n+      interpreter\n+        .getContext()\n+        .getParent()\n+        .put(\n+          tempVarName,\n+          new MacroFunctionTempVariable(\n+            prefixToPreserveState + eagerExecutionResult.asTemplateString()\n+          )\n+        );\n+      throw new DeferredParsingException(this, tempVarName);\n+    }\n+    return eagerExecutionResult.getResult().toString(true);\n   }\n \n-  public Object doEvaluate(\n+  private String getEvaluationResultDirectly(\n     Map<String, Object> argMap,\n     Map<String, Object> kwargMap,\n-    List<Object> varArgs\n+    List<Object> varArgs,\n+    JinjavaInterpreter interpreter\n   ) {\n-    Optional<String> importFile = macroFunction.getImportFile(interpreter);\n-    try (InterpreterScopeClosable c = interpreter.enterNonStackingScope()) {\n-      interpreter.getContext().setDeferredExecutionMode(true);\n-      return macroFunction.getEvaluationResult(argMap, kwargMap, varArgs, interpreter);\n-    } finally {\n-      importFile.ifPresent(path -> interpreter.getContext().getCurrentPathStack().pop());\n-    }\n+    String evaluationResult = getEvaluationResult(argMap, kwargMap, varArgs, interpreter);\n+    interpreter.getContext().getScope().remove(KWARGS_KEY);\n+    interpreter.getContext().getScope().remove(VARARGS_KEY);\n+    return evaluationResult;\n+  }\n+\n+  private EagerExecutionResult eagerEvaluateInDeferredExecutionMode(\n+    Supplier<String> stringSupplier,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    return eagerEvaluate(\n+      stringSupplier,\n+      EagerChildContextConfig\n+        .newBuilder()\n+        .withForceDeferredExecutionMode(true)\n+        .withTakeNewValue(true)\n+        .withCheckForContextChanges(true)\n+        .build(),\n+      interpreter\n+    );\n+  }\n+\n+  private EagerExecutionResult eagerEvaluate(\n+    Supplier<String> stringSupplier,\n+    EagerChildContextConfig eagerChildContextConfig,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    return EagerContextWatcher.executeInChildContext(\n+      eagerInterpreter ->\n+        EagerExpressionResult.fromSupplier(stringSupplier, eagerInterpreter),\n+      interpreter,\n+      eagerChildContextConfig\n+    );\n   }\n \n-  public String getStartTag(JinjavaInterpreter interpreter) {\n+  private String getStartTag(String fullName, JinjavaInterpreter interpreter) {\n     StringJoiner argJoiner = new StringJoiner(\", \");\n-    for (String arg : macroFunction.getArguments()) {\n-      if (macroFunction.getDefaults().get(arg) != null) {\n+    for (String arg : getArguments()) {\n+      if (getDefaults().get(arg) != null) {\n         argJoiner.add(\n           String.format(\n             \"%s=%s\",\n             arg,\n-            PyishObjectMapper.getAsPyishString(macroFunction.getDefaults().get(arg))\n+            PyishObjectMapper.getAsPyishString(getDefaults().get(arg))\n           )\n         );\n         continue;\n@@ -88,7 +188,7 @@ public class EagerMacroFunction extends AbstractCallableMethod {\n       .toString();\n   }\n \n-  public String getEndTag(JinjavaInterpreter interpreter) {\n+  private String getEndTag(JinjavaInterpreter interpreter) {\n     return new StringJoiner(\" \")\n       .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag())\n       .add(String.format(\"end%s\", MacroTag.TAG_NAME))\n@@ -96,6 +196,11 @@ public class EagerMacroFunction extends AbstractCallableMethod {\n       .toString();\n   }\n \n+  @Override\n+  public String reconstructImage() {\n+    return reconstructImage(getName());\n+  }\n+\n   /**\n    * Reconstruct the image of the macro function, @see MacroFunction#reconstructImage()\n    * This image, however, may be partially or fully resolved depending on the\n@@ -105,10 +210,11 @@ public class EagerMacroFunction extends AbstractCallableMethod {\n    *  This image allows for the macro function to be recreated during a later\n    *  rendering pass.\n    */\n-  public String reconstructImage() {\n+  public String reconstructImage(String fullName) {\n     String prefix = \"\";\n     String suffix = \"\";\n-    Optional<String> importFile = macroFunction.getImportFile(interpreter);\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+    Optional<String> importFile = getImportFile(interpreter);\n     Object currentDeferredImportResource = null;\n     if (importFile.isPresent()) {\n       interpreter.getContext().getCurrentPathStack().pop();\n@@ -144,44 +250,29 @@ public class EagerMacroFunction extends AbstractCallableMethod {\n     String result;\n     if (\n       (\n-        interpreter.getContext().getMacroStack().contains(macroFunction.getName()) &&\n-        !differentMacroWithSameNameExists()\n+        interpreter.getContext().getMacroStack().contains(getName()) &&\n+        !differentMacroWithSameNameExists(interpreter)\n       ) ||\n-      (\n-        !macroFunction.isCaller() &&\n-        AstMacroFunction.checkAndPushMacroStack(interpreter, fullName)\n-      )\n+      (!isCaller() && AstMacroFunction.checkAndPushMacroStack(interpreter, fullName))\n     ) {\n       return \"\";\n     } else {\n       try (InterpreterScopeClosable c = interpreter.enterScope()) {\n+        reconstructing = true;\n         String evaluation = (String) evaluate(\n-          macroFunction\n-            .getArguments()\n-            .stream()\n-            .map(arg -> DeferredMacroValueImpl.instance())\n-            .toArray()\n+          getArguments().stream().map(arg -> DeferredMacroValueImpl.instance()).toArray()\n         );\n-\n-        if (!interpreter.getContext().getDeferredTokens().isEmpty()) {\n-          evaluation =\n-            (String) evaluate(\n-              macroFunction\n-                .getArguments()\n-                .stream()\n-                .map(arg -> DeferredMacroValueImpl.instance())\n-                .toArray()\n-            );\n-        }\n-        result = (getStartTag(interpreter) + evaluation + getEndTag(interpreter));\n+        result =\n+          (getStartTag(fullName, interpreter) + evaluation + getEndTag(interpreter));\n       } catch (DeferredValueException e) {\n         // In case something not eager-supported encountered a deferred value\n-        result = macroFunction.reconstructImage();\n+        result = super.reconstructImage();\n       } finally {\n+        reconstructing = false;\n         interpreter\n           .getContext()\n           .put(Context.DEFERRED_IMPORT_RESOURCE_PATH_KEY, currentDeferredImportResource);\n-        if (!macroFunction.isCaller()) {\n+        if (!isCaller()) {\n           interpreter.getContext().getMacroStack().pop();\n         }\n       }\n@@ -189,24 +280,32 @@ public class EagerMacroFunction extends AbstractCallableMethod {\n     return prefix + result + suffix;\n   }\n \n-  private boolean differentMacroWithSameNameExists() {\n+  private boolean differentMacroWithSameNameExists(JinjavaInterpreter interpreter) {\n     Context context = interpreter.getContext();\n     if (context.getParent() == null) {\n       return false;\n     }\n-    MacroFunction mostRecent = context.getGlobalMacro(macroFunction.getName());\n-    if (macroFunction != mostRecent) {\n+    MacroFunction mostRecent = context.getGlobalMacro(getName());\n+    if (this != mostRecent) {\n       return true;\n     }\n     while (\n-      !context.getGlobalMacros().containsKey(macroFunction.getName()) &&\n+      !context.getGlobalMacros().containsKey(getName()) &&\n       context.getParent().getParent() != null\n     ) {\n       context = context.getParent();\n     }\n-    MacroFunction secondMostRecent = context\n-      .getParent()\n-      .getGlobalMacro(macroFunction.getName());\n-    return secondMostRecent != null && secondMostRecent != macroFunction;\n+    MacroFunction secondMostRecent = context.getParent().getGlobalMacro(getName());\n+    return secondMostRecent != null && secondMostRecent != this;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    return super.equals(o);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return super.hashCode();\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\nindex 3b03e58..0fa60da 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\n@@ -137,16 +137,7 @@ public class MacroTag implements Tag {\n           .getContext()\n           .put(Context.IMPORT_RESOURCE_PATH_KEY, contextImportResourcePath);\n       }\n-      macro =\n-        new MacroFunction(\n-          tagNode.getChildren(),\n-          name,\n-          argNamesWithDefaults,\n-          false,\n-          interpreter.getContext(),\n-          interpreter.getLineNumber(),\n-          interpreter.getPosition()\n-        );\n+      macro = constructMacroFunction(tagNode, interpreter, name, argNamesWithDefaults);\n     } finally {\n       if (scopeEntered) {\n         interpreter.leaveScope();\n@@ -202,6 +193,23 @@ public class MacroTag implements Tag {\n     return \"\";\n   }\n \n+  protected MacroFunction constructMacroFunction(\n+    TagNode tagNode,\n+    JinjavaInterpreter interpreter,\n+    String name,\n+    LinkedHashMap<String, Object> argNamesWithDefaults\n+  ) {\n+    return new MacroFunction(\n+      tagNode.getChildren(),\n+      name,\n+      argNamesWithDefaults,\n+      false,\n+      interpreter.getContext(),\n+      interpreter.getLineNumber(),\n+      interpreter.getPosition()\n+    );\n+  }\n+\n   public static boolean populateArgNames(\n     int lineNumber,\n     JinjavaInterpreter interpreter,\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java\nindex 07da96b..03d82f8 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java\n@@ -3,10 +3,19 @@ package com.hubspot.jinjava.lib.tag.eager;\n import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.CallStack;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredLazyReference;\n+import com.hubspot.jinjava.interpret.DeferredLazyReferenceSource;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.DeferredValueShadow;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.tree.parse.Token;\n+import com.hubspot.jinjava.util.EagerExpressionResolver;\n+import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map.Entry;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n @Beta\n public class DeferredToken {\n@@ -14,6 +23,7 @@ public class DeferredToken {\n   // These words aren't yet DeferredValues, but are unresolved\n   // so they should be replaced with DeferredValueImpls if they exist in the context\n   private final Set<String> usedDeferredWords;\n+\n   // These words are those which will be set to a value which has been deferred.\n   private final Set<String> setDeferredWords;\n \n@@ -25,7 +35,7 @@ public class DeferredToken {\n \n   public DeferredToken(Token token, Set<String> usedDeferredWords) {\n     this.token = token;\n-    this.usedDeferredWords = usedDeferredWords;\n+    this.usedDeferredWords = getBases(usedDeferredWords);\n     this.setDeferredWords = Collections.emptySet();\n     importResourcePath = acquireImportResourcePath();\n     macroStack = acquireMacroStack();\n@@ -37,8 +47,8 @@ public class DeferredToken {\n     Set<String> setDeferredWords\n   ) {\n     this.token = token;\n-    this.usedDeferredWords = usedDeferredWords;\n-    this.setDeferredWords = setDeferredWords;\n+    this.usedDeferredWords = getBases(usedDeferredWords);\n+    this.setDeferredWords = getBases(setDeferredWords);\n     importResourcePath = acquireImportResourcePath();\n     macroStack = acquireMacroStack();\n   }\n@@ -63,6 +73,155 @@ public class DeferredToken {\n     return macroStack;\n   }\n \n+  public void addTo(Context context) {\n+    addTo(\n+      context,\n+      usedDeferredWords\n+        .stream()\n+        .filter(\n+          word -> {\n+            Object value = context.get(word);\n+            return value != null && !(value instanceof DeferredValue);\n+          }\n+        )\n+        .collect(Collectors.toCollection(HashSet::new))\n+    );\n+  }\n+\n+  private void addTo(Context context, Set<String> wordsWithoutDeferredSource) {\n+    context.getDeferredTokens().add(this);\n+    deferPropertiesOnContext(context, wordsWithoutDeferredSource);\n+    if (context.getParent() != null) {\n+      Context parent = context.getParent();\n+      //Ignore global context\n+      if (parent.getParent() != null) {\n+        addTo(parent, wordsWithoutDeferredSource);\n+      } else {\n+        context.checkNumberOfDeferredTokens();\n+      }\n+    }\n+  }\n+\n+  private void deferPropertiesOnContext(\n+    Context context,\n+    Set<String> wordsWithoutDeferredSource\n+  ) {\n+    wordsWithoutDeferredSource.forEach(word -> deferDuplicatePointers(context, word));\n+    wordsWithoutDeferredSource.removeAll(\n+      markDeferredWordsAndFindSources(context, wordsWithoutDeferredSource)\n+    );\n+\n+    if (isInSameScope(context)) {\n+      // set props are only deferred when within the scope which the variable is set in\n+      markDeferredWordsAndFindSources(context, getSetDeferredWords());\n+    }\n+  }\n+\n+  private boolean isInSameScope(Context context) {\n+    return (getMacroStack() == null || getMacroStack() == context.getMacroStack());\n+  }\n+\n+  // If 'list_a' and 'list_b' reference the same object, and 'list_a' is getting deferred, also defer 'list_b'\n+  private static void deferDuplicatePointers(Context context, String word) {\n+    Object wordValue = context.get(word);\n+\n+    if (\n+      !(wordValue instanceof DeferredValue) &&\n+      !EagerExpressionResolver.isPrimitive(wordValue)\n+    ) {\n+      DeferredLazyReference deferredLazyReference = DeferredLazyReference.instance(\n+        context,\n+        word\n+      );\n+      Context temp = context;\n+      Set<Entry<String, Object>> matchingEntries = new HashSet<>();\n+      while (temp.getParent() != null) {\n+        temp\n+          .getScope()\n+          .entrySet()\n+          .stream()\n+          .filter(\n+            entry ->\n+              entry.getValue() == wordValue ||\n+              (\n+                entry.getValue() instanceof DeferredValue &&\n+                ((DeferredValue) entry.getValue()).getOriginalValue() == wordValue\n+              )\n+          )\n+          .forEach(\n+            entry -> {\n+              matchingEntries.add(entry);\n+              deferredLazyReference.getOriginalValue().setReferenceKey(entry.getKey());\n+            }\n+          );\n+        temp = temp.getParent();\n+      }\n+      if (matchingEntries.size() > 1) { // at least one duplicate\n+        matchingEntries.forEach(\n+          entry -> {\n+            if (\n+              deferredLazyReference\n+                .getOriginalValue()\n+                .getReferenceKey()\n+                .equals(entry.getKey())\n+            ) {\n+              convertToDeferredLazyReferenceSource(context, entry);\n+            } else {\n+              entry.setValue(deferredLazyReference);\n+            }\n+          }\n+        );\n+      }\n+    }\n+  }\n+\n+  private static void convertToDeferredLazyReferenceSource(\n+    Context context,\n+    Entry<String, Object> entry\n+  ) {\n+    Object val = entry.getValue();\n+    if (val instanceof DeferredLazyReferenceSource) {\n+      return;\n+    }\n+    DeferredLazyReferenceSource deferredLazyReferenceSource = DeferredLazyReferenceSource.instance(\n+      val instanceof DeferredValue ? ((DeferredValue) val).getOriginalValue() : val\n+    );\n+\n+    context.replace(entry.getKey(), deferredLazyReferenceSource);\n+    entry.setValue(deferredLazyReferenceSource);\n+  }\n+\n+  private static Collection<String> markDeferredWordsAndFindSources(\n+    Context context,\n+    Set<String> wordsToDefer\n+  ) {\n+    return wordsToDefer\n+      .stream()\n+      .filter(prop -> !(context.get(prop) instanceof DeferredValue))\n+      .filter(prop -> !context.getMetaContextVariables().contains(prop))\n+      .filter(\n+        prop -> {\n+          DeferredValue deferredValue = convertToDeferredValue(context, prop);\n+          context.put(prop, deferredValue);\n+          return !(deferredValue instanceof DeferredValueShadow);\n+        }\n+      )\n+      .collect(Collectors.toList());\n+  }\n+\n+  private static DeferredValue convertToDeferredValue(Context context, String prop) {\n+    Object valueInScope = context.getScope().get(prop);\n+    Object value = context.get(prop);\n+    if (value != null) {\n+      if (valueInScope == null) {\n+        return DeferredValue.shadowInstance(value);\n+      } else {\n+        return DeferredValue.instance(value);\n+      }\n+    }\n+    return DeferredValue.instance();\n+  }\n+\n   private static String acquireImportResourcePath() {\n     return (String) JinjavaInterpreter\n       .getCurrentMaybe()\n@@ -77,4 +236,11 @@ public class DeferredToken {\n       .map(interpreter -> interpreter.getContext().getMacroStack())\n       .orElse(null);\n   }\n+\n+  private static Set<String> getBases(Set<String> original) {\n+    return original\n+      .stream()\n+      .map(prop -> prop.split(\"\\\\.\", 2)[0])\n+      .collect(Collectors.toSet());\n+  }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\nindex 9201b83..5b9969f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n@@ -9,9 +9,9 @@ import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n-import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult.ResolutionState;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.Collections;\n import java.util.Optional;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -33,7 +33,7 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n     String expression,\n     JinjavaInterpreter interpreter\n   ) {\n-    EagerExecutionResult result = EagerContextWatcher.executeInChildContext(\n+    EagerExecutionResult eagerExecutionResult = EagerContextWatcher.executeInChildContext(\n       eagerInterpreter ->\n         EagerExpressionResult.fromSupplier(\n           () -> SetTag.renderChildren(tagNode, eagerInterpreter, variables[0]),\n@@ -45,10 +45,17 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n         .withTakeNewValue(true)\n         .build()\n     );\n-    if (result.getResult().getResolutionState() == ResolutionState.NONE) {\n-      throw new DeferredValueException(result.getResult().toString());\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() &&\n+      !eagerExecutionResult.getSpeculativeBindings().isEmpty() ||\n+      interpreter.getContext().isDeferredExecutionMode()\n+    ) {\n+      EagerReconstructionUtils.resetAndDeferSpeculativeBindings(\n+        interpreter,\n+        eagerExecutionResult\n+      );\n     }\n-    return result;\n+    return eagerExecutionResult;\n   }\n \n   @Override\n@@ -110,23 +117,32 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n       .add(variables[0])\n       .add(tagNode.getSymbols().getExpressionEndWithTag());\n \n-    String prefixToPreserveState =\n-      getPrefixToPreserveState(eagerExecutionResult, variables, interpreter) +\n-      EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-        interpreter,\n-        new DeferredToken(\n-          new TagToken(\n-            joiner.toString(),\n-            tagNode.getLineNumber(),\n-            tagNode.getStartPosition(),\n-            tagNode.getSymbols()\n-          ),\n-          Collections.emptySet(),\n-          Sets.newHashSet(variables)\n+    PrefixToPreserveState prefixToPreserveState = getPrefixToPreserveState(\n+        eagerExecutionResult,\n+        variables,\n+        interpreter\n+      )\n+      .withAllInFront(\n+        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+          interpreter,\n+          new DeferredToken(\n+            new TagToken(\n+              joiner.toString(),\n+              tagNode.getLineNumber(),\n+              tagNode.getStartPosition(),\n+              tagNode.getSymbols()\n+            ),\n+            Collections.emptySet(),\n+            Sets.newHashSet(variables)\n+          )\n         )\n       );\n     String suffixToPreserveState = getSuffixToPreserveState(variables[0], interpreter);\n-    return Triple.of(prefixToPreserveState, joiner.toString(), suffixToPreserveState);\n+    return Triple.of(\n+      prefixToPreserveState.toString(),\n+      joiner.toString(),\n+      suffixToPreserveState\n+    );\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\nindex b31cc07..9223b0f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n@@ -18,6 +18,7 @@ import com.hubspot.jinjava.util.EagerExpressionResolver;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.LinkedHashMap;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -66,9 +67,12 @@ public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n           )\n           .build()\n       );\n-      StringBuilder prefixToPreserveState = new StringBuilder();\n-      if (interpreter.getContext().isDeferredExecutionMode()) {\n-        prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+      PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+      if (\n+        !eagerExecutionResult.getResult().isFullyResolved() ||\n+        interpreter.getContext().isDeferredExecutionMode()\n+      ) {\n+        prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n       } else {\n         interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n       }\n@@ -89,8 +93,8 @@ public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n         );\n       }\n       caller.setDeferred(true);\n-      prefixToPreserveState.append(\n-        EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+      prefixToPreserveState.putAll(\n+        EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n           eagerExecutionResult.getResult().getDeferredWords(),\n           interpreter\n         )\n@@ -105,7 +109,7 @@ public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n         .add(tagNode.getTag().getName())\n         .add(eagerExecutionResult.getResult().toString().trim())\n         .add(tagNode.getSymbols().getExpressionEndWithTag());\n-      prefixToPreserveState.append(\n+      prefixToPreserveState.withAllInFront(\n         EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n           interpreter,\n           new DeferredToken(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\nindex bdfb644..80775b3 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n@@ -11,6 +11,7 @@ import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n import java.util.ArrayList;\n import java.util.List;\n@@ -56,9 +57,12 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n         .build()\n     );\n \n-    StringBuilder prefixToPreserveState = new StringBuilder();\n-    if (interpreter.getContext().isDeferredExecutionMode()) {\n-      prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() ||\n+      interpreter.getContext().isDeferredExecutionMode()\n+    ) {\n+      prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n     } else {\n       interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n     }\n@@ -79,8 +83,8 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n       if (!eagerExecutionResult.getResult().isFullyResolved()) {\n         resolvedValues =\n           new HelperStringTokenizer(resolvedExpression).splitComma(true).allTokens();\n-        prefixToPreserveState.append(\n-          EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+        prefixToPreserveState.putAll(\n+          EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n             eagerExecutionResult.getResult().getDeferredWords(),\n             interpreter\n           )\n@@ -184,16 +188,18 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n       String reconstructedTag = reconstructCycleTag(resolvedExpression, tagToken);\n       return (\n         reconstructedTag +\n-        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-          interpreter,\n-          new DeferredToken(\n-            new TagToken(\n-              reconstructedTag,\n-              tagToken.getLineNumber(),\n-              tagToken.getStartPosition(),\n-              tagToken.getSymbols()\n-            ),\n-            deferredWords\n+        new PrefixToPreserveState(\n+          EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+            interpreter,\n+            new DeferredToken(\n+              new TagToken(\n+                reconstructedTag,\n+                tagToken.getLineNumber(),\n+                tagToken.getStartPosition(),\n+                tagToken.getSymbols()\n+              ),\n+              deferredWords\n+            )\n           )\n         )\n       );\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\nindex f0d7256..fb11cd1 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\n@@ -10,6 +10,7 @@ import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n \n @Beta\n public class EagerDoTag extends EagerStateChangingTag<DoTag> implements FlexibleTag {\n@@ -42,9 +43,12 @@ public class EagerDoTag extends EagerStateChangingTag<DoTag> implements Flexible\n           .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n           .build()\n       );\n-      StringBuilder prefixToPreserveState = new StringBuilder();\n-      if (interpreter.getContext().isDeferredExecutionMode()) {\n-        prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+      PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+      if (\n+        !eagerExecutionResult.getResult().isFullyResolved() ||\n+        interpreter.getContext().isDeferredExecutionMode()\n+      ) {\n+        prefixToPreserveState.withAll(eagerExecutionResult.getPrefixToPreserveState());\n       } else {\n         interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n       }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\nindex f472016..f313d42 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n@@ -4,16 +4,19 @@ import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildBlockSetTag\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildSetTag;\n \n import com.google.common.annotations.Beta;\n+import com.hubspot.jinjava.interpret.DeferredValueShadow;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.LazyReference;\n import com.hubspot.jinjava.objects.serialization.PyishBlockSetSerializable;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n+import java.util.AbstractMap;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.tuple.Pair;\n \n /**\n  * This represents the result of speculatively executing an expression, where if something\n@@ -24,7 +27,7 @@ import org.apache.commons.lang3.tuple.Pair;\n public class EagerExecutionResult {\n   private final EagerExpressionResult result;\n   private final Map<String, Object> speculativeBindings;\n-  private String prefixToPreserveState;\n+  private PrefixToPreserveState prefixToPreserveState;\n \n   public EagerExecutionResult(\n     EagerExpressionResult result,\n@@ -42,75 +45,85 @@ public class EagerExecutionResult {\n     return speculativeBindings;\n   }\n \n-  public String getPrefixToPreserveState() {\n-    return getPrefixToPreserveState(\n-      !JinjavaInterpreter\n-        .getCurrentMaybe()\n-        .map(interpreter -> interpreter.getContext().isDeferredExecutionMode())\n-        .orElse(false)\n-    );\n-  }\n-\n-  public String getPrefixToPreserveState(boolean registerDeferredToken) {\n+  public PrefixToPreserveState getPrefixToPreserveState() {\n     if (prefixToPreserveState != null) {\n       return prefixToPreserveState;\n     }\n     JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n-    prefixToPreserveState =\n-      speculativeBindings\n-        .entrySet()\n+    prefixToPreserveState = new PrefixToPreserveState();\n+    Collection<Entry<String, Object>> filteredEntries = speculativeBindings\n+      .entrySet()\n+      .stream()\n+      .filter(\n+        entry ->\n+          !(interpreter.getContext().get(entry.getKey()) instanceof DeferredValueShadow)\n+      )\n+      .collect(Collectors.toList());\n+    prefixToPreserveState.putAll(\n+      filteredEntries\n         .stream()\n         .filter(entry -> entry.getValue() instanceof PyishBlockSetSerializable)\n         .map(\n           entry ->\n-            buildBlockSetTag(\n+            new AbstractMap.SimpleImmutableEntry<>(\n               entry.getKey(),\n-              ((PyishBlockSetSerializable) entry.getValue()).getBlockSetBody(),\n-              interpreter,\n-              registerDeferredToken\n+              buildBlockSetTag(\n+                entry.getKey(),\n+                ((PyishBlockSetSerializable) entry.getValue()).getBlockSetBody(),\n+                interpreter,\n+                false\n+              )\n             )\n         )\n-        .collect(Collectors.joining()) +\n-      buildSetTag(\n-        speculativeBindings\n-          .entrySet()\n-          .stream()\n-          .filter(entry -> !(entry.getValue() instanceof PyishBlockSetSerializable))\n-          .filter(entry -> !(entry.getValue() instanceof LazyReference))\n-          .collect(\n-            Collectors.toMap(\n-              Entry::getKey,\n-              entry -> PyishObjectMapper.getAsPyishString(entry.getValue())\n+        .collect(Collectors.toMap(Entry::getKey, Entry::getValue))\n+    );\n+    filteredEntries\n+      .stream()\n+      .filter(entry -> !(entry.getValue() instanceof PyishBlockSetSerializable))\n+      .filter(entry -> !(entry.getValue() instanceof LazyReference))\n+      .forEach(\n+        entry ->\n+          prefixToPreserveState.put(\n+            entry.getKey(),\n+            buildSetTag(\n+              Collections.singletonMap(\n+                entry.getKey(),\n+                PyishObjectMapper.getAsPyishString(entry.getValue())\n+              ),\n+              interpreter,\n+              false\n             )\n-          ),\n-        interpreter,\n-        registerDeferredToken\n-      ) +\n-      speculativeBindings\n-        .entrySet()\n-        .stream()\n-        .filter(entry -> (entry.getValue() instanceof LazyReference))\n-        .map(\n-          entry ->\n-            Pair.of(entry.getKey(), PyishObjectMapper.getAsPyishString(entry.getValue()))\n-        )\n-        .sorted(\n-          (a, b) ->\n-            a.getValue().equals(b.getKey()) ? 1 : b.getValue().equals(a.getKey()) ? -1 : 0\n-        )\n-        .map(\n-          pair ->\n+          )\n+      );\n+    filteredEntries\n+      .stream()\n+      .filter(entry -> (entry.getValue() instanceof LazyReference))\n+      .map(\n+        entry ->\n+          new AbstractMap.SimpleImmutableEntry<>(\n+            entry.getKey(),\n+            PyishObjectMapper.getAsPyishString(entry.getValue())\n+          )\n+      )\n+      .sorted(\n+        (a, b) ->\n+          a.getValue().equals(b.getKey()) ? 1 : b.getValue().equals(a.getKey()) ? -1 : 0\n+      )\n+      .forEach(\n+        entry ->\n+          prefixToPreserveState.put(\n+            entry.getKey(),\n             buildSetTag(\n-              Collections.singletonMap(pair.getKey(), pair.getValue()),\n+              Collections.singletonMap(entry.getKey(), entry.getValue()),\n               interpreter,\n-              registerDeferredToken\n+              false\n             )\n-        )\n-        .collect(Collectors.joining());\n+          )\n+      );\n     return prefixToPreserveState;\n   }\n \n   public String asTemplateString() {\n-    return getPrefixToPreserveState() + result;\n+    return getPrefixToPreserveState().toString() + result.toString(true);\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex 719dc5a..733886a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n@@ -18,6 +18,7 @@ import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult.Re\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -91,7 +92,6 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n     LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n       interpreter.getConfig().getMaxOutputSize()\n     );\n-    String prefix = \"\";\n \n     try (\n       TemporaryValueClosable<Boolean> c = interpreter\n@@ -126,10 +126,14 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n     }\n \n     EagerExecutionResult firstRunResult = runLoopOnce(tagNode, interpreter);\n-    if (!firstRunResult.getSpeculativeBindings().isEmpty()) {\n-      // Defer any variables that we tried to modify during the loop\n-      prefix = firstRunResult.getPrefixToPreserveState(true);\n-    }\n+    PrefixToPreserveState prefixToPreserveState = firstRunResult\n+      .getPrefixToPreserveState()\n+      .withAllInFront(\n+        EagerReconstructionUtils.resetAndDeferSpeculativeBindings(\n+          interpreter,\n+          firstRunResult\n+        )\n+      );\n     // Run for loop again now that the necessary values have been deferred\n     EagerExecutionResult secondRunResult = runLoopOnce(tagNode, interpreter);\n     if (\n@@ -147,7 +151,7 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n \n     result.append(secondRunResult.asTemplateString());\n     result.append(EagerReconstructionUtils.reconstructEnd(tagNode));\n-    return prefix + result;\n+    return prefixToPreserveState.toString() + result;\n   }\n \n   private EagerExecutionResult runLoopOnce(\n@@ -212,35 +216,34 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n       .add(\"in\")\n       .add(eagerExpressionResult.toString())\n       .add(tagToken.getSymbols().getExpressionEndWithTag());\n-    StringBuilder prefixToPreserveState = new StringBuilder();\n-    String newlyDeferredFunctionImages = EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n-      eagerExpressionResult.getDeferredWords(),\n-      interpreter\n-    );\n-    prefixToPreserveState.append(newlyDeferredFunctionImages);\n-\n-    prefixToPreserveState.append(\n-      EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-        interpreter,\n-        new DeferredToken(\n-          new TagToken(\n-            joiner.toString(),\n-            tagToken.getLineNumber(),\n-            tagToken.getStartPosition(),\n-            tagToken.getSymbols()\n-          ),\n-          eagerExpressionResult\n-            .getDeferredWords()\n-            .stream()\n-            .filter(\n-              word ->\n-                !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n-            )\n-            .collect(Collectors.toSet()),\n-          Collections.emptySet()\n-        )\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState(\n+      EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n+        eagerExpressionResult.getDeferredWords(),\n+        interpreter\n       )\n-    );\n+    )\n+    .withAllInFront(\n+        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+          interpreter,\n+          new DeferredToken(\n+            new TagToken(\n+              joiner.toString(),\n+              tagToken.getLineNumber(),\n+              tagToken.getStartPosition(),\n+              tagToken.getSymbols()\n+            ),\n+            eagerExpressionResult\n+              .getDeferredWords()\n+              .stream()\n+              .filter(\n+                word ->\n+                  !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n+              )\n+              .collect(Collectors.toSet()),\n+            Collections.emptySet()\n+          )\n+        )\n+      );\n     return (prefixToPreserveState + joiner.toString());\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex b09bbba..d9bf720 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -1,7 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n import com.google.common.annotations.Beta;\n-import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -11,14 +10,13 @@ import com.hubspot.jinjava.lib.tag.ElseTag;\n import com.hubspot.jinjava.lib.tag.IfTag;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n-import com.hubspot.jinjava.tree.parse.NoteToken;\n import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.HashSet;\n import java.util.Set;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n @Beta\n@@ -96,7 +94,6 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n     // We know this has to start as false otherwise IfTag would have chosen\n     // the first branch.\n     boolean definitelyExecuted = false;\n-    StringBuilder prefixToPreserveState = new StringBuilder();\n     StringBuilder sb = new StringBuilder();\n     sb.append(\n       getEagerImage(\n@@ -157,31 +154,11 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n       }\n       branchStart = branchEnd + 1;\n     }\n-    if (!bindingsToDefer.isEmpty()) {\n-      bindingsToDefer =\n-        bindingsToDefer\n-          .stream()\n-          .filter(key -> !(interpreter.getContext().get(key) instanceof DeferredValue))\n-          .collect(Collectors.toSet());\n-      if (!bindingsToDefer.isEmpty()) {\n-        prefixToPreserveState.append(\n-          EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-            interpreter,\n-            new DeferredToken(\n-              new NoteToken(\n-                \"\",\n-                interpreter.getLineNumber(),\n-                interpreter.getPosition(),\n-                interpreter.getConfig().getTokenScannerSymbols()\n-              ),\n-              bindingsToDefer\n-            )\n-          )\n-        );\n-      }\n-      return sb.toString();\n-    }\n-    return sb.toString();\n+    PrefixToPreserveState prefixToPreserveState = EagerReconstructionUtils.deferWordsAndReconstructReferences(\n+      interpreter,\n+      bindingsToDefer\n+    );\n+    return prefixToPreserveState + sb.toString();\n   }\n \n   private String evaluateBranch(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex 7e9d27a..ece9cd0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -18,6 +18,7 @@ import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -60,12 +61,14 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n       }\n       return (\n         initialPathSetter +\n-        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-          interpreter,\n-          new DeferredToken(\n-            tagToken,\n-            Collections.singleton(helper.get(0)),\n-            Collections.singleton(currentImportAlias)\n+        new PrefixToPreserveState(\n+          EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+            interpreter,\n+            new DeferredToken(\n+              tagToken,\n+              Collections.singleton(helper.get(0)),\n+              Collections.singleton(currentImportAlias)\n+            )\n           )\n         ) +\n         tagToken.getImage()\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\nindex fb1a3db..9a1b98a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\n@@ -11,6 +11,7 @@ import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n import java.util.Arrays;\n import java.util.Optional;\n@@ -86,34 +87,43 @@ public class EagerInlineSetTagStrategy extends EagerSetTagStrategy {\n       .add(\"=\")\n       .add(deferredResult)\n       .add(tagNode.getSymbols().getExpressionEndWithTag());\n-    String prefixToPreserveState =\n-      getPrefixToPreserveState(eagerExecutionResult, variables, interpreter) +\n-      EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-        interpreter,\n-        new DeferredToken(\n-          new TagToken(\n-            joiner.toString(),\n-            tagNode.getLineNumber(),\n-            tagNode.getStartPosition(),\n-            tagNode.getSymbols()\n-          ),\n-          eagerExecutionResult\n-            .getResult()\n-            .getDeferredWords()\n-            .stream()\n-            .filter(\n-              word ->\n-                !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n-            )\n-            .collect(Collectors.toSet()),\n-          Arrays.stream(variables).map(String::trim).collect(Collectors.toSet())\n+    PrefixToPreserveState prefixToPreserveState = getPrefixToPreserveState(\n+        eagerExecutionResult,\n+        variables,\n+        interpreter\n+      )\n+      .withAllInFront(\n+        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+          interpreter,\n+          new DeferredToken(\n+            new TagToken(\n+              joiner.toString(),\n+              tagNode.getLineNumber(),\n+              tagNode.getStartPosition(),\n+              tagNode.getSymbols()\n+            ),\n+            eagerExecutionResult\n+              .getResult()\n+              .getDeferredWords()\n+              .stream()\n+              .filter(\n+                word ->\n+                  !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n+              )\n+              .collect(Collectors.toSet()),\n+            Arrays.stream(variables).map(String::trim).collect(Collectors.toSet())\n+          )\n         )\n       );\n     String suffixToPreserveState = getSuffixToPreserveState(\n       String.join(\",\", Arrays.asList(variables)),\n       interpreter\n     );\n-    return Triple.of(prefixToPreserveState, joiner.toString(), suffixToPreserveState);\n+    return Triple.of(\n+      prefixToPreserveState.toString(),\n+      joiner.toString(),\n+      suffixToPreserveState\n+    );\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerMacroTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerMacroTag.java\nnew file mode 100644\nindex 0000000..5308219\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerMacroTag.java\n@@ -0,0 +1,31 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.google.common.annotations.Beta;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.fn.MacroFunction;\n+import com.hubspot.jinjava.lib.fn.eager.EagerMacroFunction;\n+import com.hubspot.jinjava.lib.tag.MacroTag;\n+import com.hubspot.jinjava.tree.TagNode;\n+import java.util.LinkedHashMap;\n+\n+@Beta\n+public class EagerMacroTag extends MacroTag {\n+\n+  @Override\n+  protected MacroFunction constructMacroFunction(\n+    TagNode tagNode,\n+    JinjavaInterpreter interpreter,\n+    String name,\n+    LinkedHashMap<String, Object> argNamesWithDefaults\n+  ) {\n+    return new EagerMacroFunction(\n+      tagNode.getChildren(),\n+      name,\n+      argNamesWithDefaults,\n+      false,\n+      interpreter.getContext(),\n+      interpreter.getLineNumber(),\n+      interpreter.getPosition()\n+    );\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\nindex 796aaf9..0125e99 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n@@ -10,6 +10,7 @@ import com.hubspot.jinjava.util.EagerContextWatcher;\n import com.hubspot.jinjava.util.EagerExpressionResolver;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n@@ -63,9 +64,12 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n         .withTakeNewValue(true)\n         .build()\n     );\n-    StringBuilder prefixToPreserveState = new StringBuilder();\n-    if (interpreter.getContext().isDeferredExecutionMode()) {\n-      prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() ||\n+      interpreter.getContext().isDeferredExecutionMode()\n+    ) {\n+      prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n     } else {\n       interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n     }\n@@ -83,8 +87,8 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n         )\n       );\n     }\n-    prefixToPreserveState.append(\n-      EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+    prefixToPreserveState.putAll(\n+      EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n         eagerExecutionResult.getResult().getDeferredWords(),\n         interpreter\n       )\n@@ -99,7 +103,7 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n       .add(tagToken.getTagName())\n       .add(eagerExecutionResult.getResult().toString().trim())\n       .add(tagToken.getSymbols().getExpressionEndWithTag());\n-    prefixToPreserveState.append(\n+    prefixToPreserveState.withAllInFront(\n       EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n         interpreter,\n         new DeferredToken(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\nindex f442ae6..2c04c1d 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n@@ -5,6 +5,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n@@ -115,19 +116,22 @@ public abstract class EagerSetTagStrategy {\n     JinjavaInterpreter interpreter\n   );\n \n-  protected String getPrefixToPreserveState(\n+  protected PrefixToPreserveState getPrefixToPreserveState(\n     EagerExecutionResult eagerExecutionResult,\n     String[] variables,\n     JinjavaInterpreter interpreter\n   ) {\n-    StringBuilder prefixToPreserveState = new StringBuilder();\n-    if (interpreter.getContext().isDeferredExecutionMode()) {\n-      prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+    if (\n+      !eagerExecutionResult.getResult().isFullyResolved() ||\n+      interpreter.getContext().isDeferredExecutionMode()\n+    ) {\n+      prefixToPreserveState.putAll(eagerExecutionResult.getPrefixToPreserveState());\n     } else {\n       interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n     }\n-    prefixToPreserveState.append(\n-      EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+    prefixToPreserveState.putAll(\n+      EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n         Stream\n           .concat(\n             eagerExecutionResult.getResult().getDeferredWords().stream(),\n@@ -137,7 +141,7 @@ public abstract class EagerSetTagStrategy {\n         interpreter\n       )\n     );\n-    return prefixToPreserveState.toString();\n+    return prefixToPreserveState;\n   }\n \n   protected String getSuffixToPreserveState(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\nindex 25da3e7..ea23258 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n@@ -19,6 +19,7 @@ import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n+import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n@@ -216,11 +217,14 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n     }\n     joiner.add(tagToken.getSymbols().getExpressionEndWithTag());\n \n-    String prefixToPreserveState =\n-      EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+    PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+    prefixToPreserveState.putAll(\n+      EagerReconstructionUtils.reconstructFromContextBeforeDeferringAsMap(\n         eagerExpressionResult.getDeferredWords(),\n         interpreter\n-      ) +\n+      )\n+    );\n+    prefixToPreserveState.withAllInFront(\n       EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n         interpreter,\n         new DeferredToken(\n@@ -239,7 +243,8 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n             )\n             .collect(Collectors.toSet())\n         )\n-      );\n+      )\n+    );\n \n     return (prefixToPreserveState + joiner.toString());\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\nindex b35718b..6793c12 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\n@@ -17,6 +17,7 @@ import com.hubspot.jinjava.lib.tag.FromTag;\n import com.hubspot.jinjava.lib.tag.IfTag;\n import com.hubspot.jinjava.lib.tag.ImportTag;\n import com.hubspot.jinjava.lib.tag.IncludeTag;\n+import com.hubspot.jinjava.lib.tag.MacroTag;\n import com.hubspot.jinjava.lib.tag.PrintTag;\n import com.hubspot.jinjava.lib.tag.RawTag;\n import com.hubspot.jinjava.lib.tag.SetTag;\n@@ -71,6 +72,9 @@ public class EagerTagFactory {\n           return Optional.of((EagerTagDecorator<T>) decorator);\n         }\n       }\n+      if (tag instanceof MacroTag) {\n+        return Optional.of(new EagerGenericTag<>((T) new EagerMacroTag()));\n+      }\n       return Optional.of(new EagerGenericTag<>(tag));\n     } catch (NoSuchMethodException e) {\n       return Optional.empty();\ndiff --git a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\nindex 66d4bdc..0bd5bee 100644\n--- a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n@@ -3,25 +3,19 @@ package com.hubspot.jinjava.util;\n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n-import com.hubspot.jinjava.el.ext.AbstractCallableMethod;\n import com.hubspot.jinjava.interpret.Context;\n-import com.hubspot.jinjava.interpret.DeferredLazyReference;\n-import com.hubspot.jinjava.interpret.DeferredLazyReferenceSource;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.SetTag;\n-import com.hubspot.jinjava.lib.tag.eager.DeferredToken;\n import com.hubspot.jinjava.tree.ExpressionNode;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.TextNode;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.Set;\n import java.util.StringJoiner;\n@@ -83,120 +77,9 @@ public class DeferredValueUtils {\n   }\n \n   public static Set<String> findAndMarkDeferredProperties(Context context) {\n-    return findAndMarkDeferredProperties(context, null);\n-  }\n-\n-  public static Set<String> findAndMarkDeferredProperties(\n-    Context context,\n-    DeferredToken deferredToken\n-  ) {\n     String templateSource = rebuildTemplateForNodes(context.getDeferredNodes());\n     Set<String> deferredProps = getPropertiesUsedInDeferredNodes(context, templateSource);\n     Set<String> setProps = getPropertiesSetInDeferredNodes(templateSource);\n-    Set<String> referentialDefers = new HashSet<>();\n-    if (deferredToken != null) {\n-      if (\n-        deferredToken.getMacroStack() == null ||\n-        deferredToken.getMacroStack() == context.getMacroStack()\n-      ) {\n-        deferredProps.addAll(\n-          getPropertiesUsedInDeferredNodes(\n-            context,\n-            rebuildTemplateForEagerTagTokens(deferredToken, true),\n-            false\n-          )\n-        );\n-        referentialDefers.addAll(\n-          getPropertiesUsedInDeferredNodes(\n-            context,\n-            rebuildTemplateForEagerTagTokens(deferredToken, false),\n-            true\n-          )\n-        );\n-      } else {\n-        List<String> macroArgs = deferredToken\n-          .getMacroStack()\n-          .peek()\n-          .map(\n-            name ->\n-              Optional\n-                .ofNullable(context.getGlobalMacro(name))\n-                .map(AbstractCallableMethod::getArguments)\n-                .orElseGet(\n-                  () ->\n-                    context\n-                      .getLocalMacro(name)\n-                      .map(AbstractCallableMethod::getArguments)\n-                      .orElse(Collections.emptyList())\n-                )\n-          )\n-          .orElse(Collections.emptyList());\n-        // Filter out macro args because we will want them to be deferred on the higher-level contexts later\n-        referentialDefers.addAll(\n-          getPropertiesUsedInDeferredNodes(\n-              context,\n-              rebuildTemplateForEagerTagTokens(deferredToken, false),\n-              true\n-            )\n-            .stream()\n-            .filter(prop -> !macroArgs.contains(prop))\n-            .collect(Collectors.toSet())\n-        );\n-      }\n-    }\n-    deferredProps.addAll(referentialDefers);\n-    referentialDefers.forEach(\n-      word -> {\n-        Object wordValue = context.get(word);\n-\n-        if (\n-          !(wordValue instanceof DeferredValue) &&\n-          !EagerExpressionResolver.isPrimitive(wordValue)\n-        ) {\n-          DeferredLazyReference deferredLazyReference = DeferredLazyReference.instance(\n-            context,\n-            word\n-          );\n-          Context temp = context;\n-          Set<Entry<String, Object>> matchingEntries = new HashSet<>();\n-          while (temp.getParent() != null) {\n-            temp\n-              .getScope()\n-              .entrySet()\n-              .stream()\n-              .filter(entry -> entry.getValue() == wordValue)\n-              .forEach(\n-                entry -> {\n-                  matchingEntries.add(entry);\n-                  deferredLazyReference\n-                    .getOriginalValue()\n-                    .setReferenceKey(entry.getKey());\n-                }\n-              );\n-            temp = temp.getParent();\n-          }\n-          if (matchingEntries.size() > 1) { // at least one duplicate\n-            matchingEntries.forEach(\n-              entry -> {\n-                if (\n-                  deferredLazyReference\n-                    .getOriginalValue()\n-                    .getReferenceKey()\n-                    .equals(entry.getKey())\n-                ) {\n-                  Object val = entry.getValue();\n-                  context.put(entry.getKey(), DeferredLazyReferenceSource.instance(val));\n-                  entry.setValue(DeferredLazyReferenceSource.instance(val));\n-                } else {\n-                  entry.setValue(deferredLazyReference);\n-                }\n-              }\n-            );\n-          }\n-        }\n-      }\n-    );\n-\n     markDeferredProperties(context, Sets.union(deferredProps, setProps));\n     return deferredProps;\n   }\n@@ -237,8 +120,9 @@ public class DeferredValueUtils {\n       .filter(prop -> !context.getMetaContextVariables().contains(prop))\n       .forEach(\n         prop -> {\n-          if (context.get(prop) != null) {\n-            context.put(prop, DeferredValue.instance(context.get(prop)));\n+          Object value = context.get(prop);\n+          if (value != null) {\n+            context.put(prop, DeferredValue.instance(value));\n           } else {\n             //Handle set props\n             context.put(prop, DeferredValue.instance());\n@@ -269,21 +153,6 @@ public class DeferredValueUtils {\n     return joiner.toString();\n   }\n \n-  private static String rebuildTemplateForEagerTagTokens(\n-    DeferredToken deferredToken,\n-    boolean fromSetWords\n-  ) {\n-    StringJoiner joiner = new StringJoiner(\" \");\n-\n-    (\n-      fromSetWords\n-        ? deferredToken.getSetDeferredWords().stream()\n-        : deferredToken.getUsedDeferredWords().stream()\n-    ).map(h -> h + \".eager.helper\")\n-      .forEach(joiner::add);\n-    return joiner.toString();\n-  }\n-\n   private static Set<String> findUsedProperties(String templateSource) {\n     Matcher matcher = TEMPLATE_TAG_PATTERN.matcher(templateSource);\n     Set<String> tags = Sets.newHashSet();\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java b/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java\nindex 41b71fb..25b1e9f 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java\n@@ -192,30 +192,33 @@ public class EagerContextWatcher {\n     Set<String> ignoredKeys,\n     EagerExecutionResult eagerExecutionResult\n   ) {\n-    eagerExecutionResult\n-      .getSpeculativeBindings()\n-      .putAll(\n-        interpreter\n-          .getContext()\n-          .getScope()\n-          .entrySet()\n-          .stream()\n-          .filter(\n-            entry ->\n-              entry.getValue() instanceof DeferredLazyReferenceSource &&\n-              !(((DeferredLazyReferenceSource) entry.getValue()).isReconstructed())\n-          )\n-          .peek(\n-            entry ->\n-              ((DeferredLazyReferenceSource) entry.getValue()).setReconstructed(true)\n-          )\n-          .collect(\n-            Collectors.toMap(\n-              Entry::getKey,\n-              entry -> ((DeferredLazyReferenceSource) entry.getValue()).getOriginalValue()\n+    if (!eagerChildContextConfig.takeNewValue) {\n+      eagerExecutionResult\n+        .getSpeculativeBindings()\n+        .putAll(\n+          interpreter\n+            .getContext()\n+            .getScope()\n+            .entrySet()\n+            .stream()\n+            .filter(\n+              entry ->\n+                entry.getValue() instanceof DeferredLazyReferenceSource &&\n+                !(((DeferredLazyReferenceSource) entry.getValue()).isReconstructed())\n             )\n-          )\n-      );\n+            .peek(\n+              entry ->\n+                ((DeferredLazyReferenceSource) entry.getValue()).setReconstructed(true)\n+            )\n+            .collect(\n+              Collectors.toMap(\n+                Entry::getKey,\n+                entry ->\n+                  ((DeferredLazyReferenceSource) entry.getValue()).getOriginalValue()\n+              )\n+            )\n+        );\n+    }\n     return eagerExecutionResult\n       .getSpeculativeBindings()\n       .entrySet()\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\nindex a7d00d3..169a72e 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n@@ -8,6 +8,7 @@ import com.hubspot.jinjava.interpret.Context.Library;\n import com.hubspot.jinjava.interpret.DeferredLazyReference;\n import com.hubspot.jinjava.interpret.DeferredLazyReferenceSource;\n import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.DeferredValueShadow;\n import com.hubspot.jinjava.interpret.DisabledException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n@@ -23,6 +24,7 @@ import com.hubspot.jinjava.mode.EagerExecutionMode;\n import com.hubspot.jinjava.objects.serialization.PyishBlockSetSerializable;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.parse.NoteToken;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.EagerContextWatcher.EagerChildContextConfig;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n@@ -30,6 +32,7 @@ import java.util.AbstractMap;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Objects;\n@@ -113,11 +116,27 @@ public class EagerReconstructionUtils {\n     Set<String> deferredWords,\n     JinjavaInterpreter interpreter\n   ) {\n-    return (\n-      reconstructMacroFunctionsBeforeDeferring(deferredWords, interpreter) +\n-      reconstructBlockSetVariablesBeforeDeferring(deferredWords, interpreter) +\n+    return String.join(\n+      \"\",\n+      reconstructFromContextBeforeDeferringAsMap(deferredWords, interpreter).values()\n+    );\n+  }\n+\n+  public static Map<String, String> reconstructFromContextBeforeDeferringAsMap(\n+    Set<String> deferredWords,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    Map<String, String> reconstructedValues = new LinkedHashMap<>();\n+    reconstructedValues.putAll(\n+      reconstructMacroFunctionsBeforeDeferring(deferredWords, interpreter)\n+    );\n+    reconstructedValues.putAll(\n+      reconstructBlockSetVariablesBeforeDeferring(deferredWords, interpreter)\n+    );\n+    reconstructedValues.putAll(\n       reconstructInlineSetVariablesBeforeDeferring(deferredWords, interpreter)\n     );\n+    return reconstructedValues;\n   }\n \n   /**\n@@ -131,7 +150,7 @@ public class EagerReconstructionUtils {\n    * @return A jinjava-syntax string that is the images of any macro functions that must\n    *  be evaluated at a later time.\n    */\n-  private static String reconstructMacroFunctionsBeforeDeferring(\n+  private static Map<String, String> reconstructMacroFunctionsBeforeDeferring(\n     Set<String> deferredWords,\n     JinjavaInterpreter interpreter\n   ) {\n@@ -152,34 +171,37 @@ public class EagerReconstructionUtils {\n       }\n     }\n \n-    String result = macroFunctions\n+    Map<String, String> reconstructedMacros = macroFunctions\n       .entrySet()\n       .stream()\n       .peek(entry -> toRemove.add(entry.getKey()))\n       .peek(entry -> entry.getValue().setDeferred(true))\n       .map(\n         entry ->\n-          EagerContextWatcher.executeInChildContext(\n-            eagerInterpreter ->\n-              EagerExpressionResult.fromString(\n-                new EagerMacroFunction(entry.getKey(), entry.getValue(), interpreter)\n-                .reconstructImage()\n-              ),\n-            interpreter,\n-            EagerContextWatcher\n-              .EagerChildContextConfig.newBuilder()\n-              .withForceDeferredExecutionMode(true)\n-              .build()\n+          new AbstractMap.SimpleImmutableEntry<>(\n+            entry.getKey(),\n+            EagerContextWatcher.executeInChildContext(\n+              eagerInterpreter ->\n+                EagerExpressionResult.fromString(\n+                  ((EagerMacroFunction) entry.getValue()).reconstructImage(entry.getKey())\n+                ),\n+              interpreter,\n+              EagerContextWatcher\n+                .EagerChildContextConfig.newBuilder()\n+                .withForceDeferredExecutionMode(true)\n+                .build()\n+            )\n           )\n       )\n-      .map(EagerExecutionResult::asTemplateString)\n-      .collect(Collectors.joining());\n+      .collect(\n+        Collectors.toMap(Entry::getKey, entry -> entry.getValue().asTemplateString())\n+      );\n     // Remove macro functions from the set because they've been fully processed now.\n     deferredWords.removeAll(toRemove);\n-    return result;\n+    return reconstructedMacros;\n   }\n \n-  private static String reconstructBlockSetVariablesBeforeDeferring(\n+  private static Map<String, String> reconstructBlockSetVariablesBeforeDeferring(\n     Set<String> deferredWords,\n     JinjavaInterpreter interpreter\n   ) {\n@@ -208,7 +230,7 @@ public class EagerReconstructionUtils {\n           .collect(Collectors.toSet());\n     }\n     if (filteredDeferredWords.isEmpty()) {\n-      return \"\";\n+      return Collections.emptyMap();\n     }\n     Set<String> metaContextVariables = interpreter.getContext().getMetaContextVariables();\n     Map<String, PyishBlockSetSerializable> blockSetMap = new HashMap<>();\n@@ -244,24 +266,27 @@ public class EagerReconstructionUtils {\n           );\n         }\n       );\n-    String blockSetTags = blockSetMap\n+    Map<String, String> reconstructedBlockSetVars = blockSetMap\n       .entrySet()\n       .stream()\n       .map(\n         entry ->\n-          buildBlockSetTag(\n+          new AbstractMap.SimpleImmutableEntry<>(\n             entry.getKey(),\n-            entry.getValue().getBlockSetBody(),\n-            interpreter,\n-            false\n+            buildBlockSetTag(\n+              entry.getKey(),\n+              entry.getValue().getBlockSetBody(),\n+              interpreter,\n+              false\n+            )\n           )\n       )\n-      .collect(Collectors.joining());\n-    deferredWords.removeAll(blockSetMap.keySet());\n-    return blockSetTags;\n+      .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+    deferredWords.removeAll(reconstructedBlockSetVars.keySet());\n+    return reconstructedBlockSetVars;\n   }\n \n-  private static String reconstructInlineSetVariablesBeforeDeferring(\n+  private static Map<String, String> reconstructInlineSetVariablesBeforeDeferring(\n     Set<String> deferredWords,\n     JinjavaInterpreter interpreter\n   ) {\n@@ -290,7 +315,7 @@ public class EagerReconstructionUtils {\n           .collect(Collectors.toSet());\n     }\n     if (filteredDeferredWords.isEmpty()) {\n-      return \"\";\n+      return Collections.emptyMap();\n     }\n     Set<String> metaContextVariables = interpreter.getContext().getMetaContextVariables();\n     Map<String, String> deferredMap = new HashMap<>();\n@@ -323,7 +348,20 @@ public class EagerReconstructionUtils {\n           );\n         }\n       );\n-    return buildSetTag(deferredMap, interpreter, false);\n+    return deferredMap\n+      .entrySet()\n+      .stream()\n+      .collect(\n+        Collectors.toMap(\n+          Entry::getKey,\n+          entry ->\n+            buildSetTag(\n+              Collections.singletonMap(entry.getKey(), entry.getValue()),\n+              interpreter,\n+              false\n+            )\n+        )\n+      );\n   }\n \n   /**\n@@ -379,18 +417,20 @@ public class EagerReconstructionUtils {\n     // Don't defer if we're sticking with the new value\n     if (registerDeferredToken) {\n       return (\n-        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-          interpreter,\n-          new DeferredToken(\n-            new TagToken(\n-              image,\n-              // TODO this line number won't be accurate, currently doesn't matter.\n-              interpreter.getLineNumber(),\n-              interpreter.getPosition(),\n-              interpreter.getConfig().getTokenScannerSymbols()\n-            ),\n-            Collections.emptySet(),\n-            deferredValuesToSet.keySet()\n+        new PrefixToPreserveState(\n+          EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+            interpreter,\n+            new DeferredToken(\n+              new TagToken(\n+                image,\n+                // TODO this line number won't be accurate, currently doesn't matter.\n+                interpreter.getLineNumber(),\n+                interpreter.getPosition(),\n+                interpreter.getConfig().getTokenScannerSymbols()\n+              ),\n+              Collections.emptySet(),\n+              deferredValuesToSet.keySet()\n+            )\n           )\n         ) +\n         image\n@@ -442,17 +482,19 @@ public class EagerReconstructionUtils {\n     String image = blockSetTokenBuilder + value + endTokenBuilder;\n     if (registerDeferredToken) {\n       return (\n-        EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n-          interpreter,\n-          new DeferredToken(\n-            new TagToken(\n-              blockSetTokenBuilder.toString(),\n-              interpreter.getLineNumber(),\n-              interpreter.getPosition(),\n-              interpreter.getConfig().getTokenScannerSymbols()\n-            ),\n-            Collections.emptySet(),\n-            Collections.singleton(name)\n+        new PrefixToPreserveState(\n+          EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+            interpreter,\n+            new DeferredToken(\n+              new TagToken(\n+                blockSetTokenBuilder.toString(),\n+                interpreter.getLineNumber(),\n+                interpreter.getPosition(),\n+                interpreter.getConfig().getTokenScannerSymbols()\n+              ),\n+              Collections.emptySet(),\n+              Collections.singleton(name)\n+            )\n           )\n         ) +\n         image\n@@ -620,23 +662,55 @@ public class EagerReconstructionUtils {\n       .orElse(false);\n   }\n \n-  public static String handleDeferredTokenAndReconstructReferences(\n+  public static PrefixToPreserveState deferWordsAndReconstructReferences(\n+    JinjavaInterpreter interpreter,\n+    Set<String> wordsToDefer\n+  ) {\n+    if (!wordsToDefer.isEmpty()) {\n+      wordsToDefer =\n+        wordsToDefer\n+          .stream()\n+          .filter(key -> !(interpreter.getContext().get(key) instanceof DeferredValue))\n+          .collect(Collectors.toSet());\n+      PrefixToPreserveState prefixToPreserveState = new PrefixToPreserveState();\n+      if (!wordsToDefer.isEmpty()) {\n+        prefixToPreserveState.withAllInFront(\n+          handleDeferredTokenAndReconstructReferences(\n+            interpreter,\n+            new DeferredToken(\n+              new NoteToken(\n+                \"\",\n+                interpreter.getLineNumber(),\n+                interpreter.getPosition(),\n+                interpreter.getConfig().getTokenScannerSymbols()\n+              ),\n+              wordsToDefer\n+            )\n+          )\n+        );\n+      }\n+      return prefixToPreserveState;\n+    }\n+    return new PrefixToPreserveState();\n+  }\n+\n+  public static Map<String, String> handleDeferredTokenAndReconstructReferences(\n     JinjavaInterpreter interpreter,\n     DeferredToken deferredToken\n   ) {\n-    interpreter.getContext().handleDeferredToken(deferredToken);\n+    deferredToken.addTo(interpreter.getContext());\n     return reconstructDeferredReferences(\n       interpreter,\n       deferredToken.getUsedDeferredWords()\n     );\n   }\n \n-  public static String reconstructDeferredReferences(\n+  public static Map<String, String> reconstructDeferredReferences(\n     JinjavaInterpreter interpreter,\n     Set<String> usedDeferredWords\n   ) {\n-    return (\n-      buildSetTag(\n+    return Stream\n+      .concat(\n         interpreter\n           .getContext()\n           .getScope()\n@@ -650,20 +724,7 @@ public class EagerReconstructionUtils {\n           .peek(\n             entry ->\n               ((DeferredLazyReferenceSource) entry.getValue()).setReconstructed(true)\n-          )\n-          .collect(\n-            Collectors.toMap(\n-              Entry::getKey,\n-              entry ->\n-                PyishObjectMapper.getAsPyishString(\n-                  ((DeferredLazyReferenceSource) entry.getValue()).getOriginalValue()\n-                )\n-            )\n           ),\n-        interpreter,\n-        false\n-      ) +\n-      buildSetTag(\n         usedDeferredWords\n           .stream()\n           .map(w -> w.split(\"\\\\.\", 2)[0])\n@@ -675,18 +736,47 @@ public class EagerReconstructionUtils {\n               )\n           )\n           .filter(entry -> entry.getValue() instanceof DeferredLazyReference)\n-          .collect(\n-            Collectors.toMap(\n-              Entry::getKey,\n-              entry ->\n+      )\n+      .collect(\n+        Collectors.toMap(\n+          Entry::getKey,\n+          entry ->\n+            buildSetTag(\n+              Collections.singletonMap(\n+                entry.getKey(),\n                 PyishObjectMapper.getAsPyishString(\n-                  ((DeferredLazyReference) entry.getValue()).getOriginalValue()\n+                  ((DeferredValue) entry.getValue()).getOriginalValue()\n                 )\n+              ),\n+              interpreter,\n+              false\n             )\n-          ),\n-        interpreter,\n-        false\n-      )\n+        )\n+      );\n+  }\n+\n+  /**\n+   * Reset variables to what they were before running the latest execution represented by {@param eagerExecutionResult}.\n+   * Then re-defer those variables and reconstruct deferred lazy references to them.\n+   * This method is needed in 2 circumstances:\n+   * <p>\n+   *   * When doing some eager execution and then needing to repeat the same execution in deferred execution mode.\n+   *   <p>\n+   *   * When rendering logic which takes place in its own child scope (for tag, macro function, set block) and there\n+   *   speculative bindings. These must be deferred and the execution must run again so they don't get reconstructed\n+   *   within the child scope, and can instead be reconstructed in their original scopes.\n+   * @param interpreter The JinjavaInterpreter\n+   * @param eagerExecutionResult The execution result which contains information about which bindings were modified\n+   *                             during the execution.\n+   * @return\n+   */\n+  public static PrefixToPreserveState resetAndDeferSpeculativeBindings(\n+    JinjavaInterpreter interpreter,\n+    EagerExecutionResult eagerExecutionResult\n+  ) {\n+    return deferWordsAndReconstructReferences(\n+      interpreter,\n+      resetSpeculativeBindings(interpreter, eagerExecutionResult)\n     );\n   }\n \n@@ -696,7 +786,20 @@ public class EagerReconstructionUtils {\n   ) {\n     result\n       .getSpeculativeBindings()\n-      .forEach((k, v) -> interpreter.getContext().replace(k, v));\n+      .forEach((k, v) -> replace(interpreter.getContext(), k, v));\n     return result.getSpeculativeBindings().keySet();\n   }\n+\n+  private static void replace(Context context, String k, Object v) {\n+    if (context == null) {\n+      return;\n+    }\n+    Object replaced = context.getScope().replace(k, v);\n+    if (replaced == null) {\n+      replace(context.getParent(), k, v);\n+    } else if (replaced instanceof DeferredValueShadow) {\n+      context.getScope().remove(k);\n+      replace(context.getParent(), k, v);\n+    }\n+  }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/util/PrefixToPreserveState.java b/src/main/java/com/hubspot/jinjava/util/PrefixToPreserveState.java\nnew file mode 100644\nindex 0000000..cf9e4d2\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/util/PrefixToPreserveState.java\n@@ -0,0 +1,41 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.collect.ForwardingMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Beta\n+public class PrefixToPreserveState extends ForwardingMap<String, String> {\n+  private Map<String, String> reconstructedValues;\n+\n+  public PrefixToPreserveState() {\n+    reconstructedValues = new LinkedHashMap<>();\n+  }\n+\n+  public PrefixToPreserveState(Map<String, String> reconstructedValues) {\n+    this.reconstructedValues = reconstructedValues;\n+  }\n+\n+  @Override\n+  protected Map<String, String> delegate() {\n+    return reconstructedValues;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.join(\"\", reconstructedValues.values());\n+  }\n+\n+  public PrefixToPreserveState withAllInFront(Map<String, String> toInsert) {\n+    Map<String, String> newMap = new LinkedHashMap<>(toInsert);\n+    reconstructedValues.forEach(newMap::putIfAbsent);\n+    reconstructedValues = newMap;\n+    return this;\n+  }\n+\n+  public PrefixToPreserveState withAll(Map<String, String> toPut) {\n+    putAll(toPut);\n+    return this;\n+  }\n+}\ndiff --git a/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.expected.jinja b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.expected.jinja\nnew file mode 100644\nindex 0000000..f7050f2\n--- /dev/null\n+++ b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.expected.jinja\n@@ -0,0 +1,1 @@\n+['a', 'b', 'c', 'd']\ndiff --git a/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja\nnew file mode 100644\nindex 0000000..cb6121e\n--- /dev/null\n+++ b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja\n@@ -0,0 +1,15 @@\n+{% set my_list = ['a'] %}{% if deferred %}\n+{% set __macro_append_stuff_153654787_temp_variable_0__ %}\n+{% set __macro_foo_97643642_temp_variable_1__ %}\n+{% do my_list.append('b') %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_1__ }}\n+{% set __macro_foo_97643642_temp_variable_2__ %}\n+{% do my_list.append('c') %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_2__ }}\n+{% endset %}{{ __macro_append_stuff_153654787_temp_variable_0__ }}\n+{% endif %}\n+\n+{% do my_list.append('d') %}\n+\n+\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.jinja b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.jinja\nnew file mode 100644\nindex 0000000..c83d588\n--- /dev/null\n+++ b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.jinja\n@@ -0,0 +1,17 @@\n+{% macro foo(var) %}\n+{% do my_list.append(var) %}\n+{% endmacro %}\n+\n+{% macro append_stuff() %}\n+{{ foo('b') }}\n+{{ foo('c') }}\n+{% endmacro %}\n+\n+{% set my_list = [] %}\n+{{ foo('a') }}\n+{% if deferred %}\n+{{ append_stuff() }}\n+{% endif %}\n+{{ foo('d') }}\n+\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja b/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja\nnew file mode 100644\nindex 0000000..52afb22\n--- /dev/null\n+++ b/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja\n@@ -0,0 +1,7 @@\n+{% set my_list = ['a'] %}{% set __macro_foo_97643642_temp_variable_0__ %}\n+a\n+{% if deferred %}\n+{% do my_list.append('b') %}b\n+{% endif %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_0__ }}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/doesnt-double-append-in-deferred-macro.jinja b/src/test/resources/eager/doesnt-double-append-in-deferred-macro.jinja\nnew file mode 100644\nindex 0000000..73d7137\n--- /dev/null\n+++ b/src/test/resources/eager/doesnt-double-append-in-deferred-macro.jinja\n@@ -0,0 +1,9 @@\n+{% set my_list = [] %}\n+{% macro foo() %}\n+{% do my_list.append('a') %}a\n+{% if deferred %}\n+{% do my_list.append('b') %}b\n+{% endif %}\n+{% endmacro %}\n+{{ foo() }}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja b/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja\nnew file mode 100644\nindex 0000000..34d90a9\n--- /dev/null\n+++ b/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja\n@@ -0,0 +1,7 @@\n+{% set my_list = ['a'] %}{% set foo %}\n+a\n+{% if deferred %}\n+{% do my_list.append('b') %}b\n+{% endif %}\n+{% endset %}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/doesnt-double-append-in-deferred-set.jinja b/src/test/resources/eager/doesnt-double-append-in-deferred-set.jinja\nnew file mode 100644\nindex 0000000..ec70ff1\n--- /dev/null\n+++ b/src/test/resources/eager/doesnt-double-append-in-deferred-set.jinja\n@@ -0,0 +1,8 @@\n+{% set my_list = [] %}\n+{% set foo %}\n+{% do my_list.append('a') %}a\n+{% if deferred %}\n+{% do my_list.append('b') %}b\n+{% endif %}\n+{% endset %}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja b/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja\nnew file mode 100644\nindex 0000000..daa671e\n--- /dev/null\n+++ b/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja\n@@ -0,0 +1,13 @@\n+{% set my_list = [] %}{% set __macro_append_stuff_153654787_temp_variable_0__ %}\n+{% if deferred %}\n+\n+{% set __macro_foo_97643642_temp_variable_0__ %}\n+{% do my_list.append('b') %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_0__ }}\n+{% set __macro_foo_97643642_temp_variable_1__ %}\n+{% do my_list.append('c') %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_1__ }}\n+{% endif %}\n+{% endset %}{{ __macro_append_stuff_153654787_temp_variable_0__ }}\n+\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/reconstructs-deferred-variable-eventually.jinja b/src/test/resources/eager/reconstructs-deferred-variable-eventually.jinja\nnew file mode 100644\nindex 0000000..8379c8f\n--- /dev/null\n+++ b/src/test/resources/eager/reconstructs-deferred-variable-eventually.jinja\n@@ -0,0 +1,16 @@\n+{% macro foo(var) %}\n+{% do my_list.append(var) %}\n+{% endmacro %}\n+\n+{% macro append_stuff() %}\n+{% if deferred %}\n+\n+{{ foo('b') }}\n+{{ foo('c') }}\n+{% endif %}\n+{% endmacro %}\n+\n+{% set my_list = [] %}\n+{{ append_stuff() }}\n+\n+{{ my_list }}\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 6f8e950..aa7b1f7 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1288,4 +1288,40 @@ public class EagerTest {\n       \"keeps-macro-modifications-in-scope.expected\"\n     );\n   }\n+\n+  @Test\n+  public void itDoesNotReconstructVariableInWrongScope() {\n+    expectedTemplateInterpreter.assertExpectedOutputNonIdempotent(\n+      \"does-not-reconstruct-variable-in-wrong-scope\"\n+    );\n+  }\n+\n+  @Test\n+  public void itDoesNotReconstructVariableInWrongScopeSecondPass() {\n+    interpreter.getContext().put(\"deferred\", true);\n+    expectedTemplateInterpreter.assertExpectedNonEagerOutput(\n+      \"does-not-reconstruct-variable-in-wrong-scope.expected\"\n+    );\n+  }\n+\n+  @Test\n+  public void itReconstructsDeferredVariableEventually() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\n+      \"reconstructs-deferred-variable-eventually\"\n+    );\n+  }\n+\n+  @Test\n+  public void itDoesntDoubleAppendInDeferredSet() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\n+      \"doesnt-double-append-in-deferred-set\"\n+    );\n+  }\n+\n+  @Test\n+  public void itDoesntDoubleAppendInDeferredMacro() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\n+      \"doesnt-double-append-in-deferred-macro\"\n+    );\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java\nindex 208c5e6..8cf4d18 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunctionTest.java\n@@ -49,13 +49,8 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n   public void itReconstructsImage() {\n     String name = \"foo\";\n     String code = \"{% macro foo(bar) %}It's: {{ bar }}{% endmacro %}\";\n-    MacroFunction macroFunction = makeMacroFunction(name, code);\n-    EagerMacroFunction eagerMacroFunction = new EagerMacroFunction(\n-      name,\n-      macroFunction,\n-      interpreter\n-    );\n-    assertThat(eagerMacroFunction.reconstructImage()).isEqualTo(code);\n+    EagerMacroFunction eagerMacroFunction = makeMacroFunction(name, code);\n+    assertThat(eagerMacroFunction.reconstructImage(name)).isEqualTo(code);\n   }\n \n   @Test\n@@ -63,13 +58,8 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n     context.put(\"foobar\", \"resolved\");\n     String name = \"foo\";\n     String code = \"{% macro foo(bar) %}{{ foobar }} and {{ bar }}{% endmacro %}\";\n-    MacroFunction macroFunction = makeMacroFunction(name, code);\n-    EagerMacroFunction eagerMacroFunction = new EagerMacroFunction(\n-      name,\n-      macroFunction,\n-      interpreter\n-    );\n-    assertThat(eagerMacroFunction.reconstructImage())\n+    EagerMacroFunction eagerMacroFunction = makeMacroFunction(name, code);\n+    assertThat(eagerMacroFunction.reconstructImage(name))\n       .isEqualTo(\"{% macro foo(bar) %}resolved and {{ bar }}{% endmacro %}\");\n   }\n \n@@ -78,16 +68,11 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n     String name = \"foo\";\n     String fullName = \"local.\" + name;\n     String codeFormat = \"{%% macro %s(bar) %%}It's: {{ bar }}{%% endmacro %%}\";\n-    MacroFunction macroFunction = makeMacroFunction(\n+    EagerMacroFunction eagerMacroFunction = makeMacroFunction(\n       name,\n       String.format(codeFormat, name)\n     );\n-    EagerMacroFunction eagerMacroFunction = new EagerMacroFunction(\n-      fullName,\n-      macroFunction,\n-      interpreter\n-    );\n-    assertThat(eagerMacroFunction.reconstructImage())\n+    assertThat(eagerMacroFunction.reconstructImage(fullName))\n       .isEqualTo(String.format(codeFormat, fullName));\n   }\n \n@@ -95,27 +80,23 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n   public void itReconstructsImageWithNamedParams() {\n     String name = \"foo\";\n     String code = \"{% macro foo(bar, baz=0) %}It's: {{ bar }}, {{ baz }}{% endmacro %}\";\n-    MacroFunction macroFunction = makeMacroFunction(name, code);\n-    EagerMacroFunction eagerMacroFunction = new EagerMacroFunction(\n-      name,\n-      macroFunction,\n-      interpreter\n-    );\n-    assertThat(eagerMacroFunction.reconstructImage()).isEqualTo(code);\n+    EagerMacroFunction eagerMacroFunction = makeMacroFunction(name, code);\n+    assertThat(eagerMacroFunction.reconstructImage(name)).isEqualTo(code);\n   }\n \n   @Test\n   public void itPartiallyEvaluatesMacroFunction() {\n     // Put this test here because it's only used in eager execution\n     context.put(\"deferred\", DeferredValue.instance());\n-    MacroFunction macroFunction = makeMacroFunction(\n+    EagerMacroFunction eagerMacroFunction = makeMacroFunction(\n       \"foo\",\n       \"{% macro foo(bar) %}It's: {{ bar }}, {{ deferred }}{% endmacro %}\"\n     );\n-    assertThatThrownBy(() -> macroFunction.evaluate(\"Bar\"))\n+    assertThatThrownBy(() -> eagerMacroFunction.evaluate(\"Bar\"))\n       .isInstanceOf(DeferredValueException.class);\n     try (TemporaryValueClosable<Boolean> ignored = context.withPartialMacroEvaluation()) {\n-      assertThat(macroFunction.evaluate(\"Bar\")).isEqualTo(\"It's: Bar, {{ deferred }}\");\n+      assertThat(eagerMacroFunction.evaluate(\"Bar\"))\n+        .isEqualTo(\"It's: Bar, {{ deferred }}\");\n     }\n   }\n \n@@ -124,14 +105,9 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n     String name = \"rec\";\n     String code =\n       \"{% macro rec(num=0) %}{% if num > 0 %}{{ num }}-{{ rec(num - 1)}}{% endif %}{% endmacro %}\";\n-    MacroFunction macroFunction = makeMacroFunction(name, code);\n+    EagerMacroFunction eagerMacroFunction = makeMacroFunction(name, code);\n     String output;\n     try (InterpreterScopeClosable c = interpreter.enterScope()) {\n-      EagerMacroFunction eagerMacroFunction = new EagerMacroFunction(\n-        name,\n-        macroFunction,\n-        interpreter\n-      );\n       output = eagerMacroFunction.reconstructImage();\n     }\n     assertThat(interpreter.render(output + \"{{ rec(5) }}\")).isEqualTo(\"5-4-3-2-1-\");\n@@ -155,23 +131,18 @@ public class EagerMacroFunctionTest extends BaseInterpretingTest {\n     interpreter.getContext().addGlobalMacro(foo1Macro);\n     interpreter.getContext().addGlobalMacro(barMacro);\n \n-    MacroFunction foo2Macro;\n+    EagerMacroFunction foo2Macro;\n     String output;\n     try (InterpreterScopeClosable c = interpreter.enterScope()) {\n       foo2Macro = makeMacroFunction(\"foo\", foo2Code);\n-      EagerMacroFunction eagerMacroFunction = new EagerMacroFunction(\n-        \"foo\",\n-        foo2Macro,\n-        interpreter\n-      );\n-      output = eagerMacroFunction.reconstructImage();\n+      output = foo2Macro.reconstructImage();\n     }\n     assertThat(interpreter.render(output + \"{{ foo('Foo') }}\"))\n       .isEqualTo(\"~^This is the Foo^~\");\n   }\n \n-  private MacroFunction makeMacroFunction(String name, String code) {\n+  private EagerMacroFunction makeMacroFunction(String name, String code) {\n     interpreter.render(code);\n-    return interpreter.getContext().getGlobalMacro(name);\n+    return (EagerMacroFunction) interpreter.getContext().getGlobalMacro(name);\n   }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java\nindex 149062a..9793ab1 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java\n@@ -159,7 +159,7 @@ public class EagerSetTagTest extends SetTagTest {\n           .flatMap(deferredToken -> deferredToken.getUsedDeferredWords().stream())\n           .collect(Collectors.toSet())\n       )\n-      .containsExactlyInAnyOrder(\"deferred\", \"foo\", \"add.filter\");\n+      .containsExactlyInAnyOrder(\"deferred\", \"foo\", \"add\");\n   }\n \n   @Test\n@@ -211,7 +211,7 @@ public class EagerSetTagTest extends SetTagTest {\n           .flatMap(deferredToken -> deferredToken.getUsedDeferredWords().stream())\n           .collect(Collectors.toSet())\n       )\n-      .containsExactlyInAnyOrder(\"deferred\", \"foo\", \"add.filter\");\n+      .containsExactlyInAnyOrder(\"deferred\", \"foo\", \"add\");\n     context.remove(\"foo\");\n     context.put(\"deferred\", 2);\n     context.setDeferredExecutionMode(false);\ndiff --git a/src/test/java/com/hubspot/jinjava/util/EagerReconstructionUtilsTest.java b/src/test/java/com/hubspot/jinjava/util/EagerReconstructionUtilsTest.java\nindex 275cfc6..8b51f6a 100644\n--- a/src/test/java/com/hubspot/jinjava/util/EagerReconstructionUtilsTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/EagerReconstructionUtilsTest.java\n@@ -2,9 +2,6 @@ package com.hubspot.jinjava.util;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-import static org.mockito.Mockito.any;\n-import static org.mockito.Mockito.anyList;\n-import static org.mockito.Mockito.anyMap;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -19,6 +16,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable\n import com.hubspot.jinjava.interpret.LazyExpression;\n import com.hubspot.jinjava.interpret.OutputTooBigException;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n+import com.hubspot.jinjava.lib.fn.eager.EagerMacroFunction;\n import com.hubspot.jinjava.lib.tag.eager.DeferredToken;\n import com.hubspot.jinjava.lib.tag.eager.EagerExecutionResult;\n import com.hubspot.jinjava.loader.RelativePathResolver;\n@@ -92,7 +90,8 @@ public class EagerReconstructionUtilsTest extends BaseInterpretingTest {\n     assertThat(result.getResult().toString()).isEqualTo(\"function return\");\n     // This will add an eager token because we normally don't call this method\n     // unless we're in deferred execution mode.\n-    assertThat(result.getPrefixToPreserveState()).isEqualTo(\"{% set foo = [1] %}\");\n+    assertThat(result.getPrefixToPreserveState().toString())\n+      .isEqualTo(\"{% set foo = [1] %}\");\n   }\n \n   @Test\n@@ -116,7 +115,8 @@ public class EagerReconstructionUtilsTest extends BaseInterpretingTest {\n         .build()\n     );\n     assertThat(result.getResult().toString()).isEqualTo(\"function return\");\n-    assertThat(result.getPrefixToPreserveState()).isEqualTo(\"{% set foo = [] %}\");\n+    assertThat(result.getPrefixToPreserveState().toString())\n+      .isEqualTo(\"{% set foo = [] %}\");\n     assertThat(context.get(\"foo\")).isInstanceOf(DeferredValue.class);\n   }\n \n@@ -419,13 +419,9 @@ public class EagerReconstructionUtilsTest extends BaseInterpretingTest {\n     );\n   }\n \n-  private static MacroFunction getMockMacroFunction(String image) {\n-    MacroFunction mockMacroFunction = mock(MacroFunction.class);\n-    when(mockMacroFunction.getName()).thenReturn(\"foo\");\n-    when(mockMacroFunction.getArguments()).thenReturn(ImmutableList.of(\"bar\"));\n-    when(mockMacroFunction.getEvaluationResult(anyMap(), anyMap(), anyList(), any()))\n-      .thenReturn(image.substring(image.indexOf(\"%}\") + 2, image.lastIndexOf(\"{%\")));\n-    return mockMacroFunction;\n+  private EagerMacroFunction getMockMacroFunction(String image) {\n+    interpreter.render(image);\n+    return (EagerMacroFunction) interpreter.getContext().getGlobalMacro(\"foo\");\n   }\n \n   private static TagNode getMockTagNode(String endName) {\ndiff --git a/src/test/resources/eager/allows-meta-context-var-overriding.expected.jinja b/src/test/resources/eager/allows-meta-context-var-overriding.expected.jinja\nindex d1e716d..b9e48c4 100644\n--- a/src/test/resources/eager/allows-meta-context-var-overriding.expected.jinja\n+++ b/src/test/resources/eager/allows-meta-context-var-overriding.expected.jinja\n@@ -2,7 +2,7 @@\n META\n {% for meta in deferred %}\n {{ meta }}{% endfor %}\n-{{ meta }}\n+META\n {% set meta = [] %}{% if deferred %}\n {% do meta.append(1) %}\n {% endif %}\ndiff --git a/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja b/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\nindex af01185..89eba8d 100644\n--- a/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\n+++ b/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\n@@ -1,6 +1,6 @@\n 1\n-{% set bar,foo = [1],'1' %}{% if deferred %}\n-{% set bar = [1] %}{% set foo %}2{% do bar.append(2) %}{% endset %}\n+{% set bar = [1] %}{% set foo = '1' %}{% if deferred %}\n+{% set foo %}2{% do bar.append(2) %}{% endset %}\n {% endif %}\n Bar: {{ bar }}\n Foo: {{ foo }}\ndiff --git a/src/test/resources/eager/defers-macro-in-for.expected.jinja b/src/test/resources/eager/defers-macro-in-for.expected.jinja\nindex 93d3b72..16d63d7 100644\n--- a/src/test/resources/eager/defers-macro-in-for.expected.jinja\n+++ b/src/test/resources/eager/defers-macro-in-for.expected.jinja\n@@ -1,3 +1,3 @@\n-{% set my_list = [] %}{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% for item in filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n+{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% for item in filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n {{ item }}\n {% endfor %}\ndiff --git a/src/test/resources/eager/defers-macro-in-if.expected.jinja b/src/test/resources/eager/defers-macro-in-if.expected.jinja\nindex 5e8ad31..f2cdabe 100644\n--- a/src/test/resources/eager/defers-macro-in-if.expected.jinja\n+++ b/src/test/resources/eager/defers-macro-in-if.expected.jinja\n@@ -1,3 +1,3 @@\n-{% set my_list = [] %}{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% if [] == filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n+{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% if [] == filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n {{ my_list }}\n {% endif %}\ndiff --git a/src/test/resources/eager/defers-on-immutable-mode.expected.jinja b/src/test/resources/eager/defers-on-immutable-mode.expected.jinja\nindex 1e67324..47f89f0 100644\n--- a/src/test/resources/eager/defers-on-immutable-mode.expected.jinja\n+++ b/src/test/resources/eager/defers-on-immutable-mode.expected.jinja\n@@ -5,5 +5,6 @@\n {% endif %}\n {{ foo }}\n \n-{% set bar = 1 %}{% for item in [0, 1] %}{% set bar = bar + deferred %}\n-{% endfor %}{{ bar }}\n+{% for __ignored__ in [0] %}{% set bar = 1 + deferred %}\n+{% set bar = bar + deferred %}\n+{% endfor %}1\ndiff --git a/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja b/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\nindex 5a8c51b..d0600b6 100644\n--- a/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\n+++ b/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\n@@ -1,40 +1,21 @@\n-{% for __ignored__ in [0] %}\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% set bar1,foo = {} ,'start' %}{% if deferred %}\n+{% set foo = 'start' %}{% for i in [0, 1] %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n \n-{% set foo = 'starta' %}{% do bar1.update({'foo': foo}) %}\n+{% set foo = filter:join.filter([foo, 'a'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n-{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n+{% do bar1.update({'import_resource_path': 'deferred-modification.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n {{ bar1.foo }}\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% set bar2,foo = {} ,'start' %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% for __ignored__ in [0] %}{% if deferred %}\n \n-{% set foo = 'starta' %}{% do bar2.update({'foo': foo}) %}\n+{% set foo = filter:join.filter([foo, 'a'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n-{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n-{{ bar2.foo }}\n-\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% set bar1,foo = {} ,'start' %}{% if deferred %}\n-\n-{% set foo = 'starta' %}{% do bar1.update({'foo': foo}) %}\n-\n-{% endif %}\n-\n-{% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n-{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n-{{ bar1.foo }}\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% set bar2,foo = {} ,'start' %}{% if deferred %}\n-\n-{% set foo = 'starta' %}{% do bar2.update({'foo': foo}) %}\n-\n-{% endif %}\n-\n-{% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n-{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n+{% do bar2.update({'import_resource_path': 'deferred-modification.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n {{ bar2.foo }}\n {% endfor %}\n-start\n+{{ foo }}\ndiff --git a/src/test/resources/eager/handles-double-import-modification.expected.jinja b/src/test/resources/eager/handles-double-import-modification.expected.jinja\nindex 3ba9e59..2a509a0 100644\n--- a/src/test/resources/eager/handles-double-import-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-double-import-modification.expected.jinja\n@@ -1,4 +1,4 @@\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% set bar1 = {}  %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar1.update({'foo': foo}) %}\n \n@@ -7,7 +7,7 @@\n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n {% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n ---\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% set bar2 = {}  %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar2.update({'foo': foo}) %}\n \ndiff --git a/src/test/resources/eager/handles-duplicate-variable-reference-modification.expected.jinja b/src/test/resources/eager/handles-duplicate-variable-reference-modification.expected.jinja\nindex b992537..32fd1b2 100644\n--- a/src/test/resources/eager/handles-duplicate-variable-reference-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-duplicate-variable-reference-modification.expected.jinja\n@@ -1,9 +1,9 @@\n-{% set the_list = [] %}{% if deferred %}\n-{% set the_list = [] %}{% set some_list = [] %}{% set the_list = [] %}{% set some_list = the_list %}{% do some_list.append(deferred) %}\n-{% endif %}\n+{% set the_list = [] %}{% set __macro_appender_2138849093_temp_variable_0__ %}{% if deferred %}\n+{% set some_list = the_list %}{% do some_list.append(deferred) %}\n+{% endif %}{% endset %}{{ __macro_appender_2138849093_temp_variable_0__ }}\n {{ the_list }}\n \n \n-{% set foo = [1] %}{% set foo = [1] %}{% do foo.append(deferred) %}\n+{% set foo = [1] %}{% do foo.append(deferred) %}\n {% do foo.append(2) %}\n-{% set bar = foo %}{% set bar = foo %}{{ foo ~ 'and' ~ bar }}\n+{% set bar = foo %}{{ foo ~ 'and' ~ bar }}\ndiff --git a/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja b/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja\nindex 95a2825..dd63c3d 100644\n--- a/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-higher-scope-reference-modification.expected.jinja\n@@ -1,10 +1,10 @@\n-{% set b_list = ['a'] %}{% set a_list = ['a'] %}{% set b_list = a_list %}{% do b_list.append(deferred ? 'b' : '') %}\n-{% set b_list = a_list %}{% set b_list = a_list %}{% macro c(c_list) %}{% do c_list.append(deferred ? 'c' : '') %}\n-C: {{ c_list }}.{% endmacro %}{% set b_list = a_list %}{% set b_list = a_list %}{{ c(b_list) }}{% set b_list = a_list %}{% set b_list = a_list %}{% set b_list = a_list %}{% set b_list = a_list %}{% do b_list.append(deferred ? 'B' : '') %}\n-B: {% set b_list = a_list %}{% set b_list = a_list %}{% set b_list = a_list %}{% set b_list = a_list %}{{ b_list }}.{% do a_list.append(deferred ? 'A' : '') %}\n+{% set a_list = ['a'] %}{% set __macro_b_125206_temp_variable_0__ %}{% set b_list = a_list %}{% do b_list.append(deferred ? 'b' : '') %}\n+{% set b_list = a_list %}{% macro c(c_list) %}{% do c_list.append(deferred ? 'c' : '') %}\n+C: {{ c_list }}.{% endmacro %}{{ c(b_list) }}{% set b_list = a_list %}{% do b_list.append(deferred ? 'B' : '') %}\n+B: {% set b_list = a_list %}{{ b_list }}.{% endset %}{{ __macro_b_125206_temp_variable_0__ }}{% do a_list.append(deferred ? 'A' : '') %}\n A: {{ a_list }}.\n ---\n-{% set a_list = ['a'] %}{% set b_list = a_list %}{% for i in [0] %}{% set b_list = a_list %}{% set b_list = a_list %}{% do b_list.append('b') %}{% for __ignored__ in [0] %}{% set b_list = a_list %}{% set c_list = b_list %}{% do c_list.append(deferred ? 'c' : '') %}\n-C: {{ c_list }}.{% endfor %}{% set b_list = a_list %}{% do b_list.append(deferred ? 'B' : '') %}\n-B: {% set b_list = a_list %}{{ b_list }}.{% endfor %}{% do a_list.append(deferred ? 'A' : '') %}\n+{% set a_list = ['a'] %}{% for i in [0] %}{% set b_list = a_list %}{% do b_list.append('b') %}{% for __ignored__ in [0] %}{% set c_list = b_list %}{% do c_list.append(deferred ? 'c' : '') %}\n+C: {{ c_list }}.{% endfor %}{% do b_list.append(deferred ? 'B' : '') %}\n+B: {{ b_list }}.{% endfor %}{% do a_list.append(deferred ? 'A' : '') %}\n A: {{ a_list }}.\ndiff --git a/src/test/resources/eager/handles-set-in-inner-scope.expected.jinja b/src/test/resources/eager/handles-set-in-inner-scope.expected.jinja\nindex 6ce5d93..84ead84 100644\n--- a/src/test/resources/eager/handles-set-in-inner-scope.expected.jinja\n+++ b/src/test/resources/eager/handles-set-in-inner-scope.expected.jinja\n@@ -1,5 +1,5 @@\n-{% set foo = 1 %}{% for i in [0] %}\n+{% for __ignored__ in [0] %}\n {% set foo = deferred %}\n {{ foo }}\n {% endfor %}\n-{{ foo }}\n+1\ndiff --git a/src/test/resources/eager/handles-value-modified-in-macro.expected.jinja b/src/test/resources/eager/handles-value-modified-in-macro.expected.jinja\nindex 09057c1..040d6b1 100644\n--- a/src/test/resources/eager/handles-value-modified-in-macro.expected.jinja\n+++ b/src/test/resources/eager/handles-value-modified-in-macro.expected.jinja\n@@ -1,7 +1,7 @@\n {% macro counter(foo) %}\n {% set level = level + 2 %}\n {% if level < foo %}\n-{{ counter() }}\n+{{ counter(foo) }}\n {% endif %}\n {{ level }}\n {% endmacro %}{{ counter(deferred) }}\n@@ -9,7 +9,7 @@\n {% macro counter(foo) %}\n {% set level = level + 2 %}\n {% if level < foo %}\n-{{ counter() }}\n+{{ counter(foo) }}\n {% endif %}\n {{ level }}\n {% endmacro %}{{ counter(2) }}\ndiff --git a/src/test/resources/eager/handles-value-modified-in-macro.jinja b/src/test/resources/eager/handles-value-modified-in-macro.jinja\nindex 9ee613a..c4dcbb3 100644\n--- a/src/test/resources/eager/handles-value-modified-in-macro.jinja\n+++ b/src/test/resources/eager/handles-value-modified-in-macro.jinja\n@@ -2,7 +2,7 @@\n {% macro counter(foo) %}\n {% set level = level + increment %}\n {% if level < foo %}\n-{{ counter() }}\n+{{ counter(foo) }}\n {% endif %}\n {{ level }}\n {% endmacro %}\ndiff --git a/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja b/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja\nindex 5b50f72..a6bd5b9 100644\n--- a/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja\n+++ b/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja\n@@ -1,10 +1,10 @@\n {% set list = [] %}{% if deferred %}\n \n-{% set list = [] %}{% for __ignored__ in [0] %}{% do list.append(1) %}1{% set depth = 2 %}\n-{% for __ignored__ in [0] %}{% do list.append(2) %}2{% set depth = 3 %}\n-{% for __ignored__ in [0] %}{% do list.append(3) %}3{% endfor %}\n-{% for __ignored__ in [0] %}{% do list.append(3) %}3{% endfor %}{% endfor %}\n-{% for __ignored__ in [0] %}{% do list.append(2) %}2{% set depth = 3 %}\n-{% for __ignored__ in [0] %}{% do list.append(3) %}3{% endfor %}\n-{% for __ignored__ in [0] %}{% do list.append(3) %}3{% endfor %}{% endfor %}{% endfor %}\n+{% set __macro_inc_100372882_temp_variable_0__ %}{% do list.append(1) %}1{% set depth = 2 %}\n+{% set __macro_inc_100372882_temp_variable_1__ %}{% do list.append(2) %}2{% set depth = 3 %}\n+{% set __macro_inc_100372882_temp_variable_2__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_2__ }}\n+{% set __macro_inc_100372882_temp_variable_3__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_3__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_1__ }}\n+{% set __macro_inc_100372882_temp_variable_4__ %}{% do list.append(2) %}2{% set depth = 3 %}\n+{% set __macro_inc_100372882_temp_variable_5__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_5__ }}\n+{% set __macro_inc_100372882_temp_variable_6__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_6__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_4__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_0__ }}\n {% endif %}\ndiff --git a/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja b/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja\nindex 6e45bd8..5f637d1 100644\n--- a/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja\n+++ b/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja\n@@ -1,6 +1,6 @@\n [][]\n [0][0]\n-{% set alpha,beta = [0],[0] %}{% for i in deferred %}\n+{% set alpha = [0] %}{% set beta = [0] %}{% for i in deferred %}\n   {% if deferred %}\n     {% for j in deferred %}\n       {% if deferred %}\ndiff --git a/src/test/resources/eager/sets-multiple-vars-deferred-in-child.expected.jinja b/src/test/resources/eager/sets-multiple-vars-deferred-in-child.expected.jinja\nindex 463d70d..c961b64 100644\n--- a/src/test/resources/eager/sets-multiple-vars-deferred-in-child.expected.jinja\n+++ b/src/test/resources/eager/sets-multiple-vars-deferred-in-child.expected.jinja\n@@ -1,2 +1,2 @@\n-1 & 2{% set bar,foo = 2,3 %}{% if deferred %}{% set bar = 4 %}{% else %}{% set foo = 5 %}{% endif %}\n+1 & 2{% set bar = 2 %}{% set foo = 3 %}{% if deferred %}{% set bar = 4 %}{% else %}{% set foo = 5 %}{% endif %}\n {{ foo }} & {{ bar }}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T20:25:26.516698Z", "commit_hash": "9ae768e5275d351329c558572c946cd5d5f1d288", "commit_message": "Merge branch 'master' of github.com:HubSpot/jinjava into revamp-prefix-and-eager-macro-a\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/AstRangeBracket.java b/src/main/java/com/hubspot/jinjava/el/ext/AstRangeBracket.java\nindex 696b11b..3de83c0 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/AstRangeBracket.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/AstRangeBracket.java\n@@ -117,6 +117,9 @@ public class AstRangeBracket extends AstBracket {\n   }\n \n   private String evalString(String base, Bindings bindings, ELContext context) {\n+    if (base.length() == 0) {\n+      return base;\n+    }\n     int startNum = intVal(property, 0, base.length(), bindings, context);\n     int endNum = intVal(rangeMax, base.length(), base.length(), bindings, context);\n     endNum = Math.min(endNum, base.length());\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/CannotReconstructValueException.java b/src/main/java/com/hubspot/jinjava/interpret/CannotReconstructValueException.java\nindex c476433..8fe54ec 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/CannotReconstructValueException.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/CannotReconstructValueException.java\n@@ -1,5 +1,8 @@\n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n+\n+@Beta\n public class CannotReconstructValueException extends DeferredValueException {\n   public static final String CANNOT_RECONSTRUCT_MESSAGE = \"Cannot reconstruct value\";\n \ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/Context.java b/src/main/java/com/hubspot/jinjava/interpret/Context.java\nindex fbf0d2e..ffbcc7b 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/Context.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/Context.java\n@@ -16,6 +16,7 @@\n \n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.HashMultimap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.SetMultimap;\n@@ -88,6 +89,8 @@ public class Context extends ScopeMap<String, Object> {\n   private final Set<String> resolvedFunctions = new HashSet<>();\n \n   private Set<Node> deferredNodes = new HashSet<>();\n+\n+  @Beta\n   private Set<DeferredToken> deferredTokens = new HashSet<>();\n \n   private final ExpTestLibrary expTestLibrary;\n@@ -369,6 +372,7 @@ public class Context extends ScopeMap<String, Object> {\n     return ImmutableSet.copyOf(deferredNodes);\n   }\n \n+  @Beta\n   public void checkNumberOfDeferredTokens() {\n     Context secondToLastContext = this;\n     if (parent != null) {\n@@ -387,10 +391,12 @@ public class Context extends ScopeMap<String, Object> {\n     }\n   }\n \n+  @Beta\n   public void handleDeferredToken(DeferredToken deferredToken) {\n     deferredToken.addTo(this);\n   }\n \n+  @Beta\n   public void removeDeferredTokens(Collection<DeferredToken> toRemove) {\n     deferredTokens.removeAll(toRemove);\n     if (getParent() != null) {\n@@ -402,6 +408,7 @@ public class Context extends ScopeMap<String, Object> {\n     }\n   }\n \n+  @Beta\n   public Set<DeferredToken> getDeferredTokens() {\n     return deferredTokens;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReference.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReference.java\nindex 74e903b..cc77101 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReference.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReference.java\n@@ -1,5 +1,8 @@\n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n+\n+@Beta\n public class DeferredLazyReference implements DeferredValue {\n   private final LazyReference lazyReference;\n \ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java\nindex bba3648..2a2e818 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredLazyReferenceSource.java\n@@ -1,5 +1,8 @@\n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n+\n+@Beta\n public class DeferredLazyReferenceSource extends DeferredValueImpl {\n   private static final DeferredLazyReferenceSource INSTANCE = new DeferredLazyReferenceSource();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredMacroValueImpl.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredMacroValueImpl.java\nindex 226757c..687ba50 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredMacroValueImpl.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredMacroValueImpl.java\n@@ -1,5 +1,8 @@\n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n+\n+@Beta\n public class DeferredMacroValueImpl implements DeferredValue {\n   private static final DeferredValue INSTANCE = new DeferredMacroValueImpl();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/PartiallyDeferredValue.java b/src/main/java/com/hubspot/jinjava/interpret/PartiallyDeferredValue.java\nindex 4da2c3d..73e3551 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/PartiallyDeferredValue.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/PartiallyDeferredValue.java\n@@ -1,7 +1,10 @@\n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n+\n /**\n  * An interface for a type of DeferredValue that as a whole is not deferred,\n  * but certain attributes or methods within it are deferred.\n  */\n+@Beta\n public interface PartiallyDeferredValue extends DeferredValue {}\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/RevertibleObject.java b/src/main/java/com/hubspot/jinjava/interpret/RevertibleObject.java\nindex 1b4d894..e19ec94 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/RevertibleObject.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/RevertibleObject.java\n@@ -1,7 +1,9 @@\n package com.hubspot.jinjava.interpret;\n \n+import com.google.common.annotations.Beta;\n import java.util.Optional;\n \n+@Beta\n public class RevertibleObject {\n   private final Object hashCode;\n   private final Optional<String> pyishString;\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex 072f17f..4d215f0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.expression;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -18,6 +19,7 @@ import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerExpressionStrategy implements ExpressionStrategy {\n   private static final long serialVersionUID = -6792345439237764193L;\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilter.java\nindex 21d2f04..45dc8f0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilter.java\n@@ -58,6 +58,7 @@ public class EscapeJinjavaFilter implements Filter {\n   public static String escapeFullJinjavaEntities(String input) {\n     return input\n       .replace(\"{{\", BLBRACE + BLBRACE)\n+      .replace(\"}}\", BRBRACE + BRBRACE)\n       .replaceAll(\"\\\\{([{%#])\", BLBRACE + \"$1\")\n       .replaceAll(\"([}%#])}\", \"$1\" + BRBRACE);\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/ToJsonFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/ToJsonFilter.java\nindex acdf6ef..8520035 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/ToJsonFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/ToJsonFilter.java\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.JsonProcessingException;\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InvalidInputException;\n import com.hubspot.jinjava.interpret.InvalidReason;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -24,6 +25,9 @@ public class ToJsonFilter implements Filter {\n     try {\n       return interpreter.getConfig().getObjectMapper().writeValueAsString(var);\n     } catch (JsonProcessingException e) {\n+      if (e.getCause() instanceof DeferredValueException) {\n+        throw (DeferredValueException) e.getCause();\n+      }\n       throw new InvalidInputException(interpreter, this, InvalidReason.JSON_WRITE);\n     }\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\nindex 2b7973a..2c11014 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.fn.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.el.ext.AstMacroFunction;\n import com.hubspot.jinjava.el.ext.DeferredParsingException;\n@@ -28,6 +29,7 @@ import java.util.StringJoiner;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Supplier;\n \n+@Beta\n public class EagerMacroFunction extends MacroFunction {\n   private AtomicInteger callCount = new AtomicInteger();\n   private boolean reconstructing = false;\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java\nindex 065c2c3..03d82f8 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/DeferredToken.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.CallStack;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredLazyReference;\n@@ -16,6 +17,7 @@ import java.util.Map.Entry;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Beta\n public class DeferredToken {\n   private final Token token;\n   // These words aren't yet DeferredValues, but are unresolved\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\nindex ff27df0..5b9969f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.Sets;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -15,6 +16,7 @@ import java.util.Collections;\n import java.util.Optional;\n import org.apache.commons.lang3.tuple.Triple;\n \n+@Beta\n public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n   public static final EagerBlockSetTagStrategy INSTANCE = new EagerBlockSetTagStrategy(\n     new SetTag()\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\nindex fa9fcfa..9223b0f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.InterpretException;\n@@ -22,6 +23,7 @@ import java.util.LinkedHashMap;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n \n   public EagerCallTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\nindex 93816d1..80775b3 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.el.ext.ExtendedParser;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -17,6 +18,7 @@ import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Beta\n public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n \n   public EagerCycleTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\nindex b3667ae..fb11cd1 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.DoTag;\n@@ -11,6 +12,7 @@ import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.PrefixToPreserveState;\n \n+@Beta\n public class EagerDoTag extends EagerStateChangingTag<DoTag> implements FlexibleTag {\n \n   public EagerDoTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\nindex a7d0450..f313d42 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n@@ -3,6 +3,7 @@ package com.hubspot.jinjava.lib.tag.eager;\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildBlockSetTag;\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildSetTag;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.DeferredValueShadow;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.LazyReference;\n@@ -22,6 +23,7 @@ import java.util.stream.Collectors;\n  * got deferred, then the <code>prefixToPreserveState</code> can be added to the output\n  * that would preserve the state for a second pass.\n  */\n+@Beta\n public class EagerExecutionResult {\n   private final EagerExpressionResult result;\n   private final Map<String, Object> speculativeBindings;\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex c4272fd..733886a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.CannotReconstructValueException;\n import com.hubspot.jinjava.interpret.Context.TemporaryValueClosable;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n@@ -25,6 +26,7 @@ import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n \n+@Beta\n public class EagerForTag extends EagerTagDecorator<ForTag> {\n \n   public EagerForTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\nindex b4adfd9..a3d8513 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n@@ -21,6 +22,7 @@ import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Beta\n public class EagerFromTag extends EagerStateChangingTag<FromTag> {\n \n   public EagerFromTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerGenericTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerGenericTag.java\nindex 4bd9b62..f391714 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerGenericTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerGenericTag.java\n@@ -1,7 +1,9 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.lib.tag.Tag;\n \n+@Beta\n public class EagerGenericTag<T extends Tag> extends EagerTagDecorator<T> implements Tag {\n \n   public EagerGenericTag(T tag) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex 1b70403..d9bf720 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -18,6 +19,7 @@ import java.util.HashSet;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerIfTag extends EagerTagDecorator<IfTag> {\n \n   public EagerIfTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex 98bed5c..ece9cd0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableMap;\n@@ -31,6 +32,7 @@ import java.util.StringJoiner;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n \n   public EagerImportTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIncludeTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIncludeTag.java\nindex abb613a..7a2a7cc 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIncludeTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIncludeTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.IncludeTag;\n@@ -10,6 +11,7 @@ import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.HelperStringTokenizer;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerIncludeTag extends EagerTagDecorator<IncludeTag> {\n \n   public EagerIncludeTag(IncludeTag tag) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\nindex 4e7f5af..9a1b98a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -17,6 +18,7 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Triple;\n \n+@Beta\n public class EagerInlineSetTagStrategy extends EagerSetTagStrategy {\n   public static final EagerInlineSetTagStrategy INSTANCE = new EagerInlineSetTagStrategy(\n     new SetTag()\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\nindex 8fe568b..0125e99 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n@@ -13,6 +14,7 @@ import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n \n   public EagerPrintTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\nindex 1a9c22c..bf37796 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.FlexibleTag;\n@@ -7,6 +8,7 @@ import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n \n+@Beta\n public class EagerSetTag extends EagerStateChangingTag<SetTag> implements FlexibleTag {\n \n   public EagerSetTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\nindex 8587dc9..2c04c1d 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.tree.TagNode;\n@@ -13,6 +14,7 @@ import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Triple;\n \n+@Beta\n public abstract class EagerSetTagStrategy {\n   protected final SetTag setTag;\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java\nindex 4392c7a..dd17401 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.FlexibleTag;\n@@ -11,6 +12,7 @@ import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerStateChangingTag<T extends Tag> extends EagerTagDecorator<T> {\n \n   public EagerStateChangingTag(T tag) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\nindex bf44b59..ea23258 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.el.ext.DeferredParsingException;\n import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n@@ -22,6 +23,7 @@ import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n   private final T tag;\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\nindex d5e449a..6793c12 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n@@ -26,6 +27,7 @@ import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+@Beta\n public class EagerTagFactory {\n   public static final Map<Class<? extends Tag>, Class<? extends EagerTagDecorator<? extends Tag>>> EAGER_TAG_OVERRIDES = ImmutableMap\n     .<Class<? extends Tag>, Class<? extends EagerTagDecorator<?>>>builder()\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTag.java\nindex c1e4e48..2027376 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTag.java\n@@ -1,7 +1,9 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.lib.tag.UnlessTag;\n \n+@Beta\n public class EagerUnlessTag extends EagerIfTag {\n \n   public EagerUnlessTag() {\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingJsonProcessingException.java b/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingJsonProcessingException.java\nindex 06d6bb0..7cacf2f 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingJsonProcessingException.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingJsonProcessingException.java\n@@ -1,7 +1,9 @@\n package com.hubspot.jinjava.objects.serialization;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.common.annotations.Beta;\n \n+@Beta\n public class LengthLimitingJsonProcessingException extends JsonProcessingException {\n   private final int maxSize;\n   private final int attemptedSize;\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingWriter.java b/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingWriter.java\nindex 3d7b283..c624aec 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingWriter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/LengthLimitingWriter.java\n@@ -1,10 +1,12 @@\n package com.hubspot.jinjava.objects.serialization;\n \n+import com.google.common.annotations.Beta;\n import java.io.CharArrayWriter;\n import java.io.IOException;\n import java.io.Writer;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+@Beta\n public class LengthLimitingWriter extends Writer {\n   public static final String REMAINING_LENGTH_ATTRIBUTE = \"remainingLength\";\n   private final CharArrayWriter charArrayWriter;\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java b/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java\nindex e67cfd3..4c5a2ec 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java\n@@ -4,11 +4,13 @@ import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.ObjectWriter;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.google.common.annotations.Beta;\n import java.io.CharArrayWriter;\n import java.io.IOException;\n import java.util.Map.Entry;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+@Beta\n public class MapEntrySerializer extends JsonSerializer<Entry<?, ?>> {\n   public static final MapEntrySerializer INSTANCE = new MapEntrySerializer();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBeanSerializerModifier.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBeanSerializerModifier.java\nindex a3d84cd..bb1a1d6 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBeanSerializerModifier.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBeanSerializerModifier.java\n@@ -5,8 +5,10 @@ import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializationConfig;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.google.common.annotations.Beta;\n import java.util.Map;\n \n+@Beta\n public class PyishBeanSerializerModifier extends BeanSerializerModifier {\n   public static final PyishBeanSerializerModifier INSTANCE = new PyishBeanSerializerModifier();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBlockSetSerializable.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBlockSetSerializable.java\nindex 7cc319a..e7d52e6 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBlockSetSerializable.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishBlockSetSerializable.java\n@@ -1,5 +1,8 @@\n package com.hubspot.jinjava.objects.serialization;\n \n+import com.google.common.annotations.Beta;\n+\n+@Beta\n public interface PyishBlockSetSerializable {\n   String getBlockSetBody();\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishCharacterEscapes.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishCharacterEscapes.java\nindex 494078c..d9cf36e 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishCharacterEscapes.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishCharacterEscapes.java\n@@ -3,8 +3,10 @@ package com.hubspot.jinjava.objects.serialization;\n import com.fasterxml.jackson.core.SerializableString;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n import com.fasterxml.jackson.core.io.SerializedString;\n+import com.google.common.annotations.Beta;\n import java.util.Arrays;\n \n+@Beta\n public class PyishCharacterEscapes extends CharacterEscapes {\n   public static final PyishCharacterEscapes INSTANCE = new PyishCharacterEscapes();\n   private final int[] asciiEscapes;\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java\nindex c7628aa..c755862 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java\n@@ -8,6 +8,7 @@ import com.fasterxml.jackson.databind.ObjectWriter;\n import com.fasterxml.jackson.databind.PropertyNamingStrategies;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.OutputTooBigException;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n@@ -18,6 +19,7 @@ import java.util.Objects;\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+@Beta\n public class PyishObjectMapper {\n   public static final ObjectWriter PYISH_OBJECT_WRITER;\n   public static final ObjectWriter SNAKE_CASE_PYISH_OBJECT_WRITER;\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishPrettyPrinter.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishPrettyPrinter.java\nindex a89121b..70b66f7 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishPrettyPrinter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishPrettyPrinter.java\n@@ -2,8 +2,10 @@ package com.hubspot.jinjava.objects.serialization;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.google.common.annotations.Beta;\n import java.io.IOException;\n \n+@Beta\n public class PyishPrettyPrinter extends DefaultPrettyPrinter {\n   public static final PyishPrettyPrinter INSTANCE = new PyishPrettyPrinter();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializable.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializable.java\nindex 54c2e7d..374e053 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializable.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializable.java\n@@ -6,12 +6,14 @@ import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectWriter;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.objects.PyWrapper;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import java.io.IOException;\n import java.util.Objects;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+@Beta\n public interface PyishSerializable extends PyWrapper {\n   ObjectWriter SELF_WRITER = new ObjectMapper(\n     new JsonFactoryBuilder().quoteChar('\\'').build()\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\nindex 0947762..5ec1ffe 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n@@ -3,10 +3,12 @@ package com.hubspot.jinjava.objects.serialization;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import java.io.IOException;\n import java.util.Objects;\n \n+@Beta\n public class PyishSerializer extends JsonSerializer<Object> {\n   public static final PyishSerializer INSTANCE = new PyishSerializer();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java b/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java\nindex e123f0c..25b1e9f 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerContextWatcher.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.util;\n \n+import com.google.common.annotations.Beta;\n import com.hubspot.jinjava.interpret.CannotReconstructValueException;\n import com.hubspot.jinjava.interpret.DeferredLazyReferenceSource;\n import com.hubspot.jinjava.interpret.DeferredValue;\n@@ -23,6 +24,7 @@ import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+@Beta\n public class EagerContextWatcher {\n \n   /**\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\nindex 06c0592..08a8b7f 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.util;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.primitives.Primitives;\n import com.hubspot.jinjava.el.ext.DeferredParsingException;\n@@ -32,6 +33,7 @@ import java.util.stream.Stream;\n import javax.el.ELException;\n import org.apache.commons.lang3.StringUtils;\n \n+@Beta\n public class EagerExpressionResolver {\n   public static final String JINJAVA_NULL = \"null\";\n   public static final String JINJAVA_EMPTY_STRING = \"''\";\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\nindex 4a9e71e..169a72e 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.util;\n \n+import com.google.common.annotations.Beta;\n import com.google.common.collect.Sets;\n import com.hubspot.jinjava.el.ext.AbstractCallableMethod;\n import com.hubspot.jinjava.interpret.Context;\n@@ -41,6 +42,7 @@ import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+@Beta\n public class EagerReconstructionUtils {\n \n   /**\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ext/RangeStringTest.java b/src/test/java/com/hubspot/jinjava/el/ext/RangeStringTest.java\nindex d994871..0931123 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ext/RangeStringTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ext/RangeStringTest.java\n@@ -31,7 +31,7 @@ public class RangeStringTest {\n   @Before\n   public void setup() {\n     jinjava = new Jinjava();\n-    context = ImmutableMap.of(\"theString\", \"theSimpleString\");\n+    context = ImmutableMap.of(\"theString\", \"theSimpleString\", \"emptyString\", \"\");\n   }\n \n   @Test\n@@ -56,6 +56,11 @@ public class RangeStringTest {\n   }\n \n   @Test\n+  public void testStringEmpty() {\n+    assertThat(jinjava.render(\"{{ emptyString[-1:0] }}\", context)).isEmpty();\n+  }\n+\n+  @Test\n   public void testStringRangeRightOnly() {\n     assertThat(jinjava.render(\"{{ theString[3:] }}\", context)).isEqualTo(\"SimpleString\");\n   }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilterTest.java\nindex 8f01bf2..0fdd758 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/EscapeJinjavaFilterTest.java\n@@ -37,7 +37,7 @@ public class EscapeJinjavaFilterTest extends BaseInterpretingTest {\n         f.filter(\"{'foo': 'bar', '{{{ foo }}}': '{% bar %}'}\", interpreter, \"false\")\n       )\n       .isEqualTo(\n-        \"{'foo': 'bar', '&lbrace;&lbrace;{ foo }&rbrace;}': '&lbrace;% bar %&rbrace;'}\"\n+        \"{'foo': 'bar', '&lbrace;&lbrace;{ foo &rbrace;&rbrace;}': '&lbrace;% bar %&rbrace;'}\"\n       );\n   }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T20:35:00.509245Z", "commit_hash": "ce1d633f357fd3ae6d6c2e81d8cc4fe10f76b2c1", "commit_message": "Merge pull request #1030 from HubSpot/do-block\n\nImplement `{% do %}` blocks and fix `{% set %}` block scoping", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java b/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\nindex ff7a3fc..b92b388 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\n@@ -33,8 +33,8 @@ import com.hubspot.jinjava.interpret.TemplateError.ErrorItem;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorType;\n import com.hubspot.jinjava.interpret.errorcategory.BasicTemplateErrorCategory;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n import com.hubspot.jinjava.lib.tag.ExtendsTag;\n-import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.lib.tag.eager.EagerGenericTag;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.objects.serialization.PyishSerializable;\n@@ -399,9 +399,9 @@ public class JinjavaInterpreter implements PyishSerializable {\n     resolveBlockStubs(output);\n     if (ignoredOutput.length() > 0) {\n       return (\n-        EagerReconstructionUtils.buildBlockSetTag(\n-          SetTag.IGNORED_VARIABLE_NAME,\n+        EagerReconstructionUtils.wrapInTag(\n           ignoredOutput.toString(),\n+          DoTag.TAG_NAME,\n           this,\n           false\n         ) +\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex 8e630c2..cb29f75 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -6,7 +6,6 @@ import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n import com.hubspot.jinjava.lib.filter.EscapeFilter;\n-import com.hubspot.jinjava.lib.tag.RawTag;\n import com.hubspot.jinjava.lib.tag.eager.DeferredToken;\n import com.hubspot.jinjava.lib.tag.eager.EagerExecutionResult;\n import com.hubspot.jinjava.tree.output.RenderedOutputNode;\n@@ -67,7 +66,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n         interpreter\n       )\n     );\n-    String helpers = wrapInExpression(\n+    String deferredExpressionImage = wrapInExpression(\n       eagerExecutionResult.getResult().toString(),\n       interpreter\n     );\n@@ -76,7 +75,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n         interpreter,\n         new DeferredToken(\n           new ExpressionToken(\n-            helpers,\n+            deferredExpressionImage,\n             master.getLineNumber(),\n             master.getStartPosition(),\n             master.getSymbols()\n@@ -95,7 +94,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n     );\n     // There is only a preserving prefix because it couldn't be entirely evaluated.\n     return EagerReconstructionUtils.wrapInAutoEscapeIfNeeded(\n-      prefixToPreserveState.toString() + helpers,\n+      prefixToPreserveState.toString() + deferredExpressionImage,\n       interpreter\n     );\n   }\n@@ -125,8 +124,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n           }\n         }\n       } else {\n-        // Possible macro/set tag in front of this one. Includes result\n-        result = wrapInRawOrExpressionIfNeeded(result, interpreter);\n+        result = EagerReconstructionUtils.wrapInRawIfNeeded(result, interpreter);\n       }\n     }\n \n@@ -149,24 +147,6 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n       .count();\n   }\n \n-  private static String wrapInRawOrExpressionIfNeeded(\n-    String output,\n-    JinjavaInterpreter interpreter\n-  ) {\n-    JinjavaConfig config = interpreter.getConfig();\n-    if (\n-      config.getExecutionMode().isPreserveRawTags() &&\n-      !interpreter.getContext().isUnwrapRawOverride() &&\n-      (\n-        output.contains(config.getTokenScannerSymbols().getExpressionStart()) ||\n-        output.contains(config.getTokenScannerSymbols().getExpressionStartWithTag())\n-      )\n-    ) {\n-      return EagerReconstructionUtils.wrapInTag(output, RawTag.TAG_NAME, interpreter);\n-    }\n-    return output;\n-  }\n-\n   private static String wrapInExpression(String output, JinjavaInterpreter interpreter) {\n     JinjavaConfig config = interpreter.getConfig();\n     return String.format(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/DoTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/DoTag.java\nindex 07f3c36..eec66d1 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/DoTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/DoTag.java\n@@ -4,40 +4,44 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.doc.annotations.JinjavaTextMateSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n import org.apache.commons.lang3.StringUtils;\n \n @JinjavaDoc(\n   value = \"Evaluates expression without printing out result.\",\n-  snippets = { @JinjavaSnippet(code = \"{% do list.append('value 2') %}\") }\n+  snippets = {\n+    @JinjavaSnippet(code = \"{% do list.append('value 2') %}\"),\n+    @JinjavaSnippet(\n+      desc = \"Execute a block of code in the same scope while ignoring the output\",\n+      code = \"{% do %}\\n\" +\n+      \"{% set foo = [] %}\\n\" +\n+      \"{{ foo.append('a') }}\\n\" +\n+      \"{% enddo %}\"\n+    )\n+  }\n )\n @JinjavaTextMateSnippet(code = \"{% do ${1:expr} %}\")\n-public class DoTag implements Tag {\n+public class DoTag implements Tag, FlexibleTag {\n   public static final String TAG_NAME = \"do\";\n \n   @Override\n   public String interpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n-    if (StringUtils.isBlank(tagNode.getHelpers())) {\n-      throw new TemplateSyntaxException(\n-        tagNode.getMaster().getImage(),\n-        \"Tag 'do' expects expression\",\n-        tagNode.getLineNumber(),\n-        tagNode.getStartPosition()\n-      );\n+    if (hasEndTag((TagToken) tagNode.getMaster())) {\n+      tagNode.getChildren().forEach(child -> child.render(interpreter));\n+    } else {\n+      interpreter.resolveELExpression(tagNode.getHelpers(), tagNode.getLineNumber());\n     }\n-\n-    interpreter.resolveELExpression(tagNode.getHelpers(), tagNode.getLineNumber());\n     return \"\";\n   }\n \n   @Override\n-  public String getEndTagName() {\n-    return null;\n+  public String getName() {\n+    return TAG_NAME;\n   }\n \n   @Override\n-  public String getName() {\n-    return TAG_NAME;\n+  public boolean hasEndTag(TagToken tagToken) {\n+    return StringUtils.isBlank(tagToken.getHelpers());\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\nindex 444951f..8df16bc 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n@@ -22,6 +22,7 @@ import com.hubspot.jinjava.doc.annotations.JinjavaTextMateSnippet;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.objects.Namespace;\n import com.hubspot.jinjava.tree.Node;\n@@ -70,7 +71,7 @@ import org.apache.commons.lang3.StringUtils;\n       code = \"{% set name = 'Jack' %}\\n\" +\n       \"{% set message %}\\n\" +\n       \"My name is {{ name }}\\n\" +\n-      \"{% end_set %}\"\n+      \"{% endset %}\"\n     )\n   }\n )\n@@ -136,12 +137,10 @@ public class SetTag implements Tag, FlexibleTag {\n     if (filterPos >= 0) {\n       var = tagNode.getHelpers().substring(0, filterPos).trim();\n     }\n-    StringBuilder sb = new StringBuilder();\n-    for (Node child : tagNode.getChildren()) {\n-      sb.append(child.render(interpreter));\n-    }\n+    String result;\n+    result = renderChildren(tagNode, interpreter, var);\n     try {\n-      executeSetBlock(tagNode, var, sb.toString(), filterPos >= 0, interpreter);\n+      executeSetBlock(tagNode, var, result, filterPos >= 0, interpreter);\n     } catch (DeferredValueException e) {\n       DeferredValueUtils.deferVariables(new String[] { var }, interpreter.getContext());\n       throw e;\n@@ -149,6 +148,32 @@ public class SetTag implements Tag, FlexibleTag {\n     return \"\";\n   }\n \n+  public static String renderChildren(\n+    TagNode tagNode,\n+    JinjavaInterpreter interpreter,\n+    String var\n+  ) {\n+    String result;\n+    if (IGNORED_VARIABLE_NAME.equals(var)) {\n+      result = renderChildren(tagNode, interpreter);\n+    } else {\n+      try (InterpreterScopeClosable c = interpreter.enterScope()) {\n+        result = renderChildren(tagNode, interpreter);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  private static String renderChildren(TagNode tagNode, JinjavaInterpreter interpreter) {\n+    String result;\n+    StringBuilder sb = new StringBuilder();\n+    for (Node child : tagNode.getChildren()) {\n+      sb.append(child.render(interpreter));\n+    }\n+    result = sb.toString();\n+    return result;\n+  }\n+\n   private void executeSetBlock(\n     TagNode tagNode,\n     String var,\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\nindex 9745dff..9201b83 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n@@ -5,7 +5,6 @@ import com.google.common.collect.Sets;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.SetTag;\n-import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.EagerContextWatcher;\n@@ -30,19 +29,14 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n   @Override\n   protected EagerExecutionResult getEagerExecutionResult(\n     TagNode tagNode,\n+    String[] variables,\n     String expression,\n     JinjavaInterpreter interpreter\n   ) {\n     EagerExecutionResult result = EagerContextWatcher.executeInChildContext(\n       eagerInterpreter ->\n         EagerExpressionResult.fromSupplier(\n-          () -> {\n-            StringBuilder sb = new StringBuilder();\n-            for (Node child : tagNode.getChildren()) {\n-              sb.append(child.render(eagerInterpreter).getValue());\n-            }\n-            return sb.toString();\n-          },\n+          () -> SetTag.renderChildren(tagNode, eagerInterpreter, variables[0]),\n           eagerInterpreter\n         ),\n       interpreter,\n@@ -76,6 +70,7 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n       if (filterPos >= 0) {\n         EagerExecutionResult filterResult = EagerInlineSetTagStrategy.INSTANCE.getEagerExecutionResult(\n           tagNode,\n+          variables,\n           tagNode.getHelpers().trim(),\n           interpreter\n         );\n@@ -166,6 +161,7 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n     if (filterPos >= 0) {\n       EagerExecutionResult filterResult = EagerInlineSetTagStrategy.INSTANCE.getEagerExecutionResult(\n         tagNode,\n+        variables,\n         tagNode.getHelpers().trim(),\n         interpreter\n       );\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\nindex ab9efa9..f0d7256 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java\n@@ -1,14 +1,18 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n import com.google.common.annotations.Beta;\n+import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.FlexibleTag;\n+import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n-import org.apache.commons.lang3.StringUtils;\n+import com.hubspot.jinjava.util.EagerContextWatcher;\n+import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n+import com.hubspot.jinjava.util.EagerReconstructionUtils;\n \n @Beta\n-public class EagerDoTag extends EagerStateChangingTag<DoTag> {\n+public class EagerDoTag extends EagerStateChangingTag<DoTag> implements FlexibleTag {\n \n   public EagerDoTag() {\n     super(new DoTag());\n@@ -19,15 +23,51 @@ public class EagerDoTag extends EagerStateChangingTag<DoTag> {\n   }\n \n   @Override\n-  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n-    String expr = tagToken.getHelpers();\n-    if (StringUtils.isBlank(expr)) {\n-      throw new TemplateSyntaxException(\n+  public String eagerInterpret(\n+    TagNode tagNode,\n+    JinjavaInterpreter interpreter,\n+    InterpretException e\n+  ) {\n+    if (hasEndTag((TagToken) tagNode.getMaster())) {\n+      EagerExecutionResult eagerExecutionResult = EagerContextWatcher.executeInChildContext(\n+        eagerInterpreter ->\n+          EagerExpressionResult.fromSupplier(\n+            () -> renderChildren(tagNode, interpreter),\n+            eagerInterpreter\n+          ),\n         interpreter,\n-        tagToken.getImage(),\n-        \"Tag 'do' expects expression\"\n+        EagerContextWatcher\n+          .EagerChildContextConfig.newBuilder()\n+          .withTakeNewValue(true)\n+          .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n+          .build()\n+      );\n+      StringBuilder prefixToPreserveState = new StringBuilder();\n+      if (interpreter.getContext().isDeferredExecutionMode()) {\n+        prefixToPreserveState.append(eagerExecutionResult.getPrefixToPreserveState());\n+      } else {\n+        interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n+      }\n+      if (eagerExecutionResult.getResult().isFullyResolved()) {\n+        return (prefixToPreserveState.toString());\n+      }\n+      return EagerReconstructionUtils.wrapInTag(\n+        eagerExecutionResult.asTemplateString(),\n+        getName(),\n+        interpreter,\n+        true\n       );\n     }\n-    return EagerPrintTag.interpretExpression(expr, tagToken, interpreter, false);\n+    return EagerPrintTag.interpretExpression(\n+      tagNode.getHelpers(),\n+      (TagToken) tagNode.getMaster(),\n+      interpreter,\n+      false\n+    );\n+  }\n+\n+  @Override\n+  public boolean hasEndTag(TagToken tagToken) {\n+    return getTag().hasEndTag(tagToken);\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\nindex cf9ef14..a3d8513 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n@@ -1,7 +1,5 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n-import static com.hubspot.jinjava.lib.tag.SetTag.IGNORED_VARIABLE_NAME;\n-\n import com.google.common.annotations.Beta;\n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.interpret.Context;\n@@ -9,6 +7,7 @@ import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n import com.hubspot.jinjava.lib.tag.FromTag;\n import com.hubspot.jinjava.loader.RelativePathResolver;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n@@ -121,9 +120,9 @@ public class EagerFromTag extends EagerStateChangingTag<FromTag> {\n             output +\n             EagerReconstructionUtils.buildSetTag(newToOldImportNames, interpreter, true);\n         }\n-        return EagerReconstructionUtils.buildBlockSetTag(\n-          IGNORED_VARIABLE_NAME,\n+        return EagerReconstructionUtils.wrapInTag(\n           output,\n+          DoTag.TAG_NAME,\n           interpreter,\n           true\n         );\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex 1432918..7e9d27a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -10,8 +10,8 @@ import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n import com.hubspot.jinjava.lib.tag.ImportTag;\n-import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.loader.RelativePathResolver;\n import com.hubspot.jinjava.objects.collections.PyMap;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n@@ -143,9 +143,9 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n             childBindings\n           );\n       }\n-      return EagerReconstructionUtils.buildBlockSetTag(\n-        SetTag.IGNORED_VARIABLE_NAME,\n+      return EagerReconstructionUtils.wrapInTag(\n         finalOutput,\n+        DoTag.TAG_NAME,\n         interpreter,\n         true\n       );\n@@ -428,7 +428,6 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n     JinjavaInterpreter child,\n     JinjavaInterpreter parent\n   ) {\n-    childBindings.remove(SetTag.IGNORED_VARIABLE_NAME);\n     for (MacroFunction macro : child.getContext().getGlobalMacros().values()) {\n       if (parent.getContext().isDeferredExecutionMode()) {\n         macro.setDeferred(true);\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\nindex e1fa370..fb1a3db 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerInlineSetTagStrategy.java\n@@ -30,6 +30,7 @@ public class EagerInlineSetTagStrategy extends EagerSetTagStrategy {\n   @Override\n   public EagerExecutionResult getEagerExecutionResult(\n     TagNode tagNode,\n+    String[] variables,\n     String expression,\n     JinjavaInterpreter interpreter\n   ) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\nindex 5c0f5d6..f442ae6 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n@@ -45,6 +45,7 @@ public abstract class EagerSetTagStrategy {\n \n     EagerExecutionResult eagerExecutionResult = getEagerExecutionResult(\n       tagNode,\n+      variables,\n       expression,\n       interpreter\n     );\n@@ -80,6 +81,7 @@ public abstract class EagerSetTagStrategy {\n \n   protected abstract EagerExecutionResult getEagerExecutionResult(\n     TagNode tagNode,\n+    String[] variables,\n     String expression,\n     JinjavaInterpreter interpreter\n   );\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java\nindex 7d94e37..dd17401 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStateChangingTag.java\n@@ -20,7 +20,7 @@ public class EagerStateChangingTag<T extends Tag> extends EagerTagDecorator<T> {\n   }\n \n   @Override\n-  public String innerInterpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n+  public final String innerInterpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n     return eagerInterpret(tagNode, interpreter, null);\n   }\n \n@@ -44,10 +44,7 @@ public class EagerStateChangingTag<T extends Tag> extends EagerTagDecorator<T> {\n             eagerInterpreter ->\n               EagerExpressionResult.fromString(renderChildren(tagNode, eagerInterpreter)),\n             interpreter,\n-            EagerContextWatcher\n-              .EagerChildContextConfig.newBuilder()\n-              .withForceDeferredExecutionMode(true)\n-              .build()\n+            EagerContextWatcher.EagerChildContextConfig.newBuilder().build()\n           )\n           .asTemplateString()\n       );\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\nindex 0e3d40a..a7d00d3 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n@@ -405,7 +405,7 @@ public class EagerReconstructionUtils {\n    * @param name The name of the variable to set.\n    * @param value The string value, potentially containing jinja code to put in the set tag block.\n    * @param interpreter The Jinjava interpreter.\n-   * @param registerDeferredToken Whether or not to register the returned {@link SetTag}\n+   * @param registerDeferredToken Whether to register the returned {@link SetTag}\n    *                           token as an {@link DeferredToken}.\n    * @return A jinjava-syntax string that is the image of a block set tag that will\n    *  be executed at a later time.\n@@ -504,7 +504,7 @@ public class EagerReconstructionUtils {\n           interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag()\n         )\n       ) {\n-        output = wrapInTag(output, RawTag.TAG_NAME, interpreter);\n+        output = wrapInTag(output, RawTag.TAG_NAME, interpreter, false);\n       }\n     }\n     return output;\n@@ -521,31 +521,64 @@ public class EagerReconstructionUtils {\n         !interpreter.getContext().getParent().isAutoEscape()\n       )\n     ) {\n-      output = wrapInTag(output, AutoEscapeTag.TAG_NAME, interpreter);\n+      output = wrapInTag(output, AutoEscapeTag.TAG_NAME, interpreter, false);\n     }\n     return output;\n   }\n \n-  public static String wrapInTag(\n-    String s,\n+  /**\n+   * Wrap the string output in a specified block-type tag.\n+   * @param body The string body to wrap.\n+   * @param tagNameToWrap The name of the tag which will wrap around the {@param body}.\n+   * @param interpreter The Jinjava interpreter.\n+   * @param registerDeferredToken Whether to register the returned Tag\n+   *                           token as an {@link DeferredToken}.\n+   * @return A jinjava-syntax string that is the image of a block set tag that will\n+   *  be executed at a later time.\n+   */public static String wrapInTag(\n+    String body,\n     String tagNameToWrap,\n-    JinjavaInterpreter interpreter\n+    JinjavaInterpreter interpreter,\n+    boolean registerDeferredToken\n   ) {\n-    return (\n-      String.format(\n-        \"%s %s %s\",\n-        interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag(),\n-        tagNameToWrap,\n-        interpreter.getConfig().getTokenScannerSymbols().getExpressionEndWithTag()\n-      ) +\n-      s +\n-      String.format(\n-        \"%s end%s %s\",\n-        interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag(),\n-        tagNameToWrap,\n-        interpreter.getConfig().getTokenScannerSymbols().getExpressionEndWithTag()\n-      )\n+    Map<Library, Set<String>> disabled = interpreter.getConfig().getDisabled();\n+    if (\n+      disabled != null &&\n+      disabled.containsKey(Library.TAG) &&\n+      disabled.get(Library.TAG).contains(tagNameToWrap)\n+    ) {\n+      throw new DisabledException(String.format(\"%s tag disabled\", tagNameToWrap));\n+    }\n+    LengthLimitingStringJoiner blockSetTokenBuilder = new LengthLimitingStringJoiner(\n+      interpreter.getConfig().getMaxOutputSize(),\n+      \" \"\n     );\n+    StringJoiner endTokenBuilder = new StringJoiner(\" \");\n+    blockSetTokenBuilder\n+      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag())\n+      .add(tagNameToWrap)\n+      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionEndWithTag());\n+    endTokenBuilder\n+      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag())\n+      .add(\"end\" + tagNameToWrap)\n+      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionEndWithTag());\n+    String image = blockSetTokenBuilder + body + endTokenBuilder;\n+    if (registerDeferredToken) {\n+      EagerReconstructionUtils.handleDeferredTokenAndReconstructReferences(\n+        interpreter,\n+        new DeferredToken(\n+          new TagToken(\n+            blockSetTokenBuilder.toString(),\n+            interpreter.getLineNumber(),\n+            interpreter.getPosition(),\n+            interpreter.getConfig().getTokenScannerSymbols()\n+          ),\n+          Collections.emptySet(),\n+          Collections.emptySet()\n+        )\n+      );\n+    }\n+    return image;\n   }\n \n   public static String wrapInChildScope(String toWrap, JinjavaInterpreter interpreter) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/DoTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/DoTagTest.java\nindex 427c42b..a039e98 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/DoTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/DoTagTest.java\n@@ -17,11 +17,18 @@ public class DoTagTest extends BaseInterpretingTest {\n   }\n \n   @Test\n-  public void itAddsTemplateErrorOnEmptyExpression() {\n+  public void itAddsTemplateErrorOnEmptyExpressionAndNoEndTag() {\n     String template = \"{% do %}\";\n     RenderResult renderResult = jinjava.renderForResult(template, Maps.newHashMap());\n     assertThat(renderResult.getErrors()).hasSize(1);\n     assertThat(renderResult.getErrors().get(0).getReason())\n       .isEqualTo(ErrorReason.SYNTAX_ERROR);\n   }\n+\n+  @Test\n+  public void itEvaluatesDoBlockAndDiscardsResult() {\n+    String template =\n+      \"{% do %}{% set foo = 1 %}{{ foo }}{% enddo %}{% if foo == 1 %}Yes{% endif %}\";\n+    assertThat(jinjava.render(template, Maps.newHashMap())).isEqualTo(\"Yes\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/SetTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/SetTagTest.java\nindex 3dc036c..7323bf5 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/SetTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/SetTagTest.java\n@@ -299,6 +299,25 @@ public class SetTagTest extends BaseInterpretingTest {\n     assertThat(result).isEqualTo(\"BAR\");\n   }\n \n+  @Test\n+  public void itRunsSetBlockInAChildScope() {\n+    String template =\n+      \"{% set bar = 1 %}{% set foo %}{% set bar = 2 %}{% endset %}{{ bar }}\";\n+    final String result = interpreter.render(template);\n+\n+    assertThat(result).isEqualTo(\"1\");\n+  }\n+\n+  @Test\n+  public void itDoesNotRunSetBlockInAChildScopeForIgnoredVariableName() {\n+    // This is to preserve legacy behaviour used in Eager Execution\n+    String template =\n+      \"{% set bar = 1 %}{% set __ignored__ %}{% set bar = 2 %}{% endset %}{{ bar }}\";\n+    final String result = interpreter.render(template);\n+\n+    assertThat(result).isEqualTo(\"2\");\n+  }\n+\n   private Node fixture(String name) {\n     try {\n       return new TreeParser(\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\nindex eb3cb1b..2c9b2c3 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n@@ -462,11 +462,11 @@ public class EagerImportTagTest extends ImportTagTest {\n     );\n     assertThat(result)\n       .isEqualTo(\n-        \"{% if deferred %}{% set __ignored__ %}{% set current_path = 'import-tree-b.jinja' %}{% set a,foo_b = {'foo_a': 'a', 'import_resource_path': 'import-tree-a.jinja', 'something': 'somn'} ,null %}{% set b = {} %}{% for __ignored__ in [0] %}{% set __ignored__ %}{% set current_path = 'import-tree-a.jinja' %}{% set a = {} %}{% for __ignored__ in [0] %}{% set something = 'somn' %}{% do a.update({'something': something}) %}\\n\" +\n+        \"{% if deferred %}{% do %}{% set current_path = 'import-tree-b.jinja' %}{% set a,foo_b = {'foo_a': 'a', 'import_resource_path': 'import-tree-a.jinja', 'something': 'somn'} ,null %}{% set b = {} %}{% for __ignored__ in [0] %}{% do %}{% set current_path = 'import-tree-a.jinja' %}{% set a = {} %}{% for __ignored__ in [0] %}{% set something = 'somn' %}{% do a.update({'something': something}) %}\\n\" +\n         \"{% set foo_a = 'a' %}{% do a.update({'foo_a': foo_a}) %}\\n\" +\n-        \"{% do a.update({'foo_a': 'a','import_resource_path': 'import-tree-a.jinja','something': 'somn'}) %}{% endfor %}{% set current_path = 'import-tree-b.jinja' %}{% endset %}\\n\" +\n+        \"{% do a.update({'foo_a': 'a','import_resource_path': 'import-tree-a.jinja','something': 'somn'}) %}{% endfor %}{% set current_path = 'import-tree-b.jinja' %}{% enddo %}\\n\" +\n         \"{% set foo_b = 'b' + a.foo_a %}{% do b.update({'foo_b': foo_b}) %}\\n\" +\n-        \"{% do b.update({'a': a,'foo_b': foo_b,'import_resource_path': 'import-tree-b.jinja'}) %}{% endfor %}{% set current_path = '' %}{% endset %}{% endif %}\"\n+        \"{% do b.update({'a': a,'foo_b': foo_b,'import_resource_path': 'import-tree-b.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}{% endif %}\"\n       );\n \n     removeDeferredContextKeys();\n@@ -707,8 +707,8 @@ public class EagerImportTagTest extends ImportTagTest {\n       .isEqualTo(\n         \"a\" +\n         \"{% set vars = {'foo': 'a', 'import_resource_path': 'var-a.jinja'}  %}{% if deferred %}\" +\n-        \"{% set __ignored__ %}{% set current_path = 'var-b.jinja' %}{% set vars = {} %}{% for __ignored__ in [0] %}{% set foo = 'b' %}{% do vars.update({'foo': foo}) %}\\n\" +\n-        \"{% do vars.update({'foo': 'b','import_resource_path': 'var-b.jinja'}) %}{% endfor %}{% set current_path = '' %}{% endset %}\" +\n+        \"{% do %}{% set current_path = 'var-b.jinja' %}{% set vars = {} %}{% for __ignored__ in [0] %}{% set foo = 'b' %}{% do vars.update({'foo': foo}) %}\\n\" +\n+        \"{% do vars.update({'foo': 'b','import_resource_path': 'var-b.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\" +\n         \"{% endif %}\" +\n         \"{{ vars.foo }}\"\n       );\n@@ -734,8 +734,8 @@ public class EagerImportTagTest extends ImportTagTest {\n       .isEqualTo(\n         \"a\" +\n         \"{% set foo = 'a' %}{% if deferred %}\" +\n-        \"{% set __ignored__ %}{% set current_path = 'var-b.jinja' %}{% set foo = 'b' %}\\n\" +\n-        \"{% set current_path = '' %}{% endset %}\" +\n+        \"{% do %}{% set current_path = 'var-b.jinja' %}{% set foo = 'b' %}\\n\" +\n+        \"{% set current_path = '' %}{% enddo %}\" +\n         \"{% endif %}\" +\n         \"{{ foo }}\"\n       );\n@@ -752,9 +752,9 @@ public class EagerImportTagTest extends ImportTagTest {\n       .trim();\n     assertThat(result)\n       .isEqualTo(\n-        \"{% set __ignored__ %}{% set current_path = 'set-two-variables.jinja' %}{% set foo = deferred %}\\n\" +\n+        \"{% do %}{% set current_path = 'set-two-variables.jinja' %}{% set foo = deferred %}\\n\" +\n         \"\\n\" +\n-        \"{% set current_path = '' %}{% endset %}{{ foo }} bar\"\n+        \"{% set current_path = '' %}{% enddo %}{{ foo }} bar\"\n       );\n   }\n \ndiff --git a/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja b/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\nindex cb56c61..5a8c51b 100644\n--- a/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\n+++ b/src/test/resources/eager/does-not-override-import-modification-in-for.expected.jinja\n@@ -1,40 +1,40 @@\n {% for __ignored__ in [0] %}\n-{% set __ignored__ %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% set bar1,foo = {} ,'start' %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% set bar1,foo = {} ,'start' %}{% if deferred %}\n \n {% set foo = 'starta' %}{% do bar1.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n-{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% endset %}\n+{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n {{ bar1.foo }}\n-{% set __ignored__ %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% set bar2,foo = {} ,'start' %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% set bar2,foo = {} ,'start' %}{% if deferred %}\n \n {% set foo = 'starta' %}{% do bar2.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n-{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% endset %}\n+{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n {{ bar2.foo }}\n \n-{% set __ignored__ %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% set bar1,foo = {} ,'start' %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar1 = {} %}{% set bar1,foo = {} ,'start' %}{% if deferred %}\n \n {% set foo = 'starta' %}{% do bar1.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n-{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% endset %}\n+{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n {{ bar1.foo }}\n-{% set __ignored__ %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% set bar2,foo = {} ,'start' %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set bar2 = {} %}{% set bar2,foo = {} ,'start' %}{% if deferred %}\n \n {% set foo = 'starta' %}{% do bar2.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n-{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% endset %}\n+{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n {{ bar2.foo }}\n {% endfor %}\n start\ndiff --git a/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja b/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja\nindex c7418e8..8a4df6f 100644\n--- a/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja\n@@ -1,5 +1,5 @@\n-{% set myname = deferred + 7 %}{% set __ignored__ %}\n+{% set myname = deferred + 7 %}{% do %}\n {% set bar = myname + 19 %}\n Hello {{ myname }}\n-{% set from_bar = bar %}{% endset %}from_foo: Hello {{ myname }}\n+{% set from_bar = bar %}{% enddo %}from_foo: Hello {{ myname }}\n from_bar: {{ from_bar }}\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\nindex f7008ad..483c662 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n@@ -1,11 +1,11 @@\n-{% set myname = deferred + 3 %}{% set __ignored__ %}\n+{% set myname = deferred + 3 %}{% do %}\n {% set bar = myname + 19 %}\n Hello {{ myname }}\n-{% endset %}foo: Hello {{ myname }}\n+{% enddo %}foo: Hello {{ myname }}\n bar: {{ bar }}\n ---\n-{% set myname = deferred + 7 %}{% set __ignored__ %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n+{% set myname = deferred + 7 %}{% do %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n {% set bar = myname + 19 %}{% set simple = {}  %}{% do simple.update({'bar': bar}) %}\n Hello {{ myname }}\n-{% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}simple.foo: {% set deferred_import_resource_path = 'macro-and-set.jinja' %}{% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{{ simple.foo() }}\n+{% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% enddo %}simple.foo: {% set deferred_import_resource_path = 'macro-and-set.jinja' %}{% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{{ simple.foo() }}\n simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-double-import-modification.expected.jinja b/src/test/resources/eager/handles-double-import-modification.expected.jinja\nindex bda97e3..3ba9e59 100644\n--- a/src/test/resources/eager/handles-double-import-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-double-import-modification.expected.jinja\n@@ -1,20 +1,20 @@\n-{% set __ignored__ %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% set bar1 = {}  %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% set bar1 = {}  %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar1.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n-{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% endset %}\n+{% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n ---\n-{% set __ignored__ %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% set bar2 = {}  %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% set bar2 = {}  %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar2.update({'foo': foo}) %}\n \n {% endif %}\n \n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar2.update({'foo': foo}) %}\n-{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% endset %}\n+{% do bar2.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n ---\n {{ bar1.foo }}\n {{ bar2.foo }}\ndiff --git a/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja b/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\nindex a2ed739..ff3237d 100644\n--- a/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\n+++ b/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\n@@ -1,7 +1,7 @@\n {% set primary_line_height = 100 %}{% if deferred %}\n-{% set __ignored__ %}{% set current_path = '../settag/set-val.jinja' %}{% set simple = {} %}{% for __ignored__ in [0] %}{% set primary_line_height = 42 %}{% do simple.update({'primary_line_height': primary_line_height}) %}{% do simple.update({'primary_line_height': 42,'import_resource_path': '../settag/set-val.jinja'}) %}{% endfor %}{% set current_path = '' %}{% endset %}\n+{% do %}{% set current_path = '../settag/set-val.jinja' %}{% set simple = {} %}{% for __ignored__ in [0] %}{% set primary_line_height = 42 %}{% do simple.update({'primary_line_height': primary_line_height}) %}{% do simple.update({'primary_line_height': 42,'import_resource_path': '../settag/set-val.jinja'}) %}{% endfor %}{% set current_path = '' %}{% enddo %}\n {% else %}\n-{% set __ignored__ %}{% set current_path = '../settag/set-val.jinja' %}{% set primary_line_height = 42 %}{% set current_path = '' %}{% endset %}\n+{% do %}{% set current_path = '../settag/set-val.jinja' %}{% set primary_line_height = 42 %}{% set current_path = '' %}{% enddo %}\n {% endif %}\n simple.primary_line_height (deferred): {{ simple.primary_line_height }}\n primary_line_height (deferred): {{ primary_line_height }}\ndiff --git a/src/test/resources/eager/uses-unique-macro-names.expected.jinja b/src/test/resources/eager/uses-unique-macro-names.expected.jinja\nindex 713b248..9fce796 100644\n--- a/src/test/resources/eager/uses-unique-macro-names.expected.jinja\n+++ b/src/test/resources/eager/uses-unique-macro-names.expected.jinja\n@@ -3,8 +3,8 @@\n {% set __macro_foo_97643642_temp_variable_0__ %}\n Goodbye {{ myname }}\n {% endset %}{% set a = filter:upper.filter(__macro_foo_97643642_temp_variable_0__, ____int3rpr3t3r____) %}\n-{% set __ignored__ %}{% set current_path = 'macro-with-filter.jinja' %}\n+{% do %}{% set current_path = 'macro-with-filter.jinja' %}\n {% set __macro_foo_927217348_temp_variable_0__ %}Hello {{ myname }}{% endset %}{% set b = filter:upper.filter(__macro_foo_927217348_temp_variable_0__, ____int3rpr3t3r____) %}\n-{% set current_path = '' %}{% endset %}\n+{% set current_path = '' %}{% enddo %}\n {{ a }}\n {{ b }}\ndiff --git a/src/test/resources/tags/eager/extendstag/reconstructs-deferred-outside-block.expected.jinja b/src/test/resources/tags/eager/extendstag/reconstructs-deferred-outside-block.expected.jinja\nindex b0a755f..04a4e86 100644\n--- a/src/test/resources/tags/eager/extendstag/reconstructs-deferred-outside-block.expected.jinja\n+++ b/src/test/resources/tags/eager/extendstag/reconstructs-deferred-outside-block.expected.jinja\n@@ -1,9 +1,9 @@\n-{% set __ignored__ %}\n+{% do %}\n {% if deferred %}\n {% set foo = 'yes' %}\n {% else %}\n {% set foo = 'no' %}\n-{% endif %}{% endset %}<html>\n+{% endif %}{% enddo %}<html>\n <body>\n <div class=\"sidebar\">\n <h3>Table Of Contents</h3>\ndiff --git a/src/test/resources/tags/settag/set-var-and-deferred.jinja b/src/test/resources/tags/settag/set-var-and-deferred.jinja\nindex 129a80d..b93a836 100644\n--- a/src/test/resources/tags/settag/set-var-and-deferred.jinja\n+++ b/src/test/resources/tags/settag/set-var-and-deferred.jinja\n@@ -1,6 +1,6 @@\n {% if deferred %}\n-{% set __ignored__ %}{% set path = '../settag/set-var-and-deferred.jinja' %}{% set value = null %}{% set my_var = {} %}{% set my_var = {'foo': 'bar'} %}{% set my_var = {'my_var': my_var} %}\n+{% do %}{% set path = '../settag/set-var-and-deferred.jinja' %}{% set value = null %}{% set my_var = {} %}{% set my_var = {'foo': 'bar'} %}{% set my_var = {'my_var': my_var} %}\n {% set value = deferred %}{% do my_var.update({\"value\": value}) %}\n-{% do my_var.update({'import_resource_path': '../settag/set-var-and-deferred.jinja','value': value}) %}{% set path = '' %}{% endset %}\n+{% do my_var.update({'import_resource_path': '../settag/set-var-and-deferred.jinja','value': value}) %}{% set path = '' %}{% enddo %}\n {{ my_var }}\n {% endif %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T20:43:37.725774Z", "commit_hash": "ea01e54be6168964a372457fea2fd975c37a6cff", "commit_message": "Simplify set blocks and macro execution by only executing once.\nI realised that what I was trying to achieve by running them twice is getting the necessary values deferred so that they just wouldn't be included in a reconstructed set tag that was within a child scope.\nBut if we just filter out the DeferredMacroShadows when creating the PrefixToPreserveState, we can omit those set tags with just the single execution\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\nindex de3ed35..2b7973a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/eager/EagerMacroFunction.java\n@@ -81,27 +81,27 @@ public class EagerMacroFunction extends MacroFunction {\n     }\n \n     int currentCallCount = callCount.getAndIncrement();\n-    EagerExecutionResult firstRunResult = eagerEvaluate(\n+    EagerExecutionResult eagerExecutionResult = eagerEvaluate(\n       () -> super.doEvaluate(argMap, kwargMap, varArgs).toString(),\n+      EagerChildContextConfig\n+        .newBuilder()\n+        .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n+        .withTakeNewValue(true)\n+        .build(),\n       interpreter\n     );\n     if (\n-      !firstRunResult.getResult().isFullyResolved() &&\n+      !eagerExecutionResult.getResult().isFullyResolved() &&\n       (\n         !interpreter.getContext().isPartialMacroEvaluation() ||\n-        !firstRunResult.getSpeculativeBindings().isEmpty() ||\n+        !eagerExecutionResult.getSpeculativeBindings().isEmpty() ||\n         interpreter.getContext().isDeferredExecutionMode()\n       )\n     ) {\n       PrefixToPreserveState prefixToPreserveState = EagerReconstructionUtils.resetAndDeferSpeculativeBindings(\n         interpreter,\n-        firstRunResult\n+        eagerExecutionResult\n       );\n-      firstRunResult =\n-        eagerEvaluateInDeferredExecutionMode(\n-          () -> super.doEvaluate(argMap, kwargMap, varArgs).toString(),\n-          interpreter\n-        );\n \n       String tempVarName = MacroFunctionTempVariable.getVarName(\n         getName(),\n@@ -114,12 +114,12 @@ public class EagerMacroFunction extends MacroFunction {\n         .put(\n           tempVarName,\n           new MacroFunctionTempVariable(\n-            prefixToPreserveState + firstRunResult.getResult().toString(true)\n+            prefixToPreserveState + eagerExecutionResult.asTemplateString()\n           )\n         );\n       throw new DeferredParsingException(this, tempVarName);\n     }\n-    return firstRunResult.getResult().toString(true);\n+    return eagerExecutionResult.getResult().toString(true);\n   }\n \n   private String getEvaluationResultDirectly(\n@@ -134,20 +134,6 @@ public class EagerMacroFunction extends MacroFunction {\n     return evaluationResult;\n   }\n \n-  private EagerExecutionResult eagerEvaluate(\n-    Supplier<String> stringSupplier,\n-    JinjavaInterpreter interpreter\n-  ) {\n-    return eagerEvaluate(\n-      stringSupplier,\n-      EagerChildContextConfig\n-        .newBuilder()\n-        .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n-        .build(),\n-      interpreter\n-    );\n-  }\n-\n   private EagerExecutionResult eagerEvaluateInDeferredExecutionMode(\n     Supplier<String> stringSupplier,\n     JinjavaInterpreter interpreter\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\nindex 8129013..ff27df0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n@@ -31,7 +31,7 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n     String expression,\n     JinjavaInterpreter interpreter\n   ) {\n-    EagerExecutionResult firstRunResult = EagerContextWatcher.executeInChildContext(\n+    EagerExecutionResult eagerExecutionResult = EagerContextWatcher.executeInChildContext(\n       eagerInterpreter ->\n         EagerExpressionResult.fromSupplier(\n           () -> SetTag.renderChildren(tagNode, eagerInterpreter, variables[0]),\n@@ -40,36 +40,20 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n       interpreter,\n       EagerContextWatcher\n         .EagerChildContextConfig.newBuilder()\n-        .withCheckForContextChanges(!interpreter.getContext().isDeferredExecutionMode())\n+        .withTakeNewValue(true)\n         .build()\n     );\n     if (\n-      !firstRunResult.getResult().isFullyResolved() &&\n-      !firstRunResult.getSpeculativeBindings().isEmpty() ||\n+      !eagerExecutionResult.getResult().isFullyResolved() &&\n+      !eagerExecutionResult.getSpeculativeBindings().isEmpty() ||\n       interpreter.getContext().isDeferredExecutionMode()\n     ) {\n       EagerReconstructionUtils.resetAndDeferSpeculativeBindings(\n         interpreter,\n-        firstRunResult\n-      );\n-      EagerExecutionResult secondRunResult = EagerContextWatcher.executeInChildContext(\n-        eagerInterpreter ->\n-          EagerExpressionResult.fromSupplier(\n-            () -> SetTag.renderChildren(tagNode, eagerInterpreter, variables[0]),\n-            eagerInterpreter\n-          ),\n-        interpreter,\n-        EagerContextWatcher\n-          .EagerChildContextConfig.newBuilder()\n-          .withForceDeferredExecutionMode(true)\n-          .build()\n-      );\n-      return new EagerExecutionResult(\n-        secondRunResult.getResult(),\n-        firstRunResult.getSpeculativeBindings()\n+        eagerExecutionResult\n       );\n     }\n-    return firstRunResult;\n+    return eagerExecutionResult;\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\nindex 08e67bf..a7d0450 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n@@ -3,6 +3,7 @@ package com.hubspot.jinjava.lib.tag.eager;\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildBlockSetTag;\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildSetTag;\n \n+import com.hubspot.jinjava.interpret.DeferredValueShadow;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.LazyReference;\n import com.hubspot.jinjava.objects.serialization.PyishBlockSetSerializable;\n@@ -10,6 +11,7 @@ import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.PrefixToPreserveState;\n import java.util.AbstractMap;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -47,9 +49,16 @@ public class EagerExecutionResult {\n     }\n     JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n     prefixToPreserveState = new PrefixToPreserveState();\n+    Collection<Entry<String, Object>> filteredEntries = speculativeBindings\n+      .entrySet()\n+      .stream()\n+      .filter(\n+        entry ->\n+          !(interpreter.getContext().get(entry.getKey()) instanceof DeferredValueShadow)\n+      )\n+      .collect(Collectors.toList());\n     prefixToPreserveState.putAll(\n-      speculativeBindings\n-        .entrySet()\n+      filteredEntries\n         .stream()\n         .filter(entry -> entry.getValue() instanceof PyishBlockSetSerializable)\n         .map(\n@@ -66,8 +75,7 @@ public class EagerExecutionResult {\n         )\n         .collect(Collectors.toMap(Entry::getKey, Entry::getValue))\n     );\n-    speculativeBindings\n-      .entrySet()\n+    filteredEntries\n       .stream()\n       .filter(entry -> !(entry.getValue() instanceof PyishBlockSetSerializable))\n       .filter(entry -> !(entry.getValue() instanceof LazyReference))\n@@ -85,8 +93,7 @@ public class EagerExecutionResult {\n             )\n           )\n       );\n-    speculativeBindings\n-      .entrySet()\n+    filteredEntries\n       .stream()\n       .filter(entry -> (entry.getValue() instanceof LazyReference))\n       .map(\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 4d791b4..aa7b1f7 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1126,7 +1126,7 @@ public class EagerTest {\n \n   @Test\n   public void itHandlesHigherScopeReferenceModification() {\n-    expectedTemplateInterpreter.assertExpectedOutput(\n+    expectedTemplateInterpreter.assertExpectedOutputNonIdempotent(\n       \"handles-higher-scope-reference-modification\"\n     );\n   }\ndiff --git a/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja b/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\nindex 1241af5..89eba8d 100644\n--- a/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\n+++ b/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\n@@ -1,6 +1,6 @@\n 1\n {% set bar = [1] %}{% set foo = '1' %}{% if deferred %}\n-{% set bar = [1] %}{% set foo %}2{% do bar.append(2) %}{% endset %}\n+{% set foo %}2{% do bar.append(2) %}{% endset %}\n {% endif %}\n Bar: {{ bar }}\n Foo: {{ foo }}\ndiff --git a/src/test/resources/eager/defers-macro-in-for.expected.jinja b/src/test/resources/eager/defers-macro-in-for.expected.jinja\nindex 93d3b72..16d63d7 100644\n--- a/src/test/resources/eager/defers-macro-in-for.expected.jinja\n+++ b/src/test/resources/eager/defers-macro-in-for.expected.jinja\n@@ -1,3 +1,3 @@\n-{% set my_list = [] %}{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% for item in filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n+{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% for item in filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n {{ item }}\n {% endfor %}\ndiff --git a/src/test/resources/eager/defers-macro-in-if.expected.jinja b/src/test/resources/eager/defers-macro-in-if.expected.jinja\nindex 5e8ad31..f2cdabe 100644\n--- a/src/test/resources/eager/defers-macro-in-if.expected.jinja\n+++ b/src/test/resources/eager/defers-macro-in-if.expected.jinja\n@@ -1,3 +1,3 @@\n-{% set my_list = [] %}{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% if [] == filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n+{% set my_list = [] %}{% macro macro_append(num) %}{% do my_list.append(num) %}{{ my_list }}{% endmacro %}{% if [] == filter:split.filter(macro_append(deferred), ____int3rpr3t3r____, ',', 2) %}\n {{ my_list }}\n {% endif %}\ndiff --git a/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja\nindex 013f475..cb6121e 100644\n--- a/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja\n+++ b/src/test/resources/eager/does-not-reconstruct-variable-in-wrong-scope.expected.jinja\n@@ -1,11 +1,11 @@\n {% set my_list = ['a'] %}{% if deferred %}\n-{% set my_list = ['a'] %}{% set __macro_append_stuff_153654787_temp_variable_0__ %}\n-{% set __macro_foo_97643642_temp_variable_3__ %}\n+{% set __macro_append_stuff_153654787_temp_variable_0__ %}\n+{% set __macro_foo_97643642_temp_variable_1__ %}\n {% do my_list.append('b') %}\n-{% endset %}{{ __macro_foo_97643642_temp_variable_3__ }}\n-{% set __macro_foo_97643642_temp_variable_4__ %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_1__ }}\n+{% set __macro_foo_97643642_temp_variable_2__ %}\n {% do my_list.append('c') %}\n-{% endset %}{{ __macro_foo_97643642_temp_variable_4__ }}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_2__ }}\n {% endset %}{{ __macro_append_stuff_153654787_temp_variable_0__ }}\n {% endif %}\n \ndiff --git a/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja b/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja\nindex 3c9c82c..52afb22 100644\n--- a/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja\n+++ b/src/test/resources/eager/doesnt-double-append-in-deferred-macro.expected.jinja\n@@ -1,5 +1,5 @@\n-{% set my_list = [] %}{% set __macro_foo_97643642_temp_variable_0__ %}\n-{% do my_list.append('a') %}a\n+{% set my_list = ['a'] %}{% set __macro_foo_97643642_temp_variable_0__ %}\n+a\n {% if deferred %}\n {% do my_list.append('b') %}b\n {% endif %}\ndiff --git a/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja b/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja\nindex 7c56d9e..34d90a9 100644\n--- a/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja\n+++ b/src/test/resources/eager/doesnt-double-append-in-deferred-set.expected.jinja\n@@ -1,5 +1,5 @@\n-{% set my_list = [] %}{% set foo %}\n-{% do my_list.append('a') %}a\n+{% set my_list = ['a'] %}{% set foo %}\n+a\n {% if deferred %}\n {% do my_list.append('b') %}b\n {% endif %}\ndiff --git a/src/test/resources/eager/handles-double-import-modification.expected.jinja b/src/test/resources/eager/handles-double-import-modification.expected.jinja\nindex 3ba9e59..2a509a0 100644\n--- a/src/test/resources/eager/handles-double-import-modification.expected.jinja\n+++ b/src/test/resources/eager/handles-double-import-modification.expected.jinja\n@@ -1,4 +1,4 @@\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% set bar1 = {}  %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar1 = {} %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar1.update({'foo': foo}) %}\n \n@@ -7,7 +7,7 @@\n {% set foo = filter:join.filter([foo, 'b'], ____int3rpr3t3r____, '') %}{% do bar1.update({'foo': foo}) %}\n {% do bar1.update({'foo': foo,'import_resource_path': 'deferred-modification.jinja'}) %}{% set current_path = '' %}{% enddo %}\n ---\n-{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% set bar2 = {}  %}{% if deferred %}\n+{% do %}{% set current_path = 'deferred-modification.jinja' %}{% set foo = null %}{% set bar2 = {} %}{% if deferred %}\n \n {% set foo = 'a' %}{% do bar2.update({'foo': foo}) %}\n \ndiff --git a/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja b/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja\nindex f05c17d..a6bd5b9 100644\n--- a/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja\n+++ b/src/test/resources/eager/keeps-macro-modifications-in-scope.expected.jinja\n@@ -1,10 +1,10 @@\n {% set list = [] %}{% if deferred %}\n \n-{% set list = [] %}{% set __macro_inc_100372882_temp_variable_0__ %}{% do list.append(1) %}1{% set depth = 2 %}\n-{% set __macro_inc_100372882_temp_variable_11__ %}{% do list.append(2) %}2{% set depth = 3 %}\n-{% set __macro_inc_100372882_temp_variable_14__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_14__ }}\n-{% set __macro_inc_100372882_temp_variable_15__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_15__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_11__ }}\n-{% set __macro_inc_100372882_temp_variable_16__ %}{% do list.append(2) %}2{% set depth = 3 %}\n-{% set __macro_inc_100372882_temp_variable_19__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_19__ }}\n-{% set __macro_inc_100372882_temp_variable_20__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_20__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_16__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_0__ }}\n+{% set __macro_inc_100372882_temp_variable_0__ %}{% do list.append(1) %}1{% set depth = 2 %}\n+{% set __macro_inc_100372882_temp_variable_1__ %}{% do list.append(2) %}2{% set depth = 3 %}\n+{% set __macro_inc_100372882_temp_variable_2__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_2__ }}\n+{% set __macro_inc_100372882_temp_variable_3__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_3__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_1__ }}\n+{% set __macro_inc_100372882_temp_variable_4__ %}{% do list.append(2) %}2{% set depth = 3 %}\n+{% set __macro_inc_100372882_temp_variable_5__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_5__ }}\n+{% set __macro_inc_100372882_temp_variable_6__ %}{% do list.append(3) %}3{% endset %}{{ __macro_inc_100372882_temp_variable_6__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_4__ }}{% endset %}{{ __macro_inc_100372882_temp_variable_0__ }}\n {% endif %}\ndiff --git a/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja b/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja\nindex 53b84ce..daa671e 100644\n--- a/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja\n+++ b/src/test/resources/eager/reconstructs-deferred-variable-eventually.expected.jinja\n@@ -1,12 +1,12 @@\n {% set my_list = [] %}{% set __macro_append_stuff_153654787_temp_variable_0__ %}\n {% if deferred %}\n \n-{% set __macro_foo_97643642_temp_variable_2__ %}\n+{% set __macro_foo_97643642_temp_variable_0__ %}\n {% do my_list.append('b') %}\n-{% endset %}{{ __macro_foo_97643642_temp_variable_2__ }}\n-{% set __macro_foo_97643642_temp_variable_3__ %}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_0__ }}\n+{% set __macro_foo_97643642_temp_variable_1__ %}\n {% do my_list.append('c') %}\n-{% endset %}{{ __macro_foo_97643642_temp_variable_3__ }}\n+{% endset %}{{ __macro_foo_97643642_temp_variable_1__ }}\n {% endif %}\n {% endset %}{{ __macro_append_stuff_153654787_temp_variable_0__ }}\n \n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:06:36.957199Z", "commit_hash": "189046bbe6ac9f22564a3a7421ae4979683d7aa0", "commit_message": "Merge pull request #1008 from dbyron-sf/issue-429\n\nfix(default): change default(null) to return null instead of \"null\"", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java\nindex 0076661..c235484 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java\n@@ -86,7 +86,7 @@ public class DefaultFilter extends AbstractFilter implements AdvancedFilter {\n       return object;\n     }\n \n-    return defaultValue instanceof PyWrapper\n+    return (defaultValue instanceof PyWrapper) || (defaultValue == null)\n       ? defaultValue\n       : Objects.toString(defaultValue);\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java\nindex 9893267..ca9977c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java\n@@ -79,4 +79,26 @@ public class DefaultFilterTest extends BaseJinjavaTest {\n       )\n       .isEqualTo(\"Type = str\");\n   }\n+\n+  @Test\n+  public void itDefaultsNullToNull() {\n+    assertThat(\n+        jinjava.render(\n+          \"{% set d=d | default(null) %}{% if (d == null) %}default yields real null{% else %}default yields something other than null{% endif %}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"default yields real null\");\n+  }\n+\n+  @Test\n+  public void itDefaultsNullToNullWithTruthyParam() {\n+    assertThat(\n+        jinjava.render(\n+          \"{% set d=d | default(null, true) %}{% if (d == null) %}default with truthy yields real null{% else %}default with truthy yields something other than null{% endif %}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"default with truthy yields real null\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java\nindex ad01927..b237fe7 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java\n@@ -57,4 +57,9 @@ public class TypeFunctionTest {\n   public void testSafeString() {\n     assertThat(TypeFunction.type(new SafeString(\"foo\"))).isEqualTo(\"str\");\n   }\n+\n+  @Test\n+  public void testNull() {\n+    assertThat(TypeFunction.type(null)).isEqualTo(\"null\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:14:00.166238Z", "commit_hash": "d733fdf38e7818daab5b9d8ccca480da5bed252d", "commit_message": "fix(default): change default(null) to return null instead of \"null\"\n\nfixes https://github.com/HubSpot/jinjava/issues/429\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java\nindex 0076661..c235484 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/DefaultFilter.java\n@@ -86,7 +86,7 @@ public class DefaultFilter extends AbstractFilter implements AdvancedFilter {\n       return object;\n     }\n \n-    return defaultValue instanceof PyWrapper\n+    return (defaultValue instanceof PyWrapper) || (defaultValue == null)\n       ? defaultValue\n       : Objects.toString(defaultValue);\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java\nindex 9893267..ca9977c 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/DefaultFilterTest.java\n@@ -79,4 +79,26 @@ public class DefaultFilterTest extends BaseJinjavaTest {\n       )\n       .isEqualTo(\"Type = str\");\n   }\n+\n+  @Test\n+  public void itDefaultsNullToNull() {\n+    assertThat(\n+        jinjava.render(\n+          \"{% set d=d | default(null) %}{% if (d == null) %}default yields real null{% else %}default yields something other than null{% endif %}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"default yields real null\");\n+  }\n+\n+  @Test\n+  public void itDefaultsNullToNullWithTruthyParam() {\n+    assertThat(\n+        jinjava.render(\n+          \"{% set d=d | default(null, true) %}{% if (d == null) %}default with truthy yields real null{% else %}default with truthy yields something other than null{% endif %}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"default with truthy yields real null\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java\nindex ad01927..b237fe7 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/TypeFunctionTest.java\n@@ -57,4 +57,9 @@ public class TypeFunctionTest {\n   public void testSafeString() {\n     assertThat(TypeFunction.type(new SafeString(\"foo\"))).isEqualTo(\"str\");\n   }\n+\n+  @Test\n+  public void testNull() {\n+    assertThat(TypeFunction.type(null)).isEqualTo(\"null\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:21:07.892399Z", "commit_hash": "d34bc172166a03f7ba0b22571c658b0966c79b1f", "commit_message": "Fix map entry wrapping with limiting and adjust exceptions\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java b/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java\nindex 9e666e1..c9baa85 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/MapEntrySerializer.java\n@@ -36,10 +36,7 @@ public class MapEntrySerializer extends JsonSerializer<Entry<?, ?>> {\n         new CharArrayWriter(),\n         remainingLength\n       );\n-      objectWriter.writeValue(\n-        new SizeLimitingWriter(new CharArrayWriter(), remainingLength),\n-        entry.getValue()\n-      );\n+      objectWriter.writeValue(sizeLimitingWriter, entry.getValue());\n       value = sizeLimitingWriter.toString();\n     } else {\n       key = PyishObjectMapper.PYISH_OBJECT_WRITER.writeValueAsString(entry.getKey());\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java\nindex d616f75..dd72770 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapper.java\n@@ -9,6 +9,7 @@ import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.OutputTooBigException;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n import java.io.CharArrayWriter;\n import java.io.IOException;\n@@ -48,7 +49,21 @@ public class PyishObjectMapper {\n       return getAsPyishStringOrThrow(val);\n     } catch (IOException e) {\n       if (e instanceof SizeLimitingJsonProcessingException) {\n-        throw new DeferredValueException(String.format(\"%s: %s\", e.getMessage(), val));\n+        if (\n+          JinjavaInterpreter\n+            .getCurrentMaybe()\n+            .map(\n+              interpreter -> interpreter.getConfig().getExecutionMode().useEagerParser()\n+            )\n+            .orElse(false)\n+        ) {\n+          throw new DeferredValueException(String.format(\"%s: %s\", e.getMessage(), val));\n+        } else {\n+          throw new OutputTooBigException(\n+            ((SizeLimitingJsonProcessingException) e).getMaxSize(),\n+            ((SizeLimitingJsonProcessingException) e).getAttemptedSize()\n+          );\n+        }\n       }\n       return Objects.toString(val, \"\");\n     }\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingJsonProcessingException.java b/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingJsonProcessingException.java\nindex eb0736a..063737f 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingJsonProcessingException.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingJsonProcessingException.java\n@@ -3,8 +3,26 @@ package com.hubspot.jinjava.objects.serialization;\n import com.fasterxml.jackson.core.JsonProcessingException;\n \n public class SizeLimitingJsonProcessingException extends JsonProcessingException {\n+  private final int maxSize;\n+  private final int attemptedSize;\n \n   protected SizeLimitingJsonProcessingException(int maxSize, int attemptedSize) {\n-    super(\"Max length of {} chars reached when serializing. {} chars attempted.\");\n+    super(\n+      String.format(\n+        \"Max length of %d chars reached when serializing. %d chars attempted.\",\n+        maxSize,\n+        attemptedSize\n+      )\n+    );\n+    this.maxSize = maxSize;\n+    this.attemptedSize = attemptedSize;\n+  }\n+\n+  public int getAttemptedSize() {\n+    return attemptedSize;\n+  }\n+\n+  public int getMaxSize() {\n+    return maxSize;\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingWriter.java b/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingWriter.java\nindex a37b554..68b0d3e 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingWriter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/SizeLimitingWriter.java\n@@ -43,8 +43,8 @@ public class SizeLimitingWriter extends Writer {\n   private void checkMaxSize(int extra) throws SizeLimitingJsonProcessingException {\n     if (remainingLength.addAndGet(extra * -1) < 0) {\n       throw new SizeLimitingJsonProcessingException(\n-        charArrayWriter.size() + extra,\n-        startingLength\n+        startingLength,\n+        charArrayWriter.size() + extra\n       );\n     }\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java\nindex 74424a1..1ace159 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java\n@@ -2,7 +2,9 @@ package com.hubspot.jinjava.lib.tag.eager;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import com.hubspot.jinjava.BaseInterpretingTest;\n import com.hubspot.jinjava.JinjavaConfig;\n@@ -10,7 +12,6 @@ import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.OutputTooBigException;\n-import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n import com.hubspot.jinjava.lib.fn.ELFunctionDefinition;\n import com.hubspot.jinjava.lib.tag.Tag;\n import com.hubspot.jinjava.mode.EagerExecutionMode;\n@@ -124,7 +125,7 @@ public class EagerTagDecoratorTest extends BaseInterpretingTest {\n         () ->\n           eagerTagDecorator.getEagerTagImage((TagToken) tagNode.getMaster(), interpreter)\n       )\n-      .isInstanceOf(OutputTooBigException.class);\n+      .isInstanceOf(DeferredValueException.class);\n   }\n \n   @Test\ndiff --git a/src/test/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapperTest.java b/src/test/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapperTest.java\nindex b0d3c00..dcb8020 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapperTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/serialization/PyishObjectMapperTest.java\n@@ -5,6 +5,9 @@ import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.google.common.collect.ImmutableMap;\n+import com.hubspot.jinjava.Jinjava;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.objects.collections.SizeLimitingPyMap;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -34,6 +37,25 @@ public class PyishObjectMapperTest {\n   }\n \n   @Test\n+  public void itSerializesMapEntrySetWithLimit() throws JsonProcessingException {\n+    SizeLimitingPyMap map = new SizeLimitingPyMap(new HashMap<>(), 10);\n+    map.put(\"foo\", \"bar\");\n+    map.put(\"bar\", ImmutableMap.of(\"foobar\", new ArrayList<>()));\n+\n+    Jinjava jinjava = new Jinjava(\n+      JinjavaConfig.newBuilder().withMaxOutputSize(10000).build()\n+    );\n+    try {\n+      JinjavaInterpreter.pushCurrent(jinjava.newInterpreter());\n+      String result = PyishObjectMapper.getAsPyishString(map.items());\n+      assertThat(result)\n+        .isEqualTo(\"[fn:map_entry('bar', {'foobar': []} ), fn:map_entry('foo', 'bar')]\");\n+    } finally {\n+      JinjavaInterpreter.popCurrent();\n+    }\n+  }\n+\n+  @Test\n   public void itSerializesMapWithNullValues() {\n     Map<String, Object> map = new SizeLimitingPyMap(new HashMap<>(), 10);\n     map.put(\"foo\", \"bar\");\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:36:30.221742Z", "commit_hash": "1d1e262ce8849b7b5976be7a0f6462761aa3805a", "commit_message": "Merge pull request #937 from HubSpot/fix-deferred-words\n\nUse DeferredMacroValueImpl in EagerTagDecorator", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\nindex 3fa3628..cea34a9 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n@@ -1,7 +1,7 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n import com.hubspot.jinjava.el.ext.DeferredParsingException;\n-import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.DeferredMacroValueImpl;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -222,7 +222,8 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n             .getDeferredWords()\n             .stream()\n             .filter(\n-              word -> !(interpreter.getContext().get(word) instanceof DeferredValue)\n+              word ->\n+                !(interpreter.getContext().get(word) instanceof DeferredMacroValueImpl)\n             )\n             .collect(Collectors.toSet())\n         )\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTagTest.java\nindex a9a63c8..4ced5d4 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTagTest.java\n@@ -66,7 +66,8 @@ public class EagerIfTagTest extends IfTagTest {\n       .findAny();\n     assertThat(maybeEagerTagToken).isPresent();\n     assertThat(maybeEagerTagToken.get().getSetDeferredWords()).isEmpty();\n-    assertThat(maybeEagerTagToken.get().getUsedDeferredWords()).isEmpty();\n+    assertThat(maybeEagerTagToken.get().getUsedDeferredWords())\n+      .containsExactly(\"deferred\");\n   }\n \n   @Test\n@@ -81,7 +82,8 @@ public class EagerIfTagTest extends IfTagTest {\n       .findAny();\n     assertThat(maybeEagerTagToken).isPresent();\n     assertThat(maybeEagerTagToken.get().getSetDeferredWords()).isEmpty();\n-    assertThat(maybeEagerTagToken.get().getUsedDeferredWords()).isEmpty();\n+    assertThat(maybeEagerTagToken.get().getUsedDeferredWords())\n+      .containsExactly(\"deferred\");\n   }\n \n   @Test\n@@ -96,6 +98,7 @@ public class EagerIfTagTest extends IfTagTest {\n       .findAny();\n     assertThat(maybeEagerTagToken).isPresent();\n     assertThat(maybeEagerTagToken.get().getSetDeferredWords()).isEmpty();\n-    assertThat(maybeEagerTagToken.get().getUsedDeferredWords()).isEmpty();\n+    assertThat(maybeEagerTagToken.get().getUsedDeferredWords())\n+      .containsExactly(\"deferred\");\n   }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTagTest.java\nindex d800ea8..9e87ee1 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerUnlessTagTest.java\n@@ -66,6 +66,7 @@ public class EagerUnlessTagTest extends UnlessTagTest {\n       .findAny();\n     assertThat(maybeEagerTagToken).isPresent();\n     assertThat(maybeEagerTagToken.get().getSetDeferredWords()).isEmpty();\n-    assertThat(maybeEagerTagToken.get().getUsedDeferredWords()).isEmpty();\n+    assertThat(maybeEagerTagToken.get().getUsedDeferredWords())\n+      .containsExactly(\"deferred\");\n   }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:42:36.453676Z", "commit_hash": "bc82bada7d6aaecdc7011363f80bf2899fbc9254", "commit_message": "Merge pull request #945 from HubSpot/revert-944-revert-943-fix-title-filter\n\nUpdate title filter to ignore special characters v2", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\nindex 19da563..4bc07c0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n@@ -4,7 +4,6 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import org.apache.commons.lang3.text.WordUtils;\n \n /**\n  * Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase.\n@@ -30,10 +29,36 @@ public class TitleFilter implements Filter {\n \n   @Override\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n-    if (var instanceof String) {\n-      String value = (String) var;\n-      return WordUtils.capitalize(value.toLowerCase());\n+    if (var == null) {\n+      return null;\n     }\n-    return var;\n+\n+    String value = var.toString();\n+\n+    char[] chars = value.toCharArray();\n+    boolean titleCased = false;\n+\n+    for (int i = 0; i < chars.length; i++) {\n+      if (Character.isWhitespace(chars[i])) {\n+        titleCased = false;\n+        continue;\n+      }\n+\n+      char original = chars[i];\n+      if (titleCased) {\n+        chars[i] = Character.toLowerCase(original);\n+      } else {\n+        if (charCanBeTitlecased(original)) {\n+          chars[i] = Character.toTitleCase(original);\n+          titleCased = true;\n+        }\n+      }\n+    }\n+\n+    return new String(chars);\n+  }\n+\n+  private boolean charCanBeTitlecased(char c) {\n+    return Character.toLowerCase(c) != Character.toTitleCase(c);\n   }\n }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\nindex d3cb49b..a0c89fb 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n@@ -13,6 +13,12 @@ public class TitleFilterTest {\n   }\n \n   @Test\n+  public void itPreservesWhitespace() {\n+    assertThat(new TitleFilter().filter(\"this   is string   \", null))\n+      .isEqualTo(\"This   Is String   \");\n+  }\n+\n+  @Test\n   public void itDoesNotChangeAlreadyTitleCasedString() {\n     assertThat(new TitleFilter().filter(\"This Is String\", null))\n       .isEqualTo(\"This Is String\");\n@@ -23,4 +29,22 @@ public class TitleFilterTest {\n     assertThat(new TitleFilter().filter(\"this is sTRING\", null))\n       .isEqualTo(\"This Is String\");\n   }\n+\n+  @Test\n+  public void itIgnoresParenthesesWhenCapitalizing() {\n+    assertThat(new TitleFilter().filter(\"test (company) name\", null))\n+      .isEqualTo(\"Test (Company) Name\");\n+  }\n+\n+  @Test\n+  public void itIgnoresMultipleSpecialCharactersWhenCapitalizing() {\n+    assertThat(new TitleFilter().filter(\"@@@@mcoley t@est !@#$%^&*()_+plop\", null))\n+      .isEqualTo(\"@@@@Mcoley T@est !@#$%^&*()_+Plop\");\n+  }\n+\n+  @Test\n+  public void itRespectsNewlinesAndTabs() {\n+    assertThat(new TitleFilter().filter(\"test\\t(company)\\nname\", null))\n+      .isEqualTo(\"Test\\t(Company)\\nName\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:53:41.253368Z", "commit_hash": "2ff057fa7a9ba3689aa7e87bf1cb00137ff47658", "commit_message": "Merge pull request #943 from HubSpot/fix-title-filter\n\nUpdate title filter to ignore special characters", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\nindex 19da563..7b0dc79 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n@@ -4,7 +4,6 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import org.apache.commons.lang3.text.WordUtils;\n \n /**\n  * Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase.\n@@ -30,10 +29,36 @@ public class TitleFilter implements Filter {\n \n   @Override\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n-    if (var instanceof String) {\n-      String value = (String) var;\n-      return WordUtils.capitalize(value.toLowerCase());\n+    if (var == null) {\n+      return null;\n     }\n-    return var;\n+\n+    String value = var.toString();\n+\n+    char[] chars = value.toCharArray();\n+    boolean titleCased = false;\n+\n+    for (int i = 0; i < chars.length; i++) {\n+      if (chars[i] == ' ') {\n+        titleCased = false;\n+        continue;\n+      }\n+\n+      char original = chars[i];\n+      if (titleCased) {\n+        chars[i] = Character.toLowerCase(original);\n+      } else {\n+        if (charCanBeTitlecased(original)) {\n+          chars[i] = Character.toTitleCase(original);\n+          titleCased = true;\n+        }\n+      }\n+    }\n+\n+    return new String(chars);\n+  }\n+\n+  private boolean charCanBeTitlecased(char c) {\n+    return Character.toLowerCase(c) != Character.toTitleCase(c);\n   }\n }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\nindex d3cb49b..7b1161b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n@@ -13,6 +13,12 @@ public class TitleFilterTest {\n   }\n \n   @Test\n+  public void itPreservesWhitespace() {\n+    assertThat(new TitleFilter().filter(\"this   is string   \", null))\n+      .isEqualTo(\"This   Is String   \");\n+  }\n+\n+  @Test\n   public void itDoesNotChangeAlreadyTitleCasedString() {\n     assertThat(new TitleFilter().filter(\"This Is String\", null))\n       .isEqualTo(\"This Is String\");\n@@ -23,4 +29,16 @@ public class TitleFilterTest {\n     assertThat(new TitleFilter().filter(\"this is sTRING\", null))\n       .isEqualTo(\"This Is String\");\n   }\n+\n+  @Test\n+  public void itIgnoresParenthesesWhenCapitalizing() {\n+    assertThat(new TitleFilter().filter(\"test (company) name\", null))\n+      .isEqualTo(\"Test (Company) Name\");\n+  }\n+\n+  @Test\n+  public void itIgnoresMultipleSpecialCharactersWhenCapitalizing() {\n+    assertThat(new TitleFilter().filter(\"@@@@mcoley t@est !@#$%^&*()_+plop\", null))\n+      .isEqualTo(\"@@@@Mcoley T@est !@#$%^&*()_+Plop\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T21:59:58.958520Z", "commit_hash": "327916e3492f2d521730140b8a55c55f90a48d72", "commit_message": "Merge pull request #938 from HubSpot/block-set-prefix\n\nReconstruct PyishBlockSerializable values properly in EagerForTag", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\nindex 1da827d..6985439 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerExecutionResult.java\n@@ -1,9 +1,11 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildBlockSetTag;\n import static com.hubspot.jinjava.util.EagerReconstructionUtils.buildSetTag;\n \n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.LazyReference;\n+import com.hubspot.jinjava.objects.serialization.PyishBlockSetSerializable;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import java.util.Collections;\n@@ -39,14 +41,39 @@ public class EagerExecutionResult {\n   }\n \n   public String getPrefixToPreserveState() {\n+    return getPrefixToPreserveState(\n+      !JinjavaInterpreter\n+        .getCurrentMaybe()\n+        .map(interpreter -> interpreter.getContext().isDeferredExecutionMode())\n+        .orElse(false)\n+    );\n+  }\n+\n+  public String getPrefixToPreserveState(boolean registerDeferredToken) {\n     if (prefixToPreserveState != null) {\n       return prefixToPreserveState;\n     }\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n     prefixToPreserveState =\n+      speculativeBindings\n+        .entrySet()\n+        .stream()\n+        .filter(entry -> entry.getValue() instanceof PyishBlockSetSerializable)\n+        .map(\n+          entry ->\n+            buildBlockSetTag(\n+              entry.getKey(),\n+              ((PyishBlockSetSerializable) entry.getValue()).getBlockSetBody(),\n+              interpreter,\n+              registerDeferredToken\n+            )\n+        )\n+        .collect(Collectors.joining()) +\n       buildSetTag(\n         speculativeBindings\n           .entrySet()\n           .stream()\n+          .filter(entry -> !(entry.getValue() instanceof PyishBlockSetSerializable))\n           .filter(entry -> !(entry.getValue() instanceof LazyReference))\n           .collect(\n             Collectors.toMap(\n@@ -54,11 +81,8 @@ public class EagerExecutionResult {\n               entry -> PyishObjectMapper.getAsPyishString(entry.getValue())\n             )\n           ),\n-        JinjavaInterpreter.getCurrent(),\n-        !JinjavaInterpreter\n-          .getCurrentMaybe()\n-          .map(interpreter -> interpreter.getContext().isDeferredExecutionMode())\n-          .orElse(false)\n+        interpreter,\n+        registerDeferredToken\n       ) +\n       speculativeBindings\n         .entrySet()\n@@ -76,11 +100,8 @@ public class EagerExecutionResult {\n           pair ->\n             buildSetTag(\n               Collections.singletonMap(pair.getKey(), pair.getValue()),\n-              JinjavaInterpreter.getCurrent(),\n-              !JinjavaInterpreter\n-                .getCurrentMaybe()\n-                .map(interpreter -> interpreter.getContext().isDeferredExecutionMode())\n-                .orElse(false)\n+              interpreter,\n+              registerDeferredToken\n             )\n         )\n         .collect(Collectors.joining());\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex fd89a97..3b2e127 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n@@ -11,7 +11,6 @@ import com.hubspot.jinjava.interpret.OutputTooBigException;\n import com.hubspot.jinjava.interpret.TemplateError;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.lib.tag.ForTag;\n-import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.EagerExpressionResolver;\n@@ -23,7 +22,6 @@ import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map.Entry;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -138,21 +136,7 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n     EagerExecutionResult eagerExecutionResult = runLoopOnce(tagNode, interpreter);\n     if (!eagerExecutionResult.getSpeculativeBindings().isEmpty()) {\n       // Defer any variables that we tried to modify during the loop\n-      prefix =\n-        EagerReconstructionUtils.buildSetTag(\n-          eagerExecutionResult\n-            .getSpeculativeBindings()\n-            .entrySet()\n-            .stream()\n-            .collect(\n-              Collectors.toMap(\n-                Entry::getKey,\n-                entry -> PyishObjectMapper.getAsPyishString(entry.getValue())\n-              )\n-            ),\n-          interpreter,\n-          true\n-        );\n+      prefix = eagerExecutionResult.getPrefixToPreserveState(true);\n     }\n     // Run for loop again now that the necessary values have been deferred\n     eagerExecutionResult = runLoopOnce(tagNode, interpreter);\ndiff --git a/src/test/resources/eager/reconstructs-block-set-variables-in-for-loop.expected.jinja b/src/test/resources/eager/reconstructs-block-set-variables-in-for-loop.expected.jinja\nnew file mode 100644\nindex 0000000..331e4f7\n--- /dev/null\n+++ b/src/test/resources/eager/reconstructs-block-set-variables-in-for-loop.expected.jinja\n@@ -0,0 +1,5 @@\n+{% for i in range(deferred) %}\n+{% set __macro_foo_temp_variable_0__ %}\n+{{ deferred }}\n+{% endset %}{{ filter:int.filter(__macro_foo_temp_variable_0__, ____int3rpr3t3r____) + 3 }}\n+{% endfor %}\ndiff --git a/src/test/resources/eager/reconstructs-block-set-variables-in-for-loop.jinja b/src/test/resources/eager/reconstructs-block-set-variables-in-for-loop.jinja\nnew file mode 100644\nindex 0000000..4430548\n--- /dev/null\n+++ b/src/test/resources/eager/reconstructs-block-set-variables-in-for-loop.jinja\n@@ -0,0 +1,6 @@\n+{% for i in range(deferred) %}\n+{%- macro foo() %}\n+{{ deferred }}\n+{% endmacro %}\n+{{ foo()|int + 3 }}\n+{% endfor %}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex bbd80ec..a9d71a9 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1167,4 +1167,11 @@ public class EagerTest {\n       \"handles-deferred-for-loop-var-from-macro.expected\"\n     );\n   }\n+\n+  @Test\n+  public void itReconstructsBlockSetVariablesInForLoop() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\n+      \"reconstructs-block-set-variables-in-for-loop\"\n+    );\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:22:01.722945Z", "commit_hash": "fc1a462bd58e093aa3b91c4b579cc1bde45251a8", "commit_message": "Revert parsing fixes (#900)\n\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex fa5f5ef..00fdcab 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -427,83 +427,6 @@ public class ExtendedParser extends Parser {\n   }\n \n   @Override\n-  protected AstNode mul(boolean required) throws ScanException, ParseException {\n-    AstNode v = filter(required);\n-    if (v == null) {\n-      return null;\n-    }\n-    while (true) {\n-      switch (getToken().getSymbol()) {\n-        case MUL:\n-          consumeToken();\n-          v = createAstBinary(v, filter(true), AstBinary.MUL);\n-          break;\n-        case DIV:\n-          consumeToken();\n-          v = createAstBinary(v, filter(true), AstBinary.DIV);\n-          break;\n-        case MOD:\n-          consumeToken();\n-          v = createAstBinary(v, filter(true), AstBinary.MOD);\n-          break;\n-        case EXTENSION:\n-          if (getExtensionHandler(getToken()).getExtensionPoint() == ExtensionPoint.MUL) {\n-            v = getExtensionHandler(consumeToken()).createAstNode(v, filter(true));\n-            break;\n-          }\n-        default:\n-          return v;\n-      }\n-    }\n-  }\n-\n-  protected AstNode filter(boolean required) throws ScanException, ParseException {\n-    AstNode v = unary(required);\n-    if (v == null) {\n-      return null;\n-    }\n-    while (true) {\n-      if (\"|\".equals(getToken().getImage()) && lookahead(0).getSymbol() == IDENTIFIER) {\n-        do {\n-          consumeToken(); // '|'\n-          String filterName = consumeToken().getImage();\n-          List<AstNode> filterParams = Lists.newArrayList(v, interpreter());\n-\n-          // optional filter args\n-          if (getToken().getSymbol() == Symbol.LPAREN) {\n-            AstParameters astParameters = params();\n-            for (int i = 0; i < astParameters.getCardinality(); i++) {\n-              filterParams.add(astParameters.getChild(i));\n-            }\n-          }\n-\n-          AstProperty filterProperty = createAstDot(\n-            identifier(FILTER_PREFIX + filterName),\n-            \"filter\",\n-            true\n-          );\n-          v = createAstMethod(filterProperty, createAstParameters(filterParams)); // function(\"filter:\" + filterName, new AstParameters(filterParams));\n-        } while (\"|\".equals(getToken().getImage()));\n-      } else if (\n-        \"is\".equals(getToken().getImage()) &&\n-        \"not\".equals(lookahead(0).getImage()) &&\n-        isPossibleExpTest(lookahead(1).getSymbol())\n-      ) {\n-        consumeToken(); // 'is'\n-        consumeToken(); // 'not'\n-        v = buildAstMethodForIdentifier(v, \"evaluateNegated\");\n-      } else if (\n-        \"is\".equals(getToken().getImage()) && isPossibleExpTest(lookahead(0).getSymbol())\n-      ) {\n-        consumeToken(); // 'is'\n-        v = buildAstMethodForIdentifier(v, \"evaluate\");\n-      } else {\n-        return v;\n-      }\n-    }\n-  }\n-\n-  @Override\n   protected AstNode value() throws ScanException, ParseException {\n     boolean lvalue = true;\n     AstNode v = nonliteral();\n@@ -552,6 +475,45 @@ public class ExtendedParser extends Parser {\n \n           break;\n         default:\n+          if (\n+            \"|\".equals(getToken().getImage()) && lookahead(0).getSymbol() == IDENTIFIER\n+          ) {\n+            do {\n+              consumeToken(); // '|'\n+              String filterName = consumeToken().getImage();\n+              List<AstNode> filterParams = Lists.newArrayList(v, interpreter());\n+\n+              // optional filter args\n+              if (getToken().getSymbol() == Symbol.LPAREN) {\n+                AstParameters astParameters = params();\n+                for (int i = 0; i < astParameters.getCardinality(); i++) {\n+                  filterParams.add(astParameters.getChild(i));\n+                }\n+              }\n+\n+              AstProperty filterProperty = createAstDot(\n+                identifier(FILTER_PREFIX + filterName),\n+                \"filter\",\n+                true\n+              );\n+              v = createAstMethod(filterProperty, createAstParameters(filterParams)); // function(\"filter:\" + filterName, new AstParameters(filterParams));\n+            } while (\"|\".equals(getToken().getImage()));\n+          } else if (\n+            \"is\".equals(getToken().getImage()) &&\n+            \"not\".equals(lookahead(0).getImage()) &&\n+            isPossibleExpTest(lookahead(1).getSymbol())\n+          ) {\n+            consumeToken(); // 'is'\n+            consumeToken(); // 'not'\n+            v = buildAstMethodForIdentifier(v, \"evaluateNegated\");\n+          } else if (\n+            \"is\".equals(getToken().getImage()) &&\n+            isPossibleExpTest(lookahead(0).getSymbol())\n+          ) {\n+            consumeToken(); // 'is'\n+            v = buildAstMethodForIdentifier(v, \"evaluate\");\n+          }\n+\n           return v;\n       }\n     }\ndiff --git a/src/main/java/com/hubspot/jinjava/tree/parse/ExpressionToken.java b/src/main/java/com/hubspot/jinjava/tree/parse/ExpressionToken.java\nindex 3379e80..fd7efb3 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/parse/ExpressionToken.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/parse/ExpressionToken.java\n@@ -44,7 +44,16 @@ public class ExpressionToken extends Token {\n   @Override\n   protected void parse() {\n     this.expr = WhitespaceUtils.unwrap(image, \"{{\", \"}}\");\n-    this.expr = handleTrim(expr);\n+\n+    if (WhitespaceUtils.startsWith(expr, \"-\")) {\n+      setLeftTrim(true);\n+      this.expr = WhitespaceUtils.unwrap(expr, \"-\", \"\");\n+    }\n+    if (WhitespaceUtils.endsWith(expr, \"-\")) {\n+      setRightTrim(true);\n+      this.expr = WhitespaceUtils.unwrap(expr, \"\", \"-\");\n+    }\n+\n     this.expr = StringUtils.trimToEmpty(this.expr);\n   }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java b/src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java\nindex d73c33b..c9cf7af 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java\n@@ -16,6 +16,7 @@ limitations under the License.\n package com.hubspot.jinjava.tree.parse;\n \n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.util.WhitespaceUtils;\n \n public class TagToken extends Token {\n   private static final long serialVersionUID = -4927751270481832992L;\n@@ -53,7 +54,15 @@ public class TagToken extends Token {\n     }\n \n     content = image.substring(2, image.length() - 2);\n-    content = handleTrim(content);\n+\n+    if (WhitespaceUtils.startsWith(content, \"-\")) {\n+      setLeftTrim(true);\n+      content = WhitespaceUtils.unwrap(content, \"-\", \"\");\n+    }\n+    if (WhitespaceUtils.endsWith(content, \"-\")) {\n+      setRightTrim(true);\n+      content = WhitespaceUtils.unwrap(content, \"\", \"-\");\n+    }\n \n     int nameStart = -1, pos = 0, len = content.length();\n \ndiff --git a/src/main/java/com/hubspot/jinjava/tree/parse/Token.java b/src/main/java/com/hubspot/jinjava/tree/parse/Token.java\nindex e1a308f..53d8385 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/parse/Token.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/parse/Token.java\n@@ -83,25 +83,6 @@ public abstract class Token implements Serializable {\n     this.rightTrimAfterEnd = rightTrimAfterEnd;\n   }\n \n-  /**\n-   * Handle any whitespace control characters, capturing whether leading or trailing\n-   * whitespace should be stripped.\n-   * @param unwrapped the content of the block stripped of its delimeters\n-   * @return the content stripped of any whitespace control characters.\n-   */\n-  protected final String handleTrim(String unwrapped) {\n-    String result = unwrapped;\n-    if (result.startsWith(\"-\")) {\n-      setLeftTrim(true);\n-      result = result.substring(1);\n-    }\n-    if (result.endsWith(\"-\")) {\n-      setRightTrim(true);\n-      result = result.substring(0, result.length() - 1);\n-    }\n-    return result;\n-  }\n-\n   public int getStartPosition() {\n     return startPosition;\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/interpret/JinjavaInterpreterTest.java b/src/test/java/com/hubspot/jinjava/interpret/JinjavaInterpreterTest.java\nindex e99af5d..a6d3fa7 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/JinjavaInterpreterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/JinjavaInterpreterTest.java\n@@ -332,58 +332,4 @@ public class JinjavaInterpreterTest {\n     );\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n-\n-  @Test\n-  public void itBindsUnaryMinusTighterThanCmp() {\n-    assertThat(interpreter.render(\"{{ -5 > 4 }}\")).isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void itBindsUnaryMinusTighterThanIs() {\n-    assertThat(interpreter.render(\"{{ (-5 is integer) == true }}\")).isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void itBindsUnaryMinusTighterThanIsNot() {\n-    assertThat(interpreter.render(\"{{ (-5 is not integer) == false }}\"))\n-      .isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void itBindsUnaryMinusTighterThanFilters() {\n-    assertThat(interpreter.render(\"{{ -5 | abs }}\")).isEqualTo(\"5\");\n-  }\n-\n-  @Test\n-  public void itBindsUnaryMinusTighterThanPlus() {\n-    assertThat(interpreter.render(\"{{ -10 + 4 }}\")).isEqualTo(\"-6\");\n-    assertThat(interpreter.render(\"{{ 4 + -10 }}\")).isEqualTo(\"-6\");\n-  }\n-\n-  @Test\n-  public void itBindsFiltersTighterThanMul() {\n-    assertThat(interpreter.render(\"{{ -5 * -4 | abs }}\")).isEqualTo(\"-20\");\n-  }\n-\n-  @Test\n-  public void itBindsFiltersTighterThanPlus() {\n-    assertThat(interpreter.render(\"{{ -10 | abs + 4 }}\")).isEqualTo(\"14\");\n-    assertThat(interpreter.render(\"{{ 4 + -10 | abs }}\")).isEqualTo(\"14\");\n-  }\n-\n-  @Test\n-  public void itInterpretsFilterChainsInOrder() {\n-    assertThat(interpreter.render(\"{{ 'foo' | upper | replace('O', 'A') }}\"))\n-      .isEqualTo(\"FAA\");\n-  }\n-\n-  @Test\n-  public void itInterpretsStandaloneNegatives() {\n-    assertThat(interpreter.render(\"{{ -10 }}\")).isEqualTo(\"-10\");\n-  }\n-\n-  @Test\n-  public void itInterpretsWhitespaceControlOnBothSides() {\n-    assertThat(interpreter.render(\"{{- 5 -}}\")).isEqualTo(\"5\");\n-  }\n }\ndiff --git a/src/test/resources/eager/handles-deferred-in-ifchanged.jinja b/src/test/resources/eager/handles-deferred-in-ifchanged.jinja\nindex db2f035..c8179a3 100644\n--- a/src/test/resources/eager/handles-deferred-in-ifchanged.jinja\n+++ b/src/test/resources/eager/handles-deferred-in-ifchanged.jinja\n@@ -1,6 +1,6 @@\n {% set foo = [1, 1, 2, 1] %}\n {%- for item in foo -%}\n-{%- ifchanged item -%}\n+{%- ifchanged item- %}\n {{ deferred[item] }}\n {%- endifchanged -%}\n {% endfor%}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:35:28.671061Z", "commit_hash": "379200aa10b1c01cb25e84ace0657ec8c6959cca", "commit_message": "Fix expected test results and defer call tag macro if it can't be fully resolved\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\nindex bd80598..e515755 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCallTag.java\n@@ -86,6 +86,7 @@ public class EagerCallTag extends EagerStateChangingTag<CallTag> {\n           )\n         );\n       }\n+      caller.setDeferred(true);\n       prefixToPreserveState.append(\n         EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n           eagerExecutionResult.getResult().getDeferredWords(),\n", "test_patch": "diff --git a/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.expected.jinja b/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.expected.jinja\nindex 30c2a5c..af8e33a 100644\n--- a/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.expected.jinja\n+++ b/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.expected.jinja\n@@ -1,9 +1,7 @@\n resolved\n \n-\n macro 1\n \n-resolved\n-\n+resolved1\n \n-Aaa resolved\n\\ No newline at end of file\n+macro2\ndiff --git a/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.jinja b/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.jinja\nindex 11a1d7a..ddac4ca 100644\n--- a/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.jinja\n+++ b/src/test/resources/eager/defers-call-tag-with-deferred-argument.expected.jinja\n@@ -1,27 +1,12 @@\n-{% macro foo() -%}\n-first foo definition\n-{% endmacro %}\n-{% macro repeat(val) -%}\n-{% print val %}\n-{{ foo() }}\n+{% macro repeat(val) %}\n+{{ val }}\n {{ caller() }}\n-{% endmacro %}\n-{% call repeat(1) -%}\n-1st caller\n-{% macro foo() -%}\n-second foo definition\n-{% endmacro %}\n-{% macro repeat(val) -%}\n-{% print val %}\n-{{ foo() }}\n+{% endmacro %}{% call repeat(deferred) %}\n+macro 1\n+{% macro repeat(val) %}\n+{{ val }}\n {{ caller() }}\n-{% endmacro %}\n-{% for i in range(1) -%}\n-{% macro foo() -%}\n-third foo definition\n-{% endmacro -%}\n-{% call repeat(2) -%}\n-2nd caller\n+{% endmacro %}{% call repeat(deferred + 1) %}\n+macro2\n+{% endcall %}\n {% endcall %}\n-{% endfor %}\n-{% endcall %}\n\\ No newline at end of file\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:40:03.034372Z", "commit_hash": "4262011d54e262e590b077caea4ff1b6a876d574", "commit_message": "Merge pull request #885 from HubSpot/inline-whitespace-trimming\n\nFix right-side inline whitespace trimming", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/tree/TreeParser.java b/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\nindex b2da482..406e1b7 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\n@@ -155,7 +155,7 @@ public class TreeParser {\n     final Node lastSibling = getLastSibling();\n \n     // if last sibling was a tag and has rightTrimAfterEnd, strip whitespace\n-    if (lastSibling instanceof TagNode && lastSibling.getMaster().isRightTrimAfterEnd()) {\n+    if (lastSibling instanceof TagNode && isRightTrim((TagNode) lastSibling)) {\n       textToken.setLeftTrim(true);\n     }\n \n@@ -171,6 +171,20 @@ public class TreeParser {\n     return n;\n   }\n \n+  private boolean isRightTrim(TagNode lastSibling) {\n+    return (\n+        lastSibling.getEndName() == null ||\n+        (\n+          lastSibling.getTag() instanceof FlexibleTag &&\n+          !((FlexibleTag) lastSibling.getTag()).hasEndTag(\n+              (TagToken) lastSibling.getMaster()\n+            )\n+        )\n+      )\n+      ? lastSibling.getMaster().isRightTrim()\n+      : lastSibling.getMaster().isRightTrimAfterEnd();\n+  }\n+\n   private Node expression(ExpressionToken expressionToken) {\n     ExpressionNode n = createExpressionNode(expressionToken);\n     n.setParent(parent);\ndiff --git a/src/test/resources/eager/has-proper-line-stripping.expected.jinja b/src/test/resources/eager/has-proper-line-stripping.expected.jinja\nnew file mode 100644\nindex 0000000..a56e562\n--- /dev/null\n+++ b/src/test/resources/eager/has-proper-line-stripping.expected.jinja\n@@ -0,0 +1,3 @@\n+1\n+2\n+3{% if deferred > 0 %}{{ deferred }}{% elif deferred == 0 %}null{% else %}{{ deferred }}{% endif %}\ndiff --git a/src/test/resources/eager/has-proper-line-stripping.jinja b/src/test/resources/eager/has-proper-line-stripping.jinja\nnew file mode 100644\nindex 0000000..0def880\n--- /dev/null\n+++ b/src/test/resources/eager/has-proper-line-stripping.jinja\n@@ -0,0 +1,10 @@\n+1\n+{% do 1 -%}\n+2\n+3{% if deferred > 0 -%}\n+{{ deferred }}\n+{%- elif deferred == 0 -%}\n+null\n+{%- else -%}\n+{{ deferred }}\n+{%- endif %}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 4bd016f..32c0dc1 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1073,4 +1073,9 @@ public class EagerTest {\n       \"reconstructs-map-node.expected\"\n     );\n   }\n+\n+  @Test\n+  public void itHasProperLineStripping() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\"has-proper-line-stripping\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\nindex c62d08d..401e6c1 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n@@ -636,15 +636,15 @@ public class EagerImportTagTest extends ImportTagTest {\n     );\n     assertThat(result.trim())\n       .isEqualTo(\n-        \"{% set var = [] %}{% do var.append('a' ~ deferred) %}\\n\" +\n+        \"{% set var = [] %}{% do var.append('a' ~ deferred) %}\" +\n         \"a\\n\" +\n-        \"{% do var.append('b' ~ deferred) %}\\n\" +\n+        \"{% do var.append('b' ~ deferred) %}\" +\n         \"b\\n\" +\n         \"c{{ var }}\"\n       );\n     context.put(\"deferred\", \"resolved\");\n     assertThat(interpreter.render(result).trim())\n-      .isEqualTo(\"a\\n\" + \"\\n\" + \"b\\n\" + \"c['aresolved', 'bresolved']\");\n+      .isEqualTo(\"a\\n\" + \"b\\n\" + \"c['aresolved', 'bresolved']\");\n   }\n \n   @Test\n@@ -656,7 +656,7 @@ public class EagerImportTagTest extends ImportTagTest {\n       \"{{ apply('foo') }}\\n\" +\n       \"{{ val }}\"\n     );\n-    assertThat(result.trim()).isEqualTo(\"{% set val = deferred %}\\n5foo\\n{{ val }}\");\n+    assertThat(result.trim()).isEqualTo(\"{% set val = deferred %}5foo\\n{{ val }}\");\n     context.put(\"deferred\", \"resolved\");\n     assertThat(interpreter.render(result).trim()).isEqualTo(\"5foo\\nresolved\");\n   }\ndiff --git a/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java b/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\nindex 2bf2d02..ba5573f 100644\n--- a/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\n+++ b/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\n@@ -117,6 +117,13 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsAllOuterWhiteSpaceForInlineTags() throws Exception {\n+    String expression = \"1\\n\\n{%- print 2 -%}\\n\\n3\\n\\n{%- set x = 1 -%}\\n\\n4\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\"1234\");\n+  }\n+\n+  @Test\n   public void itStripsAllOuterWhiteSpaceWithComment() throws Exception {\n     String expression =\n       \".\\n {#- comment -#} \\n {#- comment -#} {%- for foo in [1,2,3] -%} {{ foo }} {%- endfor -%} \\n {#- comment -#} \\n {#- comment -#}.\";\ndiff --git a/src/test/resources/eager/defers-macro-for-do-and-print.jinja b/src/test/resources/eager/defers-macro-for-do-and-print.jinja\nindex 0987752..2860ccf 100644\n--- a/src/test/resources/eager/defers-macro-for-do-and-print.jinja\n+++ b/src/test/resources/eager/defers-macro-for-do-and-print.jinja\n@@ -4,6 +4,6 @@\n Is ({{ my_list }}),\n {% print macro_append(first) %}\n Is ({{ my_list }}),\n-{%- do macro_append(deferred) -%}\n+{%- do macro_append(deferred) %}\n Is ({{ my_list }}),\n {% print macro_append(deferred2) %}\ndiff --git a/src/test/resources/eager/eagerly-defers-macro.expected.expected.jinja b/src/test/resources/eager/eagerly-defers-macro.expected.expected.jinja\nindex 70f9f86..706ad90 100644\n--- a/src/test/resources/eager/eagerly-defers-macro.expected.expected.jinja\n+++ b/src/test/resources/eager/eagerly-defers-macro.expected.expected.jinja\n@@ -1,5 +1,4 @@\n I am foo\n \n \n-\n No more foo\ndiff --git a/src/test/resources/eager/eagerly-defers-macro.expected.jinja b/src/test/resources/eager/eagerly-defers-macro.expected.jinja\nindex 527d2ac..cd45e9e 100644\n--- a/src/test/resources/eager/eagerly-defers-macro.expected.jinja\n+++ b/src/test/resources/eager/eagerly-defers-macro.expected.jinja\n@@ -1,10 +1,6 @@\n {% macro big_guy() %}\n-{% if deferred %}I am foo\n-{% else %}I am bar\n-{% endif %}\n+{% if deferred %}I am foo{% else %}I am bar{% endif %}\n {% endmacro %}{% print big_guy() %}\n {% macro big_guy() %}\n-{% if deferred %}No more foo\n-{% else %}I am bar\n-{% endif %}\n-{% endmacro %}{% print big_guy() %}\n+{% if deferred %}No more foo{% else %}I am bar{% endif %}\n+{% endmacro %}{% print big_guy() %}\n\\ No newline at end of file\ndiff --git a/src/test/resources/eager/eagerly-defers-macro.jinja b/src/test/resources/eager/eagerly-defers-macro.jinja\nindex 20cce4e..673f7f6 100644\n--- a/src/test/resources/eager/eagerly-defers-macro.jinja\n+++ b/src/test/resources/eager/eagerly-defers-macro.jinja\n@@ -12,5 +12,5 @@\n {% endif %}\n {% endmacro %}\n {% print big_guy() %}\n-{%- set foo = 'No more foo' -%}\n+{% set foo = 'No more foo' -%}\n {% print big_guy() %}\ndiff --git a/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja b/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja\nindex 27ae4b8..c7418e8 100644\n--- a/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-from-import-as.expected.jinja\n@@ -1,6 +1,5 @@\n {% set myname = deferred + 7 %}{% set __ignored__ %}\n {% set bar = myname + 19 %}\n Hello {{ myname }}\n-{% set from_bar = bar %}{% endset %}\n-from_foo: Hello {{ myname }}\n+{% set from_bar = bar %}{% endset %}from_foo: Hello {{ myname }}\n from_bar: {{ from_bar }}\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\nindex 76c6bfa..8210627 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n@@ -1,12 +1,11 @@\n {% set myname = deferred + 3 %}{% set __ignored__ %}\n {% set bar = myname + 19 %}\n Hello {{ myname }}\n-{% endset %}\n-foo: Hello {{ myname }}\n+{% endset %}foo: Hello {{ myname }}\n bar: {{ bar }}\n----{% set myname = deferred + 7 %}{% set __ignored__ %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n+---\n+{% set myname = deferred + 7 %}{% set __ignored__ %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n {% set bar = myname + 19 %}{% set simple = {} %}{% do simple.update({'bar': bar}) %}\n Hello {{ myname }}\n-{% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}\n-simple.foo: {% set deferred_import_resource_path = 'macro-and-set.jinja' %}{% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{{ simple.foo() }}\n+{% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}simple.foo: {% set deferred_import_resource_path = 'macro-and-set.jinja' %}{% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{{ simple.foo() }}\n simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.jinja b/src/test/resources/eager/handles-deferred-import-vars.jinja\nindex efebe00..885f2d3 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.jinja\n@@ -3,7 +3,7 @@\n foo: {{ foo() }}\n bar: {{ bar }}\n ---\n-{%- set myname = deferred + (3 + 4) -%}\n+{% set myname = deferred + (3 + 4) -%}\n {%- import \"macro-and-set.jinja\" as simple -%}\n simple.foo: {{ simple.foo() }}\n simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja b/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\nindex dbbc0f4..1ead133 100644\n--- a/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\n+++ b/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\n@@ -1,11 +1,9 @@\n {% if deferred %}{% set __ignored__ %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n {% set bar = 'person19' %}{% do simple.update({'bar': bar}) %}\n Hello person\n-{% do simple.update({'bar': 'person19','import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}\n-{% else %}{% set __ignored__ %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n+{% do simple.update({'bar': 'person19','import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}{% else %}{% set __ignored__ %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n {% set bar = 'person19' %}{% do simple.update({'bar': bar}) %}\n Hello person\n-{% do simple.update({'bar': 'person19','import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}\n-{% endif %}\n+{% do simple.update({'bar': 'person19','import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}{% endset %}{% endif %}\n simple.foo: {{ simple.foo() }}\n simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.expected.jinja b/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.expected.jinja\nindex 502bbfe..f0cc5ea 100644\n--- a/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.expected.jinja\n+++ b/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.expected.jinja\n@@ -1,6 +1,3 @@\n-item1 resolved.\n-item1resolved\n-item2 resolved.\n-item2resolved\n-item3 resolved.\n-item3resolved\n+item1 resolved.item1resolved\n+item2 resolved.item2resolved\n+item3 resolved.item3resolved\ndiff --git a/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.jinja b/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.jinja\nindex 21c08b4..23c1c71 100644\n--- a/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.jinja\n+++ b/src/test/resources/eager/handles-loop-var-against-deferred-in-loop.expected.jinja\n@@ -1,6 +1,3 @@\n-item1 {{ deferred }}.{% set temp = 'item1' ~ deferred %}\n-{{ temp }}\n-item2 {{ deferred }}.{% set temp = 'item2' ~ deferred %}\n-{{ temp }}\n-item3 {{ deferred }}.{% set temp = 'item3' ~ deferred %}\n-{{ temp }}\n+item1 {{ deferred }}.{% set temp = 'item1' ~ deferred %}{{ temp }}\n+item2 {{ deferred }}.{% set temp = 'item2' ~ deferred %}{{ temp }}\n+item3 {{ deferred }}.{% set temp = 'item3' ~ deferred %}{{ temp }}\ndiff --git a/src/test/resources/eager/handles-non-deferred-import-vars.jinja b/src/test/resources/eager/handles-non-deferred-import-vars.jinja\nindex bf42a2f..6d6a99c 100644\n--- a/src/test/resources/eager/handles-non-deferred-import-vars.jinja\n+++ b/src/test/resources/eager/handles-non-deferred-import-vars.jinja\n@@ -3,7 +3,7 @@\n foo: {{ foo() }}\n bar: {{ bar }}\n ---\n-{%- set myname = (3 + 4) -%}\n+{% set myname = (3 + 4) -%}\n {%- import \"macro-and-set.jinja\" as simple -%}\n simple.foo: {{ simple.foo() }}\n simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-non-deferring-cycles.jinja b/src/test/resources/eager/handles-non-deferring-cycles.jinja\nindex c231210..339d3b4 100644\n--- a/src/test/resources/eager/handles-non-deferring-cycles.jinja\n+++ b/src/test/resources/eager/handles-non-deferring-cycles.jinja\n@@ -3,6 +3,6 @@\n start: {% cycle 'start' %}\n foo: {% cycle foo %}\n one/two: {% cycle 'one','two' %}\n-{%- cycle 'a','b','c' as letter -%}\n+{% cycle 'a','b','c' as letter -%}\n letter: {% cycle letter %}\n {%- endfor -%}\ndiff --git a/src/test/resources/eager/handles-unknown-function-errors.jinja b/src/test/resources/eager/handles-unknown-function-errors.jinja\nindex c3b3c07..c9887a7 100644\n--- a/src/test/resources/eager/handles-unknown-function-errors.jinja\n+++ b/src/test/resources/eager/handles-unknown-function-errors.jinja\n@@ -1,3 +1,3 @@\n Some ({{ unknown(null) }}) expression\n-{%- set foo = unknown(null) -%}\n+{% set foo = unknown(null) -%}\n Nothing: ({{ foo }})\ndiff --git a/src/test/resources/eager/puts-deferred-fromed-macro-in-output.expected.jinja b/src/test/resources/eager/puts-deferred-fromed-macro-in-output.expected.jinja\nindex aeb2369..720db4c 100644\n--- a/src/test/resources/eager/puts-deferred-fromed-macro-in-output.expected.jinja\n+++ b/src/test/resources/eager/puts-deferred-fromed-macro-in-output.expected.jinja\n@@ -1,2 +1,1 @@\n-{% set myname = deferred + 3 %}\n-{% set deferred_import_resource_path = 'simple-with-call.jinja' %}{% macro getPath() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{% print getPath() %}\n+{% set myname = deferred + 3 %}{% set deferred_import_resource_path = 'simple-with-call.jinja' %}{% macro getPath() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{% print getPath() %}\ndiff --git a/src/test/resources/eager/puts-deferred-imported-macro-in-output.expected.jinja b/src/test/resources/eager/puts-deferred-imported-macro-in-output.expected.jinja\nindex 8599cb1..f95022d 100644\n--- a/src/test/resources/eager/puts-deferred-imported-macro-in-output.expected.jinja\n+++ b/src/test/resources/eager/puts-deferred-imported-macro-in-output.expected.jinja\n@@ -1,2 +1,1 @@\n-{% set myname = deferred + 3 %}\n-{% set deferred_import_resource_path = 'simple-with-call.jinja' %}{% macro simple.getPath() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{% print simple.getPath() %}\n\\ No newline at end of file\n+{% set myname = deferred + 3 %}{% set deferred_import_resource_path = 'simple-with-call.jinja' %}{% macro simple.getPath() %}Hello {{ myname }}{% endmacro %}{% set deferred_import_resource_path = null %}{% print simple.getPath() %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:44:34.480733Z", "commit_hash": "1492d8a8c257a7c80730f80284719a448fe2551a", "commit_message": "Merge pull request #882 from HubSpot/null-pointer-fix-on-error-count\n\nAdd Null Checks to Interpreter for Error counts and Split Filter", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex 7ae05f3..4a983de 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -14,6 +14,7 @@ import com.hubspot.jinjava.util.EagerExpressionResolver;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.EagerReconstructionUtils.EagerChildContextConfig;\n import com.hubspot.jinjava.util.Logging;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n \n@@ -129,6 +130,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n     return interpreter\n       .getErrors()\n       .stream()\n+      .filter(Objects::nonNull)\n       .filter(\n         error ->\n           \"Unclosed comment\".equals(error.getMessage()) ||\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/SplitFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/SplitFilter.java\nindex f1b81c2..2a6b5c5 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/SplitFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/SplitFilter.java\n@@ -58,13 +58,17 @@ public class SplitFilter implements Filter {\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n     Splitter splitter;\n \n-    if (args.length > 0) {\n-      splitter = Splitter.on(args[0]);\n+    if (args != null && args.length > 0) {\n+      if (args[0] != null) {\n+        splitter = Splitter.on(args[0]);\n+      } else {\n+        splitter = Splitter.on(CharMatcher.whitespace());\n+      }\n     } else {\n       splitter = Splitter.on(CharMatcher.whitespace());\n     }\n \n-    if (args.length > 1) {\n+    if (args != null && args.length > 1) {\n       int limit = NumberUtils.toInt(args[1], 0);\n       if (limit > 0) {\n         splitter = splitter.limit(limit);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SplitFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SplitFilterTest.java\nindex 7b55377..4ccf06d 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SplitFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SplitFilterTest.java\n@@ -45,4 +45,25 @@ public class SplitFilterTest extends BaseInterpretingTest {\n     );\n     assertThat(result).containsExactly(\"hello\", \"world  this is fred\");\n   }\n+\n+  @Test\n+  public void itReturnsDefaultIfSeparatorIsNull() {\n+    List<String> result = (List<String>) filter.filter(\n+      \"hello world  this is fred\",\n+      interpreter,\n+      null\n+    );\n+    assertThat(result).containsExactly(\"hello\", \"world\", \"this\", \"is\", \"fred\");\n+  }\n+\n+  @Test\n+  public void itReturnsDefaultSeparatorIfNullAndTruncated() {\n+    List<String> result = (List<String>) filter.filter(\n+      \"hello world  this is fred\",\n+      interpreter,\n+      null,\n+      \"2\"\n+    );\n+    assertThat(result).containsExactly(\"hello\", \"world  this is fred\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:48:22.946643Z", "commit_hash": "014a49d435eebc5b215feccea4403ce17b14d602", "commit_message": "Refactor, add comments, and fix boolean expression to fix the other test cases\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredValueException.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredValueException.java\nindex c0e49e7..a5a37da 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredValueException.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredValueException.java\n@@ -9,7 +9,7 @@ public class DeferredValueException extends InterpretException {\n   public static final String MESSAGE_PREFIX = \"Encountered a deferred value: \";\n \n   public DeferredValueException(String message) {\n-    super(MESSAGE_PREFIX + message);\n+    super(message);\n   }\n \n   public DeferredValueException(String variable, int lineNumber, int startPosition) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex 0e7bad5..4e8f933 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n@@ -99,8 +99,6 @@ public class ForTag implements Tag {\n   private static final String LOOP = \"loop\";\n   private static final Pattern IN_PATTERN = Pattern.compile(\"\\\\sin\\\\s\");\n   public static final String TOO_LARGE_EXCEPTION_MESSAGE = \"Loop too large\";\n-  public static final String FULL_TOO_LARGE_EXCEPTION_MESSAGE =\n-    DeferredValueException.MESSAGE_PREFIX + TOO_LARGE_EXCEPTION_MESSAGE;\n \n   @Override\n   public boolean isRenderedInValidationMode() {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\nindex 2729c4f..c1dcd21 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerBlockSetTagStrategy.java\n@@ -31,24 +31,25 @@ public class EagerBlockSetTagStrategy extends EagerSetTagStrategy {\n     String expression,\n     JinjavaInterpreter interpreter\n   ) {\n-    int numEagerTokens = interpreter.getContext().getEagerTokens().size();\n-    return EagerReconstructionUtils.executeInChildContext(\n-      eagerInterpreter -> {\n-        StringBuilder sb = new StringBuilder();\n-        for (Node child : tagNode.getChildren()) {\n-          sb.append(child.render(eagerInterpreter).getValue());\n-        }\n-        return EagerExpressionResult.fromString(\n-          sb.toString(),\n-          numEagerTokens ==\n-            eagerInterpreter.getContext().getParent().getEagerTokens().size()\n-            ? ResolutionState.FULL\n-            : ResolutionState.PARTIAL\n-        );\n-      },\n+    EagerExecutionResult result = EagerReconstructionUtils.executeInChildContext(\n+      eagerInterpreter ->\n+        EagerExpressionResult.fromSupplier(\n+          () -> {\n+            StringBuilder sb = new StringBuilder();\n+            for (Node child : tagNode.getChildren()) {\n+              sb.append(child.render(eagerInterpreter).getValue());\n+            }\n+            return sb.toString();\n+          },\n+          eagerInterpreter\n+        ),\n       interpreter,\n       EagerChildContextConfig.newBuilder().withTakeNewValue(true).build()\n     );\n+    if (result.getResult().getResolutionState() == ResolutionState.NONE) {\n+      throw new DeferredValueException(\"Block set tag children could not be rendered\");\n+    }\n+    return result;\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex cc6b63d..992fc16 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n@@ -53,13 +53,15 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n       if (\n         result.getResult().getResolutionState() == ResolutionState.NONE ||\n         (\n-          result.getResult().isFullyResolved() &&\n+          !result.getResult().isFullyResolved() &&\n           !result.getSpeculativeBindings().isEmpty()\n         )\n       ) {\n         EagerIfTag.resetBindingsForNextBranch(interpreter, result);\n         throw new DeferredValueException(\n-          \"Modification inside partially evaluated for loop\"\n+          result.getResult().getResolutionState() == ResolutionState.NONE\n+            ? result.getResult().toString()\n+            : \"Modification inside partially evaluated for loop\"\n         );\n       }\n       return result.getResult().toString(true);\n@@ -93,7 +95,7 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n       TemporaryValueClosable<Boolean> c = interpreter\n         .getContext()\n         .withDeferLargeObjects(\n-          ForTag.FULL_TOO_LARGE_EXCEPTION_MESSAGE.equals(e.getMessage()) ||\n+          ForTag.TOO_LARGE_EXCEPTION_MESSAGE.equals(e.getMessage()) ||\n           interpreter.getContext().isDeferLargeObjects()\n         )\n     ) {\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\nindex 6b444c1..3cc0d97 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n@@ -362,6 +362,16 @@ public class EagerExpressionResolver {\n       );\n     }\n \n+    /**\n+     * Method to supply a string value to the EagerExpressionResult class.\n+     * In the event that a DeferredValueException is thrown, the message will be the wrapped\n+     * value, and the resolutionState will be NONE\n+     * Manually provide whether the string has been fully resolved.\n+     * @param stringSupplier Supplier function to run, which could potentially throw a DeferredValueException.\n+     * @param interpreter The JinjavaInterpreter\n+     * @return A EagerExpressionResult that wraps either\n+     * <code>stringSupplier.get()</code> or the thrown DeferredValueException's message.\n+     */\n     public static EagerExpressionResult fromSupplier(\n       Supplier<String> stringSupplier,\n       JinjavaInterpreter interpreter\n@@ -374,7 +384,7 @@ public class EagerExpressionResolver {\n             : ResolutionState.PARTIAL\n         );\n       } catch (DeferredValueException e) {\n-        return EagerExpressionResult.fromString(\"\", ResolutionState.NONE);\n+        return EagerExpressionResult.fromString(e.getMessage(), ResolutionState.NONE);\n       }\n     }\n \n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java b/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\nindex 1088f38..d724fa7 100644\n--- a/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\n@@ -19,4 +19,11 @@ public class NonRevertingEagerTest extends EagerTest {\n   public void itCorrectlyDefersWithMultipleLoops() {\n     super.itCorrectlyDefersWithMultipleLoops();\n   }\n+\n+  @Ignore\n+  @Override\n+  @Test\n+  public void itRevertsModificationWithDeferredLoop() {\n+    super.itRevertsModificationWithDeferredLoop();\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:52:18.097282Z", "commit_hash": "b12cc483dc6f2205c901d5caeb91e0658b913c6b", "commit_message": "Merge pull request #872 from HubSpot/for-loop-resetting\n\n[Eager Execution] Fix how bindings are reset in for loops", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex cf6a6e0..64bd41a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -18,8 +18,6 @@ import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.EagerReconstructionUtils.EagerChildContextConfig;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -202,42 +200,10 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n     JinjavaInterpreter interpreter,\n     EagerExecutionResult result\n   ) {\n-    Map<String, Object> nonDeferredBindingsToRevert = result\n-      .getSpeculativeBindings()\n-      .entrySet()\n-      .stream()\n-      .filter(\n-        entry ->\n-          interpreter.getContext().containsKey(entry.getKey()) &&\n-          !(interpreter.getContext().get(entry.getKey()) instanceof DeferredValue)\n-      )\n-      .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n-    if (!nonDeferredBindingsToRevert.isEmpty()) {\n-      nonDeferredBindingsToRevert.forEach(\n-        (k, v) -> interpreter.getContext().replace(k, v)\n-      );\n-    }\n-\n     result\n       .getSpeculativeBindings()\n-      .keySet()\n-      .stream()\n-      .filter(key -> interpreter.getContext().get(key) instanceof DeferredValue)\n-      .forEach(\n-        key -> {\n-          if (\n-            ((DeferredValue) interpreter.getContext().get(key)).getOriginalValue() != null\n-          ) {\n-            interpreter\n-              .getContext()\n-              .replace(\n-                key,\n-                ((DeferredValue) interpreter.getContext().get(key)).getOriginalValue()\n-              );\n-          }\n-        }\n-      );\n-    return nonDeferredBindingsToRevert.keySet();\n+      .forEach((k, v) -> interpreter.getContext().replace(k, v));\n+    return result.getSpeculativeBindings().keySet();\n   }\n \n   private String evaluateBranch(\ndiff --git a/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja b/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\nnew file mode 100644\nindex 0000000..234c34f\n--- /dev/null\n+++ b/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\n@@ -0,0 +1,6 @@\n+{% set my_list = [] %}{% for i in [0, 1] %}\n+{% for j in deferred %}\n+{% do my_list.append(1) %}\n+{% endfor %}\n+{% endfor %}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/correctly-defers-with-multiple-loops.jinja b/src/test/resources/eager/correctly-defers-with-multiple-loops.jinja\nnew file mode 100644\nindex 0000000..b4ef48b\n--- /dev/null\n+++ b/src/test/resources/eager/correctly-defers-with-multiple-loops.jinja\n@@ -0,0 +1,7 @@\n+{% set my_list = [] %}\n+{% for i in range(2) %}\n+{% for j in deferred %}\n+{% do my_list.append(1) %}\n+{% endfor %}\n+{% endfor %}\n+{{ my_list }}\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 81432c7..63ecfef 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1038,4 +1038,11 @@ public class EagerTest {\n   public void itHandlesSetInInnerScope() {\n     expectedTemplateInterpreter.assertExpectedOutput(\"handles-set-in-inner-scope\");\n   }\n+\n+  @Test\n+  public void itCorrectlyDefersWithMultipleLoops() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\n+      \"correctly-defers-with-multiple-loops\"\n+    );\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java b/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\nindex b2bcc06..033baec 100644\n--- a/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\n@@ -2,6 +2,7 @@ package com.hubspot.jinjava;\n \n import com.hubspot.jinjava.mode.NonRevertingEagerExecutionMode;\n import org.junit.Before;\n+import org.junit.Ignore;\n \n public class NonRevertingEagerTest extends EagerTest {\n \n@@ -10,4 +11,10 @@ public class NonRevertingEagerTest extends EagerTest {\n   public void setup() {\n     setupWithExecutionMode(NonRevertingEagerExecutionMode.instance());\n   }\n+\n+  @Ignore\n+  @Override\n+  public void itCorrectlyDefersWithMultipleLoops() {\n+    super.itCorrectlyDefersWithMultipleLoops();\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:55:39.518593Z", "commit_hash": "c15bfc7cc066b85585831a8770a6d00daf8272aa", "commit_message": "Fix how bindings are reset in for loops\nWe should be resetting to the value gotten from the speculative binding as that will be the correctly tracked previous value, rather than reverting to the\nDeferredValue's original value, as that could have been modified before getting deferred.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex cf6a6e0..64bd41a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -18,8 +18,6 @@ import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.EagerReconstructionUtils.EagerChildContextConfig;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -202,42 +200,10 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n     JinjavaInterpreter interpreter,\n     EagerExecutionResult result\n   ) {\n-    Map<String, Object> nonDeferredBindingsToRevert = result\n-      .getSpeculativeBindings()\n-      .entrySet()\n-      .stream()\n-      .filter(\n-        entry ->\n-          interpreter.getContext().containsKey(entry.getKey()) &&\n-          !(interpreter.getContext().get(entry.getKey()) instanceof DeferredValue)\n-      )\n-      .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n-    if (!nonDeferredBindingsToRevert.isEmpty()) {\n-      nonDeferredBindingsToRevert.forEach(\n-        (k, v) -> interpreter.getContext().replace(k, v)\n-      );\n-    }\n-\n     result\n       .getSpeculativeBindings()\n-      .keySet()\n-      .stream()\n-      .filter(key -> interpreter.getContext().get(key) instanceof DeferredValue)\n-      .forEach(\n-        key -> {\n-          if (\n-            ((DeferredValue) interpreter.getContext().get(key)).getOriginalValue() != null\n-          ) {\n-            interpreter\n-              .getContext()\n-              .replace(\n-                key,\n-                ((DeferredValue) interpreter.getContext().get(key)).getOriginalValue()\n-              );\n-          }\n-        }\n-      );\n-    return nonDeferredBindingsToRevert.keySet();\n+      .forEach((k, v) -> interpreter.getContext().replace(k, v));\n+    return result.getSpeculativeBindings().keySet();\n   }\n \n   private String evaluateBranch(\ndiff --git a/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja b/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\nnew file mode 100644\nindex 0000000..234c34f\n--- /dev/null\n+++ b/src/test/resources/eager/correctly-defers-with-multiple-loops.expected.jinja\n@@ -0,0 +1,6 @@\n+{% set my_list = [] %}{% for i in [0, 1] %}\n+{% for j in deferred %}\n+{% do my_list.append(1) %}\n+{% endfor %}\n+{% endfor %}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/correctly-defers-with-multiple-loops.jinja b/src/test/resources/eager/correctly-defers-with-multiple-loops.jinja\nnew file mode 100644\nindex 0000000..b4ef48b\n--- /dev/null\n+++ b/src/test/resources/eager/correctly-defers-with-multiple-loops.jinja\n@@ -0,0 +1,7 @@\n+{% set my_list = [] %}\n+{% for i in range(2) %}\n+{% for j in deferred %}\n+{% do my_list.append(1) %}\n+{% endfor %}\n+{% endfor %}\n+{{ my_list }}\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 81432c7..63ecfef 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1038,4 +1038,11 @@ public class EagerTest {\n   public void itHandlesSetInInnerScope() {\n     expectedTemplateInterpreter.assertExpectedOutput(\"handles-set-in-inner-scope\");\n   }\n+\n+  @Test\n+  public void itCorrectlyDefersWithMultipleLoops() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\n+      \"correctly-defers-with-multiple-loops\"\n+    );\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java b/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\nindex b2bcc06..033baec 100644\n--- a/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/NonRevertingEagerTest.java\n@@ -2,6 +2,7 @@ package com.hubspot.jinjava;\n \n import com.hubspot.jinjava.mode.NonRevertingEagerExecutionMode;\n import org.junit.Before;\n+import org.junit.Ignore;\n \n public class NonRevertingEagerTest extends EagerTest {\n \n@@ -10,4 +11,10 @@ public class NonRevertingEagerTest extends EagerTest {\n   public void setup() {\n     setupWithExecutionMode(NonRevertingEagerExecutionMode.instance());\n   }\n+\n+  @Ignore\n+  @Override\n+  public void itCorrectlyDefersWithMultipleLoops() {\n+    super.itCorrectlyDefersWithMultipleLoops();\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T22:58:44.883989Z", "commit_hash": "c8d14f153d3e7e4d88cdeed76b586a6a6df6b080", "commit_message": "Merge pull request #869 from HubSpot/macro-function-scoping\n\nFix macro function scoping inside of another macro function", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\nindex f554ced..0c12a0d 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n@@ -9,6 +9,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -130,6 +131,13 @@ public class MacroFunction extends AbstractCallableMethod {\n     for (Map.Entry<String, Object> scopeEntry : localContextScope.getScope().entrySet()) {\n       if (scopeEntry.getValue() instanceof MacroFunction) {\n         interpreter.getContext().addGlobalMacro((MacroFunction) scopeEntry.getValue());\n+      } else if (scopeEntry.getKey().equals(Context.GLOBAL_MACROS_SCOPE_KEY)) {\n+        interpreter\n+          .getContext()\n+          .put(\n+            Context.GLOBAL_MACROS_SCOPE_KEY,\n+            new HashMap<>((Map<String, MacroFunction>) scopeEntry.getValue())\n+          );\n       } else {\n         if (!alreadyDeferredInEarlierCall(scopeEntry.getKey(), interpreter)) {\n           interpreter.getContext().put(scopeEntry.getKey(), scopeEntry.getValue());\ndiff --git a/src/test/resources/tags/macrotag/scoping.jinja b/src/test/resources/tags/macrotag/scoping.jinja\nnew file mode 100644\nindex 0000000..247bf7a\n--- /dev/null\n+++ b/src/test/resources/tags/macrotag/scoping.jinja\n@@ -0,0 +1,12 @@\n+{%- macro foo() -%}\n+{%- macro foo() -%}\n+child\n+{%- endmacro %}\n+{%- macro bar() -%}\n+the bar\n+{%- endmacro -%}\n+parent & {{ foo() }} & {{ bar() }}\n+{%- endmacro %}\n+{{ foo() }}.\n+{{ foo() }}.\n+{{ bar() }}.\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\nindex 009042c..1a52f5a 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\n@@ -11,6 +11,7 @@ import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n@@ -344,6 +345,32 @@ public class MacroTagTest extends BaseInterpretingTest {\n     assertThat(fn.reconstructImage()).isEqualTo(fixtureText(\"simple-no-trim\").trim());\n   }\n \n+  @Test\n+  public void itCorrectlyScopesNestedMacroTags() {\n+    interpreter =\n+      new Jinjava(\n+        JinjavaConfig\n+          .newBuilder()\n+          .withEnableRecursiveMacroCalls(true)\n+          .withMaxMacroRecursionDepth(2)\n+          .build()\n+      )\n+      .newInterpreter();\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+    try {\n+      String result = interpreter.render(fixtureText(\"scoping\"));\n+      assertThat(interpreter.getErrors()).hasSize(1);\n+      assertThat(interpreter.getErrors().get(0).getReason())\n+        .isEqualTo(ErrorReason.SYNTAX_ERROR);\n+      assertThat(interpreter.getErrors().get(0).getMessage())\n+        .isEqualTo(\"Could not resolve function 'bar'\");\n+      assertThat(result.trim())\n+        .isEqualTo(\"parent & child & the bar.\\nparent & child & the bar.\\n.\");\n+    } finally {\n+      JinjavaInterpreter.popCurrent();\n+    }\n+  }\n+\n   private Node snippet(String jinja) {\n     return new TreeParser(interpreter, jinja).buildTree().getChildren().getFirst();\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:02:26.958164Z", "commit_hash": "1f80b486bbcf6412b23b7cdbc54037f141154bf2", "commit_message": "Fix macro function scoping inside of another macro function\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\nindex f554ced..0c12a0d 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n@@ -9,6 +9,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -130,6 +131,13 @@ public class MacroFunction extends AbstractCallableMethod {\n     for (Map.Entry<String, Object> scopeEntry : localContextScope.getScope().entrySet()) {\n       if (scopeEntry.getValue() instanceof MacroFunction) {\n         interpreter.getContext().addGlobalMacro((MacroFunction) scopeEntry.getValue());\n+      } else if (scopeEntry.getKey().equals(Context.GLOBAL_MACROS_SCOPE_KEY)) {\n+        interpreter\n+          .getContext()\n+          .put(\n+            Context.GLOBAL_MACROS_SCOPE_KEY,\n+            new HashMap<>((Map<String, MacroFunction>) scopeEntry.getValue())\n+          );\n       } else {\n         if (!alreadyDeferredInEarlierCall(scopeEntry.getKey(), interpreter)) {\n           interpreter.getContext().put(scopeEntry.getKey(), scopeEntry.getValue());\ndiff --git a/src/test/resources/tags/macrotag/scoping.jinja b/src/test/resources/tags/macrotag/scoping.jinja\nnew file mode 100644\nindex 0000000..247bf7a\n--- /dev/null\n+++ b/src/test/resources/tags/macrotag/scoping.jinja\n@@ -0,0 +1,12 @@\n+{%- macro foo() -%}\n+{%- macro foo() -%}\n+child\n+{%- endmacro %}\n+{%- macro bar() -%}\n+the bar\n+{%- endmacro -%}\n+parent & {{ foo() }} & {{ bar() }}\n+{%- endmacro %}\n+{{ foo() }}.\n+{{ foo() }}.\n+{{ bar() }}.\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\nindex 009042c..1a52f5a 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\n@@ -11,6 +11,7 @@ import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n@@ -344,6 +345,32 @@ public class MacroTagTest extends BaseInterpretingTest {\n     assertThat(fn.reconstructImage()).isEqualTo(fixtureText(\"simple-no-trim\").trim());\n   }\n \n+  @Test\n+  public void itCorrectlyScopesNestedMacroTags() {\n+    interpreter =\n+      new Jinjava(\n+        JinjavaConfig\n+          .newBuilder()\n+          .withEnableRecursiveMacroCalls(true)\n+          .withMaxMacroRecursionDepth(2)\n+          .build()\n+      )\n+      .newInterpreter();\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+    try {\n+      String result = interpreter.render(fixtureText(\"scoping\"));\n+      assertThat(interpreter.getErrors()).hasSize(1);\n+      assertThat(interpreter.getErrors().get(0).getReason())\n+        .isEqualTo(ErrorReason.SYNTAX_ERROR);\n+      assertThat(interpreter.getErrors().get(0).getMessage())\n+        .isEqualTo(\"Could not resolve function 'bar'\");\n+      assertThat(result.trim())\n+        .isEqualTo(\"parent & child & the bar.\\nparent & child & the bar.\\n.\");\n+    } finally {\n+      JinjavaInterpreter.popCurrent();\n+    }\n+  }\n+\n   private Node snippet(String jinja) {\n     return new TreeParser(interpreter, jinja).buildTree().getChildren().getFirst();\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:09:05.736729Z", "commit_hash": "8a316e3e7043f7663256b039d73696a5363cbcb8", "commit_message": "Merge pull request #857 from HubSpot/number-truthy\n\nFix number truthiness by casting to individual types", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java b/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java\nindex e5996b7..e4a0838 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java\n@@ -39,7 +39,7 @@ public final class ObjectTruthValue {\n     }\n \n     if (object instanceof Number) {\n-      return ((Number) object).intValue() != 0;\n+      return ((Number) object).doubleValue() != 0;\n     }\n \n     if (object instanceof String) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java b/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java\nindex 00748fc..bcb4c77 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java\n@@ -2,7 +2,6 @@ package com.hubspot.jinjava.util;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import org.junit.Before;\n import org.junit.Test;\n \n public class ObjectTruthValueTest {\n@@ -15,6 +14,36 @@ public class ObjectTruthValueTest {\n       .isFalse();\n   }\n \n+  @Test\n+  public void itEvaluatesIntegers() {\n+    checkNumberTruthiness(1, 0);\n+  }\n+\n+  @Test\n+  public void itEvaluatesDoubles() {\n+    checkNumberTruthiness(0.5, 0.0);\n+  }\n+\n+  @Test\n+  public void itEvaluatesLongs() {\n+    checkNumberTruthiness(1L, 0L);\n+  }\n+\n+  @Test\n+  public void itEvaluatesShorts() {\n+    checkNumberTruthiness((short) 1, (short) 0);\n+  }\n+\n+  @Test\n+  public void itEvaluatesFloats() {\n+    checkNumberTruthiness(0.5f, 0.0f);\n+  }\n+\n+  private void checkNumberTruthiness(Object a, Object b) {\n+    assertThat(ObjectTruthValue.evaluate(a)).isTrue();\n+    assertThat(ObjectTruthValue.evaluate(b)).isFalse();\n+  }\n+\n   private class TestObject implements HasObjectTruthValue {\n     private boolean objectTruthValue = false;\n \n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:12:33.791974Z", "commit_hash": "38eeb1f660cd6b28dcce925d64dc9112c31745d6", "commit_message": "Fix number truthiness by casting to individual types\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java b/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java\nindex e5996b7..b5195a2 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ObjectTruthValue.java\n@@ -39,7 +39,19 @@ public final class ObjectTruthValue {\n     }\n \n     if (object instanceof Number) {\n-      return ((Number) object).intValue() != 0;\n+      if (object instanceof Integer) {\n+        return (Integer) object != 0;\n+      }\n+      if (object instanceof Double) {\n+        return (Double) object != 0;\n+      }\n+      if (object instanceof Long) {\n+        return (Long) object != 0;\n+      }\n+      if (object instanceof Short) {\n+        return (Short) object != 0;\n+      }\n+      return (Float) object != 0;\n     }\n \n     if (object instanceof String) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java b/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java\nindex 00748fc..d04e4eb 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ObjectTruthValueTest.java\n@@ -2,7 +2,6 @@ package com.hubspot.jinjava.util;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import org.junit.Before;\n import org.junit.Test;\n \n public class ObjectTruthValueTest {\n@@ -15,6 +14,46 @@ public class ObjectTruthValueTest {\n       .isFalse();\n   }\n \n+  @Test\n+  public void itEvaluatesIntegers() {\n+    int a = 1;\n+    assertThat(ObjectTruthValue.evaluate(a)).isTrue();\n+    int b = 0;\n+    assertThat(ObjectTruthValue.evaluate(b)).isFalse();\n+  }\n+\n+  @Test\n+  public void itEvaluatesDoubles() {\n+    double a = 0.5;\n+    assertThat(ObjectTruthValue.evaluate(a)).isTrue();\n+    double b = 0.0;\n+    assertThat(ObjectTruthValue.evaluate(b)).isFalse();\n+  }\n+\n+  @Test\n+  public void itEvaluatesLongs() {\n+    long a = 1;\n+    assertThat(ObjectTruthValue.evaluate(a)).isTrue();\n+    long b = 0;\n+    assertThat(ObjectTruthValue.evaluate(b)).isFalse();\n+  }\n+\n+  @Test\n+  public void itEvaluatesShorts() {\n+    short a = 1;\n+    assertThat(ObjectTruthValue.evaluate(a)).isTrue();\n+    short b = 0;\n+    assertThat(ObjectTruthValue.evaluate(b)).isFalse();\n+  }\n+\n+  @Test\n+  public void itEvaluatesFloats() {\n+    float a = 0.5f;\n+    assertThat(ObjectTruthValue.evaluate(a)).isTrue();\n+    float b = 0.0f;\n+    assertThat(ObjectTruthValue.evaluate(b)).isFalse();\n+  }\n+\n   private class TestObject implements HasObjectTruthValue {\n     private boolean objectTruthValue = false;\n \n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:15:51.883925Z", "commit_hash": "2961967e0ce79e51fdd992b9651e96f3d146e3d1", "commit_message": "fix out of bound index exception in StrftimeFormatter in case of > 255 ascii char in data format\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex a94ba58..a0627b7 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -72,21 +72,27 @@ public class StrftimeFormatter {\n         boolean stripLeadingZero = false;\n         String[] conversions = CONVERSIONS;\n \n-        if (c == '-') {\n-          stripLeadingZero = true;\n-          c = strftime.charAt(++i);\n-        }\n+        if (c > 255) {\n+          // If the date format has invalid character that is > ascii (255) then\n+          // maintain the behaviour similar to invalid ascii char <= 255 i.e. append null\n+          result.append(conversions[0]);\n+        } else {\n+          if (c == '-') {\n+            stripLeadingZero = true;\n+            c = strftime.charAt(++i);\n+          }\n \n-        if (c == 'O') {\n-          c = strftime.charAt(++i);\n-          conversions = NOMINATIVE_CONVERSIONS;\n-        }\n+          if (c == 'O') {\n+            c = strftime.charAt(++i);\n+            conversions = NOMINATIVE_CONVERSIONS;\n+          }\n \n-        if (stripLeadingZero) {\n-          result.append(conversions[c].substring(1));\n-        } else {\n-          result.append(conversions[c]);\n-        }\n+          if (stripLeadingZero) {\n+            result.append(conversions[c].substring(1));\n+          } else {\n+            result.append(conversions[c]);\n+          }\n+        } // < 255\n       } else if (Character.isLetter(c)) {\n         result.append(\"'\");\n         while (Character.isLetter(c)) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex f40e9b9..f30b1f0 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -121,4 +121,16 @@ public class StrftimeFormatterTest {\n       )\n       .isIn(\"\u0418\u044e\u043d\u044c\", \"\u0438\u044e\u043d\u044c\");\n   }\n+\n+  @Test\n+  public void testJavaFormatWithInvalidChar() {\n+    assertThat(StrftimeFormatter.toJavaDateTimeFormat(\"%d.%\u00e9.%Y\"))\n+      .isEqualTo(\"dd.null.yyyy\");\n+  }\n+\n+  @Test\n+  public void testJavaFormatWithGT255Char() {\n+    assertThat(StrftimeFormatter.toJavaDateTimeFormat(\"%d.%\u011f.%Y\"))\n+      .isEqualTo(\"dd.null.yyyy\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:18:35.686642Z", "commit_hash": "0d8347de05e969cb2fc836bb0f5e343643b2e7ad", "commit_message": "Merge pull request #852 from HubSpot/fix-datetime\n\nFix datetime conversion value for Zones", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex d07350d..a94ba58 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -46,7 +46,7 @@ public class StrftimeFormatter {\n     CONVERSIONS['y'] = \"yy\";\n     CONVERSIONS['Y'] = \"yyyy\";\n     CONVERSIONS['z'] = \"Z\";\n-    CONVERSIONS['Z'] = \"ZZZZ\";\n+    CONVERSIONS['Z'] = \"z\";\n     CONVERSIONS['%'] = \"%\";\n \n     NOMINATIVE_CONVERSIONS['B'] = \"LLLL\";\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex 897d2db..f40e9b9 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -2,6 +2,7 @@ package com.hubspot.jinjava.objects.date;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.time.ZoneId;\n import java.time.ZonedDateTime;\n import java.util.Locale;\n import org.junit.Before;\n@@ -100,7 +101,12 @@ public class StrftimeFormatterTest {\n   @Test\n   public void testZoneOutput() {\n     assertThat(StrftimeFormatter.format(d, \"%z\")).isEqualTo(\"+0000\");\n-    assertThat(StrftimeFormatter.format(d, \"%Z\")).isEqualTo(\"GMT\");\n+\n+    ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(\n+      d.toInstant(),\n+      ZoneId.of(\"America/New_York\")\n+    );\n+    assertThat(StrftimeFormatter.format(zonedDateTime, \"%Z\")).isEqualTo(\"EST\");\n   }\n \n   @Test\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:21:50.774782Z", "commit_hash": "23e97170add0cb770dea4f70c93c19de394525c9", "commit_message": "Fix datetime conversion value for Zones\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex d07350d..a94ba58 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -46,7 +46,7 @@ public class StrftimeFormatter {\n     CONVERSIONS['y'] = \"yy\";\n     CONVERSIONS['Y'] = \"yyyy\";\n     CONVERSIONS['z'] = \"Z\";\n-    CONVERSIONS['Z'] = \"ZZZZ\";\n+    CONVERSIONS['Z'] = \"z\";\n     CONVERSIONS['%'] = \"%\";\n \n     NOMINATIVE_CONVERSIONS['B'] = \"LLLL\";\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex 897d2db..f40e9b9 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -2,6 +2,7 @@ package com.hubspot.jinjava.objects.date;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.time.ZoneId;\n import java.time.ZonedDateTime;\n import java.util.Locale;\n import org.junit.Before;\n@@ -100,7 +101,12 @@ public class StrftimeFormatterTest {\n   @Test\n   public void testZoneOutput() {\n     assertThat(StrftimeFormatter.format(d, \"%z\")).isEqualTo(\"+0000\");\n-    assertThat(StrftimeFormatter.format(d, \"%Z\")).isEqualTo(\"GMT\");\n+\n+    ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(\n+      d.toInstant(),\n+      ZoneId.of(\"America/New_York\")\n+    );\n+    assertThat(StrftimeFormatter.format(zonedDateTime, \"%Z\")).isEqualTo(\"EST\");\n   }\n \n   @Test\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:24:39.185512Z", "commit_hash": "c58e65e0ab421fba2987e2efec18f49e87a294a6", "commit_message": "Fix reconstruction of value modification in multiple deferred for loops and if tags\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex 97770db..e3f18bc 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -12,6 +12,7 @@ import com.hubspot.jinjava.lib.tag.ElseTag;\n import com.hubspot.jinjava.lib.tag.IfTag;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.parse.NoteToken;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.EagerReconstructionUtils;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n@@ -167,15 +168,26 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n       branchStart = branchEnd + 1;\n     }\n     if (!bindingsToDefer.isEmpty()) {\n-      bindingsToDefer\n-        .stream()\n-        .filter(key -> !(interpreter.getContext().get(key) instanceof DeferredValue))\n-        .forEach(\n-          key ->\n-            interpreter\n-              .getContext()\n-              .replace(key, DeferredValue.instance(interpreter.getContext().get(key)))\n-        );\n+      bindingsToDefer =\n+        bindingsToDefer\n+          .stream()\n+          .filter(key -> !(interpreter.getContext().get(key) instanceof DeferredValue))\n+          .collect(Collectors.toSet());\n+      if (!bindingsToDefer.isEmpty()) {\n+        interpreter\n+          .getContext()\n+          .handleEagerToken(\n+            new EagerToken(\n+              new NoteToken(\n+                \"\",\n+                interpreter.getLineNumber(),\n+                interpreter.getPosition(),\n+                interpreter.getConfig().getTokenScannerSymbols()\n+              ),\n+              bindingsToDefer\n+            )\n+          );\n+      }\n       return sb.toString();\n     }\n     return sb.toString();\ndiff --git a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\nindex 8c35cbb..4ab10e2 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerReconstructionUtils.java\n@@ -128,7 +128,7 @@ public class EagerReconstructionUtils {\n               revertibleObject =\n                 new RevertibleObject(\n                   hashCode,\n-                  PyishObjectMapper.getAsUnquotedPyishString(entry.getValue())\n+                  PyishObjectMapper.getAsPyishString(entry.getValue())\n                 );\n               interpreter.getRevertibleObjects().put(entry.getKey(), revertibleObject);\n             }\n@@ -185,10 +185,10 @@ public class EagerReconstructionUtils {\n             Collectors.toMap(\n               Entry::getKey,\n               e -> {\n-                if (e.getValue() instanceof DeferredValue) {\n-                  return ((DeferredValue) e.getValue()).getOriginalValue();\n-                }\n                 if (takeNewValue) {\n+                  if (e.getValue() instanceof DeferredValue) {\n+                    return ((DeferredValue) e.getValue()).getOriginalValue();\n+                  }\n                   return e.getValue();\n                 }\n \n@@ -202,6 +202,9 @@ public class EagerReconstructionUtils {\n                     interpreter.getLineNumber()\n                   );\n                 }\n+                if (e.getValue() instanceof DeferredValue) {\n+                  return ((DeferredValue) e.getValue()).getOriginalValue();\n+                }\n \n                 // Previous value could not be mapped to a string\n                 throw new DeferredValueException(e.getKey());\ndiff --git a/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja b/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja\nnew file mode 100644\nindex 0000000..ea68e19\n--- /dev/null\n+++ b/src/test/resources/eager/reconstructs-with-multiple-loops.expected.jinja\n@@ -0,0 +1,14 @@\n+{% set my_list = [] %}{% for i in deferred %}\n+  {% if deferred %}\n+    {% for j in deferred %}\n+      {% if deferred %}\n+        {% do my_list.append(1) %}\n+      {% else %}\n+        {% do my_list.append(2) %}\n+      {% endif %}\n+    {% endfor %}\n+  {% else %}\n+    {% do my_list.append(3) %}\n+  {% endif %}\n+{% endfor %}\n+{{ my_list }}\ndiff --git a/src/test/resources/eager/reconstructs-with-multiple-loops.jinja b/src/test/resources/eager/reconstructs-with-multiple-loops.jinja\nnew file mode 100644\nindex 0000000..8731102\n--- /dev/null\n+++ b/src/test/resources/eager/reconstructs-with-multiple-loops.jinja\n@@ -0,0 +1,15 @@\n+{% set my_list = [] %}\n+{% for i in deferred %}\n+  {% if deferred %}\n+    {% for j in deferred %}\n+      {% if deferred %}\n+        {% do my_list.append(1) %}\n+      {% else %}\n+        {% do my_list.append(2) %}\n+      {% endif %}\n+    {% endfor %}\n+  {% else %}\n+    {% do my_list.append(3) %}\n+  {% endif %}\n+{% endfor %}\n+{{ my_list }}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 5dfd18d..7e90fc9 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -1010,4 +1010,9 @@ public class EagerTest {\n   public void itScopesResettingBindings() {\n     expectedTemplateInterpreter.assertExpectedOutput(\"scopes-resetting-bindings\");\n   }\n+\n+  @Test\n+  public void itReconstructsWithMultipleLoops() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\"reconstructs-with-multiple-loops\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:27:17.131366Z", "commit_hash": "911df281043408ea6bac6e942b7d635153e64d85", "commit_message": "Merge pull request #844 from HubSpot/simple-context-reverting\n\n[Eager Execution] Fix npe when val is null", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\nindex 6bb9825..a6de928 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n@@ -216,9 +216,11 @@ public class EagerExpressionResolver {\n     if (depth > maxDepth) {\n       return false;\n     }\n-    boolean isResolvable = RESOLVABLE_CLASSES\n-      .stream()\n-      .anyMatch(clazz -> clazz.isAssignableFrom(val.getClass()));\n+    boolean isResolvable =\n+      val == null ||\n+      RESOLVABLE_CLASSES\n+        .stream()\n+        .anyMatch(clazz -> clazz.isAssignableFrom(val.getClass()));\n     if (isResolvable) {\n       return true;\n     }\n", "test_patch": "diff --git a/src/test/resources/eager/reverts-simple.jinja b/src/test/resources/eager/reverts-simple.jinja\nindex 2bd4177..2143e84 100644\n--- a/src/test/resources/eager/reverts-simple.jinja\n+++ b/src/test/resources/eager/reverts-simple.jinja\n@@ -1,3 +1,6 @@\n+{% set foo = 1 %}\n+{% for i in range(1) %}\n+{% set foo = null %}\n {% set my_list = [] %}\n {% do my_list.append(0) %}\n {% if 5 < 6 %}\n@@ -9,3 +12,4 @@\n {% endif %}\n {% do my_list.append(4) %}\n {{ my_list }}\n+{% endfor %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:30:11.450439Z", "commit_hash": "65a2bc7fa39972c9181a1e1261ae62b04f0db5e2", "commit_message": "Fix npe when val is null\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\nindex 6bb9825..a6de928 100644\n--- a/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/EagerExpressionResolver.java\n@@ -216,9 +216,11 @@ public class EagerExpressionResolver {\n     if (depth > maxDepth) {\n       return false;\n     }\n-    boolean isResolvable = RESOLVABLE_CLASSES\n-      .stream()\n-      .anyMatch(clazz -> clazz.isAssignableFrom(val.getClass()));\n+    boolean isResolvable =\n+      val == null ||\n+      RESOLVABLE_CLASSES\n+        .stream()\n+        .anyMatch(clazz -> clazz.isAssignableFrom(val.getClass()));\n     if (isResolvable) {\n       return true;\n     }\n", "test_patch": "diff --git a/src/test/resources/eager/reverts-simple.jinja b/src/test/resources/eager/reverts-simple.jinja\nindex 2bd4177..2143e84 100644\n--- a/src/test/resources/eager/reverts-simple.jinja\n+++ b/src/test/resources/eager/reverts-simple.jinja\n@@ -1,3 +1,6 @@\n+{% set foo = 1 %}\n+{% for i in range(1) %}\n+{% set foo = null %}\n {% set my_list = [] %}\n {% do my_list.append(0) %}\n {% if 5 < 6 %}\n@@ -9,3 +12,4 @@\n {% endif %}\n {% do my_list.append(4) %}\n {{ my_list }}\n+{% endfor %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:33:10.888762Z", "commit_hash": "7058c6c7474721b9cbd03275421ac475e8215509", "commit_message": "Merge pull request #836 from HubSpot/fix-npe-sb-null\n\nFix NPE when appending null to LengthLimitingStringBuilder", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/LengthLimitingStringBuilder.java b/src/main/java/com/hubspot/jinjava/util/LengthLimitingStringBuilder.java\nindex 54ae7dd..11b3cc3 100644\n--- a/src/main/java/com/hubspot/jinjava/util/LengthLimitingStringBuilder.java\n+++ b/src/main/java/com/hubspot/jinjava/util/LengthLimitingStringBuilder.java\n@@ -51,6 +51,9 @@ public class LengthLimitingStringBuilder implements Serializable, CharSequence {\n   }\n \n   public void append(String str) {\n+    if (str == null) {\n+      return;\n+    }\n     length += str.length();\n     if (maxLength > 0 && length > maxLength) {\n       throw new OutputTooBigException(maxLength, length);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/LengthLimitingStringBuilderTest.java b/src/test/java/com/hubspot/jinjava/util/LengthLimitingStringBuilderTest.java\nindex 562bb3c..f57a4f7 100644\n--- a/src/test/java/com/hubspot/jinjava/util/LengthLimitingStringBuilderTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/LengthLimitingStringBuilderTest.java\n@@ -1,5 +1,6 @@\n package com.hubspot.jinjava.util;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n import com.hubspot.jinjava.interpret.OutputTooBigException;\n@@ -19,4 +20,11 @@ public class LengthLimitingStringBuilderTest {\n     LengthLimitingStringBuilder sb = new LengthLimitingStringBuilder(0);\n     sb.append(\"0123456789\");\n   }\n+\n+  @Test\n+  public void itHandlesNullStrings() {\n+    LengthLimitingStringBuilder sb = new LengthLimitingStringBuilder(10);\n+    sb.append(null);\n+    assertThat(sb.length()).isEqualTo(0);\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:36:13.958335Z", "commit_hash": "8eaf40ee0549905c27c0566a308ae63f356f9272", "commit_message": "Merge pull request #829 from HubSpot/fix-race-condition\n\n[Eager Execution] Fix race condition in deferred AstNode evaluation", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/Jinjava.java b/src/main/java/com/hubspot/jinjava/Jinjava.java\nindex 1b739c1..f2a9878 100644\n--- a/src/main/java/com/hubspot/jinjava/Jinjava.java\n+++ b/src/main/java/com/hubspot/jinjava/Jinjava.java\n@@ -97,6 +97,7 @@ public class Jinjava {\n       TreeBuilder.class.getName(),\n       EagerExtendedSyntaxBuilder.class.getName()\n     );\n+    eagerExpConfig.setProperty(ExpressionFactoryImpl.PROP_CACHE_SIZE, \"0\");\n \n     TypeConverter converter = new TruthyTypeConverter();\n     this.expressionFactory = new ExpressionFactoryImpl(expConfig, converter);\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBinary.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBinary.java\nindex 3f3052a..95d92e9 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBinary.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBinary.java\n@@ -83,14 +83,6 @@ public class EagerAstBinary extends AstBinary implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    left.clearEvalResult();\n-    right.clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBracket.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBracket.java\nindex 8558a37..85bd003 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBracket.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstBracket.java\n@@ -47,16 +47,6 @@ public class EagerAstBracket extends AstBracket implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    ((EvalResultHolder) prefix).clearEvalResult();\n-    if (property != null) {\n-      ((EvalResultHolder) property).clearEvalResult();\n-    }\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java\nindex 7dd4d91..c8c9110 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java\n@@ -62,15 +62,6 @@ public class EagerAstChoice extends AstChoice implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    question.clearEvalResult();\n-    yes.clearEvalResult();\n-    no.clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDict.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDict.java\nindex 2ebefa7..7711736 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDict.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDict.java\n@@ -97,23 +97,6 @@ public class EagerAstDict extends AstDict implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-\n-    dict.forEach(\n-      (key, value) -> {\n-        if (key instanceof EvalResultHolder) {\n-          ((EvalResultHolder) key).clearEvalResult();\n-        }\n-        if (value instanceof EvalResultHolder) {\n-          ((EvalResultHolder) value).clearEvalResult();\n-        }\n-      }\n-    );\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDot.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDot.java\nindex ed80f22..862d962 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDot.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstDot.java\n@@ -73,13 +73,6 @@ public class EagerAstDot extends AstDot implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    base.clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstIdentifier.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstIdentifier.java\nindex 21a7049..a7b631e 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstIdentifier.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstIdentifier.java\n@@ -34,12 +34,6 @@ public class EagerAstIdentifier extends AstIdentifier implements EvalResultHolde\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstList.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstList.java\nindex 039e92b..6ca90e4 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstList.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstList.java\n@@ -36,15 +36,6 @@ public class EagerAstList extends AstList implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    for (int i = 0; i < elements.getCardinality(); i++) {\n-      ((EvalResultHolder) elements.getChild(i)).clearEvalResult();\n-    }\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMacroFunction.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMacroFunction.java\nindex 329a2fa..e87f2e0 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMacroFunction.java\n@@ -91,16 +91,6 @@ public class EagerAstMacroFunction extends AstMacroFunction implements EvalResul\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    params.clearEvalResult();\n-    for (int i = 0; i < ((AstParameters) params).getCardinality(); i++) {\n-      ((EvalResultHolder) ((AstParameters) params).getChild(i)).clearEvalResult();\n-    }\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMethod.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMethod.java\nindex 865e492..9d6a08e 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMethod.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstMethod.java\n@@ -60,14 +60,6 @@ public class EagerAstMethod extends AstMethod implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    property.clearEvalResult();\n-    params.clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNamedParameter.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNamedParameter.java\nindex 1c67488..8d1a23c 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNamedParameter.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNamedParameter.java\n@@ -66,13 +66,6 @@ public class EagerAstNamedParameter\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    value.clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNested.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNested.java\nindex 047bbef..317167c 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNested.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNested.java\n@@ -52,13 +52,6 @@ public class EagerAstNested extends AstRightValue implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    ((EvalResultHolder) child).clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNodeDecorator.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNodeDecorator.java\nindex 68732b2..3f876ea 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNodeDecorator.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstNodeDecorator.java\n@@ -44,12 +44,6 @@ public class EagerAstNodeDecorator extends AstNode implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstParameters.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstParameters.java\nindex d31dfb7..6ad8192 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstParameters.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstParameters.java\n@@ -77,13 +77,6 @@ public class EagerAstParameters extends AstParameters implements EvalResultHolde\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    nodes.forEach(node -> ((EvalResultHolder) node).clearEvalResult());\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRangeBracket.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRangeBracket.java\nindex 7b28a49..0f4f8d4 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRangeBracket.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRangeBracket.java\n@@ -84,21 +84,6 @@ public class EagerAstRangeBracket extends AstRangeBracket implements EvalResultH\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    if (prefix != null) {\n-      ((EvalResultHolder) prefix).clearEvalResult();\n-    }\n-    if (property != null) {\n-      ((EvalResultHolder) property).clearEvalResult();\n-    }\n-    if (rangeMax != null) {\n-      ((EvalResultHolder) rangeMax).clearEvalResult();\n-    }\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRoot.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRoot.java\nindex 7eeaa4f..d785cd6 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRoot.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstRoot.java\n@@ -21,13 +21,7 @@ public class EagerAstRoot extends AstNode {\n \n   @Override\n   public Object eval(Bindings bindings, ELContext context) {\n-    try {\n-      return rootNode.eval(bindings, context);\n-    } finally {\n-      if (rootNode instanceof EvalResultHolder) {\n-        ((EvalResultHolder) rootNode).clearEvalResult();\n-      }\n-    }\n+    return rootNode.eval(bindings, context);\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstTuple.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstTuple.java\nindex 1d6af62..e0c4b86 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstTuple.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstTuple.java\n@@ -58,15 +58,6 @@ public class EagerAstTuple extends AstTuple implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    for (int i = 0; i < elements.getCardinality(); i++) {\n-      ((EvalResultHolder) elements.getChild(i)).clearEvalResult();\n-    }\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstUnary.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstUnary.java\nindex 115789d..ffdbdfc 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstUnary.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstUnary.java\n@@ -62,13 +62,6 @@ public class EagerAstUnary extends AstUnary implements EvalResultHolder {\n   }\n \n   @Override\n-  public void clearEvalResult() {\n-    evalResult = null;\n-    hasEvalResult = false;\n-    child.clearEvalResult();\n-  }\n-\n-  @Override\n   public boolean hasEvalResult() {\n     return hasEvalResult;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EvalResultHolder.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EvalResultHolder.java\nindex a5a0bb8..da8ec42 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EvalResultHolder.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EvalResultHolder.java\n@@ -17,8 +17,6 @@ public interface EvalResultHolder {\n \n   void setEvalResult(Object evalResult);\n \n-  void clearEvalResult();\n-\n   boolean hasEvalResult();\n \n   default Object eval(\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\nindex 463d371..c6119ad 100644\n--- a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n@@ -32,6 +32,8 @@ import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicLong;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -77,6 +79,15 @@ public class EagerExpressionResolverTest {\n           this.getClass().getDeclaredMethod(\"isNull\", Object.class, Object.class)\n         )\n       );\n+    jinjava\n+      .getGlobalContext()\n+      .registerFunction(\n+        new ELFunctionDefinition(\n+          \"\",\n+          \"sleeper\",\n+          this.getClass().getDeclaredMethod(\"sleeper\")\n+        )\n+      );\n     interpreter = new JinjavaInterpreter(jinjava.newInterpreter());\n     context = interpreter.getContext();\n     context.put(\"deferred\", DeferredValue.instance());\n@@ -718,12 +729,62 @@ public class EagerExpressionResolverTest {\n     }\n   }\n \n+  @SuppressWarnings(\"SynchronizationOnLocalVariableOrMethodParameter\")\n+  @Test\n+  public void itIsThreadSafe() throws InterruptedException {\n+    Map<String, String> map = new HashMap<>();\n+    map.put(\"bar\", \"first\");\n+    AtomicLong sleepTime = new AtomicLong(500L);\n+    context.put(\"map\", map);\n+    context.put(\"sleep_time\", sleepTime);\n+    CompletableFuture<EagerExpressionResult> first;\n+    synchronized (sleepTime) {\n+      first = CompletableFuture.supplyAsync(this::appendAndSleep);\n+      sleepTime.wait();\n+    }\n+    sleepTime.set(1L);\n+    map.put(\"bar\", \"second\");\n+    CompletableFuture<EagerExpressionResult> second = CompletableFuture.supplyAsync(\n+      this::appendAndSleep\n+    );\n+    CompletableFuture.allOf(first, second).join();\n+    assertThat(first.join().toString())\n+      .describedAs(\"First result should say 'first' and sleep for 500ms\")\n+      .isEqualTo(\"deferred && 'first' && 500\");\n+    assertThat(second.join().toString()) // caching would make this say 'first'\n+      .describedAs(\"Second result should say 'second' and sleep for 1ms\")\n+      .isEqualTo(\"deferred && 'second' && 1\");\n+  }\n+\n+  private EagerExpressionResult appendAndSleep() {\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+    try {\n+      return eagerResolveExpression(\"deferred && map.bar && sleeper()\");\n+    } finally {\n+      JinjavaInterpreter.popCurrent();\n+    }\n+  }\n+\n   public static void voidFunction(int nothing) {}\n \n   public static boolean isNull(Object foo, Object bar) {\n     return foo == null && bar == null;\n   }\n \n+  @SuppressWarnings(\"SynchronizationOnLocalVariableOrMethodParameter\")\n+  public static long sleeper() throws InterruptedException {\n+    AtomicLong atomicSleepTime = (AtomicLong) JinjavaInterpreter\n+      .getCurrent()\n+      .getContext()\n+      .get(\"sleep_time\");\n+    long sleepTime = atomicSleepTime.get();\n+    synchronized (atomicSleepTime) {\n+      atomicSleepTime.notify();\n+    }\n+    Thread.sleep(sleepTime);\n+    return sleepTime;\n+  }\n+\n   private static class Foo {\n     private final String bar;\n \n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:39:24.895423Z", "commit_hash": "a93768532f838c3cf8394791c72b99230ef9464a", "commit_message": "Merge pull request #830 from HubSpot/fix-npe-date-time-format\n\nPrevent NPE for ZoneId.of", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\nindex ddea7a1..7c5d219 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n@@ -161,7 +161,7 @@ public class Functions {\n   public static String dateTimeFormat(Object var, String... format) {\n     ZoneId zoneOffset = ZoneOffset.UTC;\n \n-    if (format.length > 1) {\n+    if (format.length > 1 && format[1] != null) {\n       String timezone = format[1];\n       try {\n         zoneOffset = ZoneId.of(timezone);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/DateTimeFormatFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/DateTimeFormatFilterTest.java\nindex b1d3f9f..59a99e5 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/DateTimeFormatFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/DateTimeFormatFilterTest.java\n@@ -112,4 +112,16 @@ public class DateTimeFormatFilterTest extends BaseInterpretingTest {\n       )\n       .isEqualTo(Functions.dateTimeFormat(d, \"%A, %e %B\", \"UTC\", \"America/Los_Angeles\"));\n   }\n+\n+  @Test\n+  public void itDefaultsToUtcForNullTimezone() {\n+    interpreter.getContext().put(\"d\", d);\n+\n+    assertThat(\n+        interpreter.renderFlat(\n+          \"{{ d|datetimeformat('%A, %e %B, %I:%M %p', null, 'sv') }}\"\n+        )\n+      )\n+      .isEqualTo(\"onsdag, 6 november, 02:22 em\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:45:18.789568Z", "commit_hash": "156a0f65d8e8b5a4ee4dd593cfba3b137aaafaac", "commit_message": "Merge pull request #808 from HubSpot/fix-raw-spacing\n\nNormalize spacing when reconstructing raw tags", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/RawTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/RawTag.java\nindex 2673f64..53e943d 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/RawTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/RawTag.java\n@@ -30,21 +30,39 @@ public class RawTag implements Tag {\n \n   @Override\n   public String interpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n+    LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n+      interpreter.getConfig().getMaxOutputSize()\n+    );\n     if (\n       interpreter.getConfig().getExecutionMode().isPreserveRawTags() &&\n       !interpreter.getContext().isUnwrapRawOverride()\n     ) {\n-      return renderNodeRaw(tagNode);\n+      result.append(\n+        String.format(\n+          \"%s raw %s\",\n+          tagNode.getSymbols().getExpressionStartWithTag(),\n+          tagNode.getSymbols().getExpressionEndWithTag()\n+        )\n+      );\n     }\n \n-    LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n-      interpreter.getConfig().getMaxOutputSize()\n-    );\n-\n     for (Node n : tagNode.getChildren()) {\n       result.append(renderNodeRaw(n));\n     }\n \n+    if (\n+      interpreter.getConfig().getExecutionMode().isPreserveRawTags() &&\n+      !interpreter.getContext().isUnwrapRawOverride()\n+    ) {\n+      result.append(\n+        String.format(\n+          \"%s endraw %s\",\n+          tagNode.getSymbols().getExpressionStartWithTag(),\n+          tagNode.getSymbols().getExpressionEndWithTag()\n+        )\n+      );\n+    }\n+\n     return result.toString();\n   }\n \n@@ -58,7 +76,14 @@ public class RawTag implements Tag {\n     if (TagNode.class.isAssignableFrom(n.getClass())) {\n       TagNode t = (TagNode) n;\n       if (StringUtils.isNotBlank(t.getEndName())) {\n-        result.append(\"{% \").append(t.getEndName()).append(\" %}\");\n+        result.append(\n+          String.format(\n+            \"%s %s %s\",\n+            t.getSymbols().getExpressionStartWithTag(),\n+            t.getEndName(),\n+            t.getSymbols().getExpressionEndWithTag()\n+          )\n+        );\n       }\n     }\n \ndiff --git a/src/test/resources/tags/rawtag/nospacing.jinja b/src/test/resources/tags/rawtag/nospacing.jinja\nnew file mode 100644\nindex 0000000..918f937\n--- /dev/null\n+++ b/src/test/resources/tags/rawtag/nospacing.jinja\n@@ -0,0 +1,3 @@\n+{%raw%}\n+{%print 'foo'%}\n+{%endraw%}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/RawTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/RawTagTest.java\nindex 9c9be8f..d2349f2 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/RawTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/RawTagTest.java\n@@ -144,6 +144,22 @@ public class RawTagTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void ifFixesSpacingWithRawTagPreservation() {\n+    TagNode tagNode = fixture(\"nospacing\");\n+    JinjavaInterpreter preserveInterpreter = new JinjavaInterpreter(\n+      jinjava,\n+      jinjava.getGlobalContextCopy(),\n+      JinjavaConfig\n+        .newBuilder()\n+        .withExecutionMode(PreserveRawExecutionMode.instance())\n+        .build()\n+    );\n+    String result = tag.interpret(tagNode, preserveInterpreter);\n+    assertThat(StringUtils.normalizeSpace(result))\n+      .isEqualTo(\"{% raw %} {%print 'foo'%} {% endraw %}\");\n+  }\n+\n+  @Test\n   public void itPreservesDeferredWhilePreservingRawTags() {\n     TagNode tagNode = fixture(\"deferred\");\n     JinjavaInterpreter preserveInterpreter = new JinjavaInterpreter(\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:51:46.153547Z", "commit_hash": "a8b0ca31c1b24b2fb9daa7b61a21b7e929b87a72", "commit_message": "Fix eager string reconstruction for number-like or boolean-like values\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\nindex cfd0201..489a742 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n@@ -28,6 +28,12 @@ public class PyishSerializer extends JsonSerializer<Object> {\n       .orElse(object);\n     if (wrappedObject instanceof PyishSerializable) {\n       jsonGenerator.writeRawValue(((PyishSerializable) wrappedObject).toPyishString());\n+    } else if (wrappedObject instanceof Boolean) {\n+      jsonGenerator.writeBoolean((Boolean) wrappedObject);\n+    } else if (wrappedObject instanceof Number) {\n+      jsonGenerator.writeNumber(wrappedObject.toString());\n+    } else if (wrappedObject instanceof String) {\n+      jsonGenerator.writeString((String) wrappedObject);\n     } else {\n       string = Objects.toString(wrappedObject, \"\");\n       try {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java\nindex b2c0bc1..e141c84 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagTest.java\n@@ -136,7 +136,8 @@ public class EagerSetTagTest extends SetTagTest {\n \n   @Test\n   public void itDefersBlockWithFilter() {\n-    String template = \"{% set foo | add(deferred) %}{{ 1 + 1 }}{% endset %}{{ foo }}\";\n+    String template =\n+      \"{% set foo | int |add(deferred) %}{{ 1 + 1 }}{% endset %}{{ foo }}\";\n     final String result = interpreter.render(template);\n \n     assertThat(result)\ndiff --git a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\nindex 1e6f4c3..463d371 100644\n--- a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n@@ -388,7 +388,7 @@ public class EagerExpressionResolverTest {\n     EagerExpressionResult eagerExpressionResult = eagerResolveExpression(\n       \"date|datetimeformat('%Y')\"\n     );\n-    assertThat(eagerExpressionResult.toString()).isEqualTo(\"1970\");\n+    assertThat(eagerExpressionResult.toString()).isEqualTo(\"'1970'\");\n   }\n \n   @Test\ndiff --git a/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja b/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\nindex 08c773b..8f42953 100644\n--- a/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\n+++ b/src/test/resources/eager/defers-changes-within-deferred-set-block.expected.jinja\n@@ -1,5 +1,5 @@\n 1\n-{% set bar,foo = [1],1 %}{% if deferred %}\n+{% set bar,foo = [1],'1' %}{% if deferred %}\n {% set foo %}2{% set bar = [1, 2] %}{% endset %}\n {% endif %}\n Bar: {{ bar }}\ndiff --git a/src/test/resources/eager/handles-cycle-in-deferred-for.expected.jinja b/src/test/resources/eager/handles-cycle-in-deferred-for.expected.jinja\nindex 8b7c3cf..6570d19 100644\n--- a/src/test/resources/eager/handles-cycle-in-deferred-for.expected.jinja\n+++ b/src/test/resources/eager/handles-cycle-in-deferred-for.expected.jinja\n@@ -1,3 +1,3 @@\n {% for item in deferred %}\n-{% cycle 1,2,3 %}\n-{% cycle 1,2,3 %}{% endfor %}\n+{% cycle '1','2','3' %}\n+{% cycle '1','2','3' %}{% endfor %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:56:08.814166Z", "commit_hash": "d04246320bde20d20b956fd6f40977386d97c0bb", "commit_message": "Fix StringIndexOutOfBoundsException in truncate filter\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\nindex e2fae96..e313ad8 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n@@ -437,6 +437,7 @@ public class Functions {\n         if (!killwords) {\n           length = movePointerToJustBeforeLastWord(length, string);\n         }\n+        length = Math.max(length, 0);\n \n         return string.substring(0, length) + ends;\n       } else {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/TruncateFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/TruncateFilterTest.java\nindex 230dcda..cdb8fc6 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/TruncateFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/TruncateFilterTest.java\n@@ -50,4 +50,9 @@ public class TruncateFilterTest {\n     assertThat(filter.filter(\"foo bar\", interpreter, \"5\", \"True\", \"!\"))\n       .isEqualTo(\"foo b!\");\n   }\n+\n+  @Test\n+  public void itTruncatesGivenNegativeLength() throws Exception {\n+    assertThat(filter.filter(\"foo bar\", interpreter, \"-1\", \"True\")).isEqualTo(\"...\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-05-31T23:58:58.863595Z", "commit_hash": "e2c787c1e44327aecca84387f25dd845d6ef668a", "commit_message": "Don't add suffix output if the variable name equals the current import alias\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\nindex e99ed8c..eec9d78 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTagStrategy.java\n@@ -1,6 +1,5 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Sets;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.tag.SetTag;\n@@ -147,16 +146,12 @@ public abstract class EagerSetTagStrategy {\n       String currentImportAlias = maybeFullImportAlias\n         .get()\n         .substring(maybeFullImportAlias.get().lastIndexOf(\".\") + 1);\n-      String updateString = getUpdateString(variables);\n-      if (variables.equals(currentImportAlias)) {\n-        suffixToPreserveState.append(\n-          EagerReconstructionUtils.buildSetTag(\n-            ImmutableMap.of(variables, updateString),\n-            interpreter,\n-            false\n-          )\n-        );\n-      } else {\n+      String filteredVariables = Arrays\n+        .stream(variables.split(\",\"))\n+        .filter(var -> !var.equals(currentImportAlias))\n+        .collect(Collectors.joining(\",\"));\n+      if (!filteredVariables.isEmpty()) {\n+        String updateString = getUpdateString(filteredVariables);\n         suffixToPreserveState.append(\n           interpreter.render(\n             EagerReconstructionUtils.buildDoUpdateTag(\n", "test_patch": "diff --git a/src/test/resources/eager/handles-same-name-import-var.expected.jinja b/src/test/resources/eager/handles-same-name-import-var.expected.jinja\nindex 3fffc77..a739778 100644\n--- a/src/test/resources/eager/handles-same-name-import-var.expected.jinja\n+++ b/src/test/resources/eager/handles-same-name-import-var.expected.jinja\n@@ -1,3 +1,10 @@\n-{% import '../settag/set-var-and-deferred.jinja' as dict %}\n-{{ dict }}\n-\n+{% if deferred %}\n+{% set __ignored__ %}{% set current_path = '../settag/set-var-and-deferred.jinja' %}{% set current_path,value = null,null %}{% set my_var = {} %}{% set my_var = {} %}{% if deferred %}\n+{% set __ignored__ %}{% set current_path = '../settag/set-var-and-deferred.jinja' %}{% do my_var.update({\"current_path\": current_path}) %}{% set value = null %}{% do my_var.update({\"value\": value}) %}{% set my_var = {} %}{% set my_var = {'foo': 'bar'} %}{% set my_var = {'my_var': {'foo': 'bar'}} %}\n+{% set value = deferred %}{% do my_var.update({\"value\": value}) %}{% do my_var.update({\"value\": value}) %}\n+{% do my_var.update({\"import_resource_path\": \"../settag/set-var-and-deferred.jinja\", \"value\": value}) %}{% set current_path = '' %}{% do my_var.update({\"current_path\": current_path}) %}{% endset %}{% do my_var.update({\"__ignored__\": __ignored__}) %}\n+{{ my_var }}\n+{% endif %}\n+{% do my_var.update({'current_path': current_path,'import_resource_path': '../settag/set-var-and-deferred.jinja','value': value}) %}{% set current_path = '' %}{% endset %}\n+{{ my_var }}\n+{% endif %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:01:37.382614Z", "commit_hash": "c5a7737cea8d078efbb3d8d3c78c6ec7e32d1861", "commit_message": "Merge pull request #791 from HubSpot/fix-exception-with-trailing-percent-in-strftimeformatter\n\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex 032ecfc..d07350d 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -67,7 +67,7 @@ public class StrftimeFormatter {\n \n     for (int i = 0; i < strftime.length(); i++) {\n       char c = strftime.charAt(i);\n-      if (c == '%') {\n+      if (c == '%' && strftime.length() > i + 1) {\n         c = strftime.charAt(++i);\n         boolean stripLeadingZero = false;\n         String[] conversions = CONVERSIONS;\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex 5d66bd6..897d2db 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -38,6 +38,11 @@ public class StrftimeFormatterTest {\n   }\n \n   @Test\n+  public void testFormatWithTrailingPercent() {\n+    assertThat(StrftimeFormatter.format(d, \"%B %-d, %\")).isEqualTo(\"November 6, %\");\n+  }\n+\n+  @Test\n   public void testWithNoPcts() {\n     assertThat(StrftimeFormatter.format(d, \"MMMM yyyy\")).isEqualTo(\"November 2013\");\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:04:54.260976Z", "commit_hash": "04fdd485697ed82232b5097d22ddb46ff234bb3b", "commit_message": "fix exception with trailing percent in strftimeformatter\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex 032ecfc..d07350d 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -67,7 +67,7 @@ public class StrftimeFormatter {\n \n     for (int i = 0; i < strftime.length(); i++) {\n       char c = strftime.charAt(i);\n-      if (c == '%') {\n+      if (c == '%' && strftime.length() > i + 1) {\n         c = strftime.charAt(++i);\n         boolean stripLeadingZero = false;\n         String[] conversions = CONVERSIONS;\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex 5d66bd6..897d2db 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -38,6 +38,11 @@ public class StrftimeFormatterTest {\n   }\n \n   @Test\n+  public void testFormatWithTrailingPercent() {\n+    assertThat(StrftimeFormatter.format(d, \"%B %-d, %\")).isEqualTo(\"November 6, %\");\n+  }\n+\n+  @Test\n   public void testWithNoPcts() {\n     assertThat(StrftimeFormatter.format(d, \"MMMM yyyy\")).isEqualTo(\"November 2013\");\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:07:48.732626Z", "commit_hash": "e390d72139d02b2c8a5c701d1e71c219255e9246", "commit_message": "Merge pull request #787 from HubSpot/fix-eager-cycle\n\n[Eager Execution] Fix eager cycle tag handling of null resolutions", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\nindex 95fc569..62d8828 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n@@ -58,49 +58,46 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n       interpreter.getContext().putAll(eagerExecutionResult.getSpeculativeBindings());\n     }\n     String resolvedExpression;\n+    List<String> resolvedValues; // can only be retrieved if the EagerExpressionResult are fully resolved.\n     if (\n       eagerExecutionResult\n         .getResult()\n         .toString()\n         .equals(EagerExpressionResolver.JINJAVA_EMPTY_STRING)\n     ) {\n-      resolvedExpression = expression; // Cycle tag defaults to input on null\n-    } else {\n-      resolvedExpression = eagerExecutionResult.getResult().toString();\n-    }\n-    resolvedExpression = resolvedExpression.replace(\", \", \",\");\n-    resolvedExpression = resolvedExpression.substring(1, resolvedExpression.length() - 1);\n-    if (WhitespaceUtils.isWrappedWith(resolvedExpression, \"[\", \"]\")) {\n-      resolvedExpression =\n-        resolvedExpression.substring(1, resolvedExpression.length() - 1);\n-    }\n-    List<String> resolvedValues; // can only be retrieved if the EagerExpressionResult are fully resolved.\n-    if (!eagerExecutionResult.getResult().isFullyResolved()) {\n+      resolvedExpression = normalizeResolvedExpression(expression); // Cycle tag defaults to input on null\n       resolvedValues =\n         new HelperStringTokenizer(resolvedExpression).splitComma(true).allTokens();\n-      prefixToPreserveState.append(\n-        EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n-          eagerExecutionResult.getResult().getDeferredWords(),\n-          interpreter\n-        )\n-      );\n     } else {\n-      List<?> objects = eagerExecutionResult.getResult().toList();\n-      if (objects.size() == 1 && objects.get(0) instanceof List) {\n-        // because we may have wrapped in an extra set of brackets\n-        objects = (List<?>) objects.get(0);\n-      }\n-      resolvedValues =\n-        objects.stream().map(interpreter::getAsString).collect(Collectors.toList());\n-      for (int i = 0; i < resolvedValues.size(); i++) {\n-        resolvedValues.set(\n-          i,\n-          interpreter.resolveString(\n-            resolvedValues.get(i),\n-            tagToken.getLineNumber(),\n-            tagToken.getStartPosition()\n+      resolvedExpression =\n+        normalizeResolvedExpression(eagerExecutionResult.getResult().toString());\n+      if (!eagerExecutionResult.getResult().isFullyResolved()) {\n+        resolvedValues =\n+          new HelperStringTokenizer(resolvedExpression).splitComma(true).allTokens();\n+        prefixToPreserveState.append(\n+          EagerReconstructionUtils.reconstructFromContextBeforeDeferring(\n+            eagerExecutionResult.getResult().getDeferredWords(),\n+            interpreter\n           )\n         );\n+      } else {\n+        List<?> objects = eagerExecutionResult.getResult().toList();\n+        if (objects.size() == 1 && objects.get(0) instanceof List) {\n+          // because we may have wrapped in an extra set of brackets\n+          objects = (List<?>) objects.get(0);\n+        }\n+        resolvedValues =\n+          objects.stream().map(interpreter::getAsString).collect(Collectors.toList());\n+        for (int i = 0; i < resolvedValues.size(); i++) {\n+          resolvedValues.set(\n+            i,\n+            interpreter.resolveString(\n+              resolvedValues.get(i),\n+              tagToken.getLineNumber(),\n+              tagToken.getStartPosition()\n+            )\n+          );\n+        }\n       }\n     }\n     if (helper.size() == 1) {\n@@ -137,6 +134,16 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n     }\n   }\n \n+  private String normalizeResolvedExpression(String resolvedExpression) {\n+    resolvedExpression = resolvedExpression.replace(\", \", \",\");\n+    resolvedExpression = resolvedExpression.substring(1, resolvedExpression.length() - 1);\n+    if (WhitespaceUtils.isWrappedWith(resolvedExpression, \"[\", \"]\")) {\n+      resolvedExpression =\n+        resolvedExpression.substring(1, resolvedExpression.length() - 1);\n+    }\n+    return resolvedExpression;\n+  }\n+\n   private String interpretSettingCycle(\n     JinjavaInterpreter interpreter,\n     List<String> values,\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/CycleTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/CycleTagTest.java\nindex 0acafe8..58a2c2e 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/CycleTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/CycleTagTest.java\n@@ -2,7 +2,6 @@ package com.hubspot.jinjava.lib.tag;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import com.google.common.collect.Maps;\n import com.hubspot.jinjava.BaseInterpretingTest;\n import org.junit.Test;\n \n@@ -11,6 +10,26 @@ public class CycleTagTest extends BaseInterpretingTest {\n   @Test\n   public void itDefaultsNullToImage() {\n     String template = \"{% for item in [0,1] %}{% cycle {{item}} %}{% endfor %}\";\n-    assertThat(jinjava.render(template, Maps.newHashMap())).isEqualTo(\"{{item}}{{item}}\");\n+    assertThat(interpreter.render(template)).isEqualTo(\"{{item}}{{item}}\");\n+  }\n+\n+  @Test\n+  public void itDefaultsMultipleNullToImage() {\n+    String template = \"{% for item in [0,1] %}{% cycle {{foo}},{{bar}} %}{% endfor %}\";\n+    assertThat(interpreter.render(template)).isEqualTo(\"{{foo}}{{bar}}\");\n+  }\n+\n+  @Test\n+  public void itDefaultsNullToImageUsingAs() {\n+    String template =\n+      \"{% for item in [0,1] %}{% cycle {{item}} as var %}{% cycle var %}{% endfor %}\";\n+    assertThat(interpreter.render(template)).isEqualTo(\"{{item}}{{item}}\");\n+  }\n+\n+  @Test\n+  public void itDefaultsMultipleNullToImageUsingAs() {\n+    String template =\n+      \"{% for item in [0,1] %}{% cycle {{foo}},{{bar}} as var %}{% cycle var %}{% endfor %}\";\n+    assertThat(interpreter.render(template)).isEqualTo(\"{{foo}}{{bar}}\");\n   }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTagTest.java\nindex 5eab1c6..e24d71f 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTagTest.java\n@@ -32,6 +32,7 @@ public class EagerCycleTagTest extends CycleTagTest {\n     tag = new EagerCycleTag();\n     context.registerTag(tag);\n     context.registerTag(new EagerForTag());\n+    JinjavaInterpreter.pushCurrent(interpreter);\n   }\n \n   @After\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:10:29.955702Z", "commit_hash": "b1b50dd8d1d5d9acac263a4b1b8722bf62b59059", "commit_message": "Merge pull request #788 from HubSpot/fix-today-npe\n\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\nindex 6678f20..e2fae96 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n@@ -127,7 +127,7 @@ public class Functions {\n   )\n   public static ZonedDateTime today(String... var) {\n     ZoneId zoneOffset = ZoneOffset.UTC;\n-    if (var.length > 0) {\n+    if (var.length > 0 && var[0] != null) {\n       String timezone = var[0];\n       try {\n         zoneOffset = ZoneId.of(timezone);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/fn/TodayFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/TodayFunctionTest.java\nindex 684a696..d29e78f 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/TodayFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/TodayFunctionTest.java\n@@ -30,7 +30,12 @@ public class TodayFunctionTest {\n \n   @Test(expected = InvalidDateFormatException.class)\n   public void itThrowsExceptionOnInvalidTimezone() {\n-    ZonedDateTime zonedDateTime = Functions.today(\"Not a timezone\");\n+    Functions.today(\"Not a timezone\");\n+  }\n+\n+  @Test\n+  public void itIgnoresNullTimezone() {\n+    assertThat(Functions.today((String) null).getZone()).isEqualTo(ZoneOffset.UTC);\n   }\n \n   @Test(expected = DeferredValueException.class)\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/fn/UnixTimestampFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/UnixTimestampFunctionTest.java\nindex 85c3dcd..e7cb1e3 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/UnixTimestampFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/UnixTimestampFunctionTest.java\n@@ -26,7 +26,9 @@ public class UnixTimestampFunctionTest {\n     assertThat(Functions.unixtimestamp(d)).isEqualTo(epochMilliseconds);\n     assertThat(\n         Math.abs(\n-          Functions.unixtimestamp(null) - ZonedDateTime.now().toEpochSecond() * 1000\n+          Functions.unixtimestamp((Object) null) -\n+          ZonedDateTime.now().toEpochSecond() *\n+          1000\n         )\n       )\n       .isLessThan(1000);\n@@ -45,7 +47,7 @@ public class UnixTimestampFunctionTest {\n       )\n     );\n     try {\n-      Functions.unixtimestamp(null);\n+      Functions.unixtimestamp((Object) null);\n     } finally {\n       JinjavaInterpreter.popCurrent();\n     }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:13:21.052249Z", "commit_hash": "0247ebeccfd1c98c1670528fed9424f5037a047c", "commit_message": "Merge pull request #781 from HubSpot/fix-npe-2\n\nFix NPE in select filter test", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/SelectFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/SelectFilter.java\nindex c52c32e..b1a846f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/SelectFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/SelectFilter.java\n@@ -62,6 +62,15 @@ public class SelectFilter implements AdvancedFilter {\n       );\n     }\n \n+    if (args[0] == null) {\n+      throw new InvalidArgumentException(\n+        interpreter,\n+        this,\n+        InvalidReason.NULL,\n+        \"exp_test\"\n+      );\n+    }\n+\n     Object[] expArgs = new Object[] {};\n \n     if (args.length > 1) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SelectFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SelectFilterTest.java\nindex 885de39..cf0c657 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SelectFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SelectFilterTest.java\n@@ -1,10 +1,12 @@\n package com.hubspot.jinjava.lib.filter;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n import com.google.common.collect.Lists;\n import com.hubspot.jinjava.BaseJinjavaTest;\n import java.util.HashMap;\n+import java.util.Map;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -28,4 +30,12 @@ public class SelectFilterTest extends BaseJinjavaTest {\n     assertThat(jinjava.render(\"{{numbers|select('equalto', 3)}}\", new HashMap<>()))\n       .isEqualTo(\"[3]\");\n   }\n+\n+  @Test\n+  public void itThrowsInvalidArgumentForNullExpTestArgument() {\n+    Map<String, Object> context = new HashMap<>();\n+    context.put(\"test\", null);\n+    assertThatThrownBy(() -> jinjava.render(\"{{numbers|select(test, 3)}}\", context))\n+      .hasMessageContaining(\"'exp_test' argument cannot be null\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:16:07.953379Z", "commit_hash": "18846a8dfdebe2c77892655ab1622851c94e9494", "commit_message": "Merge pull request #767 from HubSpot/fix-multiply-divide\n\nUpgrade multiply and divide filters", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/DivideFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/DivideFilter.java\nindex 71de115..ebeb241 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/DivideFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/DivideFilter.java\n@@ -25,6 +25,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import de.odysseus.el.misc.NumberOperations;\n import java.math.BigDecimal;\n+import java.util.Map;\n \n @JinjavaDoc(\n   value = \"Divides the current value by a divisor\",\n@@ -46,37 +47,46 @@ import java.math.BigDecimal;\n     @JinjavaSnippet(code = \"{% set numerator = 106 %}\\n\" + \"{% numerator|divide(2) %}\")\n   }\n )\n-public class DivideFilter implements Filter {\n+public class DivideFilter implements AdvancedFilter {\n   private static final TruthyTypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n \n   @Override\n-  public Object filter(Object object, JinjavaInterpreter interpreter, String... arg) {\n-    if (arg.length < 1) {\n+  public Object filter(\n+    Object var,\n+    JinjavaInterpreter interpreter,\n+    Object[] args,\n+    Map<String, Object> kwargs\n+  ) {\n+    if (args.length < 1) {\n       throw new TemplateSyntaxException(\n         interpreter,\n         getName(),\n         \"requires 1 number (divisor) argument\"\n       );\n     }\n-    String toMul = arg[0];\n+    Object toMul = args[0];\n     Number num;\n     if (toMul != null) {\n-      try {\n-        num = new BigDecimal(toMul);\n-      } catch (NumberFormatException e) {\n-        throw new InvalidArgumentException(\n-          interpreter,\n-          this,\n-          InvalidReason.NUMBER_FORMAT,\n-          0,\n-          toMul\n-        );\n+      if (toMul instanceof Number) {\n+        num = (Number) toMul;\n+      } else {\n+        try {\n+          num = new BigDecimal(toMul.toString());\n+        } catch (NumberFormatException e) {\n+          throw new InvalidArgumentException(\n+            interpreter,\n+            this,\n+            InvalidReason.NUMBER_FORMAT,\n+            0,\n+            toMul\n+          );\n+        }\n       }\n     } else {\n-      return object;\n+      return var;\n     }\n \n-    return NumberOperations.div(TYPE_CONVERTER, object, num);\n+    return NumberOperations.div(TYPE_CONVERTER, var, num);\n   }\n \n   @Override\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java\nindex f51d03c..26d990f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java\n@@ -25,6 +25,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import de.odysseus.el.misc.NumberOperations;\n import java.math.BigDecimal;\n+import java.util.Map;\n \n @JinjavaDoc(\n   value = \"Multiplies the current object with the given multiplier\",\n@@ -44,33 +45,46 @@ import java.math.BigDecimal;\n   },\n   snippets = { @JinjavaSnippet(code = \"{% set n = 20 %}\\n\" + \"{{ n|multiply(3) }}\") }\n )\n-public class MultiplyFilter implements Filter {\n+public class MultiplyFilter implements AdvancedFilter {\n   private static final TruthyTypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n \n   @Override\n-  public Object filter(Object object, JinjavaInterpreter interpreter, String... arg) {\n-    if (arg.length < 1) {\n+  public Object filter(\n+    Object var,\n+    JinjavaInterpreter interpreter,\n+    Object[] args,\n+    Map<String, Object> kwargs\n+  ) {\n+    if (args.length < 1) {\n       throw new TemplateSyntaxException(\n         interpreter,\n         getName(),\n         \"requires 1 argument (number to multiply by)\"\n       );\n     }\n-    String toMul = arg[0];\n+    Object toMul = args[0];\n     Number num;\n-    try {\n-      num = new BigDecimal(toMul);\n-    } catch (NumberFormatException e) {\n-      throw new InvalidArgumentException(\n-        interpreter,\n-        this,\n-        InvalidReason.NUMBER_FORMAT,\n-        0,\n-        toMul\n-      );\n+    if (toMul != null) {\n+      if (toMul instanceof Number) {\n+        num = (Number) toMul;\n+      } else {\n+        try {\n+          num = new BigDecimal(toMul.toString());\n+        } catch (NumberFormatException e) {\n+          throw new InvalidArgumentException(\n+            interpreter,\n+            this,\n+            InvalidReason.NUMBER_FORMAT,\n+            0,\n+            toMul\n+          );\n+        }\n+      }\n+    } else {\n+      return var;\n     }\n \n-    return NumberOperations.mul(TYPE_CONVERTER, object, num);\n+    return NumberOperations.mul(TYPE_CONVERTER, var, num);\n   }\n \n   @Override\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/DivideFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/DivideFilterTest.java\nindex f85dd7e..0bc092d 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/DivideFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/DivideFilterTest.java\n@@ -1,11 +1,9 @@\n package com.hubspot.jinjava.lib.filter;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n \n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.BaseJinjavaTest;\n-import com.hubspot.jinjava.interpret.FatalTemplateErrorsException;\n import org.junit.Test;\n \n public class DivideFilterTest extends BaseJinjavaTest {\n@@ -18,7 +16,7 @@ public class DivideFilterTest extends BaseJinjavaTest {\n           ImmutableMap.of(\"numerator\", 10, \"denominator\", 2)\n         )\n       )\n-      .isEqualTo(\"5\");\n+      .isEqualTo(\"5.0\");\n     assertThat(\n         jinjava.render(\n           \"{{ numerator // denominator }}\",\n@@ -36,15 +34,13 @@ public class DivideFilterTest extends BaseJinjavaTest {\n   }\n \n   @Test\n-  public void itThrowsAnExceptionOnDivideByZero() {\n-    assertThatExceptionOfType(FatalTemplateErrorsException.class)\n-      .isThrownBy(\n-        () -> {\n-          jinjava.render(\n-            \"{{ numerator|divide(denominator) }}\",\n-            ImmutableMap.of(\"numerator\", 10, \"denominator\", 0)\n-          );\n-        }\n-      );\n+  public void itDividesIntegersWithNonIntegerResult() {\n+    assertThat(\n+        jinjava.render(\n+          \"{{ numerator|divide(denominator) }} {{ numerator / denominator }}\",\n+          ImmutableMap.of(\"numerator\", 9, \"denominator\", 10)\n+        )\n+      )\n+      .isEqualTo(\"0.9 0.9\");\n   }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/MultiplyFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/MultiplyFilterTest.java\nindex 0b01c9c..7151859 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/MultiplyFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/MultiplyFilterTest.java\n@@ -6,7 +6,6 @@ import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.BaseJinjavaTest;\n import com.hubspot.jinjava.interpret.RenderResult;\n import java.util.Map;\n-import junit.framework.TestCase;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -21,13 +20,13 @@ public class MultiplyFilterTest extends BaseJinjavaTest {\n   public void itMultipliesDecimalNumbers() {\n     Map<String, Object> vars = ImmutableMap.of(\"test\", 10);\n     RenderResult renderResult = jinjava.renderForResult(\"{{ test|multiply(.25) }}\", vars);\n-    assertThat(renderResult.getOutput()).isEqualTo(\"2.50\");\n+    assertThat(renderResult.getOutput()).isEqualTo(\"2.5\");\n   }\n \n   @Test\n   public void itCoercesStringsToNumbers() {\n     Map<String, Object> vars = ImmutableMap.of(\"test\", \"10\");\n     RenderResult renderResult = jinjava.renderForResult(\"{{ test|multiply(.25) }}\", vars);\n-    assertThat(renderResult.getOutput()).isEqualTo(\"2.50\");\n+    assertThat(renderResult.getOutput()).isEqualTo(\"2.5\");\n   }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:19:08.425545Z", "commit_hash": "4f3bcb687246a23eb2364d4f291f2233c2d923da", "commit_message": "Merge pull request #758 from HubSpot/fix-null-range\n\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java\nindex d62314c..f1b3b45 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java\n@@ -1,11 +1,11 @@\n package com.hubspot.jinjava.lib.filter;\n \n-import static com.hubspot.jinjava.util.Logging.ENGINE_LOG;\n-\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.InvalidArgumentException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateError;\n import com.hubspot.jinjava.lib.fn.Functions;\n import com.hubspot.jinjava.objects.SafeString;\n import java.util.Map;\n@@ -115,16 +115,24 @@ public class TruncateHtmlFilter implements AdvancedFilter {\n         try {\n           length = Integer.parseInt(Objects.toString(args[0]));\n         } catch (Exception e) {\n-          ENGINE_LOG.warn(\n-            \"truncatehtml(): error setting length for {}, using default {}\",\n-            args[0],\n-            DEFAULT_TRUNCATE_LENGTH\n+          interpreter.addError(\n+            TemplateError.fromInvalidArgumentException(\n+              new InvalidArgumentException(\n+                interpreter,\n+                \"truncatehtml\",\n+                String.format(\n+                  \"truncatehtml(): error setting length of %s, using default of %d\",\n+                  args[0],\n+                  DEFAULT_TRUNCATE_LENGTH\n+                )\n+              )\n+            )\n           );\n         }\n       }\n \n       if (args.length > 1 && args[1] != null) {\n-        ends = Objects.toString(args[1]);\n+        ends = args[1];\n       }\n \n       boolean killwords = false;\n@@ -148,10 +156,10 @@ public class TruncateHtmlFilter implements AdvancedFilter {\n   }\n \n   private static class ContentTruncatingNodeVisitor implements NodeVisitor {\n-    private int maxTextLen;\n+    private final int maxTextLen;\n     private int textLen;\n-    private String ending;\n-    private boolean killwords;\n+    private final String ending;\n+    private final boolean killwords;\n \n     ContentTruncatingNodeVisitor(int maxTextLen, String ending, boolean killwords) {\n       this.maxTextLen = maxTextLen;\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\nindex 6c0b960..6678f20 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/Functions.java\n@@ -1,7 +1,5 @@\n package com.hubspot.jinjava.lib.fn;\n \n-import static com.hubspot.jinjava.util.Logging.ENGINE_LOG;\n-\n import com.google.common.collect.Lists;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n@@ -10,7 +8,9 @@ import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.el.ext.NamedParameter;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n+import com.hubspot.jinjava.interpret.InvalidArgumentException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateError;\n import com.hubspot.jinjava.mode.ExecutionMode;\n import com.hubspot.jinjava.objects.Namespace;\n import com.hubspot.jinjava.objects.date.InvalidDateFormatException;\n@@ -384,6 +384,8 @@ public class Functions {\n     }\n   )\n   public static Object truncate(Object var, Object... arg) {\n+    JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+\n     if (var instanceof String) {\n       int length = DEFAULT_TRUNCATE_LENGTH;\n       boolean killwords = false;\n@@ -393,10 +395,18 @@ public class Functions {\n         try {\n           length = Integer.parseInt(Objects.toString(arg[0]));\n         } catch (Exception e) {\n-          ENGINE_LOG.debug(\n-            \"truncate(): error setting length for {}, using default {}\",\n-            arg[0],\n-            DEFAULT_TRUNCATE_LENGTH\n+          interpreter.addError(\n+            TemplateError.fromInvalidArgumentException(\n+              new InvalidArgumentException(\n+                interpreter,\n+                \"truncate\",\n+                String.format(\n+                  \"truncate(): error setting length of %s, using default of %d\",\n+                  arg[0],\n+                  DEFAULT_TRUNCATE_LENGTH\n+                )\n+              )\n+            )\n           );\n         }\n       }\n@@ -405,7 +415,15 @@ public class Functions {\n         try {\n           killwords = BooleanUtils.toBoolean(Objects.toString(arg[1]));\n         } catch (Exception e) {\n-          ENGINE_LOG.warn(\"truncate(); error setting killwords for {}\", arg[1]);\n+          interpreter.addError(\n+            TemplateError.fromInvalidArgumentException(\n+              new InvalidArgumentException(\n+                interpreter,\n+                \"truncate\",\n+                String.format(\"truncate(): error setting killwords for %s\", arg[1])\n+              )\n+            )\n+          );\n         }\n       }\n \n@@ -461,21 +479,29 @@ public class Functions {\n     int end = 0;\n     int step = 1;\n \n+    if (arg1 == null) {\n+      throw new InvalidArgumentException(\n+        JinjavaInterpreter.getCurrent(),\n+        \"range\",\n+        \"Invalid null passed to range function\"\n+      );\n+    }\n+\n     switch (args.length) {\n       case 0:\n-        if (NumberUtils.isNumber(arg1.toString())) {\n+        if (NumberUtils.isCreatable(arg1.toString())) {\n           end = NumberUtils.toInt(arg1.toString(), rangeLimit);\n         }\n         break;\n       case 1:\n         start = NumberUtils.toInt(arg1.toString());\n-        if (args[0] != null && NumberUtils.isNumber(args[0].toString())) {\n+        if (args[0] != null && NumberUtils.isCreatable(args[0].toString())) {\n           end = NumberUtils.toInt(args[0].toString(), start + rangeLimit);\n         }\n         break;\n       default:\n         start = NumberUtils.toInt(arg1.toString());\n-        if (args[0] != null && NumberUtils.isNumber(args[0].toString())) {\n+        if (args[0] != null && NumberUtils.isCreatable(args[0].toString())) {\n           end = NumberUtils.toInt(args[0].toString(), start + rangeLimit);\n         }\n         if (args[1] != null) {\ndiff --git a/src/main/java/com/hubspot/jinjava/util/ForLoop.java b/src/main/java/com/hubspot/jinjava/util/ForLoop.java\nindex 2d36412..6a0127b 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ForLoop.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ForLoop.java\n@@ -15,8 +15,6 @@ limitations under the License.\n  **********************************************************************/\n package com.hubspot.jinjava.util;\n \n-import static com.hubspot.jinjava.util.Logging.ENGINE_LOG;\n-\n import java.util.Iterator;\n \n public class ForLoop implements Iterator<Object> {\n@@ -32,7 +30,7 @@ public class ForLoop implements Iterator<Object> {\n \n   private int depth;\n \n-  private Iterator<?> it;\n+  private final Iterator<?> it;\n \n   public ForLoop(Iterator<?> ite, int len) {\n     length = len;\n@@ -111,23 +109,14 @@ public class ForLoop implements Iterator<Object> {\n   }\n \n   public int getRevindex0() {\n-    if (revindex == NULL_VALUE) {\n-      ENGINE_LOG.warn(\"can't compute items' length while looping.\");\n-    }\n     return revindex;\n   }\n \n   public int getRevcounter() {\n-    if (revcounter == NULL_VALUE) {\n-      ENGINE_LOG.warn(\"can't compute items' length while looping.\");\n-    }\n     return revcounter;\n   }\n \n   public int getLength() {\n-    if (revcounter == NULL_VALUE) {\n-      ENGINE_LOG.warn(\"can't compute items' length while looping.\");\n-    }\n     return length;\n   }\n \n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/fn/RangeFunctionTest.java b/src/test/java/com/hubspot/jinjava/lib/fn/RangeFunctionTest.java\nindex 2f52234..cc60734 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/fn/RangeFunctionTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/fn/RangeFunctionTest.java\n@@ -6,11 +6,10 @@ import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.JinjavaConfig;\n-import com.hubspot.jinjava.LegacyOverrides;\n+import com.hubspot.jinjava.interpret.InvalidArgumentException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import java.util.Arrays;\n import java.util.Collections;\n-import org.assertj.core.api.Assertions;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -71,6 +70,12 @@ public class RangeFunctionTest {\n   }\n \n   @Test\n+  public void itHandlesMissingArg() {\n+    assertThatThrownBy(() -> Functions.range(null))\n+      .isInstanceOf(InvalidArgumentException.class);\n+  }\n+\n+  @Test\n   public void itTruncatesRangeToDefaultRangeLimit() {\n     int defaultRangeLimit = config.getRangeLimit();\n     assertThat(defaultRangeLimit).isEqualTo(Functions.DEFAULT_RANGE_LIMIT);\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:21:54.288602Z", "commit_hash": "7fa717959b40a952aaf3d0bcf5e48c3df64085a2", "commit_message": "Merge pull request #751 from HubSpot/deferred-import-choice\n\n[Eager Execution] Fix deferred import selection", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex df1ed2e..b306efb 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -101,6 +101,11 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n         // Since some values got deferred, output a DoTag that will load the currentImportAlias on the context.\n         return (\n           newPathSetter +\n+          EagerReconstructionUtils.buildSetTag(\n+            ImmutableMap.of(currentImportAlias, \"{}\"),\n+            interpreter,\n+            true\n+          ) +\n           output +\n           getDoTagToPreserve(interpreter, currentImportAlias) +\n           initialPathSetter\n@@ -152,14 +157,6 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n       .getContext()\n       .getSessionBindings()\n       .get(currentImportAlias);\n-    if ((!(currentAliasMap instanceof DeferredValue))) {\n-      // Make sure that the map is deferred.\n-      if (!(currentAliasMap instanceof Map)) {\n-        currentAliasMap = new PyMap(new HashMap<>());\n-      }\n-      currentAliasMap = DeferredValue.instance(currentAliasMap);\n-      interpreter.getContext().put(currentImportAlias, currentAliasMap);\n-    }\n     for (Map.Entry<String, Object> entry : (\n       (Map<String, Object>) ((DeferredValue) currentAliasMap).getOriginalValue()\n     ).entrySet()) {\ndiff --git a/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja b/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\nnew file mode 100644\nindex 0000000..ee6841c\n--- /dev/null\n+++ b/src/test/resources/eager/handles-import-in-deferred-if.expected.jinja\n@@ -0,0 +1,11 @@\n+{% if deferred %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n+{% set bar = 'person19' %}{% do simple.update({\"bar\": bar}) %}\n+Hello person\n+{% do simple.update({'bar': 'person19','import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}\n+{% else %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n+{% set bar = 'person19' %}{% do simple.update({\"bar\": bar}) %}\n+Hello person\n+{% do simple.update({'bar': 'person19','import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}\n+{% endif %}\n+simple.foo: {{ simple.foo() }}\n+simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/eager/handles-import-in-deferred-if.jinja b/src/test/resources/eager/handles-import-in-deferred-if.jinja\nnew file mode 100644\nindex 0000000..4bbe1af\n--- /dev/null\n+++ b/src/test/resources/eager/handles-import-in-deferred-if.jinja\n@@ -0,0 +1,8 @@\n+{% set myname = 'person' %}\n+{% if deferred %}\n+{%- import \"macro-and-set.jinja\" as simple -%}\n+{% else %}\n+{%- import \"macro-and-set.jinja\" as simple -%}\n+{% endif %}\n+simple.foo: {{ simple.foo() }}\n+simple.bar: {{ simple.bar }}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 4fb7cdf..a9cc464 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -929,4 +929,11 @@ public class EagerTest {\n       \"defers-changes-within-deferred-set-block.expected\"\n     );\n   }\n+\n+  @Test\n+  public void itHandlesImportInDeferredIf() {\n+    expectedTemplateInterpreter.assertExpectedOutputNonIdempotent(\n+      \"handles-import-in-deferred-if\"\n+    );\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\nindex 3dbdf4f..9533ba7 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n@@ -448,6 +448,29 @@ public class EagerImportTagTest extends ImportTagTest {\n   }\n \n   @Test\n+  public void itHandlesQuadLayerInDeferredIf() {\n+    setupResourceLocator();\n+    context.put(\"a_val\", \"a\");\n+    context.put(\"b_val\", \"b\");\n+    String result = interpreter.render(\n+      \"{% if deferred %}{% import 'import-tree-b.jinja' as b %}{% endif %}\"\n+    );\n+    assertThat(result)\n+      .isEqualTo(\n+        \"{% if deferred %}{% set current_path = 'import-tree-b.jinja' %}{% set b = {} %}{% set current_path = 'import-tree-a.jinja' %}{% set a = {} %}{% set something = 'somn' %}{% do a.update({\\\"something\\\": something}) %}\\n\" +\n+        \"{% set foo_a = 'a' %}{% do a.update({\\\"foo_a\\\": foo_a}) %}\\n\" +\n+        \"{% do a.update({'foo_a': 'a','import_resource_path': 'import-tree-a.jinja','something': 'somn'}) %}{% set current_path = 'import-tree-b.jinja' %}\\n\" +\n+        \"{% set foo_b = 'b' + a.foo_a %}{% do b.update({\\\"foo_b\\\": foo_b}) %}\\n\" +\n+        \"{% do b.update({'a': a,'foo_b': foo_b,'import_resource_path': 'import-tree-b.jinja'}) %}{% set current_path = '' %}{% endif %}\"\n+      );\n+\n+    context.put(\"deferred\", true);\n+    interpreter.render(result);\n+    assertThat(interpreter.render(\"{{ b.foo_b }}\")).isEqualTo(\"ba\");\n+    assertThat(interpreter.render(\"{{ b.a.foo_a }}\")).isEqualTo(\"a\");\n+  }\n+\n+  @Test\n   public void itCorrectlySetsAliasedPath() {\n     setupResourceLocator();\n     context.put(\"foo\", \"foo\");\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\nindex d7b6da4..b2bf33a 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n@@ -4,7 +4,7 @@ Hello {{ myname }}\n \n foo: Hello {{ myname }}\n bar: {{ bar }}\n----{% set myname = deferred + 7 %}{% set current_path = 'macro-and-set.jinja' %}\n+---{% set myname = deferred + 7 %}{% set current_path = 'macro-and-set.jinja' %}{% set simple = {} %}\n {% set bar = myname + 19 %}{% set simple = {} %}{% do simple.update({\"bar\": bar}) %}\n Hello {{ myname }}\n {% do simple.update({'import_resource_path': 'macro-and-set.jinja'}) %}{% set current_path = '' %}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:25:02.499598Z", "commit_hash": "1c1ac146718c669365f1729c63b60f70fcb1eb40", "commit_message": "Merge pull request #733 from HubSpot/clean-html\n\nFix striptags to clean HTML instead of parsing", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/StripTagsFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/StripTagsFilter.java\nindex cfc4677..72fbf7e 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/StripTagsFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/StripTagsFilter.java\n@@ -6,6 +6,7 @@ import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import java.util.regex.Pattern;\n import org.jsoup.Jsoup;\n+import org.jsoup.safety.Whitelist;\n \n /**\n  * striptags(value) Strip SGML/XML tags and replace adjacent whitespace by one space.\n@@ -34,8 +35,9 @@ public class StripTagsFilter implements Filter {\n     }\n \n     String val = interpreter.renderFlat((String) object);\n-    String strippedVal = Jsoup.parseBodyFragment(val).text();\n-    String normalizedVal = WHITESPACE.matcher(strippedVal).replaceAll(\" \");\n+    String cleanedVal = Jsoup.clean(val, Whitelist.none());\n+\n+    String normalizedVal = WHITESPACE.matcher(cleanedVal).replaceAll(\" \");\n \n     return normalizedVal;\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/StripTagsFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/StripTagsFilterTest.java\nindex 64b1726..2ea987f 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/StripTagsFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/StripTagsFilterTest.java\n@@ -37,7 +37,7 @@ public class StripTagsFilterTest {\n   @Test\n   public void itWorksWithNonHtmlStrings() throws Exception {\n     assertThat(filter.filter(\"foo\", interpreter)).isEqualTo(\"foo\");\n-    assertThat(filter.filter(\"foo < bar\", interpreter)).isEqualTo(\"foo < bar\");\n+    assertThat(filter.filter(\"foo < bar\", interpreter)).isEqualTo(\"foo &lt; bar\");\n   }\n \n   @Test\n@@ -51,4 +51,16 @@ public class StripTagsFilterTest {\n     assertThat(filter.filter(\"foo <b>bar</b> other\", interpreter))\n       .isEqualTo(\"foo bar other\");\n   }\n+\n+  @Test\n+  public void itStripsTagsFromNestedHtml() throws Exception {\n+    assertThat(filter.filter(\"<div><strong>test</strong></div>\", interpreter))\n+      .isEqualTo(\"test\");\n+  }\n+\n+  @Test\n+  public void itStripsTagsFromEscapedHtml() throws Exception {\n+    assertThat(filter.filter(\"&lt;div&gt;test&lt;/test&gt;\", interpreter))\n+      .isEqualTo(\"&lt;div&gt;test&lt;/test&gt;\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:35:47.572580Z", "commit_hash": "57bfcee2160c574cc7bde26572e7f2bee1da1517", "commit_message": "Fix Eager Unless tag logic\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/IfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/IfTag.java\nindex 50576a4..a44f59a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/IfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/IfTag.java\n@@ -128,10 +128,7 @@ public class IfTag implements Tag {\n     return sb.toString();\n   }\n \n-  protected boolean isPositiveIfElseNode(\n-    TagNode tagNode,\n-    JinjavaInterpreter interpreter\n-  ) {\n+  public boolean isPositiveIfElseNode(TagNode tagNode, JinjavaInterpreter interpreter) {\n     return ObjectTruthValue.evaluate(\n       interpreter.resolveELExpression(\n         tagNode.getHelpers(),\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/UnlessTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/UnlessTag.java\nindex c404642..fa8b3cd 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/UnlessTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/UnlessTag.java\n@@ -40,13 +40,14 @@ public class UnlessTag extends IfTag {\n   }\n \n   @Override\n-  protected boolean isPositiveIfElseNode(\n-    TagNode tagNode,\n-    JinjavaInterpreter interpreter\n-  ) {\n+  public boolean isPositiveIfElseNode(TagNode tagNode, JinjavaInterpreter interpreter) {\n     if (tagNode.getName().equals(\"unless\")) {\n       return !ObjectTruthValue.evaluate(\n-        interpreter.resolveELExpression(tagNode.getHelpers(), tagNode.getLineNumber())\n+        interpreter.resolveELExpression(\n+          tagNode.getHelpers(),\n+          tagNode.getLineNumber(),\n+          tagNode.getStartPosition()\n+        )\n       );\n     }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex 1727a91..554cca7 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -14,7 +14,6 @@ import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.util.EagerExpressionResolver.EagerExpressionResult;\n import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n-import com.hubspot.jinjava.util.ObjectTruthValue;\n import org.apache.commons.lang3.StringUtils;\n \n public class EagerIfTag extends EagerTagDecorator<IfTag> {\n@@ -236,13 +235,7 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n     }\n     // the tag node is after the deferred exception location\n     try {\n-      return !ObjectTruthValue.evaluate(\n-        eagerInterpreter.resolveELExpression(\n-          tagNode.getHelpers(),\n-          tagNode.getLineNumber(),\n-          tagNode.getStartPosition()\n-        )\n-      );\n+      return !getTag().isPositiveIfElseNode(tagNode, eagerInterpreter);\n     } catch (DeferredValueException e) {\n       return false;\n     }\n@@ -257,13 +250,7 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n       return false; // Deferred value thrown when checking if this branch would be executed.\n     }\n     try {\n-      return ObjectTruthValue.evaluate(\n-        eagerInterpreter.resolveELExpression(\n-          tagNode.getHelpers(),\n-          tagNode.getLineNumber(),\n-          tagNode.getStartPosition()\n-        )\n-      );\n+      return getTag().isPositiveIfElseNode(tagNode, eagerInterpreter);\n     } catch (DeferredValueException e) {\n       return false;\n     }\n", "test_patch": "diff --git a/src/test/resources/eager/handles-set-and-modified-in-for.expected.jinja b/src/test/resources/eager/handles-set-and-modified-in-for.expected.jinja\nindex 4e5d638..51fd303 100644\n--- a/src/test/resources/eager/handles-set-and-modified-in-for.expected.jinja\n+++ b/src/test/resources/eager/handles-set-and-modified-in-for.expected.jinja\n@@ -6,4 +6,4 @@\n {% set count = count + 1 %}\n {{ count }}\n {% endfor %}\n-{{ list }}\n\\ No newline at end of file\n+{{ list }}\ndiff --git a/src/test/resources/eager/handles-set-and-modified-in-for.jinja b/src/test/resources/eager/handles-set-and-modified-in-for.jinja\nindex aa58441..57f62c3 100644\n--- a/src/test/resources/eager/handles-set-and-modified-in-for.jinja\n+++ b/src/test/resources/eager/handles-set-and-modified-in-for.jinja\n@@ -7,4 +7,4 @@\n {% set count = count + 1 %}\n {{ count }}\n {% endfor %}\n-{{ list }}\n\\ No newline at end of file\n+{{ list }}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:38:13.759064Z", "commit_hash": "eff6ed3d7a940620ee4885dbdccfc50758c75f5a", "commit_message": "Fix tests\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\nindex 00ade3d..4ea1ef3 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n@@ -8,6 +8,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.lib.tag.FromTag;\n import com.hubspot.jinjava.loader.RelativePathResolver;\n+import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import java.io.IOException;\n@@ -57,11 +58,9 @@ public class EagerFromTag extends EagerStateChangingTag<FromTag> {\n         buildSetTagForDeferredInChildContext(\n           ImmutableMap.of(\n             RelativePathResolver.CURRENT_PATH_CONTEXT_KEY,\n-            '\\'' +\n-            (String) interpreter\n-              .getContext()\n-              .get(RelativePathResolver.CURRENT_PATH_CONTEXT_KEY) +\n-            '\\''\n+            PyishObjectMapper.getAsPyishString(\n+              interpreter.getContext().get(RelativePathResolver.CURRENT_PATH_CONTEXT_KEY)\n+            )\n           ),\n           interpreter,\n           false\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex aa4f3b6..290d49c 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -52,11 +52,9 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n         buildSetTagForDeferredInChildContext(\n           ImmutableMap.of(\n             RelativePathResolver.CURRENT_PATH_CONTEXT_KEY,\n-            '\\'' +\n-            (String) interpreter\n-              .getContext()\n-              .get(RelativePathResolver.CURRENT_PATH_CONTEXT_KEY) +\n-            '\\''\n+            PyishObjectMapper.getAsPyishString(\n+              interpreter.getContext().get(RelativePathResolver.CURRENT_PATH_CONTEXT_KEY)\n+            )\n           ),\n           interpreter,\n           false\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java\nindex 45ceb56..0496b3a 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java\n@@ -76,7 +76,7 @@ public class EagerFromTagTest extends FromTagTest {\n   public void itDefersWhenPathIsDeferred() {\n     String input = \"{% from deferred import foo %}\";\n     String output = interpreter.render(input);\n-    assertThat(output).isEqualTo(input);\n+    assertThat(output).isEqualTo(\"{% set current_path = null %}\" + input);\n     assertThat(interpreter.getContext().getGlobalMacro(\"foo\")).isNotNull();\n     assertThat(interpreter.getContext().getGlobalMacro(\"foo\").isDeferred()).isTrue();\n   }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\nindex 8962b71..a590b52 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n@@ -549,7 +549,7 @@ public class EagerImportTagTest extends ImportTagTest {\n   public void itDefersWhenPathIsDeferred() {\n     String input = \"{% import deferred as foo %}\";\n     String output = interpreter.render(input);\n-    assertThat(output).isEqualTo(input);\n+    assertThat(output).isEqualTo(\"{% set current_path = null %}\" + input);\n     assertThat(interpreter.getContext().get(\"foo\"))\n       .isNotNull()\n       .isInstanceOf(DeferredValue.class);\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:42:18.477679Z", "commit_hash": "ada1b594fe23bb5bc13afe2d1c464095d7e66aed", "commit_message": "Merge pull request #711 from HubSpot/pyish-date-serializable\n\nFix Pyish Date Serializing", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java b/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\nindex 6384362..88593b9 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\n@@ -130,7 +130,7 @@ public final class PyishDate\n   @Override\n   public String toPyishString() {\n     return String.format(\n-      \"%s|strtodate(%s)\",\n+      \"\\\"%s\\\"|strtotime(\\\"%s\\\")\",\n       strftime(FULL_DATE_FORMAT),\n       FULL_DATE_FORMAT\n     );\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 33b4307..bbbb220 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n@@ -10,7 +10,10 @@ import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.io.Resources;\n import com.hubspot.jinjava.BaseInterpretingTest;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.LegacyOverrides;\n import com.hubspot.jinjava.interpret.InterpretException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.objects.date.PyishDate;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n@@ -186,12 +189,27 @@ public class ForTagTest extends BaseInterpretingTest {\n \n   @Test\n   public void testForLoopWithDates() {\n-    Map<String, Object> context = Maps.newHashMap();\n     Date testDate = new Date();\n-    context.put(\"the_list\", Lists.newArrayList(testDate));\n+    interpreter =\n+      new JinjavaInterpreter(\n+        jinjava,\n+        context,\n+        JinjavaConfig\n+          .newBuilder()\n+          .withLegacyOverrides(\n+            LegacyOverrides.newBuilder().withUsePyishObjectMapper(false).build()\n+          )\n+          .build()\n+      );\n+    interpreter.getContext().put(\"the_list\", Lists.newArrayList(testDate));\n     String template = \"\" + \"{% for i in the_list %}{{i}}{% endfor %}\";\n-    String rendered = jinjava.render(template, context);\n-    assertEquals(new PyishDate(testDate).toString(), rendered);\n+    try {\n+      JinjavaInterpreter.pushCurrent(interpreter);\n+      String rendered = interpreter.render(template);\n+      assertEquals(new PyishDate(testDate).toString(), rendered);\n+    } finally {\n+      JinjavaInterpreter.popCurrent();\n+    }\n   }\n \n   @Test\ndiff --git a/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java b/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\nindex 999e4ed..7e3976f 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\n@@ -4,6 +4,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.Date;\n@@ -62,7 +63,7 @@ public class PyishDateTest {\n   public void itPyishSerializes() {\n     PyishDate d1 = new PyishDate(ZonedDateTime.parse(\"2013-11-12T14:15:16.170+02:00\"));\n     JinjavaInterpreter interpreter = new Jinjava().newInterpreter();\n-    interpreter.render(\"{% set foo = \" + d1.toPyishString() + \"%}\");\n-    assertThat(d1).isNotEqualTo(interpreter.getContext().get(\"foo\"));\n+    interpreter.render(\"{% set foo = \" + PyishObjectMapper.getAsPyishString(d1) + \"%}\");\n+    assertThat(d1).isEqualTo(interpreter.getContext().get(\"foo\"));\n   }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\nindex a6a20ce..d527453 100644\n--- a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n@@ -298,7 +298,7 @@ public class EagerExpressionResolverTest {\n     EagerExpressionResult eagerExpressionResult = eagerResolveExpression(\"date\");\n \n     assertThat(WhitespaceUtils.unquoteAndUnescape(eagerExpressionResult.toString()))\n-      .isEqualTo(date.toString());\n+      .isEqualTo(date.toPyishString().replace(\"'\", \"\\\\'\").replace('\"', '\\''));\n   }\n \n   @Test\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:45:00.700604Z", "commit_hash": "3431f0e4f2955be2257c72c93247ecb308da057b", "commit_message": "Fix PyishDate serialization and test\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java b/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\nindex 6384362..88593b9 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\n@@ -130,7 +130,7 @@ public final class PyishDate\n   @Override\n   public String toPyishString() {\n     return String.format(\n-      \"%s|strtodate(%s)\",\n+      \"\\\"%s\\\"|strtotime(\\\"%s\\\")\",\n       strftime(FULL_DATE_FORMAT),\n       FULL_DATE_FORMAT\n     );\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java b/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\nindex 999e4ed..0c395a7 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\n@@ -63,6 +63,6 @@ public class PyishDateTest {\n     PyishDate d1 = new PyishDate(ZonedDateTime.parse(\"2013-11-12T14:15:16.170+02:00\"));\n     JinjavaInterpreter interpreter = new Jinjava().newInterpreter();\n     interpreter.render(\"{% set foo = \" + d1.toPyishString() + \"%}\");\n-    assertThat(d1).isNotEqualTo(interpreter.getContext().get(\"foo\"));\n+    assertThat(d1).isEqualTo(interpreter.getContext().get(\"foo\"));\n   }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:47:18.701538Z", "commit_hash": "b9b1cff7d1a15bb14cc4e8526e0eb78840651e9e", "commit_message": "Merge pull request #704 from HubSpot/local-eager-token\n\n[Eager Execution] Small bug fixes", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java\nindex 9ac1ede..d4b3709 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/eager/EagerAstChoice.java\n@@ -40,7 +40,7 @@ public class EagerAstChoice extends AstChoice implements EvalResultHolder {\n       hasEvalResult = true;\n       return evalResult;\n     } catch (DeferredParsingException e) {\n-      if (question.getAndClearEvalResult() != null) {\n+      if (question.hasEvalResult()) {\n         // the question was evaluated so jump to either yes or no\n         throw new DeferredParsingException(this, e.getDeferredEvalResult());\n       }\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/Context.java b/src/main/java/com/hubspot/jinjava/interpret/Context.java\nindex 8965091..2e35017 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/Context.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/Context.java\n@@ -376,7 +376,14 @@ public class Context extends ScopeMap<String, Object> {\n       );\n     }\n     eagerTokens.add(eagerToken);\n-    DeferredValueUtils.findAndMarkDeferredProperties(this, eagerToken);\n+    if (\n+      eagerToken.getImportResourcePath() == null ||\n+      eagerToken\n+        .getImportResourcePath()\n+        .equals(this.get(Context.IMPORT_RESOURCE_PATH_KEY))\n+    ) {\n+      DeferredValueUtils.findAndMarkDeferredProperties(this, eagerToken);\n+    }\n     if (getParent() != null) {\n       Context parent = getParent();\n       //Ignore global context\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\nindex 9488ba1..5cc54a2 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n@@ -70,6 +70,7 @@ public class MacroFunction extends AbstractCallableMethod {\n     JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n     Optional<String> importFile = getImportFile(interpreter);\n     try (InterpreterScopeClosable c = interpreter.enterScope()) {\n+      interpreter.getContext().setDeferredExecutionMode(false);\n       String result = getEvaluationResult(argMap, kwargMap, varArgs, interpreter);\n \n       if (\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\nindex ac9f2b2..bbf5d67 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\n@@ -136,6 +136,7 @@ public class ImportTag implements Tag {\n       );\n     } finally {\n       interpreter.getContext().getCurrentPathStack().pop();\n+      interpreter.getContext().getImportPathStack().pop();\n     }\n   }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\nindex 9f8efc7..dd86fbc 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java\n@@ -68,7 +68,13 @@ public class EagerForTag extends EagerTagDecorator<ForTag> {\n       false,\n       true\n     );\n-    if (!eagerExecutionResult.getSpeculativeBindings().isEmpty()) {\n+    if (\n+      eagerExecutionResult\n+        .getSpeculativeBindings()\n+        .keySet()\n+        .stream()\n+        .anyMatch(key -> !(interpreter.getContext().get(key) instanceof DeferredValue))\n+    ) {\n       // Values cannot be modified within a for loop because we don't know many times, if any it will run\n       throw new DeferredValueException(\n         \"Modified values in deferred for loop: \" +\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex 942fa23..97b3081 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -99,6 +99,7 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n       );\n     } finally {\n       interpreter.getContext().getCurrentPathStack().pop();\n+      interpreter.getContext().getImportPathStack().pop();\n     }\n   }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerToken.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerToken.java\nindex da27683..8a640e4 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerToken.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerToken.java\n@@ -1,5 +1,7 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.tree.parse.Token;\n import java.util.Collections;\n import java.util.Set;\n@@ -12,10 +14,13 @@ public class EagerToken {\n   // These words are those which will be set to a value which has been deferred.\n   private final Set<String> setDeferredWords;\n \n+  private final String importResourcePath;\n+\n   public EagerToken(Token token, Set<String> usedDeferredWords) {\n     this.token = token;\n     this.usedDeferredWords = usedDeferredWords;\n     this.setDeferredWords = Collections.emptySet();\n+    importResourcePath = acquireImportResourcePath();\n   }\n \n   public EagerToken(\n@@ -26,6 +31,7 @@ public class EagerToken {\n     this.token = token;\n     this.usedDeferredWords = usedDeferredWords;\n     this.setDeferredWords = setDeferredWords;\n+    importResourcePath = acquireImportResourcePath();\n   }\n \n   public Token getToken() {\n@@ -39,4 +45,16 @@ public class EagerToken {\n   public Set<String> getSetDeferredWords() {\n     return setDeferredWords;\n   }\n+\n+  public String getImportResourcePath() {\n+    return importResourcePath;\n+  }\n+\n+  private static String acquireImportResourcePath() {\n+    return (String) JinjavaInterpreter\n+      .getCurrentMaybe()\n+      .map(interpreter -> interpreter.getContext().get(Context.IMPORT_RESOURCE_PATH_KEY))\n+      .filter(path -> path instanceof String)\n+      .orElse(null);\n+  }\n }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java b/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java\nindex 220c6cc..e502d2d 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java\n@@ -129,13 +129,13 @@ public class EagerExpressionStrategyTest extends ExpressionNodeTest {\n   }\n \n   @Test\n-  public void itGoesIntoDeferredExecutionModeWithMacro() {\n+  public void itDoesNotGoIntoDeferredExecutionModeWithMacro() {\n     assertExpectedOutput(\n       \"{% macro def() %}{{ is_deferred_execution_mode() }}{% endmacro %}\" +\n       \"{{ def() }}\" +\n       \"{% if deferred %}{{ def() }}{% endif %}\" +\n       \"{{ def() }}\",\n-      \"false{% if deferred %}true{% endif %}false\"\n+      \"false{% if deferred %}false{% endif %}false\"\n     );\n   }\n \ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\nindex 7a827a3..7bd8641 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n@@ -403,9 +403,12 @@ public class EagerImportTagTest extends ImportTagTest {\n   public void itDefersTripleLayer() {\n     setupResourceLocator();\n     context.put(\"a_val\", DeferredValue.instance(\"a\"));\n+\n     context.put(\"b_val\", \"b\");\n     context.put(\"c_val\", \"c\");\n-    String result = interpreter.render(\"{% import 'import-tree-c.jinja' as c %}{{ c }}\");\n+    String result = interpreter.render(\n+      \"{% import 'import-tree-c.jinja' as c %}{{ c|dictsort(false, 'key') }}\"\n+    );\n     assertThat(interpreter.render(\"{{ c.b.a.foo_a }}\")).isEqualTo(\"{{ c.b.a.foo_a }}\");\n     assertThat(interpreter.render(\"{{ c.b.foo_b }}\")).isEqualTo(\"{{ c.b.foo_b }}\");\n     assertThat(interpreter.render(\"{{ c.foo_c }}\")).isEqualTo(\"{{ c.foo_c }}\");\n@@ -413,12 +416,9 @@ public class EagerImportTagTest extends ImportTagTest {\n     // There are some extras due to deferred values copying up the context stack.\n     assertThat(interpreter.render(result).trim())\n       .isEqualTo(\n-        \"{'b': {'foo_b': 'ba', 'a': \" +\n-        \"{'foo_a': 'a', 'import_resource_path': 'import-tree-a.jinja', 'something': 'somn'}, \" +\n-        \"'foo_a': 'a', 'import_resource_path': 'import-tree-b.jinja'}, \" +\n-        \"'foo_c': 'cbaa', 'a': {'foo_a': 'a', 'import_resource_path': \" +\n-        \"'import-tree-a.jinja', 'something': 'somn'}, \" +\n-        \"'foo_b': 'ba', 'foo_a': 'a', 'import_resource_path': 'import-tree-c.jinja'}\"\n+        interpreter.render(\n+          \"{% import 'import-tree-c.jinja' as c %}{{ c|dictsort(false, 'key') }}\"\n+        )\n       );\n   }\n \ndiff --git a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\nindex bda8eb0..a6a20ce 100644\n--- a/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/EagerExpressionResolverTest.java\n@@ -592,6 +592,8 @@ public class EagerExpressionResolverTest {\n       .isEqualTo(\"deferred\");\n     assertThat(eagerResolveExpression(\"false ? foo : deferred\").toString())\n       .isEqualTo(\"deferred\");\n+    assertThat(eagerResolveExpression(\"null ? foo : deferred\").toString())\n+      .isEqualTo(\"deferred\");\n   }\n \n   @Test\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:49:47.163227Z", "commit_hash": "8b815095f1b2cb631125c210fc3bb14a96c0bf07", "commit_message": "Merge pull request #679 from HubSpot/fix-null-lazy-expression-resolution\n\nEnsure lazy expressions that supply null don't cause template errors", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\nindex 1bde223..fc9c1c4 100644\n--- a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n@@ -206,6 +206,9 @@ public class JinjavaInterpreterResolver extends SimpleResolver {\n \n             if (base instanceof LazyExpression) {\n               base = ((LazyExpression) base).get();\n+              if (base == null) {\n+                return null;\n+              }\n             }\n \n             // java doesn't natively support negative array indices, so the\n@@ -240,6 +243,9 @@ public class JinjavaInterpreterResolver extends SimpleResolver {\n \n             if (value instanceof LazyExpression) {\n               value = ((LazyExpression) value).get();\n+              if (value == null) {\n+                return null;\n+              }\n             }\n \n             if (value instanceof DeferredValue) {\n@@ -294,6 +300,9 @@ public class JinjavaInterpreterResolver extends SimpleResolver {\n \n     if (value instanceof LazyExpression) {\n       value = ((LazyExpression) value).get();\n+      if (value == null) {\n+        return null;\n+      }\n     }\n \n     if (value instanceof PyWrapper) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\nindex 4d448bb..fe0f731 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\n@@ -568,6 +568,14 @@ public class ExpressionResolverTest {\n   }\n \n   @Test\n+  public void itResolvesNullLazyExpressions() {\n+    Supplier<Object> lazyNull = () -> null;\n+    context.put(\"nullobj\", LazyExpression.of(lazyNull, \"\"));\n+    assertThat(interpreter.resolveELExpression(\"nullobj\", -1)).isNull();\n+    assertThat(interpreter.getErrors()).isEmpty();\n+  }\n+\n+  @Test\n   public void itResolvesSuppliersOnlyIfResolved() {\n     TestClass testClass = new TestClass();\n     Supplier<String> lazyString = () -> result(\"hallelujah\", testClass);\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:52:08.995719Z", "commit_hash": "d6c0c4f4b909700c72087f30047d9b4aff19be02", "commit_message": "Fix test\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java b/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\nindex 88b6b72..0805e4d 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\n@@ -34,6 +34,7 @@ import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorType;\n import com.hubspot.jinjava.interpret.errorcategory.BasicTemplateErrorCategory;\n import com.hubspot.jinjava.lib.tag.ExtendsTag;\n+import com.hubspot.jinjava.lib.tag.eager.EagerGenericTag;\n import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n import com.hubspot.jinjava.objects.serialization.PyishSerializable;\n import com.hubspot.jinjava.random.ConstantZeroRandomNumberGenerator;\n@@ -352,7 +353,20 @@ public class JinjavaInterpreter implements PyishSerializable {\n   }\n \n   private boolean isExtendsTag(Node node) {\n-    return node instanceof TagNode && ((TagNode) node).getTag() instanceof ExtendsTag;\n+    return (\n+      node instanceof TagNode &&\n+      (\n+        ((TagNode) node).getTag() instanceof ExtendsTag ||\n+        isEagerExtendsTag((TagNode) node)\n+      )\n+    );\n+  }\n+\n+  private boolean isEagerExtendsTag(TagNode node) {\n+    return (\n+      node.getTag() instanceof EagerGenericTag &&\n+      ((EagerGenericTag) node.getTag()).getTag() instanceof ExtendsTag\n+    );\n   }\n \n   @SuppressFBWarnings(\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ExtendsTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ExtendsTagTest.java\nindex ec0e216..d8a6bd8 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ExtendsTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ExtendsTagTest.java\n@@ -252,7 +252,8 @@ public class ExtendsTagTest extends BaseInterpretingTest {\n       String fullName,\n       Charset encoding,\n       JinjavaInterpreter interpreter\n-    ) throws IOException {\n+    )\n+      throws IOException {\n       return fixture(fullName);\n     }\n \n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:54:32.536392Z", "commit_hash": "85486b681c1524e49da171b2ac6523a7614bcb65", "commit_message": "Merge pull request #661 from HubSpot/fix-capitilize-title-filters\n\nFix capitalize and title filters", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java\nindex e746f13..2ad6b2c 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java\n@@ -35,7 +35,7 @@ public class CapitalizeFilter implements Filter {\n \n     if (var instanceof String) {\n       String value = (String) var;\n-      return StringUtils.capitalize(value);\n+      return StringUtils.capitalize(value.toLowerCase());\n     }\n     return var;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\nindex fbf9b3c..19da563 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n@@ -32,7 +32,7 @@ public class TitleFilter implements Filter {\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n     if (var instanceof String) {\n       String value = (String) var;\n-      return WordUtils.capitalize(value);\n+      return WordUtils.capitalize(value.toLowerCase());\n     }\n     return var;\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java\nindex 704603a..7366e4b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java\n@@ -7,7 +7,19 @@ import org.junit.Test;\n public class CapitalizeFilterTest {\n \n   @Test\n-  public void testCapitalize() {\n+  public void itCapitalizesNormalValues() {\n     assertThat(new CapitalizeFilter().filter(\"foo\", null)).isEqualTo(\"Foo\");\n   }\n+\n+  @Test\n+  public void itCapitalizesSentences() {\n+    assertThat(new CapitalizeFilter().filter(\"foo is the best\", null))\n+      .isEqualTo(\"Foo is the best\");\n+  }\n+\n+  @Test\n+  public void itLowercasesUppercasedCharsInSentences() {\n+    assertThat(new CapitalizeFilter().filter(\"foo is the bEST\", null))\n+      .isEqualTo(\"Foo is the best\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\nindex 9c3e2dc..d3cb49b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n@@ -7,8 +7,20 @@ import org.junit.Test;\n public class TitleFilterTest {\n \n   @Test\n-  public void testTitleCase() {\n+  public void itTitleCasesNormalString() {\n     assertThat(new TitleFilter().filter(\"this is string\", null))\n       .isEqualTo(\"This Is String\");\n   }\n+\n+  @Test\n+  public void itDoesNotChangeAlreadyTitleCasedString() {\n+    assertThat(new TitleFilter().filter(\"This Is String\", null))\n+      .isEqualTo(\"This Is String\");\n+  }\n+\n+  @Test\n+  public void itLowercasesOtherUppercasedCharactersInString() {\n+    assertThat(new TitleFilter().filter(\"this is sTRING\", null))\n+      .isEqualTo(\"This Is String\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:56:58.798201Z", "commit_hash": "623f87a4d706a90d602c9244a14bad62bf59b443", "commit_message": "Fix capitalize and title filters\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java\nindex e746f13..2ad6b2c 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/CapitalizeFilter.java\n@@ -35,7 +35,7 @@ public class CapitalizeFilter implements Filter {\n \n     if (var instanceof String) {\n       String value = (String) var;\n-      return StringUtils.capitalize(value);\n+      return StringUtils.capitalize(value.toLowerCase());\n     }\n     return var;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\nindex fbf9b3c..19da563 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TitleFilter.java\n@@ -32,7 +32,7 @@ public class TitleFilter implements Filter {\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n     if (var instanceof String) {\n       String value = (String) var;\n-      return WordUtils.capitalize(value);\n+      return WordUtils.capitalize(value.toLowerCase());\n     }\n     return var;\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java\nindex 704603a..7366e4b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/CapitalizeFilterTest.java\n@@ -7,7 +7,19 @@ import org.junit.Test;\n public class CapitalizeFilterTest {\n \n   @Test\n-  public void testCapitalize() {\n+  public void itCapitalizesNormalValues() {\n     assertThat(new CapitalizeFilter().filter(\"foo\", null)).isEqualTo(\"Foo\");\n   }\n+\n+  @Test\n+  public void itCapitalizesSentences() {\n+    assertThat(new CapitalizeFilter().filter(\"foo is the best\", null))\n+      .isEqualTo(\"Foo is the best\");\n+  }\n+\n+  @Test\n+  public void itLowercasesUppercasedCharsInSentences() {\n+    assertThat(new CapitalizeFilter().filter(\"foo is the bEST\", null))\n+      .isEqualTo(\"Foo is the best\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\nindex 9c3e2dc..d3cb49b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/TitleFilterTest.java\n@@ -7,8 +7,20 @@ import org.junit.Test;\n public class TitleFilterTest {\n \n   @Test\n-  public void testTitleCase() {\n+  public void itTitleCasesNormalString() {\n     assertThat(new TitleFilter().filter(\"this is string\", null))\n       .isEqualTo(\"This Is String\");\n   }\n+\n+  @Test\n+  public void itDoesNotChangeAlreadyTitleCasedString() {\n+    assertThat(new TitleFilter().filter(\"This Is String\", null))\n+      .isEqualTo(\"This Is String\");\n+  }\n+\n+  @Test\n+  public void itLowercasesOtherUppercasedCharactersInString() {\n+    assertThat(new TitleFilter().filter(\"this is sTRING\", null))\n+      .isEqualTo(\"This Is String\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T00:59:25.073050Z", "commit_hash": "b35be7e46d29997220499a5246105c79048bd44d", "commit_message": "Merge pull request #642 from HubSpot/cycle-fix\n\n[Eager Execution] Fix cycle tag escaping bug", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex bb48fb9..3179a8e 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -45,7 +45,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n     } else {\n       interpreter.getContext().putAll(eagerStringResult.getSessionBindings());\n     }\n-    if (chunkResolver.getDeferredWords().isEmpty()) {\n+    if (eagerStringResult.getResult().isFullyResolved()) {\n       String result = eagerStringResult.getResult().toString(true);\n       if (\n         !StringUtils.equals(result, master.getImage()) &&\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\nindex eb99825..fb43b2e 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n@@ -11,6 +11,7 @@ import com.hubspot.jinjava.util.HelperStringTokenizer;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n \n@@ -47,6 +48,13 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n       true,\n       false\n     );\n+\n+    StringBuilder prefixToPreserveState = new StringBuilder();\n+    if (interpreter.getContext().isDeferredExecutionMode()) {\n+      prefixToPreserveState.append(eagerStringResult.getPrefixToPreserveState());\n+    } else {\n+      interpreter.getContext().putAll(eagerStringResult.getSessionBindings());\n+    }\n     String resolvedExpression = eagerStringResult\n       .getResult()\n       .toString()\n@@ -56,16 +64,10 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n       resolvedExpression =\n         resolvedExpression.substring(1, resolvedExpression.length() - 1);\n     }\n-    StringBuilder prefixToPreserveState = new StringBuilder();\n-    if (interpreter.getContext().isDeferredExecutionMode()) {\n-      prefixToPreserveState.append(eagerStringResult.getPrefixToPreserveState());\n-    } else {\n-      interpreter.getContext().putAll(eagerStringResult.getSessionBindings());\n-    }\n-    HelperStringTokenizer items = new HelperStringTokenizer(resolvedExpression)\n-    .splitComma(true);\n-    List<String> values = items.allTokens();\n-    if (!chunkResolver.getDeferredWords().isEmpty()) {\n+    List<String> resolvedValues; // can only be retrieved if the ResolvedChunks are fully resolved.\n+    if (!eagerStringResult.getResult().isFullyResolved()) {\n+      resolvedValues =\n+        new HelperStringTokenizer(resolvedExpression).splitComma(true).allTokens();\n       prefixToPreserveState.append(\n         reconstructFromContextBeforeDeferring(\n           chunkResolver.getDeferredWords(),\n@@ -73,11 +75,18 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n         )\n       );\n     } else {\n-      for (int i = 0; i < values.size(); i++) {\n-        values.set(\n+      List<?> objects = eagerStringResult.getResult().toList();\n+      if (objects.size() == 1 && objects.get(0) instanceof List) {\n+        // because we may have wrapped in an extra set of brackets\n+        objects = (List<?>) objects.get(0);\n+      }\n+      resolvedValues =\n+        objects.stream().map(interpreter::getAsString).collect(Collectors.toList());\n+      for (int i = 0; i < resolvedValues.size(); i++) {\n+        resolvedValues.set(\n           i,\n           interpreter.resolveString(\n-            values.get(i),\n+            resolvedValues.get(i),\n             tagToken.getLineNumber(),\n             tagToken.getStartPosition()\n           )\n@@ -91,9 +100,9 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n         interpretPrintingCycle(\n           tagToken,\n           interpreter,\n-          values,\n-          chunkResolver,\n-          resolvedExpression\n+          resolvedValues,\n+          resolvedExpression,\n+          eagerStringResult.getResult().isFullyResolved()\n         )\n       );\n     } else if (helper.size() == 3) {\n@@ -102,10 +111,10 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n         prefixToPreserveState.toString() +\n         interpretSettingCycle(\n           interpreter,\n-          values,\n+          resolvedValues,\n           helper,\n-          chunkResolver,\n-          resolvedExpression\n+          resolvedExpression,\n+          eagerStringResult.getResult().isFullyResolved()\n         )\n       );\n     } else {\n@@ -122,11 +131,11 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n     JinjavaInterpreter interpreter,\n     List<String> values,\n     List<String> helper,\n-    ChunkResolver chunkResolver,\n-    String resolvedExpression\n+    String resolvedExpression,\n+    boolean fullyResolved\n   ) {\n     String var = helper.get(2);\n-    if (!chunkResolver.getDeferredWords().isEmpty()) {\n+    if (!fullyResolved) {\n       return EagerTagDecorator.buildSetTagForDeferredInChildContext(\n         ImmutableMap.of(\n           var,\n@@ -144,8 +153,8 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n     TagToken tagToken,\n     JinjavaInterpreter interpreter,\n     List<String> values,\n-    ChunkResolver chunkResolver,\n-    String resolvedExpression\n+    String resolvedExpression,\n+    boolean fullyResolved\n   ) {\n     if (interpreter.getContext().isDeferredExecutionMode()) {\n       return reconstructCycleTag(resolvedExpression, tagToken);\n@@ -160,17 +169,14 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n     }\n     if (values.size() == 1) {\n       String var = values.get(0);\n-      if (!chunkResolver.getDeferredWords().isEmpty()) {\n+      if (!fullyResolved) {\n         return getIsIterable(var, forindex, tagToken);\n       } else {\n         return values.get(forindex % values.size());\n       }\n     }\n     String item = values.get(forindex % values.size());\n-    if (\n-      !chunkResolver.getDeferredWords().isEmpty() &&\n-      ChunkResolver.shouldBeEvaluated(item, tagToken, interpreter)\n-    ) {\n+    if (!fullyResolved && ChunkResolver.shouldBeEvaluated(item, tagToken, interpreter)) {\n       return String.format(\"{{ %s }}\", values.get(forindex % values.size()));\n     }\n     return item;\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\nindex 957836e..f5dcebb 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n@@ -62,7 +62,7 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n     } else {\n       interpreter.getContext().putAll(eagerStringResult.getSessionBindings());\n     }\n-    if (chunkResolver.getDeferredWords().isEmpty()) {\n+    if (eagerStringResult.getResult().isFullyResolved()) {\n       // Possible macro/set tag in front of this one.\n       return (\n         prefixToPreserveState.toString() +\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\nindex b060d79..96f7f95 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n@@ -55,7 +55,7 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n     String[] varTokens = variables.split(\",\");\n \n     if (\n-      chunkResolver.getDeferredWords().isEmpty() &&\n+      eagerStringResult.getResult().isFullyResolved() &&\n       !interpreter.getContext().isDeferredExecutionMode()\n     ) {\n       try {\ndiff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex 846ec84..22cbac1 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -286,6 +286,10 @@ public class ChunkResolver {\n       throw new DeferredValueException(\"Object is not resolved\");\n     }\n \n+    public boolean isFullyResolved() {\n+      return fullyResolved;\n+    }\n+\n     /**\n      * Method to wrap a string value in the ResolvedChunks class.\n      * It is not evaluated, rather it's allows a the class to be manually\ndiff --git a/src/test/resources/eager/handles-cycle-with-quote.expected.jinja b/src/test/resources/eager/handles-cycle-with-quote.expected.jinja\nnew file mode 100644\nindex 0000000..08658ab\n--- /dev/null\n+++ b/src/test/resources/eager/handles-cycle-with-quote.expected.jinja\n@@ -0,0 +1,2 @@\n+<div style=''></div>\n+<div style=\"\"></div>\ndiff --git a/src/test/resources/eager/handles-cycle-with-quote.jinja b/src/test/resources/eager/handles-cycle-with-quote.jinja\nnew file mode 100644\nindex 0000000..6ade093\n--- /dev/null\n+++ b/src/test/resources/eager/handles-cycle-with-quote.jinja\n@@ -0,0 +1,3 @@\n+{% for i in range(2) -%}\n+{% cycle \"<div style=''></div>\",'<div style=\"\"></div>' %}\n+{% endfor %}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex c3d2654..fc2d9af 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -789,6 +789,11 @@ public class EagerTest {\n   }\n \n   @Test\n+  public void itHandlesCycleWithQuote() {\n+    expectedTemplateInterpreter.assertExpectedOutput(\"handles-cycle-with-quote\");\n+  }\n+\n+  @Test\n   public void itHandlesUnknownFunctionErrors() {\n     JinjavaInterpreter eagerInterpreter = new JinjavaInterpreter(\n       jinjava,\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:01:56.246065Z", "commit_hash": "3fc36c989fbbd403ec176fae5f689346488a90bd", "commit_message": "Merge session bindings with prefix to preserve state\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex 1a924ec..5a314d5 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -20,13 +20,10 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n     ExpressionToken master,\n     JinjavaInterpreter interpreter\n   ) {\n-    EagerStringResult eagerStringResult = eagerResolveExpression(master, interpreter);\n-    return new RenderedOutputNode(\n-      eagerStringResult.getPrefixToPreserveState() + eagerStringResult.getResult()\n-    );\n+    return new RenderedOutputNode(eagerResolveExpression(master, interpreter));\n   }\n \n-  private EagerStringResult eagerResolveExpression(\n+  private String eagerResolveExpression(\n     ExpressionToken master,\n     JinjavaInterpreter interpreter\n   ) {\n@@ -41,11 +38,12 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n       true,\n       interpreter.getConfig().isNestedInterpretationEnabled()\n     );\n-    StringBuilder prefixToPreserveState = new StringBuilder(\n-      interpreter.getContext().isDeferredExecutionMode()\n-        ? resolvedExpression.getPrefixToPreserveState()\n-        : \"\"\n-    );\n+    StringBuilder prefixToPreserveState = new StringBuilder();\n+    if (interpreter.getContext().isDeferredExecutionMode()) {\n+      prefixToPreserveState.append(resolvedExpression.getPrefixToPreserveState());\n+    } else {\n+      interpreter.getContext().putAll(resolvedExpression.getSessionBindings());\n+    }\n     if (chunkResolver.getDeferredWords().isEmpty()) {\n       String result = interpreter.getAsString(\n         interpreter.resolveELExpression(\n@@ -75,7 +73,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n       if (interpreter.getContext().isAutoEscape()) {\n         result = EscapeFilter.escapeHtmlEntities(result);\n       }\n-      return new EagerStringResult(result, prefixToPreserveState.toString());\n+      return prefixToPreserveState.toString() + result;\n     }\n     prefixToPreserveState.append(\n       EagerTagDecorator.reconstructFromContextBeforeDeferring(\n@@ -98,12 +96,9 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n         )\n       );\n     // There is no result because it couldn't be entirely evaluated.\n-    return new EagerStringResult(\n-      \"\",\n-      EagerTagDecorator.wrapInAutoEscapeIfNeeded(\n-        prefixToPreserveState.toString() + helpers,\n-        interpreter\n-      )\n+    return EagerTagDecorator.wrapInAutoEscapeIfNeeded(\n+      prefixToPreserveState.toString() + helpers,\n+      interpreter\n     );\n   }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\nindex 49bbf7e..afd713a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerCycleTag.java\n@@ -49,11 +49,12 @@ public class EagerCycleTag extends EagerStateChangingTag<CycleTag> {\n     if (WhitespaceUtils.isWrappedWith(expression, \"[\", \"]\")) {\n       expression = expression.substring(1, expression.length() - 1).replace(\", \", \",\");\n     }\n-    StringBuilder prefixToPreserveState = new StringBuilder(\n-      interpreter.getContext().isDeferredExecutionMode()\n-        ? resolvedExpression.getPrefixToPreserveState()\n-        : \"\"\n-    );\n+    StringBuilder prefixToPreserveState = new StringBuilder();\n+    if (interpreter.getContext().isDeferredExecutionMode()) {\n+      prefixToPreserveState.append(resolvedExpression.getPrefixToPreserveState());\n+    } else {\n+      interpreter.getContext().putAll(resolvedExpression.getSessionBindings());\n+    }\n     HelperStringTokenizer items = new HelperStringTokenizer(expression).splitComma(true);\n     List<String> values = items.allTokens();\n     if (!chunkResolver.getDeferredWords().isEmpty()) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\nindex 09acefd..859e72a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java\n@@ -38,13 +38,14 @@ public class EagerIfTag extends EagerTagDecorator<IfTag> {\n \n     result.append(\n       executeInChildContext(\n-        eagerInterpreter ->\n-          getEagerImage(tagNode.getMaster(), eagerInterpreter) +\n-          renderChildren(tagNode, eagerInterpreter),\n-        interpreter,\n-        false,\n-        false\n-      )\n+          eagerInterpreter ->\n+            getEagerImage(tagNode.getMaster(), eagerInterpreter) +\n+            renderChildren(tagNode, eagerInterpreter),\n+          interpreter,\n+          false,\n+          false\n+        )\n+        .asTemplateString()\n     );\n     tagNode.getMaster().setRightTrimAfterEnd(false);\n     result.append(reconstructEnd(tagNode));\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\nindex b263f4f..3fc1603 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n@@ -65,11 +65,12 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n       .add(tagToken.getTagName())\n       .add(resolvedExpression.getResult())\n       .add(tagToken.getSymbols().getExpressionEndWithTag());\n-    StringBuilder prefixToPreserveState = new StringBuilder(\n-      interpreter.getContext().isDeferredExecutionMode()\n-        ? resolvedExpression.getPrefixToPreserveState()\n-        : \"\"\n-    );\n+    StringBuilder prefixToPreserveState = new StringBuilder();\n+    if (interpreter.getContext().isDeferredExecutionMode()) {\n+      prefixToPreserveState.append(resolvedExpression.getPrefixToPreserveState());\n+    } else {\n+      interpreter.getContext().putAll(resolvedExpression.getSessionBindings());\n+    }\n     if (chunkResolver.getDeferredWords().isEmpty()) {\n       // Possible macro/set tag in front of this one.\n       return (\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\nindex 2816d00..472f2f3 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n@@ -57,11 +57,12 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n       .add(\"=\")\n       .add(resolvedExpression.getResult())\n       .add(tagToken.getSymbols().getExpressionEndWithTag());\n-    StringBuilder prefixToPreserveState = new StringBuilder(\n-      interpreter.getContext().isDeferredExecutionMode()\n-        ? resolvedExpression.getPrefixToPreserveState()\n-        : \"\"\n-    );\n+    StringBuilder prefixToPreserveState = new StringBuilder();\n+    if (interpreter.getContext().isDeferredExecutionMode()) {\n+      prefixToPreserveState.append(resolvedExpression.getPrefixToPreserveState());\n+    } else {\n+      interpreter.getContext().putAll(resolvedExpression.getSessionBindings());\n+    }\n     String[] varTokens = variables.split(\",\");\n \n     if (\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStringResult.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStringResult.java\nindex 1a4ef39..f5c46a1 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStringResult.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerStringResult.java\n@@ -1,5 +1,13 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n+import static com.hubspot.jinjava.lib.tag.eager.EagerTagDecorator.buildSetTagForDeferredInChildContext;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.objects.serialization.PyishObjectMapper;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+\n /**\n  * This represents the result of executing an expression, where if something got\n  * deferred, then the <code>prefixToPreserveState</code> can be added to the output\n@@ -7,28 +15,44 @@ package com.hubspot.jinjava.lib.tag.eager;\n  */\n public class EagerStringResult {\n   private final String result;\n-  private final String prefixToPreserveState;\n+  private final Map<String, Object> sessionBindings;\n+  private String prefixToPreserveState;\n \n-  public EagerStringResult(String result) {\n+  public EagerStringResult(String result, Map<String, Object> sessionBindings) {\n     this.result = result;\n-    this.prefixToPreserveState = \"\";\n-  }\n-\n-  public EagerStringResult(String result, String prefixToPreserveState) {\n-    this.result = result;\n-    this.prefixToPreserveState = prefixToPreserveState;\n+    this.sessionBindings = sessionBindings;\n   }\n \n   public String getResult() {\n     return result;\n   }\n \n+  public Map<String, Object> getSessionBindings() {\n+    return sessionBindings;\n+  }\n+\n   public String getPrefixToPreserveState() {\n+    if (prefixToPreserveState != null) {\n+      return prefixToPreserveState;\n+    }\n+    prefixToPreserveState =\n+      buildSetTagForDeferredInChildContext(\n+        sessionBindings\n+          .entrySet()\n+          .stream()\n+          .collect(\n+            Collectors.toMap(\n+              Entry::getKey,\n+              entry -> PyishObjectMapper.getAsPyishString(entry.getValue())\n+            )\n+          ),\n+        JinjavaInterpreter.getCurrent(),\n+        false\n+      );\n     return prefixToPreserveState;\n   }\n \n-  @Override\n-  public String toString() {\n-    return prefixToPreserveState + result;\n+  public String asTemplateString() {\n+    return getPrefixToPreserveState() + result;\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\nindex a86fda3..3df46d0 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n@@ -107,7 +107,7 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n           false,\n           false\n         )\n-        .toString()\n+        .asTemplateString()\n     );\n \n     if (StringUtils.isNotBlank(tagNode.getEndName())) {\n@@ -176,60 +176,48 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n       );\n \n     // Don't create new call stacks to prevent hitting max recursion with this silent new scope\n+    Map<String, Object> sessionBindings;\n     try (InterpreterScopeClosable c = interpreter.enterNonStackingScope()) {\n       interpreter.getContext().setDeferredExecutionMode(true);\n       interpreter.getContext().setPartialMacroEvaluation(partialMacroEvaluation);\n       result.append(function.apply(interpreter));\n+      sessionBindings = interpreter.getContext().getSessionBindings();\n+    }\n+    sessionBindings.putAll(\n       interpreter\n         .getContext()\n-        .getParent()\n-        .putAll(\n-          interpreter\n-            .getContext()\n-            .getSessionBindings()\n-            .entrySet()\n-            .stream()\n-            .filter(entry -> !entry.getKey().equals(GLOBAL_MACROS_SCOPE_KEY))\n-            .collect(Collectors.toMap(Entry::getKey, Entry::getValue))\n-        );\n-    }\n-    Map<String, String> deferredValuesToSet = interpreter\n-      .getContext()\n-      .entrySet()\n-      .stream()\n-      .filter(e -> initiallyResolvedHashes.containsKey(e.getKey()))\n-      .filter(\n-        e -> !initiallyResolvedHashes.get(e.getKey()).equals(e.getValue().hashCode())\n-      )\n-      .collect(\n-        Collectors.toMap(\n-          Entry::getKey,\n-          e -> {\n-            if (e.getValue() instanceof DeferredValue) {\n-              return PyishObjectMapper.getAsPyishString(\n-                ((DeferredValue) e.getValue()).getOriginalValue()\n-              );\n-            }\n-            if (takeNewValue) {\n-              return PyishObjectMapper.getAsPyishString(e.getValue());\n-            }\n-\n-            // Previous value could not be mapped to a string\n-            throw new DeferredValueException(e.getKey());\n-          }\n+        .entrySet()\n+        .stream()\n+        .filter(e -> initiallyResolvedHashes.containsKey(e.getKey()))\n+        .filter(\n+          e -> !initiallyResolvedHashes.get(e.getKey()).equals(e.getValue().hashCode())\n         )\n-      );\n-    if (deferredValuesToSet.size() > 0) {\n-      return new EagerStringResult(\n-        result.toString(),\n-        buildSetTagForDeferredInChildContext(\n-          deferredValuesToSet,\n-          interpreter,\n-          !takeNewValue\n+        .collect(\n+          Collectors.toMap(\n+            Entry::getKey,\n+            e -> {\n+              if (e.getValue() instanceof DeferredValue) {\n+                return ((DeferredValue) e.getValue()).getOriginalValue();\n+              }\n+              if (takeNewValue) {\n+                return e.getValue();\n+              }\n+\n+              // Previous value could not be mapped to a string\n+              throw new DeferredValueException(e.getKey());\n+            }\n+          )\n         )\n-      );\n-    }\n-    return new EagerStringResult(result.toString());\n+    );\n+    sessionBindings =\n+      sessionBindings\n+        .entrySet()\n+        .stream()\n+        .filter(entry -> !entry.getKey().equals(GLOBAL_MACROS_SCOPE_KEY))\n+        .filter(entry -> !(entry.getValue() instanceof DeferredValue)) // these are already set recursively\n+        .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n+\n+    return new EagerStringResult(result.toString(), sessionBindings);\n   }\n \n   /**\n@@ -300,7 +288,7 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n             false\n           )\n       )\n-      .map(EagerStringResult::toString)\n+      .map(EagerStringResult::asTemplateString)\n       .collect(Collectors.joining());\n     // Remove macro functions from the set because they've been fully processed now.\n     deferredWords.removeAll(toRemove);\ndiff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex 9cfb2af..fe709b1 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -287,19 +287,19 @@ public class ChunkResolver {\n             );\n         } catch (TemplateSyntaxException ignored) {}\n         if (val == null) {\n-          try {\n-            val = interpreter.resolveELExpression(token, this.token.getLineNumber());\n-          } catch (UnknownTokenException e) {\n-            // val is still null\n-          }\n+          val = interpreter.resolveELExpression(token, this.token.getLineNumber());\n         }\n-        if (val != null && isResolvableObject(val)) {\n+        if (val == null) {\n+          if (!token.trim().matches(\"[\\\\w]+\")) {\n+            resolvedToken = ChunkResolver.JINJAVA_NULL; // It was some void or null expression\n+          }\n+        } else if (isResolvableObject(val)) {\n           resolvedToken = PyishObjectMapper.getAsPyishString(val);\n         }\n       }\n     } catch (DeferredValueException e) {\n       deferredWords.addAll(findDeferredWords(token));\n-    } catch (TemplateSyntaxException ignored) {}\n+    } catch (TemplateSyntaxException | UnknownTokenException ignored) {}\n     return spaced(resolvedToken, token);\n   }\n \n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java\nindex b9b4a19..60fd480 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecoratorTest.java\n@@ -52,7 +52,16 @@ public class EagerTagDecoratorTest extends BaseInterpretingTest {\n         new ELFunctionDefinition(\n           \"\",\n           \"add_to_context\",\n-          this.getClass().getDeclaredMethod(\"addToContext\", String.class, String.class)\n+          this.getClass().getDeclaredMethod(\"addToContext\", String.class, Object.class)\n+        )\n+      );\n+    jinjava\n+      .getGlobalContext()\n+      .registerFunction(\n+        new ELFunctionDefinition(\n+          \"\",\n+          \"modify_context\",\n+          this.getClass().getDeclaredMethod(\"modifyContext\", String.class, Object.class)\n         )\n       );\n     interpreter =\n@@ -69,6 +78,7 @@ public class EagerTagDecoratorTest extends BaseInterpretingTest {\n     eagerTagDecorator = new EagerGenericTag<>(mockTag);\n \n     JinjavaInterpreter.pushCurrent(interpreter);\n+    context.put(\"deferred\", DeferredValue.instance());\n   }\n \n   @After\n@@ -116,7 +126,6 @@ public class EagerTagDecoratorTest extends BaseInterpretingTest {\n     assertThat(result.getResult()).isEqualTo(\"function return\");\n     assertThat(result.getPrefixToPreserveState()).isEqualTo(\"{% set foo = [] %}\");\n     assertThat(context.get(\"foo\")).isInstanceOf(DeferredValue.class);\n-    assertThat(context.getEagerTokens()).isNotEmpty();\n   }\n \n   @Test\n@@ -391,11 +400,27 @@ public class EagerTagDecoratorTest extends BaseInterpretingTest {\n   }\n \n   @Test\n-  public void itModifiesContextInChildContext() {\n+  public void itPutsOnContextInChildContext() {\n     assertThat(interpreter.render(\"{{ add_to_context('foo', 'bar') }}{{ foo }}\"))\n       .isEqualTo(\"bar\");\n   }\n \n+  @Test\n+  public void itModifiesContextInChildContext() {\n+    context.put(\"foo\", new ArrayList<>());\n+    assertThat(interpreter.render(\"{{ modify_context('foo', 'bar') }}{{ foo }}\"))\n+      .isEqualTo(\"[bar]\");\n+  }\n+\n+  @Test\n+  public void itDoesntModifyContextWhenResultIsDeferred() {\n+    context.put(\"foo\", new ArrayList<>());\n+    assertThat(\n+        interpreter.render(\"{{ modify_context('foo', 'bar') ~ deferred }}{{ foo }}\")\n+      )\n+      .isEqualTo(\"{{ null ~ deferred }}[bar]\");\n+  }\n+\n   private static MacroFunction getMockMacroFunction(String image) {\n     MacroFunction mockMacroFunction = mock(MacroFunction.class);\n     when(mockMacroFunction.getName()).thenReturn(\"foo\");\n@@ -412,7 +437,11 @@ public class EagerTagDecoratorTest extends BaseInterpretingTest {\n     return mockTagNode;\n   }\n \n-  public static void addToContext(String key, String value) {\n+  public static void addToContext(String key, Object value) {\n     JinjavaInterpreter.getCurrent().getContext().put(key, value);\n   }\n+\n+  public static void modifyContext(String key, Object value) {\n+    ((List<Object>) JinjavaInterpreter.getCurrent().getContext().get(key)).add(value);\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:04:26.530693Z", "commit_hash": "1f69d595358226b56942cd38fb4b95fdbcc21dae", "commit_message": "Fix exptest parsing in dictionary and quoting issues\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex e169e93..61c245f 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -275,7 +275,7 @@ public class ExtendedParser extends Parser {\n         if (\n           getToken().getSymbol() == COLON &&\n           lookahead(0).getSymbol() == IDENTIFIER &&\n-          (lookahead(1).getSymbol() == LPAREN || lookahead(1).getSymbol() == DOT)\n+          (lookahead(1).getSymbol() == LPAREN || (isPossibleExpTestOrFilter(name)))\n         ) { // ns:f(...)\n           consumeToken();\n           name += \":\" + getToken().getImage();\n@@ -476,6 +476,26 @@ public class ExtendedParser extends Parser {\n     return VALID_SYMBOLS_FOR_EXP_TEST.contains(symbol);\n   }\n \n+  private boolean isPossibleExpTestOrFilter(String namespace)\n+    throws ParseException, ScanException {\n+    if (\n+      FILTER_PREFIX.substring(0, FILTER_PREFIX.length() - 1).equals(namespace) ||\n+      EXPTEST_PREFIX.substring(0, EXPTEST_PREFIX.length() - 1).equals(namespace) &&\n+      lookahead(1).getSymbol() == DOT &&\n+      lookahead(2).getSymbol() == IDENTIFIER\n+    ) {\n+      Token property = lookahead(2);\n+      if (\n+        \"filter\".equals(property.getImage()) ||\n+        \"evaluate\".equals(property.getImage()) ||\n+        \"evaluateNegated\".equals(property.getImage())\n+      ) {\n+        return lookahead(3).getSymbol() == LPAREN;\n+      }\n+    }\n+    return false;\n+  }\n+\n   private AstNode buildAstMethodForIdentifier(AstNode astNode, String property)\n     throws ScanException, ParseException {\n     String exptestName = consumeToken().getImage();\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex 8322789..cb310ec 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -11,7 +11,6 @@ import com.hubspot.jinjava.tree.output.RenderedOutputNode;\n import com.hubspot.jinjava.tree.parse.ExpressionToken;\n import com.hubspot.jinjava.util.ChunkResolver;\n import com.hubspot.jinjava.util.Logging;\n-import com.hubspot.jinjava.util.WhitespaceUtils;\n import org.apache.commons.lang3.StringUtils;\n \n public class EagerExpressionStrategy implements ExpressionStrategy {\n@@ -45,9 +44,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n         : \"\"\n     );\n     if (chunkResolver.getDeferredWords().isEmpty()) {\n-      String result = WhitespaceUtils.unquoteAndUnescape(\n-        eagerStringResult.getResult().toString()\n-      );\n+      String result = eagerStringResult.getResult().toString(true);\n       if (\n         !StringUtils.equals(result, master.getImage()) &&\n         (\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\nindex f48a1e4..cc2268b 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerPrintTag.java\n@@ -6,7 +6,6 @@ import com.hubspot.jinjava.lib.tag.PrintTag;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.ChunkResolver;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n-import com.hubspot.jinjava.util.WhitespaceUtils;\n import org.apache.commons.lang3.StringUtils;\n \n public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n@@ -57,15 +56,6 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n       true,\n       false\n     );\n-    LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n-      interpreter.getConfig().getMaxOutputSize(),\n-      \" \"\n-    );\n-    joiner\n-      .add(tagToken.getSymbols().getExpressionStartWithTag())\n-      .add(tagToken.getTagName())\n-      .add(resolvedExpression.getResult())\n-      .add(tagToken.getSymbols().getExpressionEndWithTag());\n     StringBuilder prefixToPreserveState = new StringBuilder(\n       interpreter.getContext().isDeferredExecutionMode()\n         ? resolvedExpression.getPrefixToPreserveState()\n@@ -78,9 +68,7 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n         (\n           includeExpressionResult\n             ? wrapInRawIfNeeded(\n-              WhitespaceUtils.unquoteAndUnescape(\n-                resolvedExpression.getResult().toString()\n-              ),\n+              resolvedExpression.getResult().toString(true),\n               interpreter\n             )\n             : \"\"\n@@ -90,6 +78,16 @@ public class EagerPrintTag extends EagerStateChangingTag<PrintTag> {\n     prefixToPreserveState.append(\n       reconstructFromContextBeforeDeferring(chunkResolver.getDeferredWords(), interpreter)\n     );\n+\n+    LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n+      interpreter.getConfig().getMaxOutputSize(),\n+      \" \"\n+    );\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(resolvedExpression.getResult().toString())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n     interpreter\n       .getContext()\n       .handleEagerToken(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\nindex 6ee40cd..cdaa41a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n@@ -46,22 +46,7 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n       true,\n       false\n     );\n-    LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n-      interpreter.getConfig().getMaxOutputSize(),\n-      \" \"\n-    );\n-    joiner\n-      .add(tagToken.getSymbols().getExpressionStartWithTag())\n-      .add(tagToken.getTagName())\n-      .add(variables)\n-      .add(\"=\")\n-      .add(resolvedExpression.getResult().toString())\n-      .add(tagToken.getSymbols().getExpressionEndWithTag());\n-    StringBuilder prefixToPreserveState = new StringBuilder(\n-      interpreter.getContext().isDeferredExecutionMode()\n-        ? resolvedExpression.getPrefixToPreserveState()\n-        : \"\"\n-    );\n+\n     String[] varTokens = variables.split(\",\");\n \n     if (\n@@ -80,9 +65,16 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n         return \"\";\n       } catch (DeferredValueException ignored) {}\n     }\n-    prefixToPreserveState.append(\n-      reconstructFromContextBeforeDeferring(chunkResolver.getDeferredWords(), interpreter)\n-    );\n+    LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n+      interpreter.getConfig().getMaxOutputSize(),\n+      \" \"\n+    )\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(variables)\n+      .add(\"=\")\n+      .add(resolvedExpression.getResult().toString())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n \n     interpreter\n       .getContext()\n@@ -114,10 +106,18 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n         )\n       );\n     }\n+    String prefixToPreserveState =\n+      (\n+        interpreter.getContext().isDeferredExecutionMode()\n+          ? resolvedExpression.getPrefixToPreserveState()\n+          : \"\"\n+      ) +\n+      reconstructFromContextBeforeDeferring(\n+        chunkResolver.getDeferredWords(),\n+        interpreter\n+      );\n     return wrapInAutoEscapeIfNeeded(\n-      prefixToPreserveState.toString() +\n-      joiner.toString() +\n-      suffixToPreserveState.toString(),\n+      prefixToPreserveState + joiner.toString() + suffixToPreserveState.toString(),\n       interpreter\n     );\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex 0ee3fd2..8cf81ac 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -254,19 +254,37 @@ public class ChunkResolver {\n      */\n     @Override\n     public String toString() {\n+      return toString(false);\n+    }\n+\n+    /**\n+     * When forOutput is true, the result will always be unquoted.\n+     * @param forOutput Whether the result is going to be included in the final output,\n+     *                  such as in an expression, or not such as when reconstructing tags.\n+     * @return String representation of the chunks\n+     */\n+    public String toString(boolean forOutput) {\n       if (resolvedObject instanceof String) {\n         return (String) resolvedObject;\n       }\n       if (resolvedObject == null) {\n-        return JINJAVA_EMPTY_STRING;\n+        return forOutput ? \"\" : JINJAVA_EMPTY_STRING;\n       }\n-      String asString = PyishObjectMapper.getAsPyishString(resolvedObject);\n-      if (fullyResolved && StringUtils.isNotEmpty(asString)) {\n-        // Removes surrounding brackets.\n-        asString = asString.substring(1, asString.length() - 1);\n+      String asString;\n+      JinjavaInterpreter interpreter = JinjavaInterpreter.getCurrent();\n+      if (forOutput && interpreter != null) {\n+        asString =\n+          JinjavaInterpreter.getCurrent().getAsString(((List<?>) resolvedObject).get(0));\n+      } else {\n+        asString = PyishObjectMapper.getAsUnquotedPyishString(resolvedObject);\n+\n+        if (fullyResolved && StringUtils.isNotEmpty(asString)) {\n+          // Removes surrounding brackets.\n+          asString = asString.substring(1, asString.length() - 1);\n+        }\n       }\n       if (JINJAVA_NULL.equals(asString)) {\n-        return JINJAVA_EMPTY_STRING;\n+        return forOutput ? \"\" : JINJAVA_EMPTY_STRING;\n       }\n       return asString;\n     }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java b/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\nindex d0a7e6c..8513d62 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\n@@ -118,6 +118,15 @@ public class ExtendedParserTest {\n     assertThat(astNode).isInstanceOf(AstTuple.class);\n   }\n \n+  @Test\n+  public void itParsesExpTestLikeDictionary() {\n+    // Don't want to accidentally try to parse these as a filter or exptest\n+    AstNode astNode = buildExpressionNodes(\n+      \"#{{filter:length.filter, exptest:equalto.evaluate}}\"\n+    );\n+    assertThat(astNode).isInstanceOf(AstDict.class);\n+  }\n+\n   private void assertForExpression(\n     AstNode astNode,\n     String leftExpected,\ndiff --git a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\nindex c82038b..15bde1c 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n@@ -47,11 +47,7 @@ public class ChunkResolverTest {\n         .newBuilder()\n         .withExecutionMode(EagerExecutionMode.instance())\n         .withLegacyOverrides(\n-          LegacyOverrides\n-            .newBuilder()\n-            .withEvaluateMapKeys(evaluateMapKeys)\n-            .withUsePyishObjectMapper(true)\n-            .build()\n+          LegacyOverrides.newBuilder().withEvaluateMapKeys(evaluateMapKeys).build()\n         )\n         .build()\n     );\n@@ -221,7 +217,6 @@ public class ChunkResolverTest {\n   }\n \n   @Test\n-  // TODO support order of operations\n   public void itSupportsOrderOfOperations() {\n     ChunkResolver chunkResolver = makeChunkResolver(\"[0,1]|reverse + deferred\");\n     String partiallyResolved = chunkResolver.resolveChunks().toString();\n@@ -245,25 +240,6 @@ public class ChunkResolverTest {\n       .containsExactlyInAnyOrder(\"range\", \"deferred\");\n   }\n \n-  /*@Test\n-  public void itSplitsChunks() {\n-    ChunkResolver chunkResolver = makeChunkResolver(\"1, 1 + 1, 1 + 2\");\n-    List<String> miniChunks = chunkResolver.splitChunks();\n-    assertThat(miniChunks).containsExactly(\"1\", \"2\", \"3\");\n-    assertThat(chunkResolver.getDeferredWords()).isEmpty();\n-  }\n-\n-  @Test\n-  public void itProperlySplitsMultiLevelChunks() {\n-    ChunkResolver chunkResolver = makeChunkResolver(\n-      \"[5,7], 1 + 1, 1 + range(0 + 1, deferred)\"\n-    );\n-    List<String> miniChunks = chunkResolver.splitChunks();\n-    assertThat(miniChunks).containsExactly(\"[5, 7]\", \"2\", \"1 + range(1, deferred)\");\n-    assertThat(chunkResolver.getDeferredWords())\n-      .containsExactlyInAnyOrder(\"range\", \"deferred\");\n-  }*/\n-\n   @Test\n   public void itDoesntDeferReservedWords() {\n     context.put(\"foo\", 0);\n@@ -581,6 +557,12 @@ public class ChunkResolverTest {\n   }\n \n   @Test\n+  public void itHandlesExtraSapces() {\n+    context.put(\"foo\", \" foo\");\n+    assertThat(makeChunkResolver(\"foo\").resolveChunks().toString()).isEqualTo(\"' foo'\");\n+  }\n+\n+  @Test\n   public void itHandlesDeferredExpTests() {\n     context.put(\"foo\", 4);\n     ChunkResolver chunkResolver = makeChunkResolver(\"foo is not equalto deferred\");\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:08:29.445996Z", "commit_hash": "83ead5676eabb2c804994dc3ce2bd28db132d9c5", "commit_message": "Merge pull request #627 from HubSpot/comma-tuple\n\nFix tuple parsing bug", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex a06ba37..06bedeb 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -283,13 +283,20 @@ public class ExtendedParser extends Parser {\n         break;\n       case LPAREN:\n         int i = 0;\n-        Symbol s;\n-        do {\n-          s = lookahead(i++).getSymbol();\n-          if (s == Symbol.COMMA) {\n-            return new AstTuple(params());\n+        Symbol s = lookahead(i++).getSymbol();\n+        int depth = 0;\n+        while (s != Symbol.EOF && (depth > 0 || s != Symbol.RPAREN)) {\n+          if (s == LPAREN || s == LBRACK) {\n+            depth++;\n+          } else if (depth > 0 && (s == RPAREN || s == RBRACK)) {\n+            depth--;\n+          } else if (depth == 0) {\n+            if (s == Symbol.COMMA) {\n+              return new AstTuple(params());\n+            }\n           }\n-        } while (s != Symbol.RPAREN && s != Symbol.EOF);\n+          s = lookahead(i++).getSymbol();\n+        }\n \n         consumeToken();\n         v = expr(true);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java b/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\nindex 41af0b0..d0a7e6c 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\n@@ -7,6 +7,7 @@ import de.odysseus.el.tree.impl.Builder;\n import de.odysseus.el.tree.impl.ast.AstBinary;\n import de.odysseus.el.tree.impl.ast.AstIdentifier;\n import de.odysseus.el.tree.impl.ast.AstMethod;\n+import de.odysseus.el.tree.impl.ast.AstNested;\n import de.odysseus.el.tree.impl.ast.AstNode;\n import de.odysseus.el.tree.impl.ast.AstParameters;\n import de.odysseus.el.tree.impl.ast.AstString;\n@@ -105,6 +106,18 @@ public class ExtendedParserTest {\n     assertForExpression(right, \"c\", \"d\", \"exptest:equalto\");\n   }\n \n+  @Test\n+  public void itParsesNestedCommasNotAsTuple() {\n+    AstNode astNode = buildExpressionNodes(\"#{(range(0,range(0,2)[1]))}\");\n+    assertThat(astNode).isInstanceOf(AstNested.class);\n+  }\n+\n+  @Test\n+  public void itChecksForTupleUntilFinalParentheses() {\n+    AstNode astNode = buildExpressionNodes(\"#{((0),2)}\");\n+    assertThat(astNode).isInstanceOf(AstTuple.class);\n+  }\n+\n   private void assertForExpression(\n     AstNode astNode,\n     String leftExpected,\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:15:38.161908Z", "commit_hash": "a1317ca29f747f53a0c953174ed633d2065a917f", "commit_message": "Merge pull request #626 from HubSpot/plus-prefix\n\n[Eager Execution] Stricter number-writing logic", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\nindex 5ae2f07..17a4410 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n@@ -8,9 +8,6 @@ import java.util.Objects;\n \n public class PyishSerializer extends JsonSerializer<Object> {\n   public static final PyishSerializer INSTANCE = new PyishSerializer();\n-  // Excludes things like \"-0\", \"+5\", \"02\"\n-  private static final String STRICT_NUMBER_REGEX =\n-    \"^0|((-?[1-9][0-9]*)(\\\\.[0-9]+)?)|(-?0(\\\\.[0-9]+))$\";\n \n   private PyishSerializer() {}\n \n@@ -29,8 +26,11 @@ public class PyishSerializer extends JsonSerializer<Object> {\n     } else {\n       string = Objects.toString(object, \"\");\n       try {\n-        Double.parseDouble(string);\n-        if (string.matches(STRICT_NUMBER_REGEX)) {\n+        double number = Double.parseDouble(string);\n+        if (\n+          string.equals(String.valueOf(number)) ||\n+          string.equals(String.valueOf((long) number))\n+        ) {\n           jsonGenerator.writeNumber(string);\n         } else {\n           jsonGenerator.writeString(string);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\nindex ec957c7..1217092 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n@@ -399,6 +399,24 @@ public class ChunkResolverTest {\n   }\n \n   @Test\n+  public void itPreservesLengthyDoubleStrings() {\n+    // does not convert to scientific notation\n+    context.put(\"small\", \"0.0000000001\");\n+    ChunkResolver chunkResolver = makeChunkResolver(\"small\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"0.0000000001\");\n+  }\n+\n+  @Test\n+  public void itConvertsDoubles() {\n+    // does convert to scientific notation\n+    context.put(\"small\", 0.0000000001);\n+    ChunkResolver chunkResolver = makeChunkResolver(\"small\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"1.0E-10\");\n+  }\n+\n+  @Test\n   public void itDoesntQuoteFloats() {\n     ChunkResolver chunkResolver = makeChunkResolver(\"0.4 + 0.1\");\n     assertThat(chunkResolver.resolveChunks()).isEqualTo(\"0.5\");\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:20:52.863228Z", "commit_hash": "bb19ef236df4d6ee6017ae661da715a7166cb046", "commit_message": "Merge pull request #612 from HubSpot/plus-prefix\n\n[Eager Execution] Treat non-standard number representations as strings", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\nindex faeecd3..7a8de5c 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/serialization/PyishSerializer.java\n@@ -8,6 +8,9 @@ import java.util.Objects;\n \n public class PyishSerializer extends JsonSerializer<Object> {\n   public static final PyishSerializer INSTANCE = new PyishSerializer();\n+  // Excludes things like \"-0\", \"+5\", \"02\"\n+  private static final String STRICT_NUMBER_REGEX =\n+    \"^0|((-?[1-9][0-9]*)(\\\\.[0-9]+)?)|(-?0(\\\\.[0-9]+))$\";\n \n   private PyishSerializer() {}\n \n@@ -28,10 +31,10 @@ public class PyishSerializer extends JsonSerializer<Object> {\n     }\n     try {\n       Double.parseDouble(string);\n-      if (string.length() > 1 && string.charAt(0) == '0' && string.indexOf('.') != 1) {\n-        jsonGenerator.writeString(string);\n-      } else {\n+      if (string.matches(STRICT_NUMBER_REGEX)) {\n         jsonGenerator.writeNumber(string);\n+      } else {\n+        jsonGenerator.writeString(string);\n       }\n     } catch (NumberFormatException e) {\n       if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\ndiff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex e8800c0..2d14cbc 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -125,7 +125,7 @@ public class ChunkResolver {\n   /**\n    * Chunkify and resolve variables and expressions within the string.\n    * Rather than concatenating the chunks, they are split by mini-chunks,\n-   * with the comma splitter ommitted from the list of results.\n+   * with the comma splitter omitted from the list of results.\n    * Therefore an expression of \"1, 1 + 1, 1 + range(deferred)\" becomes a List of [\"1\", \"2\", \"1 + range(deferred)\"].\n    *\n    * @return List of the expression chunk which is split into mini-chunks.\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\nindex f203090..1243386 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n@@ -460,6 +460,30 @@ public class ChunkResolverTest {\n     }\n   }\n \n+  @Test\n+  public void itKeepsPlusSignPrefix() {\n+    context.put(\"foo\", \"+12223334444\");\n+    ChunkResolver chunkResolver = makeChunkResolver(\"foo\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"+12223334444\");\n+  }\n+\n+  @Test\n+  public void itHandlesPhoneNumbers() {\n+    context.put(\"foo\", \"+1(123)456-7890\");\n+    ChunkResolver chunkResolver = makeChunkResolver(\"foo\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"+1(123)456-7890\");\n+  }\n+\n+  @Test\n+  public void itHandlesNegativeZero() {\n+    context.put(\"foo\", \"-0\");\n+    ChunkResolver chunkResolver = makeChunkResolver(\"foo\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"-0\");\n+  }\n+\n   public static void voidFunction(int nothing) {}\n \n   public static boolean isNull(Object foo, Object bar) {\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:25:27.180052Z", "commit_hash": "54747865f8de7ac80c8ad698afe689a6c598a23b", "commit_message": "Merge pull request #599 from HubSpot/fix-whitespace-breakup\n\nFix bug with whitespace controls not applying properly", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/tree/TreeParser.java b/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\nindex 278dddc..e070a69 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\n@@ -60,7 +60,12 @@ public class TreeParser {\n       Node node = nextNode();\n \n       if (node != null) {\n-        parent.getChildren().add(node);\n+        if (node instanceof TextNode && getLastSibling() instanceof TextNode) {\n+          // merge adjacent text nodes so whitespace control properly applies\n+          getLastSibling().getMaster().mergeImageAndContent(node.getMaster());\n+        } else {\n+          parent.getChildren().add(node);\n+        }\n       }\n     }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/tree/parse/Token.java b/src/main/java/com/hubspot/jinjava/tree/parse/Token.java\nindex e75e67a..53d8385 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/parse/Token.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/parse/Token.java\n@@ -21,7 +21,7 @@ import java.io.Serializable;\n public abstract class Token implements Serializable {\n   private static final long serialVersionUID = 3359084948763661809L;\n \n-  protected final String image;\n+  protected String image;\n   // useful for some token type\n   protected String content;\n \n@@ -50,6 +50,11 @@ public abstract class Token implements Serializable {\n     return image;\n   }\n \n+  public void mergeImageAndContent(Token otherToken) {\n+    this.image = image + otherToken.image;\n+    this.content = content + otherToken.content;\n+  }\n+\n   public int getLineNumber() {\n     return lineNumber;\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java b/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\nindex e73b92f..2bf2d02 100644\n--- a/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\n+++ b/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\n@@ -26,6 +26,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsRightWhiteSpaceWithComment() throws Exception {\n+    String expression =\n+      \"{% for foo in [1,2,3] -%} \\n {#- comment -#} \\n {#- comment -#} .{{ foo }}\\n{% endfor %}\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\".1\\n.2\\n.3\\n\");\n+  }\n+\n+  @Test\n   public void itStripsLeftWhiteSpace() throws Exception {\n     String expression = \"{% for foo in [1,2,3] %}\\n{{ foo }}. \\n {%- endfor %}\";\n     final Node tree = new TreeParser(interpreter, expression).buildTree();\n@@ -33,6 +41,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsLeftWhiteSpaceWithComment() throws Exception {\n+    String expression =\n+      \"{% for foo in [1,2,3] %}\\n{{ foo }}. \\n {#- comment -#} {%- endfor %}\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\"\\n1.\\n2.\\n3.\");\n+  }\n+\n+  @Test\n   public void itStripsLeftAndRightWhiteSpace() throws Exception {\n     String expression = \"{% for foo in [1,2,3] -%} \\n .{{ foo }}. \\n {%- endfor %}\";\n     final Node tree = new TreeParser(interpreter, expression).buildTree();\n@@ -40,6 +56,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsLeftAndRightWhiteSpaceWithComment() throws Exception {\n+    String expression =\n+      \"{% for foo in [1,2,3] -%} \\n {#- comment -#} \\n {#- comment -#} .{{ foo }}. \\n {#- comment -#} \\n {#- comment -#} {%- endfor %}\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\".1..2..3.\");\n+  }\n+\n+  @Test\n   public void itPreservesInnerWhiteSpace() throws Exception {\n     String expression =\n       \"{% for foo in [1,2,3] -%}\\nL{% if true %}\\n{{ foo }}\\n{% endif %}R\\n{%- endfor %}\";\n@@ -48,6 +72,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itPreservesInnerWhiteSpaceWithComment() throws Exception {\n+    String expression =\n+      \"{% for foo in [1,2,3] -%}\\n {#- comment -#} \\n {#- comment -#}L{% if true %}\\n{{ foo }}\\n{% endif %}R\\n {#- comment -#} \\n {#- comment -#}{%- endfor %}\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\"L\\n1\\nRL\\n2\\nRL\\n3\\nR\");\n+  }\n+\n+  @Test\n   public void itStripsLeftWhiteSpaceBeforeTag() throws Exception {\n     String expression = \".\\n {%- for foo in [1,2,3] %} {{ foo }} {% endfor %} \\n.\";\n     final Node tree = new TreeParser(interpreter, expression).buildTree();\n@@ -55,6 +87,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsLeftWhiteSpaceBeforeTagWithComment() throws Exception {\n+    String expression =\n+      \".\\n {#- comment -#} \\n {#- comment -#} {%- for foo in [1,2,3] %} {{ foo }} {% endfor %} \\n.\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\". 1  2  3  \\n.\");\n+  }\n+\n+  @Test\n   public void itStripsRightWhiteSpaceAfterTag() throws Exception {\n     String expression = \".\\n {% for foo in [1,2,3] %} {{ foo }} {% endfor -%} \\n.\";\n     final Node tree = new TreeParser(interpreter, expression).buildTree();\n@@ -62,6 +102,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsRightWhiteSpaceAfterTagWithComment() throws Exception {\n+    String expression =\n+      \".\\n {% for foo in [1,2,3] %} {{ foo }} {% endfor -%} \\n {#- comment -#} \\n {#- comment -#}.\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\".\\n  1  2  3 .\");\n+  }\n+\n+  @Test\n   public void itStripsAllOuterWhiteSpace() throws Exception {\n     String expression = \".\\n {%- for foo in [1,2,3] -%} {{ foo }} {%- endfor -%} \\n.\";\n     final Node tree = new TreeParser(interpreter, expression).buildTree();\n@@ -69,6 +117,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsAllOuterWhiteSpaceWithComment() throws Exception {\n+    String expression =\n+      \".\\n {#- comment -#} \\n {#- comment -#} {%- for foo in [1,2,3] -%} {{ foo }} {%- endfor -%} \\n {#- comment -#} \\n {#- comment -#}.\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\".123.\");\n+  }\n+\n+  @Test\n   public void trimAndLstripBlocks() {\n     interpreter =\n       new Jinjava(\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:27:51.649717Z", "commit_hash": "15418474aee4662f1d19a921b633f4f39f3ff7be", "commit_message": "Fix bug with whitespace controls not applying properly\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/tree/TreeParser.java b/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\nindex 278dddc..4f6a0fd 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/TreeParser.java\n@@ -146,7 +146,7 @@ public class TreeParser {\n       }\n     }\n \n-    final Node lastSibling = getLastSibling();\n+    Node lastSibling = getLastSibling();\n \n     // if last sibling was a tag and has rightTrimAfterEnd, strip whitespace\n     if (lastSibling instanceof TagNode && lastSibling.getMaster().isRightTrimAfterEnd()) {\n@@ -155,7 +155,9 @@ public class TreeParser {\n \n     // for first TextNode child of TagNode where rightTrim is enabled, mark it for left trim\n     if (\n-      parent instanceof TagNode && lastSibling == null && parent.getMaster().isRightTrim()\n+      parent instanceof TagNode &&\n+      (lastSibling == null || lastSibling instanceof TextNode) &&\n+      parent.getMaster().isRightTrim()\n     ) {\n       textToken.setLeftTrim(true);\n     }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java b/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\nindex e73b92f..b746021 100644\n--- a/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\n+++ b/src/test/java/com/hubspot/jinjava/tree/TreeParserTest.java\n@@ -40,6 +40,14 @@ public class TreeParserTest extends BaseInterpretingTest {\n   }\n \n   @Test\n+  public void itStripsLeftAndRightWhiteSpaceWithComment() throws Exception {\n+    String expression =\n+      \"{% for foo in [1,2,3] -%} \\n {#- comment -#} \\n {#- comment -#} .{{ foo }}. \\n {%- endfor %}\";\n+    final Node tree = new TreeParser(interpreter, expression).buildTree();\n+    assertThat(interpreter.render(tree)).isEqualTo(\".1..2..3.\");\n+  }\n+\n+  @Test\n   public void itPreservesInnerWhiteSpace() throws Exception {\n     String expression =\n       \"{% for foo in [1,2,3] -%}\\nL{% if true %}\\n{{ foo }}\\n{% endif %}R\\n{%- endfor %}\";\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:43:37.302898Z", "commit_hash": "252698d127b3698352a3fc5187393493532d7b34", "commit_message": "Merge pull request #577 from HubSpot/chunk-resolver-fix\n\nBetter null handling in ChunkResolver", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex a348328..ef67c45 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -30,6 +30,8 @@ import org.apache.commons.lang3.StringUtils;\n  * This class is not thread-safe. Do not reuse between threads.\n  */\n public class ChunkResolver {\n+  private static final String JINJAVA_NULL = \"null\";\n+  private static final String JINJAVA_EMPTY_STRING = \"''\";\n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n   .registerModule(\n       new SimpleModule().addSerializer(PyishDate.class, new JsonPyishDateSerializer())\n@@ -105,7 +107,12 @@ public class ChunkResolver {\n       .getThrowInterpreterErrors();\n     try {\n       interpreter.getContext().setThrowInterpreterErrors(true);\n-      return String.join(\"\", getChunk(null));\n+      String expression = String.join(\"\", getChunk(null));\n+      if (JINJAVA_NULL.equals(expression)) {\n+        // Resolved value of null as a string is ''.\n+        return JINJAVA_EMPTY_STRING;\n+      }\n+      return expression;\n     } finally {\n       interpreter.getContext().setThrowInterpreterErrors(isThrowInterpreterErrorsStart);\n     }\n@@ -259,7 +266,7 @@ public class ChunkResolver {\n       String resolvedChunk;\n       Object val = interpreter.resolveELExpression(chunk, token.getLineNumber());\n       if (val == null) {\n-        return \"\";\n+        return JINJAVA_NULL;\n       } else {\n         resolvedChunk = getValueAsJinjavaString(val);\n       }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\nindex 486a278..773294f 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n@@ -45,6 +45,15 @@ public class ChunkResolverTest {\n           this.getClass().getDeclaredMethod(\"voidFunction\", int.class)\n         )\n       );\n+    jinjava\n+      .getGlobalContext()\n+      .registerFunction(\n+        new ELFunctionDefinition(\n+          \"\",\n+          \"is_null\",\n+          this.getClass().getDeclaredMethod(\"isNull\", Object.class, Object.class)\n+        )\n+      );\n     interpreter = new JinjavaInterpreter(jinjava.newInterpreter());\n     context = interpreter.getContext();\n     context.put(\"deferred\", DeferredValue.instance());\n@@ -315,5 +324,25 @@ public class ChunkResolverTest {\n       .isEmpty();\n   }\n \n+  @Test\n+  public void itOutputsNullAsEmptyString() {\n+    assertThat(makeChunkResolver(\"void_function(2)\").resolveChunks()).isEqualTo(\"''\");\n+    assertThat(makeChunkResolver(\"nothing\").resolveChunks()).isEqualTo(\"''\");\n+  }\n+\n+  @Test\n+  public void itInterpretsNullAsNull() {\n+    assertThat(makeChunkResolver(\"is_null(nothing, null)\").resolveChunks())\n+      .isEqualTo(\"true\");\n+    assertThat(makeChunkResolver(\"is_null(void_function(2), nothing)\").resolveChunks())\n+      .isEqualTo(\"true\");\n+    assertThat(makeChunkResolver(\"is_null('', nothing)\").resolveChunks())\n+      .isEqualTo(\"false\");\n+  }\n+\n   public static void voidFunction(int nothing) {}\n+\n+  public static boolean isNull(Object foo, Object bar) {\n+    return foo == null && bar == null;\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:45:54.611577Z", "commit_hash": "ab1ceeb803515552eb2bca2841ce1a163ac50828", "commit_message": "Merge branch 'master' of github.com:HubSpot/jinjava into chunk-resolver-fix\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/interpret/Context.java b/src/main/java/com/hubspot/jinjava/interpret/Context.java\nindex 5037b54..27c535a 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/Context.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/Context.java\n@@ -50,7 +50,7 @@ import java.util.stream.Collectors;\n public class Context extends ScopeMap<String, Object> {\n   public static final String GLOBAL_MACROS_SCOPE_KEY = \"__macros__\";\n   public static final String IMPORT_RESOURCE_PATH_KEY = \"import_resource_path\";\n-  public static final String IMPORT_RESOURCE_ALIAS = \"import_resource_alias\";\n+  public static final String IMPORT_RESOURCE_ALIAS_KEY = \"import_resource_alias\";\n \n   private SetMultimap<String, String> dependencies = HashMultimap.create();\n   private Map<Library, Set<String>> disabled;\n@@ -326,16 +326,11 @@ public class Context extends ScopeMap<String, Object> {\n \n   public void handleEagerToken(EagerToken eagerToken) {\n     eagerTokens.add(eagerToken);\n-    Set<String> deferredProps = DeferredValueUtils.findAndMarkDeferredProperties(this);\n+    DeferredValueUtils.findAndMarkDeferredProperties(this);\n     if (getParent() != null) {\n       Context parent = getParent();\n       //Ignore global context\n       if (parent.getParent() != null) {\n-        //Place deferred values on the parent context\n-        deferredProps\n-          .stream()\n-          .filter(key -> !parent.containsKey(key))\n-          .forEach(key -> parent.put(key, this.get(key)));\n         parent.handleEagerToken(eagerToken);\n       }\n     }\n@@ -512,6 +507,10 @@ public class Context extends ScopeMap<String, Object> {\n     this.expressionStrategy = expressionStrategy;\n   }\n \n+  public Optional<String> getImportResourceAlias() {\n+    return Optional.ofNullable(get(IMPORT_RESOURCE_ALIAS_KEY)).map(Object::toString);\n+  }\n+\n   public CallStack getExtendPathStack() {\n     return extendPathStack;\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\nindex 39c3a84..a89c86f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java\n@@ -9,7 +9,6 @@ import com.hubspot.jinjava.lib.tag.eager.EagerTagDecorator;\n import com.hubspot.jinjava.lib.tag.eager.EagerToken;\n import com.hubspot.jinjava.tree.output.RenderedOutputNode;\n import com.hubspot.jinjava.tree.parse.ExpressionToken;\n-import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.ChunkResolver;\n import com.hubspot.jinjava.util.Logging;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n@@ -84,7 +83,7 @@ public class EagerExpressionStrategy implements ExpressionStrategy {\n       .getContext()\n       .handleEagerToken(\n         new EagerToken(\n-          new TagToken(\n+          new ExpressionToken(\n             helpers,\n             master.getLineNumber(),\n             master.getStartPosition(),\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\nindex b088f10..be7af5a 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\n@@ -110,14 +110,17 @@ public class ImportTag implements Tag {\n       // If the template depends on deferred values it should not be rendered and all defined variables and macros should be deferred too\n       if (!child.getContext().getDeferredNodes().isEmpty()) {\n         handleDeferredNodesDuringImport(\n-          (TagToken) tagNode.getMaster(),\n           node,\n           contextVar,\n-          templateFile,\n           childBindings,\n           child,\n           interpreter\n         );\n+        throw new DeferredValueException(\n+          templateFile,\n+          tagNode.getLineNumber(),\n+          tagNode.getStartPosition()\n+        );\n       }\n \n       integrateChild(contextVar, childBindings, child, interpreter);\n@@ -159,10 +162,8 @@ public class ImportTag implements Tag {\n   }\n \n   public static void handleDeferredNodesDuringImport(\n-    TagToken tagToken,\n     Node node,\n     String contextVar,\n-    String templateFile,\n     Map<String, Object> childBindings,\n     JinjavaInterpreter child,\n     JinjavaInterpreter interpreter\n@@ -195,12 +196,6 @@ public class ImportTag implements Tag {\n       childBindings.remove(Context.IMPORT_RESOURCE_PATH_KEY);\n       interpreter.getContext().put(contextVar, DeferredValue.instance(childBindings));\n     }\n-\n-    throw new DeferredValueException(\n-      templateFile,\n-      tagToken.getLineNumber(),\n-      tagToken.getStartPosition()\n-    );\n   }\n \n   public static Node parseTemplateAsNode(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\nindex ceb7a01..1ab05e9 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\n@@ -129,14 +129,28 @@ public class MacroTag implements Tag {\n \n     if (StringUtils.isNotEmpty(parentName)) {\n       try {\n+        Map<String, Object> macroOfParent;\n         if (!(interpreter.getContext().get(parentName) instanceof DeferredValue)) {\n-          Map<String, Object> macroOfParent = (Map<String, Object>) interpreter\n-            .getContext()\n-            .getOrDefault(parentName, new HashMap<>());\n+          macroOfParent =\n+            (Map<String, Object>) interpreter\n+              .getContext()\n+              .getOrDefault(parentName, new HashMap<>());\n           macroOfParent.put(macro.getName(), macro);\n           if (!interpreter.getContext().containsKey(parentName)) {\n             interpreter.getContext().put(parentName, macroOfParent);\n           }\n+        } else {\n+          Object originalValue =\n+            ((DeferredValue) interpreter.getContext().get(parentName)).getOriginalValue();\n+          if (originalValue instanceof Map) {\n+            ((Map<String, Object>) originalValue).put(macro.getName(), macro);\n+          } else {\n+            macroOfParent = new HashMap<>();\n+            macroOfParent.put(macro.getName(), macro);\n+            interpreter\n+              .getContext()\n+              .put(parentName, DeferredValue.instance(macroOfParent));\n+          }\n         }\n       } catch (ClassCastException e) {\n         throw new TemplateSyntaxException(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\nindex 5c406a4..1e7891f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n@@ -24,6 +24,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.DeferredValueUtils;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n \n@@ -108,21 +109,9 @@ public class SetTag implements Tag {\n     String[] varTokens = var.split(\",\");\n \n     try {\n-      executeSet((TagToken) tagNode.getMaster(), interpreter, varTokens, expr);\n+      executeSet((TagToken) tagNode.getMaster(), interpreter, varTokens, expr, false);\n     } catch (DeferredValueException e) {\n-      for (String varToken : varTokens) {\n-        String key = varToken.trim();\n-        Object originalValue = interpreter.getContext().get(key);\n-        if (originalValue != null) {\n-          if (originalValue instanceof DeferredValue) {\n-            interpreter.getContext().put(key, originalValue);\n-          } else {\n-            interpreter.getContext().put(key, DeferredValue.instance(originalValue));\n-          }\n-        } else {\n-          interpreter.getContext().put(key, DeferredValue.instance());\n-        }\n-      }\n+      DeferredValueUtils.deferVariables(varTokens, interpreter.getContext());\n       throw e;\n     }\n \n@@ -133,7 +122,8 @@ public class SetTag implements Tag {\n     TagToken tagToken,\n     JinjavaInterpreter interpreter,\n     String[] varTokens,\n-    String expr\n+    String expr,\n+    boolean allowDeferredValueOverride\n   ) {\n     if (varTokens.length > 1) {\n       // handle multi-variable assignment\n@@ -155,7 +145,10 @@ public class SetTag implements Tag {\n       for (int i = 0; i < varTokens.length; i++) {\n         String varItem = varTokens[i].trim();\n         if (interpreter.getContext().containsKey(varItem)) {\n-          if (interpreter.getContext().get(varItem) instanceof DeferredValue) {\n+          if (\n+            !allowDeferredValueOverride &&\n+            interpreter.getContext().get(varItem) instanceof DeferredValue\n+          ) {\n             throw new DeferredValueException(varItem);\n           }\n         }\n@@ -164,7 +157,10 @@ public class SetTag implements Tag {\n     } else {\n       // handle single variable assignment\n       if (interpreter.getContext().containsKey(varTokens[0])) {\n-        if (interpreter.getContext().get(varTokens[0]) instanceof DeferredValue) {\n+        if (\n+          !allowDeferredValueOverride &&\n+          interpreter.getContext().get(varTokens[0]) instanceof DeferredValue\n+        ) {\n           throw new DeferredValueException(varTokens[0]);\n         }\n       }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\nnew file mode 100644\nindex 0000000..aab7d14\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTag.java\n@@ -0,0 +1,126 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.InterpretException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.fn.MacroFunction;\n+import com.hubspot.jinjava.lib.tag.FromTag;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EagerFromTag extends EagerStateChangingTag<FromTag> {\n+\n+  public EagerFromTag() {\n+    super(new FromTag());\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    List<String> helper = FromTag.getHelpers(tagToken);\n+\n+    Optional<String> maybeTemplateFile = FromTag.getTemplateFile(\n+      helper,\n+      tagToken,\n+      interpreter\n+    );\n+    if (!maybeTemplateFile.isPresent()) {\n+      return \"\";\n+    }\n+    String templateFile = maybeTemplateFile.get();\n+    try {\n+      Map<String, String> imports = FromTag.getImportMap(helper);\n+\n+      try {\n+        String template = interpreter.getResource(templateFile);\n+        Node node = interpreter.parse(template);\n+\n+        JinjavaInterpreter child = interpreter\n+          .getConfig()\n+          .getInterpreterFactory()\n+          .newInstance(interpreter);\n+        child.getContext().put(Context.IMPORT_RESOURCE_PATH_KEY, templateFile);\n+        JinjavaInterpreter.pushCurrent(child);\n+        String output;\n+        try {\n+          output = child.render(node);\n+        } finally {\n+          JinjavaInterpreter.popCurrent();\n+        }\n+\n+        interpreter.addAllChildErrors(templateFile, child.getErrorsCopy());\n+\n+        if (!child.getContext().getDeferredNodes().isEmpty()) {\n+          FromTag.handleDeferredNodesDuringImport(\n+            tagToken,\n+            templateFile,\n+            imports,\n+            child,\n+            interpreter\n+          );\n+        }\n+\n+        FromTag.integrateChild(imports, child, interpreter);\n+        Map<String, String> newToOldImportNames = renameMacros(imports, interpreter)\n+          .entrySet()\n+          .stream()\n+          .filter(e -> !e.getKey().equals(e.getValue()))\n+          .collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));\n+        if (child.getContext().getEagerTokens().isEmpty() || output == null) {\n+          output = \"\";\n+        } else if (newToOldImportNames.size() > 0) {\n+          // Set after output\n+          output =\n+            output +\n+            buildSetTagForDeferredInChildContext(newToOldImportNames, interpreter, true);\n+        }\n+        return output;\n+      } catch (IOException e) {\n+        throw new InterpretException(\n+          e.getMessage(),\n+          e,\n+          tagToken.getLineNumber(),\n+          tagToken.getStartPosition()\n+        );\n+      }\n+    } finally {\n+      interpreter.getContext().popFromStack();\n+    }\n+  }\n+\n+  private static Map<String, String> renameMacros(\n+    Map<String, String> oldToNewImportNames,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    Set<String> toRemove = new HashSet<>();\n+    Map<String, MacroFunction> macroFunctions = oldToNewImportNames\n+      .entrySet()\n+      .stream()\n+      .filter(\n+        e ->\n+          !e.getKey().equals(e.getValue()) &&\n+          !interpreter.getContext().containsKey(e.getKey()) &&\n+          interpreter.getContext().isGlobalMacro(e.getKey())\n+      )\n+      .peek(entry -> toRemove.add(entry.getKey()))\n+      .collect(\n+        Collectors.toMap(\n+          Map.Entry::getValue,\n+          e -> interpreter.getContext().getGlobalMacro(e.getKey())\n+        )\n+      );\n+\n+    macroFunctions.forEach(\n+      (key, value) ->\n+        interpreter.getContext().addGlobalMacro(new MacroFunction(value, key))\n+    );\n+    toRemove.forEach(oldToNewImportNames::remove);\n+    return oldToNewImportNames;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nnew file mode 100644\nindex 0000000..6de990d\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -0,0 +1,268 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.InterpretException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.fn.MacroFunction;\n+import com.hubspot.jinjava.lib.tag.ImportTag;\n+import com.hubspot.jinjava.objects.collections.PyMap;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.StringJoiner;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n+\n+  public EagerImportTag() {\n+    super(new ImportTag());\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    List<String> helper = ImportTag.getHelpers(tagToken);\n+\n+    String currentImportAlias = ImportTag.getContextVar(helper);\n+\n+    Optional<String> maybeTemplateFile = ImportTag.getTemplateFile(\n+      helper,\n+      tagToken,\n+      interpreter\n+    );\n+    if (!maybeTemplateFile.isPresent()) {\n+      return \"\";\n+    }\n+    String templateFile = maybeTemplateFile.get();\n+    try {\n+      Node node = ImportTag.parseTemplateAsNode(interpreter, templateFile);\n+\n+      JinjavaInterpreter child = interpreter\n+        .getConfig()\n+        .getInterpreterFactory()\n+        .newInstance(interpreter);\n+      child.getContext().put(Context.IMPORT_RESOURCE_PATH_KEY, templateFile);\n+      JinjavaInterpreter.pushCurrent(child);\n+      setupImportAlias(currentImportAlias, child, interpreter);\n+\n+      String output;\n+      try {\n+        output = child.render(node);\n+      } finally {\n+        JinjavaInterpreter.popCurrent();\n+      }\n+      interpreter.addAllChildErrors(templateFile, child.getErrorsCopy());\n+      Map<String, Object> childBindings = child.getContext().getSessionBindings();\n+\n+      // If the template depends on deferred values it should not be rendered,\n+      // and all defined variables and macros should be deferred too.\n+      if (!child.getContext().getDeferredNodes().isEmpty()) {\n+        ImportTag.handleDeferredNodesDuringImport(\n+          node,\n+          currentImportAlias,\n+          childBindings,\n+          child,\n+          interpreter\n+        );\n+        throw new DeferredValueException(\n+          templateFile,\n+          tagToken.getLineNumber(),\n+          tagToken.getStartPosition()\n+        );\n+      }\n+      integrateChild(currentImportAlias, childBindings, child, interpreter);\n+      if (child.getContext().getEagerTokens().isEmpty() || output == null) {\n+        output = \"\";\n+      } else if (!Strings.isNullOrEmpty(currentImportAlias)) {\n+        // Since some values got deferred, output a DoTag that will load the currentImportAlias on the context.\n+        return output + getDoTagToPreserve(interpreter, currentImportAlias);\n+      }\n+      return output;\n+    } catch (IOException e) {\n+      throw new InterpretException(\n+        e.getMessage(),\n+        e,\n+        tagToken.getLineNumber(),\n+        tagToken.getStartPosition()\n+      );\n+    } finally {\n+      interpreter.getContext().getCurrentPathStack().pop();\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static String getDoTagToPreserve(\n+    JinjavaInterpreter interpreter,\n+    String currentImportAlias\n+  )\n+    throws JsonProcessingException {\n+    StringJoiner keyValueJoiner = new StringJoiner(\",\");\n+    Object currentAliasMap = interpreter.getContext().get(currentImportAlias);\n+    if ((!(currentAliasMap instanceof DeferredValue))) {\n+      // Make sure that the map is deferred.\n+      if (!(currentAliasMap instanceof Map)) {\n+        currentAliasMap = new PyMap(new HashMap<>());\n+      }\n+      interpreter\n+        .getContext()\n+        .put(currentImportAlias, DeferredValue.instance(currentAliasMap));\n+    }\n+    for (Map.Entry<String, Object> entry : (\n+      (Map<String, Object>) (\n+        (DeferredValue) interpreter.getContext().get(currentImportAlias)\n+      ).getOriginalValue()\n+    ).entrySet()) {\n+      if (entry.getValue() instanceof DeferredValue) {\n+        keyValueJoiner.add(String.format(\"'%s': %s\", entry.getKey(), entry.getKey()));\n+      } else if (!(entry.getValue() instanceof MacroFunction)) {\n+        keyValueJoiner.add(\n+          String.format(\n+            \"'%s': %s\",\n+            entry.getKey(),\n+            ChunkResolver.getValueAsJinjavaString(entry.getValue())\n+          )\n+        );\n+      }\n+    }\n+    if (keyValueJoiner.length() > 0) {\n+      return buildDoUpdateTag(currentImportAlias, keyValueJoiner.toString(), interpreter);\n+    }\n+    return \"\";\n+  }\n+\n+  @VisibleForTesting\n+  public static void setupImportAlias(\n+    String currentImportAlias,\n+    JinjavaInterpreter child,\n+    JinjavaInterpreter parent\n+  ) {\n+    if (!Strings.isNullOrEmpty(currentImportAlias)) {\n+      Optional<String> maybeParentImportAlias = parent\n+        .getContext()\n+        .getImportResourceAlias();\n+      if (maybeParentImportAlias.isPresent()) {\n+        child\n+          .getContext()\n+          .getScope()\n+          .put(\n+            Context.IMPORT_RESOURCE_ALIAS_KEY,\n+            String.format(\"%s.%s\", maybeParentImportAlias.get(), currentImportAlias)\n+          );\n+      } else {\n+        child\n+          .getContext()\n+          .getScope()\n+          .put(Context.IMPORT_RESOURCE_ALIAS_KEY, currentImportAlias);\n+      }\n+      constructFullAliasPathMap(currentImportAlias, child);\n+      getMapForCurrentContextAlias(currentImportAlias, child);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static void constructFullAliasPathMap(\n+    String currentImportAlias,\n+    JinjavaInterpreter child\n+  ) {\n+    String fullImportAlias = child\n+      .getContext()\n+      .getImportResourceAlias()\n+      .orElse(currentImportAlias);\n+    String[] allAliases = fullImportAlias.split(\"\\\\.\");\n+    Map<String, Object> currentMap = child.getContext().getParent();\n+    for (int i = 0; i < allAliases.length - 1; i++) {\n+      Object maybeNextMap = currentMap.get(allAliases[i]);\n+      if (maybeNextMap instanceof Map) {\n+        currentMap = (Map<String, Object>) maybeNextMap;\n+      } else if (\n+        maybeNextMap instanceof DeferredValue &&\n+        ((DeferredValue) maybeNextMap).getOriginalValue() instanceof Map\n+      ) {\n+        currentMap =\n+          (Map<String, Object>) ((DeferredValue) maybeNextMap).getOriginalValue();\n+      } else {\n+        throw new InterpretException(\"Encountered a problem with import alias maps\");\n+      }\n+    }\n+    currentMap.put(allAliases[allAliases.length - 1], new PyMap(new HashMap<>()));\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static Map<String, Object> getMapForCurrentContextAlias(\n+    String currentImportAlias,\n+    JinjavaInterpreter child\n+  ) {\n+    Object parentValueForChild = child.getContext().getParent().get(currentImportAlias);\n+    if (parentValueForChild instanceof Map) {\n+      return (Map<String, Object>) parentValueForChild;\n+    } else if (parentValueForChild instanceof DeferredValue) {\n+      if (((DeferredValue) parentValueForChild).getOriginalValue() instanceof Map) {\n+        return (Map<String, Object>) (\n+          (DeferredValue) parentValueForChild\n+        ).getOriginalValue();\n+      }\n+      Map<String, Object> newMap = new PyMap(new HashMap<>());\n+      child\n+        .getContext()\n+        .getParent()\n+        .put(currentImportAlias, DeferredValue.instance(newMap));\n+      return newMap;\n+    } else {\n+      Map<String, Object> newMap = new PyMap(new HashMap<>());\n+      child.getContext().getParent().put(currentImportAlias, newMap);\n+      return newMap;\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public static void integrateChild(\n+    String currentImportAlias,\n+    Map<String, Object> childBindings,\n+    JinjavaInterpreter child,\n+    JinjavaInterpreter parent\n+  ) {\n+    if (StringUtils.isBlank(currentImportAlias)) {\n+      for (MacroFunction macro : child.getContext().getGlobalMacros().values()) {\n+        parent.getContext().addGlobalMacro(macro);\n+      }\n+      childBindings.remove(Context.GLOBAL_MACROS_SCOPE_KEY);\n+      childBindings.remove(Context.IMPORT_RESOURCE_PATH_KEY);\n+      childBindings.remove(Context.IMPORT_RESOURCE_ALIAS_KEY);\n+      parent.getContext().putAll(childBindings);\n+    } else {\n+      Map<String, MacroFunction> globalMacros = child.getContext().getGlobalMacros();\n+      for (Map.Entry<String, MacroFunction> macro : globalMacros.entrySet()) {\n+        childBindings.put(macro.getKey(), macro.getValue());\n+      }\n+      Map<String, Object> mapForCurrentContextAlias = getMapForCurrentContextAlias(\n+        currentImportAlias,\n+        child\n+      );\n+      // Remove layers from self down to original import alias to prevent reference loops\n+      Arrays\n+        .stream(\n+          child\n+            .getContext()\n+            .getImportResourceAlias()\n+            .orElse(currentImportAlias)\n+            .split(\"\\\\.\")\n+        )\n+        .forEach(childBindings::remove);\n+      // Remove meta keys\n+      childBindings.remove(Context.GLOBAL_MACROS_SCOPE_KEY);\n+      childBindings.remove(Context.IMPORT_RESOURCE_PATH_KEY);\n+      childBindings.remove(Context.IMPORT_RESOURCE_ALIAS_KEY);\n+      mapForCurrentContextAlias.putAll(childBindings);\n+    }\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\nindex f10c381..3f99a30 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java\n@@ -1,16 +1,15 @@\n package com.hubspot.jinjava.lib.tag.eager;\n \n-import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n-import com.hubspot.jinjava.lib.tag.DoTag;\n import com.hubspot.jinjava.lib.tag.SetTag;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import com.hubspot.jinjava.util.ChunkResolver;\n import com.hubspot.jinjava.util.LengthLimitingStringJoiner;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Optional;\n import java.util.StringJoiner;\n import java.util.stream.Collectors;\n \n@@ -39,11 +38,7 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n     String variables = tagToken.getHelpers().substring(0, eqPos).trim();\n \n     String expression = tagToken.getHelpers().substring(eqPos + 1);\n-    if (interpreter.getContext().containsKey(Context.IMPORT_RESOURCE_ALIAS)) {\n-      return interpreter.render(\n-        convertSetToUpdate(variables, expression, tagToken, interpreter)\n-      );\n-    }\n+\n     ChunkResolver chunkResolver = new ChunkResolver(expression, tagToken, interpreter);\n     EagerStringResult resolvedExpression = executeInChildContext(\n       eagerInterpreter -> chunkResolver.resolveChunks(),\n@@ -74,7 +69,13 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n     ) {\n       try {\n         getTag()\n-          .executeSet(tagToken, interpreter, varTokens, resolvedExpression.getResult());\n+          .executeSet(\n+            tagToken,\n+            interpreter,\n+            varTokens,\n+            resolvedExpression.getResult(),\n+            true\n+          );\n         return \"\";\n       } catch (DeferredValueException ignored) {}\n     }\n@@ -96,45 +97,38 @@ public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n           Arrays.stream(varTokens).map(String::trim).collect(Collectors.toSet())\n         )\n       );\n-    // Possible macro/set tag in front of this one.\n+\n+    StringBuilder suffixToPreserveState = new StringBuilder();\n+    Optional<String> maybeFullImportAlias = interpreter\n+      .getContext()\n+      .getImportResourceAlias();\n+    if (maybeFullImportAlias.isPresent()) {\n+      String currentImportAlias = maybeFullImportAlias\n+        .get()\n+        .substring(maybeFullImportAlias.get().lastIndexOf(\".\") + 1);\n+      String updateString = getUpdateString(variables);\n+      suffixToPreserveState.append(\n+        interpreter.render(\n+          buildDoUpdateTag(currentImportAlias, updateString, interpreter)\n+        )\n+      );\n+    }\n     return wrapInAutoEscapeIfNeeded(\n-      prefixToPreserveState.toString() + joiner.toString(),\n+      prefixToPreserveState.toString() +\n+      joiner.toString() +\n+      suffixToPreserveState.toString(),\n       interpreter\n     );\n   }\n \n-  private static String convertSetToUpdate(\n-    String variables,\n-    String expression,\n-    TagToken tagToken,\n-    JinjavaInterpreter interpreter\n-  ) {\n-    LengthLimitingStringJoiner joiner = new LengthLimitingStringJoiner(\n-      interpreter.getConfig().getMaxOutputSize(),\n-      \" \"\n-    )\n-      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag())\n-      .add(DoTag.TAG_NAME);\n+  private static String getUpdateString(String variables) {\n     List<String> varList = Arrays\n       .stream(variables.split(\",\"))\n       .map(String::trim)\n       .collect(Collectors.toList());\n-    ChunkResolver chunkResolver = new ChunkResolver(expression, tagToken, interpreter);\n-    List<String> expressionList = chunkResolver.splitChunks();\n     StringJoiner updateString = new StringJoiner(\",\");\n-    for (int i = 0; i < varList.size() && i < expressionList.size(); i++) {\n-      updateString.add(String.format(\"'%s': %s\", varList.get(i), expressionList.get(i)));\n-    }\n-    joiner.add(\n-      String.format(\n-        \"%s.update({%s})\",\n-        interpreter.getContext().get(Context.IMPORT_RESOURCE_ALIAS),\n-        updateString.toString()\n-      )\n-    );\n-    joiner.add(\n-      interpreter.getConfig().getTokenScannerSymbols().getExpressionEndWithTag()\n-    );\n-    return joiner.toString();\n+    // Update the alias map to the value of the set variable.\n+    varList.forEach(var -> updateString.add(String.format(\"'%s': %s\", var, var)));\n+    return updateString.toString();\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\nindex 6e1c6fd..c01de71 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagDecorator.java\n@@ -17,6 +17,7 @@ import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.lib.fn.eager.EagerMacroFunction;\n import com.hubspot.jinjava.lib.tag.AutoEscapeTag;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n import com.hubspot.jinjava.lib.tag.MacroTag;\n import com.hubspot.jinjava.lib.tag.RawTag;\n import com.hubspot.jinjava.lib.tag.SetTag;\n@@ -355,9 +356,11 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n     if (deferredValuesToSet.size() == 0) {\n       return \"\";\n     }\n+    Map<Library, Set<String>> disabled = interpreter.getConfig().getDisabled();\n     if (\n-      interpreter.getConfig().getDisabled().containsKey(Library.TAG) &&\n-      interpreter.getConfig().getDisabled().get(Library.TAG).contains(SetTag.TAG_NAME)\n+      disabled != null &&\n+      disabled.containsKey(Library.TAG) &&\n+      disabled.get(Library.TAG).contains(SetTag.TAG_NAME)\n     ) {\n       throw new DisabledException(\"set tag disabled\");\n     }\n@@ -404,6 +407,19 @@ public abstract class EagerTagDecorator<T extends Tag> implements Tag {\n     return image;\n   }\n \n+  public static String buildDoUpdateTag(\n+    String currentImportAlias,\n+    String updateString,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    return new LengthLimitingStringJoiner(interpreter.getConfig().getMaxOutputSize(), \" \")\n+      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionStartWithTag())\n+      .add(DoTag.TAG_NAME)\n+      .add(String.format(\"%s.update({%s})\", currentImportAlias, updateString))\n+      .add(interpreter.getConfig().getTokenScannerSymbols().getExpressionEndWithTag())\n+      .toString();\n+  }\n+\n   /**\n    * Casts token to TagToken if possible to get the eager image of the token.\n    * @see #getEagerTagImage(TagToken, JinjavaInterpreter)\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\nindex 4e4d62a..1bc7791 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerTagFactory.java\n@@ -10,7 +10,9 @@ import com.hubspot.jinjava.lib.tag.ElseIfTag;\n import com.hubspot.jinjava.lib.tag.ElseTag;\n import com.hubspot.jinjava.lib.tag.EndTag;\n import com.hubspot.jinjava.lib.tag.ForTag;\n+import com.hubspot.jinjava.lib.tag.FromTag;\n import com.hubspot.jinjava.lib.tag.IfTag;\n+import com.hubspot.jinjava.lib.tag.ImportTag;\n import com.hubspot.jinjava.lib.tag.PrintTag;\n import com.hubspot.jinjava.lib.tag.RawTag;\n import com.hubspot.jinjava.lib.tag.SetTag;\n@@ -26,6 +28,8 @@ public class EagerTagFactory {\n     .put(SetTag.class, EagerSetTag.class)\n     .put(DoTag.class, EagerDoTag.class)\n     .put(PrintTag.class, EagerPrintTag.class)\n+    .put(FromTag.class, EagerFromTag.class)\n+    .put(ImportTag.class, EagerImportTag.class)\n     .put(ForTag.class, EagerForTag.class)\n     .put(CycleTag.class, EagerCycleTag.class)\n     .put(IfTag.class, EagerIfTag.class)\ndiff --git a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\nindex 79bb834..b55f16a 100644\n--- a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n@@ -61,6 +61,22 @@ public class DeferredValueUtils {\n     return deferredContext;\n   }\n \n+  public static void deferVariables(String[] varTokens, Map<String, Object> context) {\n+    for (String varToken : varTokens) {\n+      String key = varToken.trim();\n+      Object originalValue = context.get(key);\n+      if (originalValue != null) {\n+        if (originalValue instanceof DeferredValue) {\n+          context.put(key, originalValue);\n+        } else {\n+          context.put(key, DeferredValue.instance(originalValue));\n+        }\n+      } else {\n+        context.put(key, DeferredValue.instance());\n+      }\n+    }\n+  }\n+\n   public static Set<String> findAndMarkDeferredProperties(Context context) {\n     String templateSource = rebuildTemplateForNodes(context.getDeferredNodes());\n     Set<String> deferredProps = getPropertiesUsedInDeferredNodes(context, templateSource);\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java\nnew file mode 100644\nindex 0000000..c78ba6a\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerFromTagTest.java\n@@ -0,0 +1,77 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.google.common.io.Resources;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.tag.FromTag;\n+import com.hubspot.jinjava.lib.tag.FromTagTest;\n+import com.hubspot.jinjava.lib.tag.Tag;\n+import com.hubspot.jinjava.loader.LocationResolver;\n+import com.hubspot.jinjava.loader.RelativePathResolver;\n+import com.hubspot.jinjava.loader.ResourceLocator;\n+import com.hubspot.jinjava.mode.EagerExecutionMode;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+public class EagerFromTagTest extends FromTagTest {\n+\n+  @Before\n+  public void eagerSetup() {\n+    jinjava.setResourceLocator(\n+      new ResourceLocator() {\n+        private RelativePathResolver relativePathResolver = new RelativePathResolver();\n+\n+        @Override\n+        public String getString(\n+          String fullName,\n+          Charset encoding,\n+          JinjavaInterpreter interpreter\n+        )\n+          throws IOException {\n+          return Resources.toString(\n+            Resources.getResource(String.format(\"tags/macrotag/%s\", fullName)),\n+            StandardCharsets.UTF_8\n+          );\n+        }\n+\n+        @Override\n+        public Optional<LocationResolver> getLocationResolver() {\n+          return Optional.of(relativePathResolver);\n+        }\n+      }\n+    );\n+    context.put(\"padding\", 42);\n+    interpreter =\n+      new JinjavaInterpreter(\n+        jinjava,\n+        context,\n+        JinjavaConfig\n+          .newBuilder()\n+          .withExecutionMode(EagerExecutionMode.instance())\n+          .build()\n+      );\n+    Tag tag = EagerTagFactory\n+      .getEagerTagDecorator(FromTag.class)\n+      .orElseThrow(RuntimeException::new);\n+    context.registerTag(tag);\n+    context.put(\"deferred\", DeferredValue.instance());\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+  }\n+\n+  @After\n+  public void teardown() {\n+    JinjavaInterpreter.popCurrent();\n+  }\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itDefersImport() {}\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\nnew file mode 100644\nindex 0000000..39f0f86\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTagTest.java\n@@ -0,0 +1,521 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.io.Resources;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.tag.FromTag;\n+import com.hubspot.jinjava.lib.tag.ImportTagTest;\n+import com.hubspot.jinjava.lib.tag.Tag;\n+import com.hubspot.jinjava.loader.LocationResolver;\n+import com.hubspot.jinjava.loader.RelativePathResolver;\n+import com.hubspot.jinjava.loader.ResourceLocator;\n+import com.hubspot.jinjava.mode.EagerExecutionMode;\n+import com.hubspot.jinjava.objects.collections.PyMap;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+public class EagerImportTagTest extends ImportTagTest {\n+  private static final String CONTEXT_VAR = \"context_var\";\n+  private static final String TEMPLATE_FILE = \"template.jinja\";\n+\n+  @Before\n+  public void eagerSetup() {\n+    context.put(\"padding\", 42);\n+    interpreter =\n+      new JinjavaInterpreter(\n+        jinjava,\n+        context,\n+        JinjavaConfig\n+          .newBuilder()\n+          .withExecutionMode(EagerExecutionMode.instance())\n+          .build()\n+      );\n+    Tag tag = EagerTagFactory\n+      .getEagerTagDecorator(FromTag.class)\n+      .orElseThrow(RuntimeException::new);\n+    context.registerTag(tag);\n+    context.put(\"deferred\", DeferredValue.instance());\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+  }\n+\n+  @After\n+  public void teardown() {\n+    JinjavaInterpreter.popCurrent();\n+  }\n+\n+  @Test\n+  public void itRemovesKeysFromChildBindings() {\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, CONTEXT_VAR);\n+    Map<String, Object> childBindings = child.getContext().getSessionBindings();\n+    assertThat(childBindings.get(Context.IMPORT_RESOURCE_ALIAS_KEY))\n+      .isEqualTo(CONTEXT_VAR);\n+    EagerImportTag.integrateChild(CONTEXT_VAR, childBindings, child, interpreter);\n+    assertThat(interpreter.getContext().get(CONTEXT_VAR)).isInstanceOf(Map.class);\n+    assertThat(((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).keySet())\n+      .doesNotContain(Context.IMPORT_RESOURCE_ALIAS_KEY);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayer() {\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, \"\");\n+    JinjavaInterpreter child2 = getChildInterpreter(child, \"\");\n+    child2.getContext().put(\"foo\", \"foo val\");\n+    child.getContext().put(\"bar\", \"bar val\");\n+    EagerImportTag.integrateChild(\n+      \"\",\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      \"\",\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(\"foo\")).isEqualTo(\"foo val\");\n+    assertThat(interpreter.getContext().get(\"bar\")).isEqualTo(\"bar val\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayerAliased() {\n+    String child2Alias = \"double_child\";\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, CONTEXT_VAR);\n+    JinjavaInterpreter child2 = getChildInterpreter(child, child2Alias);\n+\n+    child2.render(\"{% set foo = 'foo val' %}\");\n+    child.render(\"{% set bar = 'bar val' %}\");\n+\n+    EagerImportTag.integrateChild(\n+      child2Alias,\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      CONTEXT_VAR,\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(CONTEXT_VAR)).isInstanceOf(Map.class);\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(child2Alias)\n+      )\n+      .isInstanceOf(Map.class);\n+    assertThat(\n+        (\n+          (Map<String, Object>) (\n+            (Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)\n+          ).get(child2Alias)\n+        ).get(\"foo\")\n+      )\n+      .isEqualTo(\"foo val\");\n+\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\"bar\")\n+      )\n+      .isEqualTo(\"bar val\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayerAliasedAndDeferred() {\n+    String child2Alias = \"double_child\";\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, CONTEXT_VAR);\n+    JinjavaInterpreter child2 = getChildInterpreter(child, child2Alias);\n+\n+    child2.render(\"{% set foo = 'foo val' %}\");\n+    child.render(\"{% set bar = 'bar val' %}\");\n+    child2.render(\"{% set foo_d = deferred %}\");\n+\n+    EagerImportTag.integrateChild(\n+      child2Alias,\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      CONTEXT_VAR,\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(CONTEXT_VAR)).isInstanceOf(PyMap.class);\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(child2Alias)\n+      )\n+      .isInstanceOf(DeferredValue.class);\n+    assertThat(\n+        (\n+          (\n+            (Map<String, Object>) (\n+              (DeferredValue) (\n+                (Map<String, Object>) (interpreter.getContext().get(CONTEXT_VAR))\n+              ).get(child2Alias)\n+            ).getOriginalValue()\n+          ).get(\"foo\")\n+        )\n+      )\n+      .isEqualTo(\"foo val\");\n+\n+    assertThat(\n+        (((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\"bar\"))\n+      )\n+      .isEqualTo(\"bar val\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayerAliasedAndNullDeferred() {\n+    String child2Alias = \"double_child\";\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, CONTEXT_VAR);\n+    JinjavaInterpreter child2 = getChildInterpreter(child, child2Alias);\n+\n+    child2.render(\"{% set foo = 'foo val' %}\");\n+    child.render(\"{% set bar = 'bar val' %}\");\n+    child2.render(\"{% set foo_d = deferred %}\");\n+\n+    EagerImportTag.integrateChild(\n+      child2Alias,\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      CONTEXT_VAR,\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(CONTEXT_VAR)).isInstanceOf(PyMap.class);\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(child2Alias)\n+      )\n+      .isInstanceOf(DeferredValue.class);\n+    assertThat(\n+        (\n+          (\n+            (Map<String, Object>) (\n+              (DeferredValue) (\n+                (Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)\n+              ).get(child2Alias)\n+            ).getOriginalValue()\n+          ).get(\"foo\")\n+        )\n+      )\n+      .isEqualTo(\"foo val\");\n+\n+    assertThat(\n+        (((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\"bar\"))\n+      )\n+      .isEqualTo(\"bar val\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayerDeferred() {\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, \"\");\n+    JinjavaInterpreter child2 = getChildInterpreter(child, \"\");\n+    child2.getContext().put(\"foo\", DeferredValue.instance(\"foo val\"));\n+    child.getContext().put(\"bar\", DeferredValue.instance(\"bar val\"));\n+\n+    EagerImportTag.integrateChild(\n+      \"\",\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      \"\",\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(\"foo\")).isInstanceOf(DeferredValue.class);\n+    assertThat(\n+        (((DeferredValue) (interpreter.getContext().get(\"foo\"))).getOriginalValue())\n+      )\n+      .isEqualTo(\"foo val\");\n+\n+    assertThat(interpreter.getContext().get(\"bar\")).isInstanceOf(DeferredValue.class);\n+    assertThat(\n+        (((DeferredValue) (interpreter.getContext().get(\"bar\"))).getOriginalValue())\n+      )\n+      .isEqualTo(\"bar val\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayerSomeAliased() {\n+    String child2Alias = \"\";\n+    String child3Alias = \"triple_child\";\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, CONTEXT_VAR);\n+    JinjavaInterpreter child2 = getChildInterpreter(child, child2Alias);\n+    JinjavaInterpreter child3 = getChildInterpreter(child2, child3Alias);\n+\n+    child2.render(\"{% set foo = 'foo val' %}\");\n+    child.render(\"{% set bar = 'bar val' %}\");\n+    child3.render(\"{% set foobar = 'foobar val' %}\");\n+\n+    EagerImportTag.integrateChild(\n+      child3Alias,\n+      child3.getContext().getSessionBindings(),\n+      child3,\n+      child2\n+    );\n+    EagerImportTag.integrateChild(\n+      child2Alias,\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      CONTEXT_VAR,\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(CONTEXT_VAR)).isInstanceOf(Map.class);\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(child3Alias)\n+      )\n+      .isInstanceOf(Map.class);\n+    assertThat(\n+        (\n+          (Map<String, Object>) (\n+            (Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)\n+          ).get(child3Alias)\n+        ).get(\"foobar\")\n+      )\n+      .isEqualTo(\"foobar val\");\n+\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\"bar\")\n+      )\n+      .isEqualTo(\"bar val\");\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\"foo\")\n+      )\n+      .isEqualTo(\"foo val\");\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void itHandlesMultiLayerAliasedAndParallel() {\n+    String child2Alias = \"double_child\";\n+    String child2BAlias = \"double_child_b\";\n+\n+    JinjavaInterpreter child = getChildInterpreter(interpreter, CONTEXT_VAR);\n+    JinjavaInterpreter child2 = getChildInterpreter(child, child2Alias);\n+    JinjavaInterpreter child2B = getChildInterpreter(child, child2BAlias);\n+\n+    child2.render(\"{% set foo = 'foo val' %}\");\n+    child.render(\"{% set bar = 'bar val' %}\");\n+    child2B.render(\"{% set foo_b = 'foo_b val' %}\");\n+\n+    EagerImportTag.integrateChild(\n+      child2Alias,\n+      child2.getContext().getSessionBindings(),\n+      child2,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      child2BAlias,\n+      child2B.getContext().getSessionBindings(),\n+      child2B,\n+      child\n+    );\n+    EagerImportTag.integrateChild(\n+      CONTEXT_VAR,\n+      child.getContext().getSessionBindings(),\n+      child,\n+      interpreter\n+    );\n+    assertThat(interpreter.getContext().get(CONTEXT_VAR)).isInstanceOf(Map.class);\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(child2Alias)\n+      )\n+      .isInstanceOf(Map.class);\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\n+            child2BAlias\n+          )\n+      )\n+      .isInstanceOf(Map.class);\n+    assertThat(\n+        (\n+          (Map<String, Object>) (\n+            (Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)\n+          ).get(child2Alias)\n+        ).get(\"foo\")\n+      )\n+      .isEqualTo(\"foo val\");\n+    assertThat(\n+        (\n+          (Map<String, Object>) (\n+            (Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)\n+          ).get(child2BAlias)\n+        ).get(\"foo_b\")\n+      )\n+      .isEqualTo(\"foo_b val\");\n+\n+    assertThat(\n+        ((Map<String, Object>) interpreter.getContext().get(CONTEXT_VAR)).get(\"bar\")\n+      )\n+      .isEqualTo(\"bar val\");\n+  }\n+\n+  @Test\n+  public void itHandlesTripleLayer() {\n+    setupResourceLocator();\n+    context.put(\"a_val\", \"a\");\n+    context.put(\"b_val\", \"b\");\n+    context.put(\"c_val\", \"c\");\n+    interpreter.render(\"{% import 'import-tree-c.jinja' as c %}\");\n+    assertThat(interpreter.render(\"{{ c.b.a.foo_a }}\")).isEqualTo(\"a\");\n+    assertThat(interpreter.render(\"{{ c.b.foo_b }}\")).isEqualTo(\"ba\");\n+    assertThat(interpreter.render(\"{{ c.foo_c }}\")).isEqualTo(\"cbaa\");\n+  }\n+\n+  @Test\n+  public void itDefersTripleLayer() {\n+    setupResourceLocator();\n+    context.put(\"a_val\", DeferredValue.instance(\"a\"));\n+    context.put(\"b_val\", \"b\");\n+    context.put(\"c_val\", \"c\");\n+    String result = interpreter.render(\"{% import 'import-tree-c.jinja' as c %}{{ c }}\");\n+    assertThat(interpreter.render(\"{{ c.b.a.foo_a }}\")).isEqualTo(\"{{ c.b.a.foo_a }}\");\n+    assertThat(interpreter.render(\"{{ c.b.foo_b }}\")).isEqualTo(\"{{ c.b.foo_b }}\");\n+    assertThat(interpreter.render(\"{{ c.foo_c }}\")).isEqualTo(\"{{ c.foo_c }}\");\n+    context.put(\"a_val\", \"a\");\n+    // There are some extras due to deferred values copying up the context stack.\n+    assertThat(interpreter.render(result).trim())\n+      .isEqualTo(\n+        \"{'b':{'foo_b':'ba','a':{'foo_a':'a','something':'somn'},'foo_a':'a'}\" +\n+        \",'foo_c':'cbaa','a':{'foo_a':'a','something':'somn'},'foo_b':'ba','foo_a':'a'}\"\n+      );\n+  }\n+\n+  @Test\n+  public void itHandlesQuadLayer() {\n+    setupResourceLocator();\n+    context.put(\"a_val\", \"a\");\n+    context.put(\"b_val\", \"b\");\n+    context.put(\"c_val\", \"c\");\n+    interpreter.render(\"{% import 'import-tree-d.jinja' as d %}\");\n+    assertThat(interpreter.render(\"{{ d.foo_d }}\")).isEqualTo(\"cbaabaa\");\n+    assertThat(interpreter.render(\"{{ d.resolvable }}\")).isEqualTo(\"12345\");\n+    assertThat(interpreter.render(\"{{ d.bar }}\")).isEqualTo(\"cbaabaaba\");\n+  }\n+\n+  @Test\n+  public void itDefersQuadLayer() {\n+    setupResourceLocator();\n+    context.put(\"a_val\", DeferredValue.instance(\"a\"));\n+    context.put(\"b_val\", \"b\");\n+    context.put(\"c_val\", \"c\");\n+    String result = interpreter.render(\n+      \"{% import 'import-tree-d.jinja' as d %}{{ d.resolvable }} {{ d.bar }}\"\n+    );\n+    context.put(\"a_val\", \"a\");\n+    assertThat(interpreter.render(result).trim()).isEqualTo(\"12345 cbaabaaba\");\n+  }\n+\n+  private static JinjavaInterpreter getChildInterpreter(\n+    JinjavaInterpreter interpreter,\n+    String alias\n+  ) {\n+    JinjavaInterpreter child = interpreter\n+      .getConfig()\n+      .getInterpreterFactory()\n+      .newInstance(interpreter);\n+    child.getContext().put(Context.IMPORT_RESOURCE_PATH_KEY, TEMPLATE_FILE);\n+    EagerImportTag.setupImportAlias(alias, child, interpreter);\n+    return child;\n+  }\n+\n+  private void setupResourceLocator() {\n+    jinjava.setResourceLocator(\n+      new ResourceLocator() {\n+        private RelativePathResolver relativePathResolver = new RelativePathResolver();\n+\n+        @Override\n+        public String getString(\n+          String fullName,\n+          Charset encoding,\n+          JinjavaInterpreter interpreter\n+        )\n+          throws IOException {\n+          return Resources.toString(\n+            Resources.getResource(String.format(\"tags/eager/importtag/%s\", fullName)),\n+            StandardCharsets.UTF_8\n+          );\n+        }\n+\n+        @Override\n+        public Optional<LocationResolver> getLocationResolver() {\n+          return Optional.of(relativePathResolver);\n+        }\n+      }\n+    );\n+  }\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itReconstructsDeferredImportTag() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itDoesNotRenderTagsDependingOnDeferredImport() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itAddsAllDeferredNodesOfImport() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itAddsAllDeferredNodesOfGlobalImport() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itSetsErrorLineNumbersCorrectly() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itSetsErrorLineNumbersCorrectlyForImportedMacros() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itDefersImportedVariableKey() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itDoesNotRenderTagsDependingOnDeferredGlobalImport() {}\n+\n+  @Test\n+  @Ignore\n+  @Override\n+  public void itSetsErrorLineNumbersCorrectlyThroughIncludeTag() {}\n+}\ndiff --git a/src/test/resources/eager/handles-non-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-non-deferred-import-vars.expected.jinja\nnew file mode 100644\nindex 0000000..2d8a8c1\n--- /dev/null\n+++ b/src/test/resources/eager/handles-non-deferred-import-vars.expected.jinja\n@@ -0,0 +1,5 @@\n+foo: Hello 3\n+bar: 22\n+---\n+simple.foo: Hello 7\n+simple.bar: 26\ndiff --git a/src/test/resources/eager/handles-non-deferred-import-vars.jinja b/src/test/resources/eager/handles-non-deferred-import-vars.jinja\nnew file mode 100644\nindex 0000000..bf42a2f\n--- /dev/null\n+++ b/src/test/resources/eager/handles-non-deferred-import-vars.jinja\n@@ -0,0 +1,9 @@\n+{%- set myname = (1 + 2) -%}\n+{%- from \"macro-and-set.jinja\" import foo, bar -%}\n+foo: {{ foo() }}\n+bar: {{ bar }}\n+---\n+{%- set myname = (3 + 4) -%}\n+{%- import \"macro-and-set.jinja\" as simple -%}\n+simple.foo: {{ simple.foo() }}\n+simple.bar: {{ simple.bar }}\ndiff --git a/src/test/resources/tags/eager/importtag/import-tree-a.jinja b/src/test/resources/tags/eager/importtag/import-tree-a.jinja\nnew file mode 100644\nindex 0000000..16096b6\n--- /dev/null\n+++ b/src/test/resources/tags/eager/importtag/import-tree-a.jinja\n@@ -0,0 +1,2 @@\n+{% set something = 'somn' %}\n+{% set foo_a = a_val %}\ndiff --git a/src/test/resources/tags/eager/importtag/import-tree-b.jinja b/src/test/resources/tags/eager/importtag/import-tree-b.jinja\nnew file mode 100644\nindex 0000000..454ee0e\n--- /dev/null\n+++ b/src/test/resources/tags/eager/importtag/import-tree-b.jinja\n@@ -0,0 +1,2 @@\n+{% import 'import-tree-a.jinja' as a %}\n+{% set foo_b = b_val + a.foo_a %}\ndiff --git a/src/test/resources/tags/eager/importtag/import-tree-c.jinja b/src/test/resources/tags/eager/importtag/import-tree-c.jinja\nnew file mode 100644\nindex 0000000..e709660\n--- /dev/null\n+++ b/src/test/resources/tags/eager/importtag/import-tree-c.jinja\n@@ -0,0 +1,2 @@\n+{% import 'import-tree-b.jinja' as b %}\n+{% set foo_c = c_val + b.foo_b + b.a.foo_a %}\ndiff --git a/src/test/resources/tags/eager/importtag/import-tree-d.jinja b/src/test/resources/tags/eager/importtag/import-tree-d.jinja\nnew file mode 100644\nindex 0000000..ec951a1\n--- /dev/null\n+++ b/src/test/resources/tags/eager/importtag/import-tree-d.jinja\n@@ -0,0 +1,5 @@\n+{% import 'import-tree-c.jinja' as c %}\n+{% set foo_d = c.foo_c + c.b.foo_b + c.b.a.foo_a %}\n+{% import 'import-tree-b.jinja' as b2 %}\n+{% set resolvable = 12345 %}\n+{% set bar = foo_d + b2.foo_b %}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex 35ff857..8e2e147 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -725,7 +725,6 @@ public class EagerTest {\n   }\n \n   @Test\n-  @Ignore\n   public void itHandlesDeferredImportVars() {\n     expectedTemplateInterpreter.assertExpectedOutput(\"handles-deferred-import-vars\");\n   }\n@@ -739,7 +738,14 @@ public class EagerTest {\n   }\n \n   @Test\n-  @Ignore\n+  public void itHandlesNonDeferredImportVars() {\n+    expectedTemplateInterpreter.assertExpectedNonEagerOutput(\n+      \"handles-non-deferred-import-vars\"\n+    );\n+    expectedTemplateInterpreter.assertExpectedOutput(\"handles-non-deferred-import-vars\");\n+  }\n+\n+  @Test\n   public void itHandlesDeferredFromImportAs() {\n     expectedTemplateInterpreter.assertExpectedOutput(\"handles-deferred-from-import-as\");\n   }\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\nindex 747182b..b192ec5 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n@@ -4,9 +4,9 @@\n \n foo: {% macro foo() %}Hello {{ myname }}{% endmacro %}{{ foo() }}\n bar: {{ bar }}\n----{% set myname = deferred + 7 %}{% set simple = {} %}\n-{% do simple.update({'bar': myname + 19}) %}\n+---{% set myname = deferred + 7 %}\n+{% set bar = myname + 19 %}{% set simple = {} %}{% do simple.update({'bar': bar}) %}\n {% macro foo() %}Hello {{ myname }}{% endmacro %}{{ foo() }}\n \n simple.foo: {% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{{ simple.foo() }}\n-simple.bar: {{ simple.bar }}\n+simple.bar: {{ simple.bar }}\n\\ No newline at end of file\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:48:14.050315Z", "commit_hash": "397fb3e908a53531eeefac9f4c160c06b1e2f7c2", "commit_message": "Merge pull request #576 from HubSpot/chunk-resolver-fix\n\nHandle void functions in ChunkResolver", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/interpret/Context.java b/src/main/java/com/hubspot/jinjava/interpret/Context.java\nindex 3f9725f..27c535a 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/Context.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/Context.java\n@@ -101,7 +101,7 @@ public class Context extends ScopeMap<String, Object> {\n \n   private boolean validationMode = false;\n   private boolean deferredExecutionMode = false;\n-  private boolean hideInterpreterErrors = false;\n+  private boolean throwInterpreterErrors = false;\n \n   public Context() {\n     this(null, null, null);\n@@ -598,11 +598,11 @@ public class Context extends ScopeMap<String, Object> {\n     return this;\n   }\n \n-  public boolean getHideInterpreterErrors() {\n-    return hideInterpreterErrors;\n+  public boolean getThrowInterpreterErrors() {\n+    return throwInterpreterErrors;\n   }\n \n-  public void setHideInterpreterErrors(boolean hideInterpreterErrors) {\n-    this.hideInterpreterErrors = hideInterpreterErrors;\n+  public void setThrowInterpreterErrors(boolean throwInterpreterErrors) {\n+    this.throwInterpreterErrors = throwInterpreterErrors;\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java b/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\nindex 5323365..de814ec 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/JinjavaInterpreter.java\n@@ -564,9 +564,13 @@ public class JinjavaInterpreter {\n   }\n \n   public void addError(TemplateError templateError) {\n-    if (context.getHideInterpreterErrors()) {\n+    if (context.getThrowInterpreterErrors()) {\n       // Hiding errors when resolving chunks.\n-      return;\n+      throw new TemplateSyntaxException(\n+        this,\n+        templateError.getFieldName(),\n+        templateError.getMessage()\n+      );\n     }\n     // fix line numbers not matching up with source template\n     if (!context.getCurrentPathStack().isEmpty()) {\ndiff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex effa456..a348328 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -7,6 +7,7 @@ import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.interpret.UnknownTokenException;\n import com.hubspot.jinjava.objects.date.JsonPyishDateSerializer;\n import com.hubspot.jinjava.objects.date.PyishDate;\n@@ -59,8 +60,6 @@ public class ChunkResolver {\n     ']'\n   );\n \n-  private static final String VARIABLE_REGEX = \"[A-Za-z_][\\\\w.]*\";\n-\n   private final char[] value;\n   private final int length;\n   private final Token token;\n@@ -101,14 +100,14 @@ public class ChunkResolver {\n    */\n   public String resolveChunks() {\n     nextPos = 0;\n-    boolean isHideInterpreterErrorsStart = interpreter\n+    boolean isThrowInterpreterErrorsStart = interpreter\n       .getContext()\n-      .getHideInterpreterErrors();\n+      .getThrowInterpreterErrors();\n     try {\n-      interpreter.getContext().setHideInterpreterErrors(true);\n+      interpreter.getContext().setThrowInterpreterErrors(true);\n       return String.join(\"\", getChunk(null));\n     } finally {\n-      interpreter.getContext().setHideInterpreterErrors(isHideInterpreterErrorsStart);\n+      interpreter.getContext().setThrowInterpreterErrors(isThrowInterpreterErrorsStart);\n     }\n   }\n \n@@ -122,18 +121,18 @@ public class ChunkResolver {\n    */\n   public List<String> splitChunks() {\n     nextPos = 0;\n-    boolean isHideInterpreterErrorsStart = interpreter\n+    boolean isThrowInterpreterErrorsStart = interpreter\n       .getContext()\n-      .getHideInterpreterErrors();\n+      .getThrowInterpreterErrors();\n     try {\n-      interpreter.getContext().setHideInterpreterErrors(true);\n+      interpreter.getContext().setThrowInterpreterErrors(true);\n       List<String> miniChunks = getChunk(null);\n       return miniChunks\n         .stream()\n         .filter(s -> s.length() > 1 || !isMiniChunkSplitter(s.charAt(0)))\n         .collect(Collectors.toList());\n     } finally {\n-      interpreter.getContext().setHideInterpreterErrors(isHideInterpreterErrorsStart);\n+      interpreter.getContext().setThrowInterpreterErrors(isThrowInterpreterErrorsStart);\n     }\n   }\n \n@@ -218,11 +217,15 @@ public class ChunkResolver {\n       if (WhitespaceUtils.isQuoted(token) || RESERVED_KEYWORDS.contains(token)) {\n         resolvedToken = token;\n       } else {\n-        Object val = interpreter.retraceVariable(\n-          token,\n-          this.token.getLineNumber(),\n-          this.token.getStartPosition()\n-        );\n+        Object val = null;\n+        try {\n+          val =\n+            interpreter.retraceVariable(\n+              token,\n+              this.token.getLineNumber(),\n+              this.token.getStartPosition()\n+            );\n+        } catch (TemplateSyntaxException ignored) {}\n         if (val == null) {\n           try {\n             val = interpreter.resolveELExpression(token, this.token.getLineNumber());\n@@ -240,6 +243,8 @@ public class ChunkResolver {\n     } catch (DeferredValueException | JsonProcessingException e) {\n       deferredWords.addAll(findDeferredWords(token));\n       return token.trim();\n+    } catch (TemplateSyntaxException e) {\n+      return token.trim();\n     }\n   }\n \n@@ -254,15 +259,13 @@ public class ChunkResolver {\n       String resolvedChunk;\n       Object val = interpreter.resolveELExpression(chunk, token.getLineNumber());\n       if (val == null) {\n-        if (chunk.matches(VARIABLE_REGEX)) {\n-          // Non-existent variable\n-          return \"\";\n-        }\n-        resolvedChunk = chunk;\n+        return \"\";\n       } else {\n         resolvedChunk = getValueAsJinjavaString(val);\n       }\n       return resolvedChunk.trim();\n+    } catch (TemplateSyntaxException e) {\n+      return chunk.trim();\n     } catch (Exception e) {\n       deferredWords.addAll(findDeferredWords(chunk));\n       return chunk.trim();\n@@ -347,7 +350,7 @@ public class ChunkResolver {\n       }\n       // don't defer numbers, values such as true/false, etc.\n       return interpreter.resolveELExpression(w, token.getLineNumber()) == null;\n-    } catch (DeferredValueException e) {\n+    } catch (DeferredValueException | TemplateSyntaxException e) {\n       return true;\n     }\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java b/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java\nindex 6251922..06af28b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategyTest.java\n@@ -60,8 +60,9 @@ public class EagerExpressionStrategyTest extends ExpressionNodeTest {\n \n   @Test\n   public void itPreservesRawTagsNestedInterpretation() {\n+    context.put(\"bar\", \"bar\");\n     assertExpectedOutput(\n-      \"{{ '{{ 12345 }}' }} {{ '{% print 'bar' %}' }} {{ 'not needed' }}\",\n+      \"{{ '{{ 12345 }}' }} {{ '{% print bar %}' }} {{ 'not needed' }}\",\n       \"12345 bar not needed\"\n     );\n   }\ndiff --git a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\nindex c6200e9..486a278 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n@@ -9,6 +9,7 @@ import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.interpret.Context;\n import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.fn.ELFunctionDefinition;\n import com.hubspot.jinjava.objects.collections.PyMap;\n import com.hubspot.jinjava.objects.date.PyishDate;\n import com.hubspot.jinjava.tree.parse.DefaultTokenScannerSymbols;\n@@ -33,8 +34,18 @@ public class ChunkResolverTest {\n   private Context context;\n \n   @Before\n-  public void setUp() {\n-    interpreter = new JinjavaInterpreter(new Jinjava().newInterpreter());\n+  public void setUp() throws Exception {\n+    Jinjava jinjava = new Jinjava();\n+    jinjava\n+      .getGlobalContext()\n+      .registerFunction(\n+        new ELFunctionDefinition(\n+          \"\",\n+          \"void_function\",\n+          this.getClass().getDeclaredMethod(\"voidFunction\", int.class)\n+        )\n+      );\n+    interpreter = new JinjavaInterpreter(jinjava.newInterpreter());\n     context = interpreter.getContext();\n     context.put(\"deferred\", DeferredValue.instance());\n     tagToken = new TagToken(\"{% foo %}\", 1, 2, SYMBOLS);\n@@ -289,4 +300,20 @@ public class ChunkResolverTest {\n     assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n       .isEqualTo(\"barfoo\\\\barfoo\");\n   }\n+\n+  @Test\n+  public void itOutputsEmptyForVoidFunctions() throws Exception {\n+    assertThat(\n+        WhitespaceUtils.unquoteAndUnescape(interpreter.render(\"{{ void_function(2) }}\"))\n+      )\n+      .isEmpty();\n+    assertThat(\n+        WhitespaceUtils.unquoteAndUnescape(\n+          makeChunkResolver(\"void_function(2)\").resolveChunks()\n+        )\n+      )\n+      .isEmpty();\n+  }\n+\n+  public static void voidFunction(int nothing) {}\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:50:22.602100Z", "commit_hash": "fc136638c7422db6d796352ed716fb919ccaa149", "commit_message": "Merge pull request #575 from HubSpot/chunk-resolver-fix\n\nReplicate handling of non-existent variables in ChunkResolver", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\nindex 571df86..effa456 100644\n--- a/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/util/ChunkResolver.java\n@@ -59,6 +59,8 @@ public class ChunkResolver {\n     ']'\n   );\n \n+  private static final String VARIABLE_REGEX = \"[A-Za-z_][\\\\w.]*\";\n+\n   private final char[] value;\n   private final int length;\n   private final Token token;\n@@ -160,16 +162,16 @@ public class ChunkResolver {\n       } else if (\n         chunkLevelMarker != null && CHUNK_LEVEL_MARKER_MAP.get(chunkLevelMarker) == c\n       ) {\n-        prevChar = c;\n+        setPrevChar(c);\n         break;\n       } else if (CHUNK_LEVEL_MARKER_MAP.containsKey(c)) {\n-        prevChar = c;\n+        setPrevChar(c);\n         tokenBuilder.append(c);\n         tokenBuilder.append(resolveChunk(String.join(\"\", getChunk(c))));\n         tokenBuilder.append(prevChar);\n         continue;\n       } else if (isTokenSplitter(c)) {\n-        prevChar = c;\n+        setPrevChar(c);\n \n         miniChunkBuilder.append(resolveToken(tokenBuilder.toString()));\n         tokenBuilder = new StringBuilder();\n@@ -182,7 +184,7 @@ public class ChunkResolver {\n         }\n         continue;\n       }\n-      prevChar = c;\n+      setPrevChar(c);\n       tokenBuilder.append(c);\n     }\n     miniChunkBuilder.append(resolveToken(tokenBuilder.toString()));\n@@ -190,6 +192,15 @@ public class ChunkResolver {\n     return chunks;\n   }\n \n+  private void setPrevChar(char c) {\n+    if (c == '\\\\' && prevChar == '\\\\') {\n+      // Backslashes cancel each other out for escaping when there's an even number.\n+      prevChar = '\\0';\n+    } else {\n+      prevChar = c;\n+    }\n+  }\n+\n   private boolean isTokenSplitter(char c) {\n     return (!Character.isLetterOrDigit(c) && c != '_' && c != '.');\n   }\n@@ -243,6 +254,10 @@ public class ChunkResolver {\n       String resolvedChunk;\n       Object val = interpreter.resolveELExpression(chunk, token.getLineNumber());\n       if (val == null) {\n+        if (chunk.matches(VARIABLE_REGEX)) {\n+          // Non-existent variable\n+          return \"\";\n+        }\n         resolvedChunk = chunk;\n       } else {\n         resolvedChunk = getValueAsJinjavaString(val);\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\nindex 7896082..c6200e9 100644\n--- a/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/ChunkResolverTest.java\n@@ -274,4 +274,19 @@ public class ChunkResolverTest {\n     assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n       .isEqualTo(\"\\n & \\n & \\\\n & \\\\n\");\n   }\n+\n+  @Test\n+  public void itOutputsUnknownVariablesAsEmpty() {\n+    ChunkResolver chunkResolver = makeChunkResolver(\"contact.some_odd_property\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"\");\n+  }\n+\n+  @Test\n+  public void itHandlesCancellingSlashes() {\n+    context.put(\"foo\", \"bar\");\n+    ChunkResolver chunkResolver = makeChunkResolver(\"foo ~ 'foo\\\\\\\\' ~ foo ~ 'foo'\");\n+    assertThat(WhitespaceUtils.unquoteAndUnescape(chunkResolver.resolveChunks()))\n+      .isEqualTo(\"barfoo\\\\barfoo\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T01:58:27.856011Z", "commit_hash": "1f0fe2fd8d58fd928d7ebc5004f97b10be1b1f61", "commit_message": "Fix deferred and non-deferred import var logic\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\nindex bd96f29..428570f 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerImportTag.java\n@@ -3,15 +3,20 @@ package com.hubspot.jinjava.lib.tag.eager;\n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.lib.tag.ImportTag;\n+import com.hubspot.jinjava.objects.collections.PyMap;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.parse.TagToken;\n import java.io.IOException;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n \n public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n \n@@ -60,6 +65,13 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n         } else {\n           child.getContext().getScope().put(Context.IMPORT_RESOURCE_ALIAS, contextVar);\n         }\n+        child\n+          .getContext()\n+          .getScope()\n+          .put(\n+            String.valueOf(child.getContext().get(Context.IMPORT_RESOURCE_ALIAS)),\n+            new PyMap(new HashMap<>())\n+          );\n       }\n       String output;\n       try {\n@@ -85,7 +97,7 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n         );\n       }\n \n-      ImportTag.integrateChild(contextVar, childBindings, child, interpreter);\n+      integrateChild(contextVar, childBindings, child, interpreter);\n       if (child.getContext().getEagerTokens().isEmpty() || output == null) {\n         output = \"\";\n       } else if (child.getContext().containsKey(Context.IMPORT_RESOURCE_ALIAS)) {\n@@ -114,4 +126,75 @@ public class EagerImportTag extends EagerStateChangingTag<ImportTag> {\n       interpreter.getContext().getCurrentPathStack().pop();\n     }\n   }\n+\n+  private static void integrateChild(\n+    String contextVar,\n+    Map<String, Object> childBindings,\n+    JinjavaInterpreter child,\n+    JinjavaInterpreter parent\n+  ) {\n+    if (StringUtils.isBlank(contextVar)) {\n+      for (MacroFunction macro : child.getContext().getGlobalMacros().values()) {\n+        parent.getContext().addGlobalMacro(macro);\n+      }\n+      childBindings.remove(Context.GLOBAL_MACROS_SCOPE_KEY);\n+      parent.getContext().putAll(childBindings);\n+    } else {\n+      for (Map.Entry<String, MacroFunction> macro : child\n+        .getContext()\n+        .getGlobalMacros()\n+        .entrySet()) {\n+        childBindings.put(macro.getKey(), macro.getValue());\n+      }\n+\n+      if (childBindings.get(contextVar) instanceof DeferredValue) {\n+        flattenDeferredContextVar(contextVar, childBindings);\n+      } else {\n+        for (Map.Entry<String, Object> aliasBinding : (\n+          (PyMap) childBindings.get(contextVar)\n+        ).entrySet()) {\n+          childBindings.put(aliasBinding.getKey(), aliasBinding.getValue());\n+        }\n+      }\n+      childBindings.remove(contextVar);\n+      childBindings.remove(Context.GLOBAL_MACROS_SCOPE_KEY);\n+      childBindings.remove(Context.IMPORT_RESOURCE_ALIAS);\n+      putBindingsOnContext(contextVar, childBindings, parent);\n+    }\n+  }\n+\n+  private static void putBindingsOnContext(\n+    String contextVar,\n+    Map<String, Object> childBindings,\n+    JinjavaInterpreter parent\n+  ) {\n+    Object parentContextVarValue = parent.getContext().getScope().get(contextVar);\n+    if (parentContextVarValue instanceof DeferredValue) {\n+      Object originalValue = ((DeferredValue) parentContextVarValue).getOriginalValue();\n+      if (originalValue instanceof PyMap) {\n+        ((PyMap) originalValue).putAll(childBindings);\n+        return;\n+      }\n+    }\n+    parent.getContext().put(contextVar, childBindings);\n+  }\n+\n+  private static void flattenDeferredContextVar(\n+    String contextVar,\n+    Map<String, Object> childBindings\n+  ) {\n+    DeferredValue contextVarMap = (DeferredValue) childBindings.get(contextVar);\n+    if (contextVarMap.getOriginalValue() instanceof PyMap) {\n+      for (Map.Entry<String, Object> deferredBinding : (\n+        (PyMap) contextVarMap.getOriginalValue()\n+      ).entrySet()) {\n+        childBindings.put(\n+          deferredBinding.getKey(),\n+          deferredBinding.getValue() instanceof DeferredValue\n+            ? deferredBinding.getValue()\n+            : DeferredValue.instance(deferredBinding.getValue())\n+        );\n+      }\n+    }\n+  }\n }\ndiff --git a/src/test/resources/eager/handles-non-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-non-deferred-import-vars.expected.jinja\nnew file mode 100644\nindex 0000000..2d8a8c1\n--- /dev/null\n+++ b/src/test/resources/eager/handles-non-deferred-import-vars.expected.jinja\n@@ -0,0 +1,5 @@\n+foo: Hello 3\n+bar: 22\n+---\n+simple.foo: Hello 7\n+simple.bar: 26\ndiff --git a/src/test/resources/eager/handles-non-deferred-import-vars.jinja b/src/test/resources/eager/handles-non-deferred-import-vars.jinja\nnew file mode 100644\nindex 0000000..bf42a2f\n--- /dev/null\n+++ b/src/test/resources/eager/handles-non-deferred-import-vars.jinja\n@@ -0,0 +1,9 @@\n+{%- set myname = (1 + 2) -%}\n+{%- from \"macro-and-set.jinja\" import foo, bar -%}\n+foo: {{ foo() }}\n+bar: {{ bar }}\n+---\n+{%- set myname = (3 + 4) -%}\n+{%- import \"macro-and-set.jinja\" as simple -%}\n+simple.foo: {{ simple.foo() }}\n+simple.bar: {{ simple.bar }}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/EagerTest.java b/src/test/java/com/hubspot/jinjava/EagerTest.java\nindex dc46dd0..f3d881d 100644\n--- a/src/test/java/com/hubspot/jinjava/EagerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/EagerTest.java\n@@ -754,6 +754,14 @@ public class EagerTest {\n   }\n \n   @Test\n+  public void itHandlesNonDeferredImportVars() {\n+    expectedTemplateInterpreter.assertExpectedNonEagerOutput(\n+      \"handles-non-deferred-import-vars\"\n+    );\n+    expectedTemplateInterpreter.assertExpectedOutput(\"handles-non-deferred-import-vars\");\n+  }\n+\n+  @Test\n   public void itHandlesDeferredFromImportAs() {\n     expectedTemplateInterpreter.assertExpectedOutput(\"handles-deferred-from-import-as\");\n   }\ndiff --git a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\nindex 747182b..19f438a 100644\n--- a/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n+++ b/src/test/resources/eager/handles-deferred-import-vars.expected.jinja\n@@ -4,8 +4,8 @@\n \n foo: {% macro foo() %}Hello {{ myname }}{% endmacro %}{{ foo() }}\n bar: {{ bar }}\n----{% set myname = deferred + 7 %}{% set simple = {} %}\n-{% do simple.update({'bar': myname + 19}) %}\n+---{% set myname = deferred + 7 %}\n+{% set simple = {} %}{% do simple.update({'bar': myname + 19}) %}\n {% macro foo() %}Hello {{ myname }}{% endmacro %}{{ foo() }}\n \n simple.foo: {% macro simple.foo() %}Hello {{ myname }}{% endmacro %}{{ simple.foo() }}\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:04:51.265874Z", "commit_hash": "04efdf99007c1bbba10e6ad6333829dfcbd10a5b", "commit_message": "Merge pull request #512 from Jolmberg/ipaddrfilter-accept-ip-address-without-prefix\n\nAccept ip address without network prefix in ipaddr('address') filter", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java\nindex 68a4b50..4412dc3 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java\n@@ -202,7 +202,7 @@ public class IpAddrFilter implements Filter {\n       parts.add(\"0\");\n     }\n \n-    if (parts.size() != 2) {\n+    if (parts.size() > 2) {\n       return null;\n     }\n \n@@ -215,6 +215,10 @@ public class IpAddrFilter implements Filter {\n       return ipAddress;\n     }\n \n+    if (parts.size() != 2) {\n+      return null;\n+    }\n+\n     String prefixString = parts.get(1);\n     Integer prefix;\n     try {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java\nindex 1cd9a6f..d8a097a 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java\n@@ -134,6 +134,8 @@ public class IpAddrFilterTest {\n   public void itReturnsIpv4AddressAddress() {\n     assertThat(ipAddrFilter.filter(\"192.168.0.1/20\", interpreter, \"address\"))\n       .isEqualTo(\"192.168.0.1\");\n+    assertThat(ipAddrFilter.filter(\"192.168.0.2\", interpreter, \"address\"))\n+      .isEqualTo(\"192.168.0.2\");\n   }\n \n   @Test\n@@ -146,6 +148,14 @@ public class IpAddrFilterTest {\n         )\n       )\n       .isEqualTo(\"1200:0000:AB00:1234:0000:2552:7777:1313\");\n+    assertThat(\n+        ipAddrFilter.filter(\n+          \"1200:0000:AB00:1234:0000:2552:7777:1314\",\n+          interpreter,\n+          \"address\"\n+        )\n+      )\n+      .isEqualTo(\"1200:0000:AB00:1234:0000:2552:7777:1314\");\n   }\n \n   @Test\n@@ -275,7 +285,12 @@ public class IpAddrFilterTest {\n       null,\n       13\n     );\n-    List<Object> expectedAddresses = Arrays.asList(\"192.168.32.0\", \"fe80::100\");\n+    List<Object> expectedAddresses = Arrays.asList(\n+      \"192.24.2.1\",\n+      \"::1\",\n+      \"192.168.32.0\",\n+      \"fe80::100\"\n+    );\n     assertThat(ipAddrFilter.filter(inputAddresses, interpreter, \"address\"))\n       .isEqualTo(expectedAddresses);\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:07:14.859395Z", "commit_hash": "0d4ee1e6f85264a33dc5189ca2f1a5469f92668c", "commit_message": "Accept ip address without network prefix in ipaddr('address') filter\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java\nindex 68a4b50..4412dc3 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/IpAddrFilter.java\n@@ -202,7 +202,7 @@ public class IpAddrFilter implements Filter {\n       parts.add(\"0\");\n     }\n \n-    if (parts.size() != 2) {\n+    if (parts.size() > 2) {\n       return null;\n     }\n \n@@ -215,6 +215,10 @@ public class IpAddrFilter implements Filter {\n       return ipAddress;\n     }\n \n+    if (parts.size() != 2) {\n+      return null;\n+    }\n+\n     String prefixString = parts.get(1);\n     Integer prefix;\n     try {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java\nindex 1cd9a6f..d8a097a 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/IpAddrFilterTest.java\n@@ -134,6 +134,8 @@ public class IpAddrFilterTest {\n   public void itReturnsIpv4AddressAddress() {\n     assertThat(ipAddrFilter.filter(\"192.168.0.1/20\", interpreter, \"address\"))\n       .isEqualTo(\"192.168.0.1\");\n+    assertThat(ipAddrFilter.filter(\"192.168.0.2\", interpreter, \"address\"))\n+      .isEqualTo(\"192.168.0.2\");\n   }\n \n   @Test\n@@ -146,6 +148,14 @@ public class IpAddrFilterTest {\n         )\n       )\n       .isEqualTo(\"1200:0000:AB00:1234:0000:2552:7777:1313\");\n+    assertThat(\n+        ipAddrFilter.filter(\n+          \"1200:0000:AB00:1234:0000:2552:7777:1314\",\n+          interpreter,\n+          \"address\"\n+        )\n+      )\n+      .isEqualTo(\"1200:0000:AB00:1234:0000:2552:7777:1314\");\n   }\n \n   @Test\n@@ -275,7 +285,12 @@ public class IpAddrFilterTest {\n       null,\n       13\n     );\n-    List<Object> expectedAddresses = Arrays.asList(\"192.168.32.0\", \"fe80::100\");\n+    List<Object> expectedAddresses = Arrays.asList(\n+      \"192.24.2.1\",\n+      \"::1\",\n+      \"192.168.32.0\",\n+      \"fe80::100\"\n+    );\n     assertThat(ipAddrFilter.filter(inputAddresses, interpreter, \"address\"))\n       .isEqualTo(expectedAddresses);\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:09:25.376869Z", "commit_hash": "e1c034592760554b9aa060e0cba8abb38b50b6c8", "commit_message": "Revert \"Revert \"Fix merge conflict'\"\"\n\nThis reverts commit 5b944cb5e6422e3256b63c5d91391edbd49a9766.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex 4d8b918..9a355f6 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -4,14 +4,23 @@ import static de.odysseus.el.tree.impl.Builder.Feature.METHOD_INVOCATIONS;\n import static de.odysseus.el.tree.impl.Builder.Feature.NULL_PROPERTIES;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.COLON;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.COMMA;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.EQ;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.FALSE;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.GE;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.GT;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.IDENTIFIER;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.LBRACK;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.LE;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.LPAREN;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.LT;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.NE;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.QUESTION;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.RBRACK;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.RPAREN;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.TRUE;\n \n import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n import de.odysseus.el.tree.impl.Builder;\n import de.odysseus.el.tree.impl.Builder.Feature;\n import de.odysseus.el.tree.impl.Parser;\n@@ -33,6 +42,7 @@ import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import javax.el.ELException;\n \n public class ExtendedParser extends Parser {\n@@ -53,6 +63,19 @@ public class ExtendedParser extends Parser {\n   static final Scanner.ExtensionToken TRUNC_DIV = TruncDivOperator.TOKEN;\n   static final Scanner.ExtensionToken POWER_OF = PowerOfOperator.TOKEN;\n \n+  static final Set<Symbol> VALID_SYMBOLS_FOR_EXP_TEST = Sets.newHashSet(\n+    IDENTIFIER,\n+    EQ,\n+    NE,\n+    LT,\n+    LE,\n+    GT,\n+    GE,\n+    TRUE,\n+    FALSE,\n+    CollectionMembershipOperator.TOKEN.getSymbol()\n+  );\n+\n   static {\n     ExtendedScanner.addKeyToken(IF);\n     ExtendedScanner.addKeyToken(ELSE);\n@@ -396,13 +419,14 @@ public class ExtendedParser extends Parser {\n           } else if (\n             \"is\".equals(getToken().getImage()) &&\n             \"not\".equals(lookahead(0).getImage()) &&\n-            lookahead(1).getSymbol() == IDENTIFIER\n+            isPossibleExpTest(lookahead(1).getSymbol())\n           ) {\n             consumeToken(); // 'is'\n             consumeToken(); // 'not'\n             v = buildAstMethodForIdentifier(v, \"evaluateNegated\");\n           } else if (\n-            \"is\".equals(getToken().getImage()) && lookahead(0).getSymbol() == IDENTIFIER\n+            \"is\".equals(getToken().getImage()) &&\n+            isPossibleExpTest(lookahead(0).getSymbol())\n           ) {\n             consumeToken(); // 'is'\n             v = buildAstMethodForIdentifier(v, \"evaluate\");\n@@ -413,6 +437,10 @@ public class ExtendedParser extends Parser {\n     }\n   }\n \n+  private boolean isPossibleExpTest(Symbol symbol) {\n+    return VALID_SYMBOLS_FOR_EXP_TEST.contains(symbol);\n+  }\n+\n   private AstNode buildAstMethodForIdentifier(AstNode astNode, String property)\n     throws ScanException, ParseException {\n     String exptestName = consumeToken().getImage();\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java b/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\nindex 1a0cff6..2ff1cb9 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\n@@ -10,6 +10,7 @@ public enum InvalidReason {\n   JSON_WRITE(\"object could not be written as a string\"),\n   REGEX(\"with value %s must be valid regex\"),\n   POSITIVE_NUMBER(\"with value %s must be a positive number\"),\n+  NOT_ITERABLE(\"with value '%s' must be iterable\"),\n   NON_ZERO_NUMBER(\"with value %s must be non-zero\"),\n   NULL_IN_LIST(\"of type 'list' cannot contain a null item\"),\n   NULL_ATTRIBUTE_IN_LIST(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java b/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\nindex f156cd8..b14dc84 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\n@@ -15,6 +15,20 @@ public class ExpTestLibrary extends SimpleLibrary<ExpTest> {\n       IsDefinedExpTest.class,\n       IsDivisibleByExpTest.class,\n       IsEqualToExpTest.class,\n+      IsEqExpTest.class,\n+      IsEqualsSymbolExpTest.class,\n+      IsNeExpTest.class,\n+      IsNotEqualToSymbolExpTest.class,\n+      IsLtTest.class,\n+      IsLessThanExpTest.class,\n+      IsLessThanSymbolExpTest.class,\n+      IsLeTest.class,\n+      IsLessThanOrEqualToSymbolExpTest.class,\n+      IsGtTest.class,\n+      IsGreaterThanExpTest.class,\n+      IsGreaterThanSymbolExpTest.class,\n+      IsGeTest.class,\n+      IsGreaterThanOrEqualToSymbolExpTest.class,\n       IsEvenExpTest.class,\n       IsIterableExpTest.class,\n       IsLowerExpTest.class,\n@@ -24,14 +38,20 @@ public class ExpTestLibrary extends SimpleLibrary<ExpTest> {\n       IsOddExpTest.class,\n       IsSameAsExpTest.class,\n       IsSequenceExpTest.class,\n+      IsBooleanExpTest.class,\n+      IsIntegerExpTest.class,\n+      IsFloatExpTest.class,\n       IsStringExpTest.class,\n       IsStringContainingExpTest.class,\n       IsStringStartingWithExpTest.class,\n+      IsTrueExpTest.class,\n+      IsFalseExpTest.class,\n       IsTruthyExpTest.class,\n       IsUndefinedExpTest.class,\n       IsUpperExpTest.class,\n       IsContainingAllExpTest.class,\n       IsContainingExpTest.class,\n+      IsInExpTest.class,\n       IsWithinExpTest.class\n     );\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java\nnew file mode 100644\nindex 0000000..89b0534\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java\n@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a boolean (in a strict sense, not in its ability to evaluate to a truthy expression)\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if true is boolean %}\\n\" +\n+      \"      <!--this code will always render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsBooleanExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"boolean\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Boolean;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java\nnew file mode 100644\nindex 0000000..8f57b6c\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"equalto\")\n+public class IsEqExpTest extends IsEqualToExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"eq\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java\nnew file mode 100644\nindex 0000000..2add76e\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"equalto\")\n+public class IsEqualsSymbolExpTest extends IsEqualToExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"==\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java\nnew file mode 100644\nindex 0000000..54b6711\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java\n@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a boolean and false\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if false is false %}\\n\" +\n+      \"      <!--this code will always render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsFalseExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"false\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Boolean && !(Boolean) var;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java\nnew file mode 100644\nindex 0000000..e77cf54\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java\n@@ -0,0 +1,35 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import java.math.BigDecimal;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a float\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if num is float %}\\n\" +\n+      \"      <!--code to render if num contains an floating point value-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsFloatExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"float\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return (\n+      var instanceof Double ||\n+      var instanceof Float ||\n+      (var instanceof BigDecimal && ((BigDecimal) var).scale() > 0)\n+    );\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java\nnew file mode 100644\nindex 0000000..7e9a9f2\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is greater than or equal to the second object's value\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is ge 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 42\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"ge\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsGeTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"ge\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.ge(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java\nnew file mode 100644\nindex 0000000..8e9198f\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"gt\")\n+public class IsGreaterThanExpTest extends IsGtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"greaterthan\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java\nnew file mode 100644\nindex 0000000..8d69b85\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"ge\")\n+public class IsGreaterThanOrEqualToSymbolExpTest extends IsGeTest {\n+\n+  @Override\n+  public String getName() {\n+    return \">=\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java\nnew file mode 100644\nindex 0000000..0b0c0f1\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"gt\")\n+public class IsGreaterThanSymbolExpTest extends IsGtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \">\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java\nnew file mode 100644\nindex 0000000..0e24de3\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is strictly greater than the second\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is gt 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 43\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"gt\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsGtTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"gt\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.gt(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java\nnew file mode 100644\nindex 0000000..6b6c4fe\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java\n@@ -0,0 +1,50 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static com.hubspot.jinjava.lib.exptest.IsIterableExpTest.isIterable;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.InvalidArgumentException;\n+import com.hubspot.jinjava.interpret.InvalidReason;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if value is contained in the iterable\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  params = @JinjavaParam(\n+    value = \"list\",\n+    type = \"object\",\n+    desc = \"The iterable to check for the value\",\n+    required = true\n+  ),\n+  snippets = {\n+    @JinjavaSnippet(code = \"{{ 2 is in [1, 2, 3] }}\"),\n+    @JinjavaSnippet(code = \"{{ 'b' is in 'abc' }}\"),\n+    @JinjavaSnippet(code = \"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\")\n+  }\n+)\n+public class IsInExpTest extends CollectionExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"in\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object value, JinjavaInterpreter interpreter, Object... args) {\n+    if (args == null || args.length == 0) {\n+      return false;\n+    }\n+    if (!isIterable(args[0])) {\n+      throw new InvalidArgumentException(\n+        interpreter,\n+        this,\n+        InvalidReason.NOT_ITERABLE,\n+        0,\n+        args[0]\n+      );\n+    }\n+    return (Boolean) COLLECTION_MEMBERSHIP_OPERATOR.apply(TYPE_CONVERTER, value, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java\nnew file mode 100644\nindex 0000000..79f646e\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java\n@@ -0,0 +1,39 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is an integer or long\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if num is integer %}\\n\" +\n+      \"      <!--code to render if num contains an integral value-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsIntegerExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"integer\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return (\n+      var instanceof Byte ||\n+      var instanceof Short ||\n+      var instanceof Integer ||\n+      var instanceof Long ||\n+      var instanceof BigInteger ||\n+      (var instanceof BigDecimal && ((BigDecimal) var).scale() == 0)\n+    );\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\nindex c7a6e59..94d1f80 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\n@@ -4,6 +4,7 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.objects.SafeString;\n \n @JinjavaDoc(\n   value = \"Return true if the object is iterable (sequence, dict, etc)\",\n@@ -25,9 +26,15 @@ public class IsIterableExpTest implements ExpTest {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return isIterable(var);\n+  }\n+\n+  static boolean isIterable(Object ob) {\n     return (\n-      var != null &&\n-      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n+      ob instanceof Object[] ||\n+      ob instanceof Iterable ||\n+      ob instanceof String ||\n+      ob instanceof SafeString\n     );\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java\nnew file mode 100644\nindex 0000000..956f3a2\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is less than or equal to the second object's value\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is le 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 42\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"le\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsLeTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"le\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.le(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java\nnew file mode 100644\nindex 0000000..32f6aea\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"lt\")\n+public class IsLessThanExpTest extends IsLtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"lessthan\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java\nnew file mode 100644\nindex 0000000..b3bb1e1\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"le\")\n+public class IsLessThanOrEqualToSymbolExpTest extends IsLtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"<=\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java\nnew file mode 100644\nindex 0000000..16dec5f\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"lt\")\n+public class IsLessThanSymbolExpTest extends IsLtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"<\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java\nnew file mode 100644\nindex 0000000..afea491\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is strictly less than the second\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is lt 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 41\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"lt\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsLtTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"lt\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.lt(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java\nnew file mode 100644\nindex 0000000..311a4e1\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if an object has the different value from another object\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to check inequality against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is ne 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 43 \\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"email\\\", \\\"ne\\\", \\\"foo@bar.invalid\\\") }}\"\n+    )\n+  }\n+)\n+public class IsNeExpTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"ne\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to check inequality against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.ne(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java\nnew file mode 100644\nindex 0000000..5a715d6\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"ne\")\n+public class IsNotEqualToSymbolExpTest extends IsNeExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"!=\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\nindex 0ed5bc7..e2e2cfa 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\n@@ -1,5 +1,7 @@\n package com.hubspot.jinjava.lib.exptest;\n \n+import static com.hubspot.jinjava.lib.exptest.IsIterableExpTest.isIterable;\n+\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n@@ -25,9 +27,6 @@ public class IsSequenceExpTest implements ExpTest {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return (\n-      var != null &&\n-      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n-    );\n+    return isIterable(var);\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java\nnew file mode 100644\nindex 0000000..c1c5407\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java\n@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a boolean and true\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if false is true %}\\n\" +\n+      \"      <!--this code will never render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsTrueExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"true\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Boolean && (Boolean) var;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\nindex 4b7501d..911dbb8 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\n@@ -12,7 +12,7 @@ import com.hubspot.jinjava.util.ObjectTruthValue;\n   snippets = {\n     @JinjavaSnippet(\n       code = \"{% if variable is truthy %}\\n\" +\n-      \"      <!--code to render a  boolean variable is True-->\\n\" +\n+      \"      <!--code to render a boolean variable is True-->\\n\" +\n       \"{% endif %}\"\n     )\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\nindex 42132ca..0c5e58b 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\n@@ -1,31 +1,9 @@\n package com.hubspot.jinjava.lib.exptest;\n \n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n \n-@JinjavaDoc(\n-  value = \"Returns true if a value is within a list\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  params = @JinjavaParam(\n-    value = \"list\",\n-    type = \"list\",\n-    desc = \"A list to check if the value is in.\",\n-    required = true\n-  ),\n-  snippets = { @JinjavaSnippet(code = \"{{ 2 is within [1, 2, 3] }}\") }\n-)\n-public class IsWithinExpTest extends CollectionExpTest {\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args == null || args.length == 0) {\n-      return false;\n-    }\n-\n-    return (Boolean) COLLECTION_MEMBERSHIP_OPERATOR.apply(TYPE_CONVERTER, var, args[0]);\n-  }\n+@JinjavaDoc(value = \"\", aliasOf = \"in\")\n+public class IsWithinExpTest extends IsInExpTest {\n \n   @Override\n   public String getName() {\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java\nnew file mode 100644\nindex 0000000..4c906f4\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java\n@@ -0,0 +1,32 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class BooleanExpTestsTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsBoolean() {\n+    assertThat(jinjava.render(\"{{ 1 is boolean }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 'true' is boolean }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ true is boolean }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testBooleanExpTests() {\n+    assertThat(jinjava.render(\"{{ true is true }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ true is false }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java\nnew file mode 100644\nindex 0000000..0e7e72b\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java\n@@ -0,0 +1,76 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.hubspot.jinjava.Jinjava;\n+import com.hubspot.jinjava.objects.date.PyishDate;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ComparisonExpTestsTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void itComparesNumbers() {\n+    assertThat(jinjava.render(\"{{ 4 is lt 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 5 is le 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is le 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is gt 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is gt 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is ge 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is ge 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is ne 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is ne 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void itComparesStringsLexicographically() {\n+    assertThat(jinjava.render(\"{{ 'aa' is lt 'aa' }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 'aa' is lt 'aaa' }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'aa' is lt 'b' }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void itComparesDates() {\n+    Map<String, Object> vars = ImmutableMap.of(\n+      \"now\",\n+      PyishDate.from(Instant.now()),\n+      \"then\",\n+      new PyishDate(1490171923745L)\n+    );\n+    assertThat(jinjava.render(\"{{ now is lt then}}\", vars)).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ then is lt now}}\", vars)).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void itComparesAcrossType() {\n+    assertThat(jinjava.render(\"{{ 4.1 is lt 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ true ne 'true' }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ true ne '' }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testAliases() {\n+    assertThat(jinjava.render(\"{{ 4 is lessthan 5 }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is greaterthan 5 }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is < 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is > 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is <= 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is >= 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is != 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java\nnew file mode 100644\nindex 0000000..376b730\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java\n@@ -0,0 +1,57 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsFloatExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testValidFloats() {\n+    assertThat(jinjava.render(\"{{ 4.1 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 0.0 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4e4 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4e-30 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testInvalidFloats() {\n+    assertThat(jinjava.render(\"{{ 4 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ -1 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 0 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 'four point oh' is float }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testWithAddFilter() {\n+    assertThat(jinjava.render(\"{{ (4|add(4)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ (4|add(4.5)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ (4|add(-4.5)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(\n+        jinjava.render(\n+          \"{{ (4|add(4.0000000000000000000001)) is float }}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ (4|add(40.0)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(\n+        jinjava.render(\"{{ (4|add(1000000000000000000)) is float }}\", new HashMap<>())\n+      )\n+      .isEqualTo(\"false\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\nnew file mode 100644\nindex 0000000..864e514\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsInExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsInList() {\n+    assertThat(jinjava.render(\"{{ 2 is in [1, 2] }}\", new HashMap<>())).isEqualTo(\"true\");\n+    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n+    //    assertThat(jinjava.render(\"{{ 2 is in ['one', 2] }}\", new HashMap<>()))\n+    //      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 2 is in [1] }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testIsInString() {\n+    assertThat(jinjava.render(\"{{ 'b' is in 'ab' }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'b' is in 'a' }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testIsInDict() {\n+    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n+    //    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\", new HashMap<>()))\n+    //      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1'} }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testNull() {\n+    assertThat(jinjava.render(\"{{ null is in [null] }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ null is in [2] }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 2 is in [null] }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThatThrownBy(() -> jinjava.render(\"{{ 2 is in null }}\", new HashMap<>()))\n+      .hasMessageContaining(\"1st argument with value 'null' must be iterable\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java\nnew file mode 100644\nindex 0000000..1c96a5b\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java\n@@ -0,0 +1,63 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsIntegerExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testValidIntegers() {\n+    assertThat(jinjava.render(\"{{ 4 is integer }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ -1 is integer }}\", new HashMap<>())).isEqualTo(\"true\");\n+    long number = Integer.MAX_VALUE;\n+    assertThat(\n+        jinjava.render(String.format(\"{{ %d is integer }}\", number + 1), new HashMap<>())\n+      )\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 1000000000000000000 is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testInvalidIntegers() {\n+    assertThat(jinjava.render(\"{{ 'four' is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ false is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4.1 is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testWithAddFilter() {\n+    assertThat(jinjava.render(\"{{ (4|add(4)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ (4|add(4.5)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ (4|add(-4.5)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(\n+        jinjava.render(\n+          \"{{ (4|add(4.0000000000000000000001)) is integer }}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ (4|add(40.0)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(\n+        jinjava.render(\"{{ (4|add(1000000000000000000)) is integer }}\", new HashMap<>())\n+      )\n+      .isEqualTo(\"true\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java\nnew file mode 100644\nindex 0000000..ad79cf0\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java\n@@ -0,0 +1,32 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsIterableExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsIterable() {\n+    assertThat(jinjava.render(\"{{ null is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is iterable }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ [4] is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ [4, 'four'] is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ {'k1': 'v2'} is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'this string' is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+  }\n+}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\nindex f6fb7b9..b835f91 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\n@@ -74,4 +74,10 @@ public class IsEqualToExpTestTest {\n       )\n       .isEqualTo(\"false\");\n   }\n+\n+  @Test\n+  public void testAliases() {\n+    assertThat(jinjava.render(\"{{ 4 is eq 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is == 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\nindex 6d15bf0..a06318d 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\n@@ -26,16 +26,17 @@ public class IsWithinExpTestTest {\n       .isEqualTo(\"pass\");\n   }\n \n-  @Test\n-  public void itFailsOnNullValueInSequence() {\n-    assertThat(\n-        jinjava.render(\n-          String.format(IN_TEMPLATE, \"null\", \"[1, 2, null]\"),\n-          new HashMap<>()\n-        )\n-      )\n-      .isEqualTo(\"fail\");\n-  }\n+  //    TODO: Uncomment out when ColectionMemberShipOperator.java changes get approved\n+  //  @Test\n+  //  public void itPassesOnNullValueInSequence() {\n+  //    assertThat(\n+  //        jinjava.render(\n+  //          String.format(IN_TEMPLATE, \"null\", \"[1, 2, null]\"),\n+  //          new HashMap<>()\n+  //        )\n+  //      )\n+  //      .isEqualTo(\"pass\");\n+  //  }\n \n   @Test\n   public void itFailsOnValueNotInSequence() {\n@@ -54,12 +55,6 @@ public class IsWithinExpTestTest {\n   }\n \n   @Test\n-  public void itFailsOnNullSequence() {\n-    assertThat(jinjava.render(String.format(IN_TEMPLATE, \"2\", \"null\"), new HashMap<>()))\n-      .isEqualTo(\"fail\");\n-  }\n-\n-  @Test\n   public void itPerformsTypeConversion() {\n     assertThat(\n         jinjava.render(\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\nindex 8e60487..6276b71 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\n@@ -49,6 +49,17 @@ public class SelectAttrFilterTest {\n   }\n \n   @Test\n+  public void selectAttrWithSymbolicExp() {\n+    assertThat(\n+        jinjava.render(\n+          \"{{ users|selectattr('isActive', '==', 'true') }}\",\n+          new HashMap<String, Object>()\n+        )\n+      )\n+      .isEqualTo(\"[1]\");\n+  }\n+\n+  @Test\n   public void selectAttrWithIsEqualToExp() {\n     assertThat(\n         jinjava.render(\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:11:14.543301Z", "commit_hash": "5b944cb5e6422e3256b63c5d91391edbd49a9766", "commit_message": "Revert \"Fix merge conflict'\"\n\nThis reverts commit 1cbe09b8ca37db83714b7defb1536ee6d21cdc01.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex 9a355f6..4d8b918 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -4,23 +4,14 @@ import static de.odysseus.el.tree.impl.Builder.Feature.METHOD_INVOCATIONS;\n import static de.odysseus.el.tree.impl.Builder.Feature.NULL_PROPERTIES;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.COLON;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.COMMA;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.EQ;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.FALSE;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.GE;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.GT;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.IDENTIFIER;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.LBRACK;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.LE;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.LPAREN;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.LT;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.NE;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.QUESTION;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.RBRACK;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.RPAREN;\n-import static de.odysseus.el.tree.impl.Scanner.Symbol.TRUE;\n \n import com.google.common.collect.Lists;\n-import com.google.common.collect.Sets;\n import de.odysseus.el.tree.impl.Builder;\n import de.odysseus.el.tree.impl.Builder.Feature;\n import de.odysseus.el.tree.impl.Parser;\n@@ -42,7 +33,6 @@ import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import javax.el.ELException;\n \n public class ExtendedParser extends Parser {\n@@ -63,19 +53,6 @@ public class ExtendedParser extends Parser {\n   static final Scanner.ExtensionToken TRUNC_DIV = TruncDivOperator.TOKEN;\n   static final Scanner.ExtensionToken POWER_OF = PowerOfOperator.TOKEN;\n \n-  static final Set<Symbol> VALID_SYMBOLS_FOR_EXP_TEST = Sets.newHashSet(\n-    IDENTIFIER,\n-    EQ,\n-    NE,\n-    LT,\n-    LE,\n-    GT,\n-    GE,\n-    TRUE,\n-    FALSE,\n-    CollectionMembershipOperator.TOKEN.getSymbol()\n-  );\n-\n   static {\n     ExtendedScanner.addKeyToken(IF);\n     ExtendedScanner.addKeyToken(ELSE);\n@@ -419,14 +396,13 @@ public class ExtendedParser extends Parser {\n           } else if (\n             \"is\".equals(getToken().getImage()) &&\n             \"not\".equals(lookahead(0).getImage()) &&\n-            isPossibleExpTest(lookahead(1).getSymbol())\n+            lookahead(1).getSymbol() == IDENTIFIER\n           ) {\n             consumeToken(); // 'is'\n             consumeToken(); // 'not'\n             v = buildAstMethodForIdentifier(v, \"evaluateNegated\");\n           } else if (\n-            \"is\".equals(getToken().getImage()) &&\n-            isPossibleExpTest(lookahead(0).getSymbol())\n+            \"is\".equals(getToken().getImage()) && lookahead(0).getSymbol() == IDENTIFIER\n           ) {\n             consumeToken(); // 'is'\n             v = buildAstMethodForIdentifier(v, \"evaluate\");\n@@ -437,10 +413,6 @@ public class ExtendedParser extends Parser {\n     }\n   }\n \n-  private boolean isPossibleExpTest(Symbol symbol) {\n-    return VALID_SYMBOLS_FOR_EXP_TEST.contains(symbol);\n-  }\n-\n   private AstNode buildAstMethodForIdentifier(AstNode astNode, String property)\n     throws ScanException, ParseException {\n     String exptestName = consumeToken().getImage();\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java b/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\nindex 2ff1cb9..1a0cff6 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\n@@ -10,7 +10,6 @@ public enum InvalidReason {\n   JSON_WRITE(\"object could not be written as a string\"),\n   REGEX(\"with value %s must be valid regex\"),\n   POSITIVE_NUMBER(\"with value %s must be a positive number\"),\n-  NOT_ITERABLE(\"with value '%s' must be iterable\"),\n   NON_ZERO_NUMBER(\"with value %s must be non-zero\"),\n   NULL_IN_LIST(\"of type 'list' cannot contain a null item\"),\n   NULL_ATTRIBUTE_IN_LIST(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java b/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\nindex b14dc84..f156cd8 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\n@@ -15,20 +15,6 @@ public class ExpTestLibrary extends SimpleLibrary<ExpTest> {\n       IsDefinedExpTest.class,\n       IsDivisibleByExpTest.class,\n       IsEqualToExpTest.class,\n-      IsEqExpTest.class,\n-      IsEqualsSymbolExpTest.class,\n-      IsNeExpTest.class,\n-      IsNotEqualToSymbolExpTest.class,\n-      IsLtTest.class,\n-      IsLessThanExpTest.class,\n-      IsLessThanSymbolExpTest.class,\n-      IsLeTest.class,\n-      IsLessThanOrEqualToSymbolExpTest.class,\n-      IsGtTest.class,\n-      IsGreaterThanExpTest.class,\n-      IsGreaterThanSymbolExpTest.class,\n-      IsGeTest.class,\n-      IsGreaterThanOrEqualToSymbolExpTest.class,\n       IsEvenExpTest.class,\n       IsIterableExpTest.class,\n       IsLowerExpTest.class,\n@@ -38,20 +24,14 @@ public class ExpTestLibrary extends SimpleLibrary<ExpTest> {\n       IsOddExpTest.class,\n       IsSameAsExpTest.class,\n       IsSequenceExpTest.class,\n-      IsBooleanExpTest.class,\n-      IsIntegerExpTest.class,\n-      IsFloatExpTest.class,\n       IsStringExpTest.class,\n       IsStringContainingExpTest.class,\n       IsStringStartingWithExpTest.class,\n-      IsTrueExpTest.class,\n-      IsFalseExpTest.class,\n       IsTruthyExpTest.class,\n       IsUndefinedExpTest.class,\n       IsUpperExpTest.class,\n       IsContainingAllExpTest.class,\n       IsContainingExpTest.class,\n-      IsInExpTest.class,\n       IsWithinExpTest.class\n     );\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java\ndeleted file mode 100644\nindex 89b0534..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-\n-@JinjavaDoc(\n-  value = \"Return true if object is a boolean (in a strict sense, not in its ability to evaluate to a truthy expression)\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if true is boolean %}\\n\" +\n-      \"      <!--this code will always render-->\\n\" +\n-      \"{% endif %}\"\n-    )\n-  }\n-)\n-public class IsBooleanExpTest implements ExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"boolean\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return var instanceof Boolean;\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java\ndeleted file mode 100644\nindex 8f57b6c..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"equalto\")\n-public class IsEqExpTest extends IsEqualToExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"eq\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java\ndeleted file mode 100644\nindex 2add76e..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"equalto\")\n-public class IsEqualsSymbolExpTest extends IsEqualToExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"==\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java\ndeleted file mode 100644\nindex 54b6711..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-\n-@JinjavaDoc(\n-  value = \"Return true if object is a boolean and false\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if false is false %}\\n\" +\n-      \"      <!--this code will always render-->\\n\" +\n-      \"{% endif %}\"\n-    )\n-  }\n-)\n-public class IsFalseExpTest implements ExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"false\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return var instanceof Boolean && !(Boolean) var;\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java\ndeleted file mode 100644\nindex e77cf54..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java\n+++ /dev/null\n@@ -1,35 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import java.math.BigDecimal;\n-\n-@JinjavaDoc(\n-  value = \"Return true if object is a float\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if num is float %}\\n\" +\n-      \"      <!--code to render if num contains an floating point value-->\\n\" +\n-      \"{% endif %}\"\n-    )\n-  }\n-)\n-public class IsFloatExpTest implements ExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"float\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return (\n-      var instanceof Double ||\n-      var instanceof Float ||\n-      (var instanceof BigDecimal && ((BigDecimal) var).scale() > 0)\n-    );\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java\ndeleted file mode 100644\nindex 7e9a9f2..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.el.TruthyTypeConverter;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n-import de.odysseus.el.misc.BooleanOperations;\n-import de.odysseus.el.misc.TypeConverter;\n-\n-@JinjavaDoc(\n-  value = \"Returns true if the first object's value is greater than or equal to the second object's value\",\n-  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n-  params = {\n-    @JinjavaParam(\n-      value = \"other\",\n-      type = \"object\",\n-      desc = \"Another object to compare against\",\n-      required = true\n-    )\n-  },\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if foo.expression is ge 42 %}\\n\" +\n-      \"    the foo attribute evaluates to the constant 42\\n\" +\n-      \"{% endif %}\\n\"\n-    ),\n-    @JinjavaSnippet(\n-      desc = \"Usage with the selectattr filter\",\n-      code = \"{{ users|selectattr(\\\"num\\\", \\\"ge\\\", \\\"2\\\") }}\"\n-    )\n-  }\n-)\n-public class IsGeTest implements ExpTest {\n-  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n-\n-  @Override\n-  public String getName() {\n-    return \"ge\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args.length == 0) {\n-      throw new TemplateSyntaxException(\n-        interpreter,\n-        getName(),\n-        \"requires 1 argument (other object to compare against)\"\n-      );\n-    }\n-\n-    return BooleanOperations.ge(TYPE_CONVERTER, var, args[0]);\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java\ndeleted file mode 100644\nindex 8e9198f..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"gt\")\n-public class IsGreaterThanExpTest extends IsGtTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"greaterthan\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java\ndeleted file mode 100644\nindex 8d69b85..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"ge\")\n-public class IsGreaterThanOrEqualToSymbolExpTest extends IsGeTest {\n-\n-  @Override\n-  public String getName() {\n-    return \">=\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java\ndeleted file mode 100644\nindex 0b0c0f1..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"gt\")\n-public class IsGreaterThanSymbolExpTest extends IsGtTest {\n-\n-  @Override\n-  public String getName() {\n-    return \">\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java\ndeleted file mode 100644\nindex 0e24de3..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.el.TruthyTypeConverter;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n-import de.odysseus.el.misc.BooleanOperations;\n-import de.odysseus.el.misc.TypeConverter;\n-\n-@JinjavaDoc(\n-  value = \"Returns true if the first object's value is strictly greater than the second\",\n-  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n-  params = {\n-    @JinjavaParam(\n-      value = \"other\",\n-      type = \"object\",\n-      desc = \"Another object to compare against\",\n-      required = true\n-    )\n-  },\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if foo.expression is gt 42 %}\\n\" +\n-      \"    the foo attribute evaluates to the constant 43\\n\" +\n-      \"{% endif %}\\n\"\n-    ),\n-    @JinjavaSnippet(\n-      desc = \"Usage with the selectattr filter\",\n-      code = \"{{ users|selectattr(\\\"num\\\", \\\"gt\\\", \\\"2\\\") }}\"\n-    )\n-  }\n-)\n-public class IsGtTest implements ExpTest {\n-  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n-\n-  @Override\n-  public String getName() {\n-    return \"gt\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args.length == 0) {\n-      throw new TemplateSyntaxException(\n-        interpreter,\n-        getName(),\n-        \"requires 1 argument (other object to compare against)\"\n-      );\n-    }\n-\n-    return BooleanOperations.gt(TYPE_CONVERTER, var, args[0]);\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java\ndeleted file mode 100644\nindex 6b6c4fe..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static com.hubspot.jinjava.lib.exptest.IsIterableExpTest.isIterable;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.InvalidArgumentException;\n-import com.hubspot.jinjava.interpret.InvalidReason;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-\n-@JinjavaDoc(\n-  value = \"Returns true if value is contained in the iterable\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  params = @JinjavaParam(\n-    value = \"list\",\n-    type = \"object\",\n-    desc = \"The iterable to check for the value\",\n-    required = true\n-  ),\n-  snippets = {\n-    @JinjavaSnippet(code = \"{{ 2 is in [1, 2, 3] }}\"),\n-    @JinjavaSnippet(code = \"{{ 'b' is in 'abc' }}\"),\n-    @JinjavaSnippet(code = \"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\")\n-  }\n-)\n-public class IsInExpTest extends CollectionExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"in\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object value, JinjavaInterpreter interpreter, Object... args) {\n-    if (args == null || args.length == 0) {\n-      return false;\n-    }\n-    if (!isIterable(args[0])) {\n-      throw new InvalidArgumentException(\n-        interpreter,\n-        this,\n-        InvalidReason.NOT_ITERABLE,\n-        0,\n-        args[0]\n-      );\n-    }\n-    return (Boolean) COLLECTION_MEMBERSHIP_OPERATOR.apply(TYPE_CONVERTER, value, args[0]);\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java\ndeleted file mode 100644\nindex 79f646e..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-\n-@JinjavaDoc(\n-  value = \"Return true if object is an integer or long\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if num is integer %}\\n\" +\n-      \"      <!--code to render if num contains an integral value-->\\n\" +\n-      \"{% endif %}\"\n-    )\n-  }\n-)\n-public class IsIntegerExpTest implements ExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"integer\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return (\n-      var instanceof Byte ||\n-      var instanceof Short ||\n-      var instanceof Integer ||\n-      var instanceof Long ||\n-      var instanceof BigInteger ||\n-      (var instanceof BigDecimal && ((BigDecimal) var).scale() == 0)\n-    );\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\nindex 94d1f80..c7a6e59 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\n@@ -4,7 +4,6 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.objects.SafeString;\n \n @JinjavaDoc(\n   value = \"Return true if the object is iterable (sequence, dict, etc)\",\n@@ -26,15 +25,9 @@ public class IsIterableExpTest implements ExpTest {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return isIterable(var);\n-  }\n-\n-  static boolean isIterable(Object ob) {\n     return (\n-      ob instanceof Object[] ||\n-      ob instanceof Iterable ||\n-      ob instanceof String ||\n-      ob instanceof SafeString\n+      var != null &&\n+      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n     );\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java\ndeleted file mode 100644\nindex 956f3a2..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.el.TruthyTypeConverter;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n-import de.odysseus.el.misc.BooleanOperations;\n-import de.odysseus.el.misc.TypeConverter;\n-\n-@JinjavaDoc(\n-  value = \"Returns true if the first object's value is less than or equal to the second object's value\",\n-  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n-  params = {\n-    @JinjavaParam(\n-      value = \"other\",\n-      type = \"object\",\n-      desc = \"Another object to compare against\",\n-      required = true\n-    )\n-  },\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if foo.expression is le 42 %}\\n\" +\n-      \"    the foo attribute evaluates to the constant 42\\n\" +\n-      \"{% endif %}\\n\"\n-    ),\n-    @JinjavaSnippet(\n-      desc = \"Usage with the selectattr filter\",\n-      code = \"{{ users|selectattr(\\\"num\\\", \\\"le\\\", \\\"2\\\") }}\"\n-    )\n-  }\n-)\n-public class IsLeTest implements ExpTest {\n-  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n-\n-  @Override\n-  public String getName() {\n-    return \"le\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args.length == 0) {\n-      throw new TemplateSyntaxException(\n-        interpreter,\n-        getName(),\n-        \"requires 1 argument (other object to compare against)\"\n-      );\n-    }\n-\n-    return BooleanOperations.le(TYPE_CONVERTER, var, args[0]);\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java\ndeleted file mode 100644\nindex 32f6aea..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"lt\")\n-public class IsLessThanExpTest extends IsLtTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"lessthan\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java\ndeleted file mode 100644\nindex b3bb1e1..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"le\")\n-public class IsLessThanOrEqualToSymbolExpTest extends IsLtTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"<=\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java\ndeleted file mode 100644\nindex 16dec5f..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"lt\")\n-public class IsLessThanSymbolExpTest extends IsLtTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"<\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java\ndeleted file mode 100644\nindex afea491..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.el.TruthyTypeConverter;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n-import de.odysseus.el.misc.BooleanOperations;\n-import de.odysseus.el.misc.TypeConverter;\n-\n-@JinjavaDoc(\n-  value = \"Returns true if the first object's value is strictly less than the second\",\n-  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n-  params = {\n-    @JinjavaParam(\n-      value = \"other\",\n-      type = \"object\",\n-      desc = \"Another object to compare against\",\n-      required = true\n-    )\n-  },\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if foo.expression is lt 42 %}\\n\" +\n-      \"    the foo attribute evaluates to the constant 41\\n\" +\n-      \"{% endif %}\\n\"\n-    ),\n-    @JinjavaSnippet(\n-      desc = \"Usage with the selectattr filter\",\n-      code = \"{{ users|selectattr(\\\"num\\\", \\\"lt\\\", \\\"2\\\") }}\"\n-    )\n-  }\n-)\n-public class IsLtTest implements ExpTest {\n-  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n-\n-  @Override\n-  public String getName() {\n-    return \"lt\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args.length == 0) {\n-      throw new TemplateSyntaxException(\n-        interpreter,\n-        getName(),\n-        \"requires 1 argument (other object to compare against)\"\n-      );\n-    }\n-\n-    return BooleanOperations.lt(TYPE_CONVERTER, var, args[0]);\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java\ndeleted file mode 100644\nindex 311a4e1..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.el.TruthyTypeConverter;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n-import de.odysseus.el.misc.BooleanOperations;\n-import de.odysseus.el.misc.TypeConverter;\n-\n-@JinjavaDoc(\n-  value = \"Returns true if an object has the different value from another object\",\n-  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n-  params = {\n-    @JinjavaParam(\n-      value = \"other\",\n-      type = \"object\",\n-      desc = \"Another object to check inequality against\",\n-      required = true\n-    )\n-  },\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if foo.expression is ne 42 %}\\n\" +\n-      \"    the foo attribute evaluates to the constant 43 \\n\" +\n-      \"{% endif %}\\n\"\n-    ),\n-    @JinjavaSnippet(\n-      desc = \"Usage with the selectattr filter\",\n-      code = \"{{ users|selectattr(\\\"email\\\", \\\"ne\\\", \\\"foo@bar.invalid\\\") }}\"\n-    )\n-  }\n-)\n-public class IsNeExpTest implements ExpTest {\n-  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n-\n-  @Override\n-  public String getName() {\n-    return \"ne\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args.length == 0) {\n-      throw new TemplateSyntaxException(\n-        interpreter,\n-        getName(),\n-        \"requires 1 argument (other object to check inequality against)\"\n-      );\n-    }\n-\n-    return BooleanOperations.ne(TYPE_CONVERTER, var, args[0]);\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java\ndeleted file mode 100644\nindex 5a715d6..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-\n-@JinjavaDoc(value = \"\", aliasOf = \"ne\")\n-public class IsNotEqualToSymbolExpTest extends IsNeExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"!=\";\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\nindex e2e2cfa..0ed5bc7 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\n@@ -1,7 +1,5 @@\n package com.hubspot.jinjava.lib.exptest;\n \n-import static com.hubspot.jinjava.lib.exptest.IsIterableExpTest.isIterable;\n-\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n@@ -27,6 +25,9 @@ public class IsSequenceExpTest implements ExpTest {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return isIterable(var);\n+    return (\n+      var != null &&\n+      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n+    );\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java\ndeleted file mode 100644\nindex c1c5407..0000000\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-\n-@JinjavaDoc(\n-  value = \"Return true if object is a boolean and true\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  snippets = {\n-    @JinjavaSnippet(\n-      code = \"{% if false is true %}\\n\" +\n-      \"      <!--this code will never render-->\\n\" +\n-      \"{% endif %}\"\n-    )\n-  }\n-)\n-public class IsTrueExpTest implements ExpTest {\n-\n-  @Override\n-  public String getName() {\n-    return \"true\";\n-  }\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return var instanceof Boolean && (Boolean) var;\n-  }\n-}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\nindex 911dbb8..4b7501d 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\n@@ -12,7 +12,7 @@ import com.hubspot.jinjava.util.ObjectTruthValue;\n   snippets = {\n     @JinjavaSnippet(\n       code = \"{% if variable is truthy %}\\n\" +\n-      \"      <!--code to render a boolean variable is True-->\\n\" +\n+      \"      <!--code to render a  boolean variable is True-->\\n\" +\n       \"{% endif %}\"\n     )\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\nindex 0c5e58b..42132ca 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\n@@ -1,9 +1,31 @@\n package com.hubspot.jinjava.lib.exptest;\n \n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n \n-@JinjavaDoc(value = \"\", aliasOf = \"in\")\n-public class IsWithinExpTest extends IsInExpTest {\n+@JinjavaDoc(\n+  value = \"Returns true if a value is within a list\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  params = @JinjavaParam(\n+    value = \"list\",\n+    type = \"list\",\n+    desc = \"A list to check if the value is in.\",\n+    required = true\n+  ),\n+  snippets = { @JinjavaSnippet(code = \"{{ 2 is within [1, 2, 3] }}\") }\n+)\n+public class IsWithinExpTest extends CollectionExpTest {\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args == null || args.length == 0) {\n+      return false;\n+    }\n+\n+    return (Boolean) COLLECTION_MEMBERSHIP_OPERATOR.apply(TYPE_CONVERTER, var, args[0]);\n+  }\n \n   @Override\n   public String getName() {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java\ndeleted file mode 100644\nindex 4c906f4..0000000\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import com.hubspot.jinjava.Jinjava;\n-import java.util.HashMap;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class BooleanExpTestsTest {\n-  private Jinjava jinjava;\n-\n-  @Before\n-  public void setup() {\n-    jinjava = new Jinjava();\n-  }\n-\n-  @Test\n-  public void testIsBoolean() {\n-    assertThat(jinjava.render(\"{{ 1 is boolean }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 'true' is boolean }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ true is boolean }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void testBooleanExpTests() {\n-    assertThat(jinjava.render(\"{{ true is true }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ true is false }}\", new HashMap<>())).isEqualTo(\"false\");\n-  }\n-}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java\ndeleted file mode 100644\nindex 0e7e72b..0000000\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java\n+++ /dev/null\n@@ -1,76 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import com.google.common.collect.ImmutableMap;\n-import com.hubspot.jinjava.Jinjava;\n-import com.hubspot.jinjava.objects.date.PyishDate;\n-import java.time.Instant;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class ComparisonExpTestsTest {\n-  private Jinjava jinjava;\n-\n-  @Before\n-  public void setup() {\n-    jinjava = new Jinjava();\n-  }\n-\n-  @Test\n-  public void itComparesNumbers() {\n-    assertThat(jinjava.render(\"{{ 4 is lt 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 5 is le 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is le 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is gt 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is gt 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is ge 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is ge 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is ne 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is ne 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void itComparesStringsLexicographically() {\n-    assertThat(jinjava.render(\"{{ 'aa' is lt 'aa' }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 'aa' is lt 'aaa' }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 'aa' is lt 'b' }}\", new HashMap<>())).isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void itComparesDates() {\n-    Map<String, Object> vars = ImmutableMap.of(\n-      \"now\",\n-      PyishDate.from(Instant.now()),\n-      \"then\",\n-      new PyishDate(1490171923745L)\n-    );\n-    assertThat(jinjava.render(\"{{ now is lt then}}\", vars)).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ then is lt now}}\", vars)).isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void itComparesAcrossType() {\n-    assertThat(jinjava.render(\"{{ 4.1 is lt 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ true ne 'true' }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ true ne '' }}\", new HashMap<>())).isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void testAliases() {\n-    assertThat(jinjava.render(\"{{ 4 is lessthan 5 }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is greaterthan 5 }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is < 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is > 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is <= 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is >= 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is != 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n-  }\n-}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\nindex b835f91..f6fb7b9 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\n@@ -74,10 +74,4 @@ public class IsEqualToExpTestTest {\n       )\n       .isEqualTo(\"false\");\n   }\n-\n-  @Test\n-  public void testAliases() {\n-    assertThat(jinjava.render(\"{{ 4 is eq 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4 is == 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n-  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java\ndeleted file mode 100644\nindex 376b730..0000000\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import com.hubspot.jinjava.Jinjava;\n-import java.util.HashMap;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class IsFloatExpTestTest {\n-  private Jinjava jinjava;\n-\n-  @Before\n-  public void setup() {\n-    jinjava = new Jinjava();\n-  }\n-\n-  @Test\n-  public void testValidFloats() {\n-    assertThat(jinjava.render(\"{{ 4.1 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 0.0 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4e4 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 4e-30 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void testInvalidFloats() {\n-    assertThat(jinjava.render(\"{{ 4 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ -1 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 0 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 'four point oh' is float }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void testWithAddFilter() {\n-    assertThat(jinjava.render(\"{{ (4|add(4)) is float }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ (4|add(4.5)) is float }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ (4|add(-4.5)) is float }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(\n-        jinjava.render(\n-          \"{{ (4|add(4.0000000000000000000001)) is float }}\",\n-          new HashMap<>()\n-        )\n-      )\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ (4|add(40.0)) is float }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(\n-        jinjava.render(\"{{ (4|add(1000000000000000000)) is float }}\", new HashMap<>())\n-      )\n-      .isEqualTo(\"false\");\n-  }\n-}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\ndeleted file mode 100644\nindex 864e514..0000000\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n-\n-import com.hubspot.jinjava.Jinjava;\n-import java.util.HashMap;\n-import org.assertj.core.api.Assertions;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class IsInExpTestTest {\n-  private Jinjava jinjava;\n-\n-  @Before\n-  public void setup() {\n-    jinjava = new Jinjava();\n-  }\n-\n-  @Test\n-  public void testIsInList() {\n-    assertThat(jinjava.render(\"{{ 2 is in [1, 2] }}\", new HashMap<>())).isEqualTo(\"true\");\n-    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n-    //    assertThat(jinjava.render(\"{{ 2 is in ['one', 2] }}\", new HashMap<>()))\n-    //      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 2 is in [1] }}\", new HashMap<>())).isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void testIsInString() {\n-    assertThat(jinjava.render(\"{{ 'b' is in 'ab' }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 'b' is in 'a' }}\", new HashMap<>())).isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void testIsInDict() {\n-    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n-    //    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\", new HashMap<>()))\n-    //      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1'} }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void testNull() {\n-    assertThat(jinjava.render(\"{{ null is in [null] }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ null is in [2] }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 2 is in [null] }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThatThrownBy(() -> jinjava.render(\"{{ 2 is in null }}\", new HashMap<>()))\n-      .hasMessageContaining(\"1st argument with value 'null' must be iterable\");\n-  }\n-}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java\ndeleted file mode 100644\nindex 1c96a5b..0000000\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import com.hubspot.jinjava.Jinjava;\n-import java.util.HashMap;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class IsIntegerExpTestTest {\n-  private Jinjava jinjava;\n-\n-  @Before\n-  public void setup() {\n-    jinjava = new Jinjava();\n-  }\n-\n-  @Test\n-  public void testValidIntegers() {\n-    assertThat(jinjava.render(\"{{ 4 is integer }}\", new HashMap<>())).isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ -1 is integer }}\", new HashMap<>())).isEqualTo(\"true\");\n-    long number = Integer.MAX_VALUE;\n-    assertThat(\n-        jinjava.render(String.format(\"{{ %d is integer }}\", number + 1), new HashMap<>())\n-      )\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 1000000000000000000 is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-  }\n-\n-  @Test\n-  public void testInvalidIntegers() {\n-    assertThat(jinjava.render(\"{{ 'four' is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ false is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4.1 is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-  }\n-\n-  @Test\n-  public void testWithAddFilter() {\n-    assertThat(jinjava.render(\"{{ (4|add(4)) is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ (4|add(4.5)) is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ (4|add(-4.5)) is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(\n-        jinjava.render(\n-          \"{{ (4|add(4.0000000000000000000001)) is integer }}\",\n-          new HashMap<>()\n-        )\n-      )\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ (4|add(40.0)) is integer }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(\n-        jinjava.render(\"{{ (4|add(1000000000000000000)) is integer }}\", new HashMap<>())\n-      )\n-      .isEqualTo(\"true\");\n-  }\n-}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java\ndeleted file mode 100644\nindex ad79cf0..0000000\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-package com.hubspot.jinjava.lib.exptest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import com.hubspot.jinjava.Jinjava;\n-import java.util.HashMap;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-public class IsIterableExpTestTest {\n-  private Jinjava jinjava;\n-\n-  @Before\n-  public void setup() {\n-    jinjava = new Jinjava();\n-  }\n-\n-  @Test\n-  public void testIsIterable() {\n-    assertThat(jinjava.render(\"{{ null is iterable }}\", new HashMap<>()))\n-      .isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ 4 is iterable }}\", new HashMap<>())).isEqualTo(\"false\");\n-    assertThat(jinjava.render(\"{{ [4] is iterable }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ [4, 'four'] is iterable }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ {'k1': 'v2'} is iterable }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-    assertThat(jinjava.render(\"{{ 'this string' is iterable }}\", new HashMap<>()))\n-      .isEqualTo(\"true\");\n-  }\n-}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\nindex a06318d..6d15bf0 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\n@@ -26,17 +26,16 @@ public class IsWithinExpTestTest {\n       .isEqualTo(\"pass\");\n   }\n \n-  //    TODO: Uncomment out when ColectionMemberShipOperator.java changes get approved\n-  //  @Test\n-  //  public void itPassesOnNullValueInSequence() {\n-  //    assertThat(\n-  //        jinjava.render(\n-  //          String.format(IN_TEMPLATE, \"null\", \"[1, 2, null]\"),\n-  //          new HashMap<>()\n-  //        )\n-  //      )\n-  //      .isEqualTo(\"pass\");\n-  //  }\n+  @Test\n+  public void itFailsOnNullValueInSequence() {\n+    assertThat(\n+        jinjava.render(\n+          String.format(IN_TEMPLATE, \"null\", \"[1, 2, null]\"),\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"fail\");\n+  }\n \n   @Test\n   public void itFailsOnValueNotInSequence() {\n@@ -55,6 +54,12 @@ public class IsWithinExpTestTest {\n   }\n \n   @Test\n+  public void itFailsOnNullSequence() {\n+    assertThat(jinjava.render(String.format(IN_TEMPLATE, \"2\", \"null\"), new HashMap<>()))\n+      .isEqualTo(\"fail\");\n+  }\n+\n+  @Test\n   public void itPerformsTypeConversion() {\n     assertThat(\n         jinjava.render(\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\nindex 6276b71..8e60487 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\n@@ -49,17 +49,6 @@ public class SelectAttrFilterTest {\n   }\n \n   @Test\n-  public void selectAttrWithSymbolicExp() {\n-    assertThat(\n-        jinjava.render(\n-          \"{{ users|selectattr('isActive', '==', 'true') }}\",\n-          new HashMap<String, Object>()\n-        )\n-      )\n-      .isEqualTo(\"[1]\");\n-  }\n-\n-  @Test\n   public void selectAttrWithIsEqualToExp() {\n     assertThat(\n         jinjava.render(\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:13:25.020411Z", "commit_hash": "1cbe09b8ca37db83714b7defb1536ee6d21cdc01", "commit_message": "Fix merge conflict'\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex 4d8b918..9a355f6 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -4,14 +4,23 @@ import static de.odysseus.el.tree.impl.Builder.Feature.METHOD_INVOCATIONS;\n import static de.odysseus.el.tree.impl.Builder.Feature.NULL_PROPERTIES;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.COLON;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.COMMA;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.EQ;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.FALSE;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.GE;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.GT;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.IDENTIFIER;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.LBRACK;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.LE;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.LPAREN;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.LT;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.NE;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.QUESTION;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.RBRACK;\n import static de.odysseus.el.tree.impl.Scanner.Symbol.RPAREN;\n+import static de.odysseus.el.tree.impl.Scanner.Symbol.TRUE;\n \n import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n import de.odysseus.el.tree.impl.Builder;\n import de.odysseus.el.tree.impl.Builder.Feature;\n import de.odysseus.el.tree.impl.Parser;\n@@ -33,6 +42,7 @@ import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import javax.el.ELException;\n \n public class ExtendedParser extends Parser {\n@@ -53,6 +63,19 @@ public class ExtendedParser extends Parser {\n   static final Scanner.ExtensionToken TRUNC_DIV = TruncDivOperator.TOKEN;\n   static final Scanner.ExtensionToken POWER_OF = PowerOfOperator.TOKEN;\n \n+  static final Set<Symbol> VALID_SYMBOLS_FOR_EXP_TEST = Sets.newHashSet(\n+    IDENTIFIER,\n+    EQ,\n+    NE,\n+    LT,\n+    LE,\n+    GT,\n+    GE,\n+    TRUE,\n+    FALSE,\n+    CollectionMembershipOperator.TOKEN.getSymbol()\n+  );\n+\n   static {\n     ExtendedScanner.addKeyToken(IF);\n     ExtendedScanner.addKeyToken(ELSE);\n@@ -396,13 +419,14 @@ public class ExtendedParser extends Parser {\n           } else if (\n             \"is\".equals(getToken().getImage()) &&\n             \"not\".equals(lookahead(0).getImage()) &&\n-            lookahead(1).getSymbol() == IDENTIFIER\n+            isPossibleExpTest(lookahead(1).getSymbol())\n           ) {\n             consumeToken(); // 'is'\n             consumeToken(); // 'not'\n             v = buildAstMethodForIdentifier(v, \"evaluateNegated\");\n           } else if (\n-            \"is\".equals(getToken().getImage()) && lookahead(0).getSymbol() == IDENTIFIER\n+            \"is\".equals(getToken().getImage()) &&\n+            isPossibleExpTest(lookahead(0).getSymbol())\n           ) {\n             consumeToken(); // 'is'\n             v = buildAstMethodForIdentifier(v, \"evaluate\");\n@@ -413,6 +437,10 @@ public class ExtendedParser extends Parser {\n     }\n   }\n \n+  private boolean isPossibleExpTest(Symbol symbol) {\n+    return VALID_SYMBOLS_FOR_EXP_TEST.contains(symbol);\n+  }\n+\n   private AstNode buildAstMethodForIdentifier(AstNode astNode, String property)\n     throws ScanException, ParseException {\n     String exptestName = consumeToken().getImage();\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java b/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\nindex 1a0cff6..2ff1cb9 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/InvalidReason.java\n@@ -10,6 +10,7 @@ public enum InvalidReason {\n   JSON_WRITE(\"object could not be written as a string\"),\n   REGEX(\"with value %s must be valid regex\"),\n   POSITIVE_NUMBER(\"with value %s must be a positive number\"),\n+  NOT_ITERABLE(\"with value '%s' must be iterable\"),\n   NON_ZERO_NUMBER(\"with value %s must be non-zero\"),\n   NULL_IN_LIST(\"of type 'list' cannot contain a null item\"),\n   NULL_ATTRIBUTE_IN_LIST(\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java b/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\nindex f156cd8..b14dc84 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/ExpTestLibrary.java\n@@ -15,6 +15,20 @@ public class ExpTestLibrary extends SimpleLibrary<ExpTest> {\n       IsDefinedExpTest.class,\n       IsDivisibleByExpTest.class,\n       IsEqualToExpTest.class,\n+      IsEqExpTest.class,\n+      IsEqualsSymbolExpTest.class,\n+      IsNeExpTest.class,\n+      IsNotEqualToSymbolExpTest.class,\n+      IsLtTest.class,\n+      IsLessThanExpTest.class,\n+      IsLessThanSymbolExpTest.class,\n+      IsLeTest.class,\n+      IsLessThanOrEqualToSymbolExpTest.class,\n+      IsGtTest.class,\n+      IsGreaterThanExpTest.class,\n+      IsGreaterThanSymbolExpTest.class,\n+      IsGeTest.class,\n+      IsGreaterThanOrEqualToSymbolExpTest.class,\n       IsEvenExpTest.class,\n       IsIterableExpTest.class,\n       IsLowerExpTest.class,\n@@ -24,14 +38,20 @@ public class ExpTestLibrary extends SimpleLibrary<ExpTest> {\n       IsOddExpTest.class,\n       IsSameAsExpTest.class,\n       IsSequenceExpTest.class,\n+      IsBooleanExpTest.class,\n+      IsIntegerExpTest.class,\n+      IsFloatExpTest.class,\n       IsStringExpTest.class,\n       IsStringContainingExpTest.class,\n       IsStringStartingWithExpTest.class,\n+      IsTrueExpTest.class,\n+      IsFalseExpTest.class,\n       IsTruthyExpTest.class,\n       IsUndefinedExpTest.class,\n       IsUpperExpTest.class,\n       IsContainingAllExpTest.class,\n       IsContainingExpTest.class,\n+      IsInExpTest.class,\n       IsWithinExpTest.class\n     );\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java\nnew file mode 100644\nindex 0000000..89b0534\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsBooleanExpTest.java\n@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a boolean (in a strict sense, not in its ability to evaluate to a truthy expression)\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if true is boolean %}\\n\" +\n+      \"      <!--this code will always render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsBooleanExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"boolean\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Boolean;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java\nnew file mode 100644\nindex 0000000..8f57b6c\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"equalto\")\n+public class IsEqExpTest extends IsEqualToExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"eq\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java\nnew file mode 100644\nindex 0000000..2add76e\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsEqualsSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"equalto\")\n+public class IsEqualsSymbolExpTest extends IsEqualToExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"==\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java\nnew file mode 100644\nindex 0000000..54b6711\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFalseExpTest.java\n@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a boolean and false\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if false is false %}\\n\" +\n+      \"      <!--this code will always render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsFalseExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"false\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Boolean && !(Boolean) var;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java\nnew file mode 100644\nindex 0000000..e77cf54\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java\n@@ -0,0 +1,35 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import java.math.BigDecimal;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a float\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if num is float %}\\n\" +\n+      \"      <!--code to render if num contains an floating point value-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsFloatExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"float\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return (\n+      var instanceof Double ||\n+      var instanceof Float ||\n+      (var instanceof BigDecimal && ((BigDecimal) var).scale() > 0)\n+    );\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java\nnew file mode 100644\nindex 0000000..7e9a9f2\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGeTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is greater than or equal to the second object's value\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is ge 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 42\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"ge\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsGeTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"ge\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.ge(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java\nnew file mode 100644\nindex 0000000..8e9198f\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"gt\")\n+public class IsGreaterThanExpTest extends IsGtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"greaterthan\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java\nnew file mode 100644\nindex 0000000..8d69b85\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanOrEqualToSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"ge\")\n+public class IsGreaterThanOrEqualToSymbolExpTest extends IsGeTest {\n+\n+  @Override\n+  public String getName() {\n+    return \">=\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java\nnew file mode 100644\nindex 0000000..0b0c0f1\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGreaterThanSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"gt\")\n+public class IsGreaterThanSymbolExpTest extends IsGtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \">\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java\nnew file mode 100644\nindex 0000000..0e24de3\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsGtTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is strictly greater than the second\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is gt 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 43\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"gt\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsGtTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"gt\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.gt(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java\nnew file mode 100644\nindex 0000000..6b6c4fe\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsInExpTest.java\n@@ -0,0 +1,50 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static com.hubspot.jinjava.lib.exptest.IsIterableExpTest.isIterable;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.InvalidArgumentException;\n+import com.hubspot.jinjava.interpret.InvalidReason;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if value is contained in the iterable\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  params = @JinjavaParam(\n+    value = \"list\",\n+    type = \"object\",\n+    desc = \"The iterable to check for the value\",\n+    required = true\n+  ),\n+  snippets = {\n+    @JinjavaSnippet(code = \"{{ 2 is in [1, 2, 3] }}\"),\n+    @JinjavaSnippet(code = \"{{ 'b' is in 'abc' }}\"),\n+    @JinjavaSnippet(code = \"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\")\n+  }\n+)\n+public class IsInExpTest extends CollectionExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"in\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object value, JinjavaInterpreter interpreter, Object... args) {\n+    if (args == null || args.length == 0) {\n+      return false;\n+    }\n+    if (!isIterable(args[0])) {\n+      throw new InvalidArgumentException(\n+        interpreter,\n+        this,\n+        InvalidReason.NOT_ITERABLE,\n+        0,\n+        args[0]\n+      );\n+    }\n+    return (Boolean) COLLECTION_MEMBERSHIP_OPERATOR.apply(TYPE_CONVERTER, value, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java\nnew file mode 100644\nindex 0000000..79f646e\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java\n@@ -0,0 +1,39 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is an integer or long\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if num is integer %}\\n\" +\n+      \"      <!--code to render if num contains an integral value-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsIntegerExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"integer\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return (\n+      var instanceof Byte ||\n+      var instanceof Short ||\n+      var instanceof Integer ||\n+      var instanceof Long ||\n+      var instanceof BigInteger ||\n+      (var instanceof BigDecimal && ((BigDecimal) var).scale() == 0)\n+    );\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\nindex c7a6e59..94d1f80 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTest.java\n@@ -4,6 +4,7 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.objects.SafeString;\n \n @JinjavaDoc(\n   value = \"Return true if the object is iterable (sequence, dict, etc)\",\n@@ -25,9 +26,15 @@ public class IsIterableExpTest implements ExpTest {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return isIterable(var);\n+  }\n+\n+  static boolean isIterable(Object ob) {\n     return (\n-      var != null &&\n-      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n+      ob instanceof Object[] ||\n+      ob instanceof Iterable ||\n+      ob instanceof String ||\n+      ob instanceof SafeString\n     );\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java\nnew file mode 100644\nindex 0000000..956f3a2\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLeTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is less than or equal to the second object's value\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is le 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 42\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"le\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsLeTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"le\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.le(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java\nnew file mode 100644\nindex 0000000..32f6aea\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"lt\")\n+public class IsLessThanExpTest extends IsLtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"lessthan\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java\nnew file mode 100644\nindex 0000000..b3bb1e1\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanOrEqualToSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"le\")\n+public class IsLessThanOrEqualToSymbolExpTest extends IsLtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"<=\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java\nnew file mode 100644\nindex 0000000..16dec5f\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLessThanSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"lt\")\n+public class IsLessThanSymbolExpTest extends IsLtTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"<\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java\nnew file mode 100644\nindex 0000000..afea491\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsLtTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if the first object's value is strictly less than the second\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to compare against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is lt 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 41\\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"num\\\", \\\"lt\\\", \\\"2\\\") }}\"\n+    )\n+  }\n+)\n+public class IsLtTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"lt\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to compare against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.lt(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java\nnew file mode 100644\nindex 0000000..311a4e1\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNeExpTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.el.TruthyTypeConverter;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import de.odysseus.el.misc.BooleanOperations;\n+import de.odysseus.el.misc.TypeConverter;\n+\n+@JinjavaDoc(\n+  value = \"Returns true if an object has the different value from another object\",\n+  input = @JinjavaParam(value = \"first\", type = \"object\", required = true),\n+  params = {\n+    @JinjavaParam(\n+      value = \"other\",\n+      type = \"object\",\n+      desc = \"Another object to check inequality against\",\n+      required = true\n+    )\n+  },\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if foo.expression is ne 42 %}\\n\" +\n+      \"    the foo attribute evaluates to the constant 43 \\n\" +\n+      \"{% endif %}\\n\"\n+    ),\n+    @JinjavaSnippet(\n+      desc = \"Usage with the selectattr filter\",\n+      code = \"{{ users|selectattr(\\\"email\\\", \\\"ne\\\", \\\"foo@bar.invalid\\\") }}\"\n+    )\n+  }\n+)\n+public class IsNeExpTest implements ExpTest {\n+  private static final TypeConverter TYPE_CONVERTER = new TruthyTypeConverter();\n+\n+  @Override\n+  public String getName() {\n+    return \"ne\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    if (args.length == 0) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        getName(),\n+        \"requires 1 argument (other object to check inequality against)\"\n+      );\n+    }\n+\n+    return BooleanOperations.ne(TYPE_CONVERTER, var, args[0]);\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java\nnew file mode 100644\nindex 0000000..5a715d6\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsNotEqualToSymbolExpTest.java\n@@ -0,0 +1,12 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+\n+@JinjavaDoc(value = \"\", aliasOf = \"ne\")\n+public class IsNotEqualToSymbolExpTest extends IsNeExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"!=\";\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\nindex 0ed5bc7..e2e2cfa 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java\n@@ -1,5 +1,7 @@\n package com.hubspot.jinjava.lib.exptest;\n \n+import static com.hubspot.jinjava.lib.exptest.IsIterableExpTest.isIterable;\n+\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n@@ -25,9 +27,6 @@ public class IsSequenceExpTest implements ExpTest {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return (\n-      var != null &&\n-      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n-    );\n+    return isIterable(var);\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java\nnew file mode 100644\nindex 0000000..c1c5407\n--- /dev/null\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTrueExpTest.java\n@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a boolean and true\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if false is true %}\\n\" +\n+      \"      <!--this code will never render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsTrueExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"true\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Boolean && (Boolean) var;\n+  }\n+}\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\nindex 4b7501d..911dbb8 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsTruthyExpTest.java\n@@ -12,7 +12,7 @@ import com.hubspot.jinjava.util.ObjectTruthValue;\n   snippets = {\n     @JinjavaSnippet(\n       code = \"{% if variable is truthy %}\\n\" +\n-      \"      <!--code to render a  boolean variable is True-->\\n\" +\n+      \"      <!--code to render a boolean variable is True-->\\n\" +\n       \"{% endif %}\"\n     )\n   }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java b/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\nindex 42132ca..0c5e58b 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTest.java\n@@ -1,31 +1,9 @@\n package com.hubspot.jinjava.lib.exptest;\n \n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n-import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n-import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n-import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n \n-@JinjavaDoc(\n-  value = \"Returns true if a value is within a list\",\n-  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n-  params = @JinjavaParam(\n-    value = \"list\",\n-    type = \"list\",\n-    desc = \"A list to check if the value is in.\",\n-    required = true\n-  ),\n-  snippets = { @JinjavaSnippet(code = \"{{ 2 is within [1, 2, 3] }}\") }\n-)\n-public class IsWithinExpTest extends CollectionExpTest {\n-\n-  @Override\n-  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    if (args == null || args.length == 0) {\n-      return false;\n-    }\n-\n-    return (Boolean) COLLECTION_MEMBERSHIP_OPERATOR.apply(TYPE_CONVERTER, var, args[0]);\n-  }\n+@JinjavaDoc(value = \"\", aliasOf = \"in\")\n+public class IsWithinExpTest extends IsInExpTest {\n \n   @Override\n   public String getName() {\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java\nnew file mode 100644\nindex 0000000..4c906f4\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/BooleanExpTestsTest.java\n@@ -0,0 +1,32 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class BooleanExpTestsTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsBoolean() {\n+    assertThat(jinjava.render(\"{{ 1 is boolean }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 'true' is boolean }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ true is boolean }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testBooleanExpTests() {\n+    assertThat(jinjava.render(\"{{ true is true }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ true is false }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java\nnew file mode 100644\nindex 0000000..0e7e72b\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/ComparisonExpTestsTest.java\n@@ -0,0 +1,76 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.hubspot.jinjava.Jinjava;\n+import com.hubspot.jinjava.objects.date.PyishDate;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ComparisonExpTestsTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void itComparesNumbers() {\n+    assertThat(jinjava.render(\"{{ 4 is lt 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 5 is le 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is le 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is gt 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is gt 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is ge 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is ge 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is ne 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is ne 4 }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void itComparesStringsLexicographically() {\n+    assertThat(jinjava.render(\"{{ 'aa' is lt 'aa' }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 'aa' is lt 'aaa' }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'aa' is lt 'b' }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void itComparesDates() {\n+    Map<String, Object> vars = ImmutableMap.of(\n+      \"now\",\n+      PyishDate.from(Instant.now()),\n+      \"then\",\n+      new PyishDate(1490171923745L)\n+    );\n+    assertThat(jinjava.render(\"{{ now is lt then}}\", vars)).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ then is lt now}}\", vars)).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void itComparesAcrossType() {\n+    assertThat(jinjava.render(\"{{ 4.1 is lt 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ true ne 'true' }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ true ne '' }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testAliases() {\n+    assertThat(jinjava.render(\"{{ 4 is lessthan 5 }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is greaterthan 5 }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is < 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is > 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is <= 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is >= 5 }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is != 5 }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java\nnew file mode 100644\nindex 0000000..376b730\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTestTest.java\n@@ -0,0 +1,57 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsFloatExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testValidFloats() {\n+    assertThat(jinjava.render(\"{{ 4.1 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 0.0 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4e4 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4e-30 is float }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testInvalidFloats() {\n+    assertThat(jinjava.render(\"{{ 4 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ -1 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 0 is float }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 'four point oh' is float }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testWithAddFilter() {\n+    assertThat(jinjava.render(\"{{ (4|add(4)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ (4|add(4.5)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ (4|add(-4.5)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(\n+        jinjava.render(\n+          \"{{ (4|add(4.0000000000000000000001)) is float }}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ (4|add(40.0)) is float }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(\n+        jinjava.render(\"{{ (4|add(1000000000000000000)) is float }}\", new HashMap<>())\n+      )\n+      .isEqualTo(\"false\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\nnew file mode 100644\nindex 0000000..864e514\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\n@@ -0,0 +1,55 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsInExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsInList() {\n+    assertThat(jinjava.render(\"{{ 2 is in [1, 2] }}\", new HashMap<>())).isEqualTo(\"true\");\n+    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n+    //    assertThat(jinjava.render(\"{{ 2 is in ['one', 2] }}\", new HashMap<>()))\n+    //      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 2 is in [1] }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testIsInString() {\n+    assertThat(jinjava.render(\"{{ 'b' is in 'ab' }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'b' is in 'a' }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testIsInDict() {\n+    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n+    //    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\", new HashMap<>()))\n+    //      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1'} }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testNull() {\n+    assertThat(jinjava.render(\"{{ null is in [null] }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ null is in [2] }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 2 is in [null] }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThatThrownBy(() -> jinjava.render(\"{{ 2 is in null }}\", new HashMap<>()))\n+      .hasMessageContaining(\"1st argument with value 'null' must be iterable\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java\nnew file mode 100644\nindex 0000000..1c96a5b\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTestTest.java\n@@ -0,0 +1,63 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsIntegerExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testValidIntegers() {\n+    assertThat(jinjava.render(\"{{ 4 is integer }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ -1 is integer }}\", new HashMap<>())).isEqualTo(\"true\");\n+    long number = Integer.MAX_VALUE;\n+    assertThat(\n+        jinjava.render(String.format(\"{{ %d is integer }}\", number + 1), new HashMap<>())\n+      )\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 1000000000000000000 is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void testInvalidIntegers() {\n+    assertThat(jinjava.render(\"{{ 'four' is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ false is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4.1 is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testWithAddFilter() {\n+    assertThat(jinjava.render(\"{{ (4|add(4)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ (4|add(4.5)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ (4|add(-4.5)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(\n+        jinjava.render(\n+          \"{{ (4|add(4.0000000000000000000001)) is integer }}\",\n+          new HashMap<>()\n+        )\n+      )\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ (4|add(40.0)) is integer }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(\n+        jinjava.render(\"{{ (4|add(1000000000000000000)) is integer }}\", new HashMap<>())\n+      )\n+      .isEqualTo(\"true\");\n+  }\n+}\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java\nnew file mode 100644\nindex 0000000..ad79cf0\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsIterableExpTestTest.java\n@@ -0,0 +1,32 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsIterableExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsIterable() {\n+    assertThat(jinjava.render(\"{{ null is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 4 is iterable }}\", new HashMap<>())).isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ [4] is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ [4, 'four'] is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ {'k1': 'v2'} is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'this string' is iterable }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+  }\n+}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\nindex f6fb7b9..b835f91 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsEqualToExpTestTest.java\n@@ -74,4 +74,10 @@ public class IsEqualToExpTestTest {\n       )\n       .isEqualTo(\"false\");\n   }\n+\n+  @Test\n+  public void testAliases() {\n+    assertThat(jinjava.render(\"{{ 4 is eq 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 4 is == 4 }}\", new HashMap<>())).isEqualTo(\"true\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\nindex 6d15bf0..a06318d 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java\n@@ -26,16 +26,17 @@ public class IsWithinExpTestTest {\n       .isEqualTo(\"pass\");\n   }\n \n-  @Test\n-  public void itFailsOnNullValueInSequence() {\n-    assertThat(\n-        jinjava.render(\n-          String.format(IN_TEMPLATE, \"null\", \"[1, 2, null]\"),\n-          new HashMap<>()\n-        )\n-      )\n-      .isEqualTo(\"fail\");\n-  }\n+  //    TODO: Uncomment out when ColectionMemberShipOperator.java changes get approved\n+  //  @Test\n+  //  public void itPassesOnNullValueInSequence() {\n+  //    assertThat(\n+  //        jinjava.render(\n+  //          String.format(IN_TEMPLATE, \"null\", \"[1, 2, null]\"),\n+  //          new HashMap<>()\n+  //        )\n+  //      )\n+  //      .isEqualTo(\"pass\");\n+  //  }\n \n   @Test\n   public void itFailsOnValueNotInSequence() {\n@@ -54,12 +55,6 @@ public class IsWithinExpTestTest {\n   }\n \n   @Test\n-  public void itFailsOnNullSequence() {\n-    assertThat(jinjava.render(String.format(IN_TEMPLATE, \"2\", \"null\"), new HashMap<>()))\n-      .isEqualTo(\"fail\");\n-  }\n-\n-  @Test\n   public void itPerformsTypeConversion() {\n     assertThat(\n         jinjava.render(\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\nindex 8e60487..6276b71 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SelectAttrFilterTest.java\n@@ -49,6 +49,17 @@ public class SelectAttrFilterTest {\n   }\n \n   @Test\n+  public void selectAttrWithSymbolicExp() {\n+    assertThat(\n+        jinjava.render(\n+          \"{{ users|selectattr('isActive', '==', 'true') }}\",\n+          new HashMap<String, Object>()\n+        )\n+      )\n+      .isEqualTo(\"[1]\");\n+  }\n+\n+  @Test\n   public void selectAttrWithIsEqualToExp() {\n     assertThat(\n         jinjava.render(\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:15:22.221856Z", "commit_hash": "7fba42039ea2f2b1344dbf0861628795b0d8cb51", "commit_message": "Use kwargs in truncatehtml filter (#490)\n\n* Deduce arguments from type\r\n\r\n* Fix prettier\r\n\r\n* Fix index\r\n\r\n* fix test\r\n\r\n* Use kwargs instead\r\n\r\n* Fix prettier\r\n\r\n* fix nulls\r\n\r\n* Make strings static constants\r\n\r\n* Fix pom and syntax error\r\n\r\nCo-authored-by: Liam Harwood <lharwood@hubspot.com>", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java\nindex 2105db9..f7631a6 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilter.java\n@@ -7,6 +7,7 @@ import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.fn.Functions;\n+import java.util.Map;\n import java.util.Objects;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -46,9 +47,12 @@ import org.jsoup.select.NodeVisitor;\n     )\n   }\n )\n-public class TruncateHtmlFilter implements Filter {\n+public class TruncateHtmlFilter implements AdvancedFilter {\n   private static final int DEFAULT_TRUNCATE_LENGTH = 255;\n   private static final String DEFAULT_END = \"...\";\n+  private static final String LENGTH_KEY = \"length\";\n+  private static final String END_KEY = \"end\";\n+  private static final String BREAKWORD_KEY = \"breakword\";\n \n   @Override\n   public String getName() {\n@@ -56,6 +60,47 @@ public class TruncateHtmlFilter implements Filter {\n   }\n \n   @Override\n+  public Object filter(\n+    Object var,\n+    JinjavaInterpreter interpreter,\n+    Object[] args,\n+    Map<String, Object> kwargs\n+  ) {\n+    String length = null;\n+    if (kwargs.containsKey(LENGTH_KEY)) {\n+      length = Objects.toString(kwargs.get(LENGTH_KEY));\n+    }\n+    String end = null;\n+    if (kwargs.containsKey(END_KEY)) {\n+      end = Objects.toString(kwargs.get(END_KEY));\n+    }\n+    String breakword = null;\n+    if (kwargs.containsKey(BREAKWORD_KEY)) {\n+      breakword = Objects.toString(kwargs.get(BREAKWORD_KEY));\n+    }\n+\n+    String[] newArgs = new String[3];\n+    for (int i = 0; i < args.length; i++) {\n+      if (i >= newArgs.length) {\n+        break;\n+      }\n+      newArgs[i] = Objects.toString(args[i]);\n+    }\n+\n+    if (length != null) {\n+      newArgs[0] = length;\n+    }\n+    if (end != null) {\n+      newArgs[1] = end;\n+    }\n+    if (breakword != null) {\n+      newArgs[2] = breakword;\n+    }\n+\n+    return filter(var, interpreter, newArgs);\n+  }\n+\n+  @Override\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n     if (var instanceof String) {\n       int length = DEFAULT_TRUNCATE_LENGTH;\n@@ -73,12 +118,12 @@ public class TruncateHtmlFilter implements Filter {\n         }\n       }\n \n-      if (args.length > 1) {\n+      if (args.length > 1 && args[1] != null) {\n         ends = Objects.toString(args[1]);\n       }\n \n       boolean killwords = false;\n-      if (args.length > 2) {\n+      if (args.length > 2 && args[2] != null) {\n         killwords = BooleanUtils.toBoolean(args[2]);\n       }\n \n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilterTest.java\nindex 46432e2..e3d5733 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/TruncateHtmlFilterTest.java\n@@ -3,6 +3,7 @@ package com.hubspot.jinjava.lib.filter;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.*;\n \n+import com.google.common.collect.ImmutableMap;\n import com.google.common.io.Resources;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import java.io.IOException;\n@@ -59,6 +60,32 @@ public class TruncateHtmlFilterTest {\n       );\n   }\n \n+  @Test\n+  public void itTakesKwargs() {\n+    String result = (String) filter.filter(\n+      fixture(\"filter/truncatehtml/long-content-with-tags.html\"),\n+      interpreter,\n+      new Object[] { \"35\" },\n+      ImmutableMap.of(\"breakwords\", false)\n+    );\n+    assertThat(result)\n+      .isEqualTo(\n+        \"<h1>HTML Ipsum Presents</h1> \\n<p><strong>Pellentesque...</strong></p>\"\n+      );\n+\n+    result =\n+      (String) filter.filter(\n+        fixture(\"filter/truncatehtml/long-content-with-tags.html\"),\n+        interpreter,\n+        new Object[] { \"35\" },\n+        ImmutableMap.of(\"end\", \"TEST\")\n+      );\n+    assertThat(result)\n+      .isEqualTo(\n+        \"<h1>HTML Ipsum Presents</h1> \\n<p><strong>PellentesqueTEST</strong></p>\"\n+      );\n+  }\n+\n   private static String fixture(String name) {\n     try {\n       return Resources.toString(Resources.getResource(name), StandardCharsets.UTF_8);\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:17:36.458440Z", "commit_hash": "84a96223de1d75249dcfa66acc53d043f055e9df", "commit_message": "Fix Formatting\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex a525a31..500f6d4 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -438,10 +438,10 @@ public class ExtendedParser extends Parser {\n     }\n   }\n \n-\n   private boolean isPossibleExpTest(Symbol symbol) {\n     return VALID_SYMBOLS_FOR_EXP_TEST.contains(symbol);\n   }\n+\n   private AstNode buildAstMethodForIdentifier(AstNode astNode, String property)\n     throws ScanException, ParseException {\n     String exptestName = consumeToken().getImage();\n@@ -459,7 +459,6 @@ public class ExtendedParser extends Parser {\n       true\n     );\n     return createAstMethod(exptestProperty, new AstParameters(exptestParams));\n-\n   }\n \n   @Override\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\nindex 9e92940..864e514 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java\n@@ -20,7 +20,7 @@ public class IsInExpTestTest {\n   @Test\n   public void testIsInList() {\n     assertThat(jinjava.render(\"{{ 2 is in [1, 2] }}\", new HashMap<>())).isEqualTo(\"true\");\n-    //    TODO: Uncomment out when ColectionMemberShipOperator.java changes get approved\n+    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n     //    assertThat(jinjava.render(\"{{ 2 is in ['one', 2] }}\", new HashMap<>()))\n     //      .isEqualTo(\"true\");\n     assertThat(jinjava.render(\"{{ 2 is in [1] }}\", new HashMap<>())).isEqualTo(\"false\");\n@@ -34,7 +34,7 @@ public class IsInExpTestTest {\n \n   @Test\n   public void testIsInDict() {\n-    //    TODO: Uncomment out when ColectionMemberShipOperator.java changes get approved\n+    //    TODO: Uncomment out when CollectionMemberShipOperator.java changes get approved\n     //    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\", new HashMap<>()))\n     //      .isEqualTo(\"true\");\n     assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1'} }}\", new HashMap<>()))\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:21:36.530944Z", "commit_hash": "7491784301dfc8d59f1c63a0c4e66f602dacdf96", "commit_message": "Merge pull request #461 from HubSpot/fix-NPE-in-listFilter\n\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/ListFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/ListFilter.java\nindex e54a795..ba3af04 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/ListFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/ListFilter.java\n@@ -37,6 +37,10 @@ public class ListFilter implements Filter {\n   public Object filter(Object var, JinjavaInterpreter interpreter, String... args) {\n     List<?> result;\n \n+    if (var == null) {\n+      return null;\n+    }\n+\n     if (var instanceof String) {\n       result = Chars.asList(((String) var).toCharArray());\n     } else if (Collection.class.isAssignableFrom(var.getClass())) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java\nindex 3602c8d..b6afa3c 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/MultiplyFilter.java\n@@ -79,7 +79,7 @@ public class MultiplyFilter implements Filter {\n       return num.longValue() * (Long) object;\n     }\n     if (object instanceof Short) {\n-      return 0 + num.shortValue() * (Short) object;\n+      return num.shortValue() * (Short) object;\n     }\n     if (object instanceof Double) {\n       return num.doubleValue() * (Double) object;\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/PrettyPrintFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/PrettyPrintFilter.java\nindex defc3af..80d5307 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/PrettyPrintFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/PrettyPrintFilter.java\n@@ -47,7 +47,7 @@ public class PrettyPrintFilter implements Filter {\n       return \"null\";\n     }\n \n-    String varStr = null;\n+    String varStr;\n \n     if (\n       var instanceof String ||\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/SumFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/SumFilter.java\nindex 59b361b..56c5373 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/SumFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/SumFilter.java\n@@ -64,7 +64,7 @@ public class SumFilter implements AdvancedFilter {\n     if (args.length > 0) {\n       try {\n         sum = sum.add(new BigDecimal(args[0].toString()));\n-      } catch (NumberFormatException e) {}\n+      } catch (NumberFormatException ignored) {}\n     }\n \n     while (loop.hasNext()) {\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/filter/TruncateFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/TruncateFilter.java\nindex 3746f26..9b00885 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/TruncateFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/TruncateFilter.java\n@@ -65,7 +65,7 @@ public class TruncateFilter implements Filter {\n \n   @Override\n   public Object filter(Object object, JinjavaInterpreter interpreter, String... arg) {\n-    return Functions.truncate(object, (Object[]) arg);\n+    return Functions.truncate(object, arg);\n   }\n \n   @Override\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/JoinFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/JoinFilterTest.java\nindex 7ff3d8c..22b2aa0 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/JoinFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/JoinFilterTest.java\n@@ -23,17 +23,14 @@ public class JoinFilterTest {\n \n   @Test\n   public void testJoinVals() {\n-    assertThat(jinjava.render(\"{{ [1, 2, 3]|join('|') }}\", new HashMap<String, Object>()))\n+    assertThat(jinjava.render(\"{{ [1, 2, 3]|join('|') }}\", new HashMap<>()))\n       .isEqualTo(\"1|2|3\");\n   }\n \n   @Test\n   public void testJoinAttrs() {\n     assertThat(\n-        jinjava.render(\n-          \"{{ users|join(', ', attribute='username') }}\",\n-          new HashMap<String, Object>()\n-        )\n+        jinjava.render(\"{{ users|join(', ', attribute='username') }}\", new HashMap<>())\n       )\n       .isEqualTo(\"foo, bar\");\n   }\n@@ -44,7 +41,7 @@ public class JoinFilterTest {\n \n     RenderResult result = jinjava.renderForResult(\n       \"{{ [1, 2, 3, 4, 5]|join('|') }}\",\n-      new HashMap<String, Object>()\n+      new HashMap<>()\n     );\n     assertThat(result.getOutput()).isEqualTo(\"1|2|3\");\n     assertThat(result.getErrors().size()).isEqualTo(1);\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/filter/ListFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/ListFilterTest.java\nindex edd6c1e..d57f10b 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/ListFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/ListFilterTest.java\n@@ -35,7 +35,7 @@ public class ListFilterTest {\n \n   @Test\n   public void itConvertsStringToListOfChars() {\n-    List o = (List) filter.filter(\"hello\", null);\n+    List<?> o = (List<?>) filter.filter(\"hello\", null);\n     assertThat(o).isEqualTo(Lists.newArrayList('h', 'e', 'l', 'l', 'o'));\n     assertThat(o.get(0)).isEqualTo('h');\n   }\n@@ -43,13 +43,19 @@ public class ListFilterTest {\n   @Test\n   public void itConvertsSetsToLists() {\n     Set<Integer> ints = Sets.newHashSet(1, 2, 3);\n-    List o = (List) filter.filter(ints, null);\n+    List<?> o = (List<?>) filter.filter(ints, null);\n     assertThat(o).isEqualTo(Lists.newArrayList(1, 2, 3));\n   }\n \n   @Test\n   public void itWrapsNonCollectionNonStringsInLists() {\n-    List o = (List) filter.filter(BigDecimal.ONE, null);\n+    List<?> o = (List<?>) filter.filter(BigDecimal.ONE, null);\n     assertThat(o).isEqualTo(Lists.newArrayList(BigDecimal.ONE));\n   }\n+\n+  @Test\n+  public void itHandlesNullListParams() {\n+    List<?> o = (List<?>) filter.filter(null, null);\n+    assertThat(o).isNull();\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:27:32.264844Z", "commit_hash": "284aed870d496ebb446c04f911312809c021e896", "commit_message": "Merge pull request #455 from samukce/fix-multiple-equals-in-condition\n\nFix for \"Equalto operator doesn't work in \"or\" statement (== does)\"", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\nindex 5b4d66d..4d8b918 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java\n@@ -400,40 +400,12 @@ public class ExtendedParser extends Parser {\n           ) {\n             consumeToken(); // 'is'\n             consumeToken(); // 'not'\n-            String exptestName = consumeToken().getImage();\n-            List<AstNode> exptestParams = Lists.newArrayList(v, interpreter());\n-\n-            // optional exptest arg\n-            AstNode arg = expr(false);\n-            if (arg != null) {\n-              exptestParams.add(arg);\n-            }\n-\n-            AstProperty exptestProperty = createAstDot(\n-              identifier(EXPTEST_PREFIX + exptestName),\n-              \"evaluateNegated\",\n-              true\n-            );\n-            v = createAstMethod(exptestProperty, new AstParameters(exptestParams));\n+            v = buildAstMethodForIdentifier(v, \"evaluateNegated\");\n           } else if (\n             \"is\".equals(getToken().getImage()) && lookahead(0).getSymbol() == IDENTIFIER\n           ) {\n             consumeToken(); // 'is'\n-            String exptestName = consumeToken().getImage();\n-            List<AstNode> exptestParams = Lists.newArrayList(v, interpreter());\n-\n-            // optional exptest arg\n-            AstNode arg = expr(false);\n-            if (arg != null) {\n-              exptestParams.add(arg);\n-            }\n-\n-            AstProperty exptestProperty = createAstDot(\n-              identifier(EXPTEST_PREFIX + exptestName),\n-              \"evaluate\",\n-              true\n-            );\n-            v = createAstMethod(exptestProperty, new AstParameters(exptestParams));\n+            v = buildAstMethodForIdentifier(v, \"evaluate\");\n           }\n \n           return v;\n@@ -441,6 +413,25 @@ public class ExtendedParser extends Parser {\n     }\n   }\n \n+  private AstNode buildAstMethodForIdentifier(AstNode astNode, String property)\n+    throws ScanException, ParseException {\n+    String exptestName = consumeToken().getImage();\n+    List<AstNode> exptestParams = Lists.newArrayList(astNode, interpreter());\n+\n+    // optional exptest arg\n+    AstNode arg = value();\n+    if (arg != null) {\n+      exptestParams.add(arg);\n+    }\n+\n+    AstProperty exptestProperty = createAstDot(\n+      identifier(EXPTEST_PREFIX + exptestName),\n+      property,\n+      true\n+    );\n+    return createAstMethod(exptestProperty, new AstParameters(exptestParams));\n+  }\n+\n   @Override\n   protected Scanner createScanner(String expression) {\n     return new ExtendedScanner(expression);\ndiff --git a/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java b/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\nnew file mode 100644\nindex 0000000..41af0b0\n--- /dev/null\n+++ b/src/test/java/com/hubspot/jinjava/el/ext/ExtendedParserTest.java\n@@ -0,0 +1,171 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import de.odysseus.el.tree.impl.Builder;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstIdentifier;\n+import de.odysseus.el.tree.impl.ast.AstMethod;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+import de.odysseus.el.tree.impl.ast.AstParameters;\n+import de.odysseus.el.tree.impl.ast.AstString;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n+public class ExtendedParserTest {\n+\n+  @Test\n+  public void itParseSingleBinaryEqualCondition() {\n+    AstNode astNode = buildExpressionNodes(\"#{'a' == 'b'}\");\n+\n+    assertThat(astNode).isInstanceOf(AstBinary.class);\n+    assertLeftAndRightByOperator((AstBinary) astNode, \"a\", \"b\", AstBinary.EQ);\n+  }\n+\n+  @Test\n+  public void itParseBinaryOrEqualCondition() {\n+    AstNode astNode = buildExpressionNodes(\"#{'a' == 'b' or 'c' == 'd'}\");\n+\n+    assertThat(astNode).isInstanceOf(AstBinary.class);\n+\n+    AstBinary astBinary = (AstBinary) astNode;\n+    AstNode left = astBinary.getChild(0);\n+    AstNode right = astBinary.getChild(1);\n+\n+    assertThat(astBinary.getOperator()).isEqualTo(OrOperator.OP);\n+    assertThat(left).isInstanceOf(AstBinary.class);\n+    assertThat(right).isInstanceOf(AstBinary.class);\n+\n+    assertLeftAndRightByOperator((AstBinary) left, \"a\", \"b\", AstBinary.EQ);\n+    assertLeftAndRightByOperator((AstBinary) right, \"c\", \"d\", AstBinary.EQ);\n+  }\n+\n+  @Test\n+  public void itParseSingleBinaryWithExpressionCondition() {\n+    AstNode astNode = buildExpressionNodes(\"#{'a' is equalto 'b'}\");\n+\n+    assertThat(astNode).isInstanceOf(AstMethod.class);\n+    assertForExpression(astNode, \"a\", \"b\", \"exptest:equalto\");\n+  }\n+\n+  @Test\n+  public void itParseBinaryOrWithEqualSymbolAndExpressionCondition() {\n+    AstNode astNode = buildExpressionNodes(\"#{'a' == 'b' or 'c' is equalto 'd'}\");\n+\n+    assertThat(astNode).isInstanceOf(AstBinary.class);\n+\n+    AstBinary astBinary = (AstBinary) astNode;\n+    AstNode left = astBinary.getChild(0);\n+    AstNode right = astBinary.getChild(1);\n+\n+    assertThat(astBinary.getOperator()).isEqualTo(OrOperator.OP);\n+    assertThat(left).isInstanceOf(AstBinary.class);\n+    assertThat(right).isInstanceOf(AstMethod.class);\n+\n+    assertLeftAndRightByOperator((AstBinary) left, \"a\", \"b\", AstBinary.EQ);\n+    assertForExpression(right, \"c\", \"d\", \"exptest:equalto\");\n+  }\n+\n+  @Test\n+  public void itParseBinaryOrWithExpressionsCondition() {\n+    AstNode astNode = buildExpressionNodes(\"#{'a' is equalto 'b' or 'c' is equalto 'd'}\");\n+\n+    assertThat(astNode).isInstanceOf(AstBinary.class);\n+\n+    AstBinary astBinary = (AstBinary) astNode;\n+    AstNode left = astBinary.getChild(0);\n+    AstNode right = astBinary.getChild(1);\n+\n+    assertThat(astBinary.getOperator()).isEqualTo(OrOperator.OP);\n+    assertThat(left).isInstanceOf(AstMethod.class);\n+    assertThat(right).isInstanceOf(AstMethod.class);\n+\n+    assertForExpression(left, \"a\", \"b\", \"exptest:equalto\");\n+    assertForExpression(right, \"c\", \"d\", \"exptest:equalto\");\n+  }\n+\n+  @Test\n+  public void itParseBinaryOrWithNegativeExpressionsCondition() {\n+    AstNode astNode = buildExpressionNodes(\n+      \"#{'a' is not equalto 'b' or 'c' is not equalto 'd'}\"\n+    );\n+\n+    assertThat(astNode).isInstanceOf(AstBinary.class);\n+\n+    AstBinary astBinary = (AstBinary) astNode;\n+    AstNode left = astBinary.getChild(0);\n+    AstNode right = astBinary.getChild(1);\n+\n+    assertThat(astBinary.getOperator()).isEqualTo(OrOperator.OP);\n+    assertThat(left).isInstanceOf(AstMethod.class);\n+    assertThat(right).isInstanceOf(AstMethod.class);\n+\n+    assertForExpression(left, \"a\", \"b\", \"exptest:equalto\");\n+    assertForExpression(right, \"c\", \"d\", \"exptest:equalto\");\n+  }\n+\n+  private void assertForExpression(\n+    AstNode astNode,\n+    String leftExpected,\n+    String rightExpected,\n+    String expression\n+  ) {\n+    AstIdentifier astIdentifier = (AstIdentifier) astNode.getChild(0).getChild(0);\n+    assertThat(astIdentifier.getName()).isEqualTo(expression);\n+\n+    AstParameters astParameters = (AstParameters) astNode.getChild(1);\n+    assertThat(astParameters.getChild(0)).isInstanceOf(AstString.class);\n+    assertThat(astParameters.getChild(1)).isInstanceOf(AstIdentifier.class);\n+    assertThat(astParameters.getChild(2)).isInstanceOf(AstString.class);\n+\n+    assertThat(astParameters.getChild(0).eval(null, null)).isEqualTo(leftExpected);\n+    assertThat(((AstIdentifier) astParameters.getChild(1)).getName())\n+      .isEqualTo(\"____int3rpr3t3r____\");\n+    assertThat(astParameters.getChild(2).eval(null, null)).isEqualTo(rightExpected);\n+  }\n+\n+  private void assertLeftAndRightByOperator(\n+    AstBinary astBinary,\n+    String leftExpected,\n+    String rightExpected,\n+    AstBinary.Operator operator\n+  ) {\n+    AstNode left = astBinary.getChild(0);\n+    AstNode right = astBinary.getChild(1);\n+\n+    assertThat(astBinary.getOperator()).isEqualTo(operator);\n+    assertThat(left).isInstanceOf(AstString.class);\n+    assertThat(right).isInstanceOf(AstString.class);\n+    assertThat(left.eval(null, null)).isEqualTo(leftExpected);\n+    assertThat(right.eval(null, null)).isEqualTo(rightExpected);\n+  }\n+\n+  private AstNode buildExpressionNodes(String input) {\n+    ExtendedCustomParser extendedParser = new ExtendedCustomParser(new Builder(), input);\n+    extendedParser.consumeTokenExpose();\n+    extendedParser.consumeTokenExpose();\n+\n+    try {\n+      return extendedParser.expr(true);\n+    } catch (Exception exception) {\n+      fail(exception.getMessage(), exception);\n+      return null;\n+    }\n+  }\n+\n+  private static class ExtendedCustomParser extends ExtendedParser {\n+\n+    private ExtendedCustomParser(Builder context, String input) {\n+      super(context, input);\n+    }\n+\n+    private void consumeTokenExpose() {\n+      try {\n+        super.consumeToken();\n+      } catch (Exception exception) {\n+        Assertions.fail(exception.getMessage(), exception);\n+      }\n+    }\n+  }\n+}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ExtendedSyntaxBuilderTest.java b/src/test/java/com/hubspot/jinjava/el/ExtendedSyntaxBuilderTest.java\nindex 7cc0ac0..9721986 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ExtendedSyntaxBuilderTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ExtendedSyntaxBuilderTest.java\n@@ -135,6 +135,11 @@ public class ExtendedSyntaxBuilderTest {\n   }\n \n   @Test\n+  public void conditionalExprWithOrConditionalAndCustomExpression() {\n+    assertThat(val(\"'a' is equalto 'b' or 'a' is equalto 'a'\")).isEqualTo(true);\n+  }\n+\n+  @Test\n   public void newlineEscChar() {\n     context.put(\"comment\", \"foo\\nbar\");\n     assertThat(val(\"comment|replace('\\\\n', '<br/>')\")).isEqualTo(\"foo<br/>bar\");\ndiff --git a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\nindex e16044f..c451576 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n@@ -120,6 +120,24 @@ public class DeferredTest {\n   }\n \n   @Test\n+  public void itResolveEqualToInOrCondition() {\n+    String output = interpreter.render(\n+      \"{% if 'a' is equalto 'b' or 'a' is equalto 'a' %}{{deferred}}{% endif %}\"\n+    );\n+    assertThat(output).isEqualTo(\"{{deferred}}\");\n+  }\n+\n+  @Test\n+  public void itPreserveDeferredVariableResolvingEqualToInOrCondition() {\n+    String inputOutputExpected =\n+      \"{% if 'a' is equalto 'b' or 'a' is equalto deferred %}preserved{% endif %}\";\n+    String output = interpreter.render(inputOutputExpected);\n+\n+    assertThat(output).isEqualTo(inputOutputExpected);\n+    assertThat(interpreter.getErrors()).isEmpty();\n+  }\n+\n+  @Test\n   public void itResolvesForTagWherePossible() {\n     String output = interpreter.render(\n       \"{% for i in [1, 2] %}{{i}}{{deferred}}{% endfor %}\"\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:42:41.106719Z", "commit_hash": "a478a39b62472d13fc1445d5aba4fe658557ed4d", "commit_message": "Tidy up tests using fixtures\n\n", "related_issues": "", "bug_patch": "diff --git a/src/test/resources/deferred/deferred-macro.jinja b/src/test/resources/deferred/deferred-macro.jinja\nnew file mode 100644\nindex 0000000..d6b6149\n--- /dev/null\n+++ b/src/test/resources/deferred/deferred-macro.jinja\n@@ -0,0 +1,11 @@\n+{%- macro inc_padding(width) -%}\n+{%- set padding = padding + width -%}\n+{{padding}}\n+{%- endmacro -%}\n+{{ padding }},\n+{%- set padding =  inc_padding(added_padding) | int -%}\n+{{ padding }},\n+{%- set padding = inc_padding(deferred) | int -%}\n+{{ padding}},\n+{%- set padding = inc_padding(added_padding) | int -%}\n+{{ padding }}\ndiff --git a/src/test/resources/deferred/deferred-map-access.jinja b/src/test/resources/deferred/deferred-map-access.jinja\nnew file mode 100644\nindex 0000000..09150fc\n--- /dev/null\n+++ b/src/test/resources/deferred/deferred-map-access.jinja\n@@ -0,0 +1,6 @@\n+{% set reference = deferredValue %}\n+{% if reference == 'resolved' %}\n+  {% set varSetInside = imported.map[deferredValue2.nonexistentprop] %}\n+{{ deferredValue2.nonexistentprop }}\n+{% endif %}\n+{{ varSetInside }}\ndiff --git a/src/test/resources/deferred/for-with-if-and-set.jinja b/src/test/resources/deferred/for-with-if-and-set.jinja\nnew file mode 100644\nindex 0000000..6f24209\n--- /dev/null\n+++ b/src/test/resources/deferred/for-with-if-and-set.jinja\n@@ -0,0 +1,6 @@\n+{% for item in resolved %}\n+   {% set varSetInside = 'inside first scope' %}\n+   {% if deferredValue %}\n+     {{ varSetInside }}\n+   {% endif %}\n+{% endfor %}\ndiff --git a/src/test/resources/deferred/set-in-deferred.jinja b/src/test/resources/deferred/set-in-deferred.jinja\nnew file mode 100644\nindex 0000000..0696fe2\n--- /dev/null\n+++ b/src/test/resources/deferred/set-in-deferred.jinja\n@@ -0,0 +1,5 @@\n+{% set reference = deferredValue %}\n+{% if reference == 'resolved' %}\n+   {% set varSetInside = 'set inside' %}\n+{% endif %}\n+{{ varSetInside }}\ndiff --git a/src/test/resources/deferred/set-within-lower-scope.jinja b/src/test/resources/deferred/set-within-lower-scope.jinja\nnew file mode 100644\nindex 0000000..fa1c3ed\n--- /dev/null\n+++ b/src/test/resources/deferred/set-within-lower-scope.jinja\n@@ -0,0 +1,12 @@\n+{%- for item in resolved -%}\n+   {%- set varSetInside = 'inside first scope' -%}\n+   {%- if deferredValue -%}\n+     {{ varSetInside }}\n+   {%- endif -%}\n+{%- endfor -%}\n+{%- for item in resolved -%}\n+   {%- set varSetInside = 'inside first scope2' -%}\n+   {%- if deferredValue -%}\n+     {{ varSetInside }}\n+   {%- endif -%}\n+{%- endfor -%}\ndiff --git a/src/test/resources/deferred/vars-in-deferred-node.jinja b/src/test/resources/deferred/vars-in-deferred-node.jinja\nnew file mode 100644\nindex 0000000..3a59180\n--- /dev/null\n+++ b/src/test/resources/deferred/vars-in-deferred-node.jinja\n@@ -0,0 +1,9 @@\n+{%- set varUsedInForScope = 'outside if statement' -%}\n+{%- for item in resolved -%}\n+   {%- if deferredValue -%}\n+{{ varUsedInForScope }}\n+{%- set varUsedInForScope = ' entered if statement' -%}\n+{%- endif -%}\n+\n+{{ varUsedInForScope }}\n+{%- endfor -%}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\nindex d536e55..a8be1a2 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n@@ -2,13 +2,15 @@ package com.hubspot.jinjava.interpret;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import com.google.common.base.Charsets;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.Resources;\n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.random.RandomNumberGeneratorStrategy;\n import com.hubspot.jinjava.util.DeferredValueUtils;\n+import java.io.IOException;\n import java.util.HashMap;\n-import java.util.Set;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -162,17 +164,7 @@ public class DeferredTest {\n     interpreter.getContext().put(\"padding\", 0);\n     interpreter.getContext().put(\"added_padding\", 10);\n     String deferredOutput = interpreter.render(\n-      \"{% macro inc_padding(width) %}\" +\n-      \"{% set padding = padding + width %}\" +\n-      \"{{padding}}\" +\n-      \"{% endmacro %}\" +\n-      \"{{ padding }},\" +\n-      \"{% set padding =  inc_padding(added_padding) | int %}\" +\n-      \"{{ padding }},\" +\n-      \"{% set padding = inc_padding(deferred) | int %}\" +\n-      \"{{ padding}},\" +\n-      \"{% set padding = inc_padding(added_padding) | int %}\" +\n-      \"{{ padding }}\"\n+      getFixtureTemplate(\"deferred-macro.jinja\")\n     );\n     Object padding = interpreter.getContext().get(\"padding\");\n     assertThat(padding).isInstanceOf(DeferredValue.class);\n@@ -185,20 +177,12 @@ public class DeferredTest {\n     interpreter.getContext().getGlobalMacro(\"inc_padding\").setDeferred(false);\n \n     String output = interpreter.render(deferredOutput);\n-    assertThat(output).isEqualTo(\"0,10,15,25\");\n+    assertThat(output.replace(\"\\n\", \"\")).isEqualTo(\"0,10,15,25\");\n   }\n \n   @Test\n   public void itDefersAllVariablesUsedInDeferredNode() {\n-    String template = \"\";\n-    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n-    template += \"{% for item in resolved %}\"; //Creating an inner scope\n-    template += \"   {% if deferredValue %}\"; //Deferred Node\n-    template += \"     {{ varUsedInForScope }}\";\n-    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n-    template += \"   {% endif %}\"; // end Deferred Node\n-    template += \"   {{ varUsedInForScope }}\";\n-    template += \"{% endfor %}\";\n+    String template = getFixtureTemplate(\"vars-in-deferred-node.jinja\");\n \n     interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n     String output = interpreter.render(template);\n@@ -213,8 +197,7 @@ public class DeferredTest {\n     );\n     deferredContext.forEach(interpreter.getContext()::put);\n     String secondRender = interpreter.render(output);\n-    assertThat(secondRender)\n-      .isEqualTo(\"        outside if statement           entered if statement\");\n+    assertThat(secondRender).isEqualTo(\"outside if statement entered if statement\");\n \n     interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n     interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n@@ -245,14 +228,7 @@ public class DeferredTest {\n \n   @Test\n   public void itPutsDeferredVariablesOnParentScopes() {\n-    String template = \"\";\n-    template += \"{% for item in resolved %}\"; //Creating an inner scope\n-    template += \"   {% set varSetInside = 'inside first scope' %}\";\n-    template += \"   {% if deferredValue %}\"; //Deferred Node\n-    template += \"     {{ varSetInside }}\";\n-    template += \"   {% endif %}\"; // end Deferred Node\n-    template += \"{% endfor %}\";\n-\n+    String template = getFixtureTemplate(\"for-with-if-and-set.jinja\");\n     interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n     interpreter.render(template);\n     assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n@@ -264,19 +240,7 @@ public class DeferredTest {\n \n   @Test\n   public void puttingDeferredVariablesOnParentScopesDoesNotBreakSetTag() {\n-    String template = \"\";\n-    template += \"{% for item in resolved %}\"; //Creating an inner scope\n-    template += \"   {% set varSetInside = 'inside first scope' %}\";\n-    template += \"   {% if deferredValue %}\"; //Deferred Node\n-    template += \"     {{ varSetInside }}\";\n-    template += \"   {% endif %}\"; // end Deferred Node\n-    template += \"{% endfor %}\";\n-    template += \"{% for item in resolved %}\"; //Creating an inner scope\n-    template += \"   {% set varSetInside = 'inside first scope2' %}\";\n-    template += \"   {% if deferredValue %}\"; //Deferred Node\n-    template += \"     {{ varSetInside }}\";\n-    template += \"   {% endif %}\"; // end Deferred Node\n-    template += \"{% endfor %}\";\n+    String template = getFixtureTemplate(\"set-within-lower-scope.jinja\");\n \n     interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n     String output = interpreter.render(template);\n@@ -293,17 +257,12 @@ public class DeferredTest {\n     deferredContext.forEach(interpreter.getContext()::put);\n     String secondRender = interpreter.render(output);\n     assertThat(secondRender.trim())\n-      .isEqualTo(\"inside first scope              inside first scope2\".trim());\n+      .isEqualTo(\"inside first scopeinside first scope2\".trim());\n   }\n \n   @Test\n   public void itMarksVariablesSetInDeferredBlockAsDeferred() {\n-    String template = \"\";\n-    template += \"   {% set reference = deferredValue %}\";\n-    template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n-    template += \"     {% set varSetInside = 'set inside' %}\";\n-    template += \"   {% endif %}\"; // end Deferred Node\n-    template += \"{{ varSetInside }}\";\n+    String template = getFixtureTemplate(\"set-in-deferred.jinja\");\n     JinjavaInterpreter.popCurrent();\n \n     interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n@@ -316,26 +275,8 @@ public class DeferredTest {\n \n   @Test\n   public void itMarksVariablesUsedAsMapKeysAsDeferred() {\n-    /*    {% set week_number = contact.MOweekno %}\n-\n-    {% set header_content = contents.map[contact.blmobase1] %}\n-    {% set email_content = contents.map[contact.blmobase1] %}\n-    {% set hero_content = heros.map[contact.blmobase1] %}\n-    {% set product_content = products.map[contact.blmobase1] %}\n-    {% if week_number == \"1\" %}\n-    {% set header_content = contents.map[contact.blmobase1] %}\n-    {% set email_content = contents.map[contact.blmobase1] %}\n-    {% set hero_content = heros.map[contact.blmobase1] %}\n-    {% set product_content = products.map[contact.blmobase1] %}*/\n+    String template = getFixtureTemplate(\"deferred-map-access.jinja\");\n \n-    String template = \"\";\n-    template += \"   {% set reference = deferredValue %}\";\n-    template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n-    template +=\n-      \"     {% set varSetInside = imported.map[deferredValue2.nonexistentprop] %}\";\n-    template += \"   {{ deferredValue2.nonexistentprop }}\";\n-    template += \"   {% endif %}\"; // end Deferred Node\n-    template += \"{{ varSetInside }}\";\n     JinjavaInterpreter.popCurrent();\n \n     interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n@@ -349,10 +290,20 @@ public class DeferredTest {\n     String output = interpreter.render(template);\n     assertThat(interpreter.getContext()).containsKey(\"deferredValue2\");\n     Object deferredValue2 = interpreter.getContext().get(\"deferredValue2\");\n-    Set<String> deferredVals = DeferredValueUtils.findAndMarkDeferredProperties(\n-      interpreter.getContext()\n-    );\n+    DeferredValueUtils.findAndMarkDeferredProperties(interpreter.getContext());\n     assertThat(deferredValue2).isInstanceOf(DeferredValue.class);\n-    assertThat(output).contains(\"{% set varSetInside = imported.map[deferredValue2] %}\");\n+    assertThat(output)\n+      .contains(\"{% set varSetInside = imported.map[deferredValue2.nonexistentprop] %}\");\n+  }\n+\n+  private String getFixtureTemplate(String templateLocation) {\n+    try {\n+      return Resources.toString(\n+        Resources.getResource(\"deferred/\" + templateLocation),\n+        Charsets.UTF_8\n+      );\n+    } catch (IOException e) {\n+      return null;\n+    }\n   }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:44:56.878528Z", "commit_hash": "de40fee56e3de6d789996caef47a952a5efe1a53", "commit_message": "Fix property splitting and initialise context in tests\n\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\nindex e0f34f5..e1e370f 100644\n--- a/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n+++ b/src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java\n@@ -88,7 +88,7 @@ public class DeferredValueUtils {\n     Set<String> propertiesUsed = findUsedProperties(templateSource);\n     return propertiesUsed\n       .stream()\n-      .map(prop -> prop.split(\"\\\\[\\\\.]\", 2)[0]) // split map accesses on .prop\n+      .map(prop -> prop.split(\"\\\\.\", 2)[0]) // split accesses on .prop\n       .filter(context::containsKey)\n       .collect(Collectors.toSet());\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\nindex f4cb2e0..c59e292 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n@@ -2,11 +2,13 @@ package com.hubspot.jinjava.interpret;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.random.RandomNumberGeneratorStrategy;\n import com.hubspot.jinjava.util.DeferredValueUtils;\n import java.util.HashMap;\n+import java.util.Set;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -299,7 +301,7 @@ public class DeferredTest {\n     String template = \"\";\n     template += \"   {% set reference = deferredValue %}\";\n     template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n-    template += \"     {{ set varSetInside = 'set inside' }}\";\n+    template += \"     {% set varSetInside = 'set inside' %}\";\n     template += \"   {% endif %}\"; // end Deferred Node\n     template += \"{{ varSetInside }}\";\n     JinjavaInterpreter.popCurrent();\n@@ -311,4 +313,43 @@ public class DeferredTest {\n     assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n     assertThat(output).contains(\"{{ varSetInside }}\");\n   }\n+\n+  @Test\n+  public void itMarksVariablesUsedAsMapKeysAsDeferred() {\n+    /*    {% set week_number = contact.MOweekno %}\n+\n+    {% set header_content = contents.map[contact.blmobase1] %}\n+    {% set email_content = contents.map[contact.blmobase1] %}\n+    {% set hero_content = heros.map[contact.blmobase1] %}\n+    {% set product_content = products.map[contact.blmobase1] %}\n+    {% if week_number == \"1\" %}\n+    {% set header_content = contents.map[contact.blmobase1] %}\n+    {% set email_content = contents.map[contact.blmobase1] %}\n+    {% set hero_content = heros.map[contact.blmobase1] %}\n+    {% set product_content = products.map[contact.blmobase1] %}*/\n+\n+    String template = \"\";\n+    template += \"   {% set reference = deferredValue %}\";\n+    template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n+    template += \"     {% set varSetInside = imported.map[deferredValue2] %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{{ varSetInside }}\";\n+    JinjavaInterpreter.popCurrent();\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    interpreter.getContext().put(\"deferredValue2\", DeferredValue.instance(\"key\"));\n+    ImmutableMap<String, ImmutableMap<String, String>> map = ImmutableMap.of(\n+      \"map\",\n+      ImmutableMap.of(\"key\", \"value\")\n+    );\n+    interpreter.getContext().put(\"imported\", map);\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    Set<String> deferredVals = DeferredValueUtils.findAndMarkDeferredProperties(\n+      interpreter.getContext()\n+    );\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    assertThat(output).contains(\"{{ varSetInside }}\");\n+  }\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/util/DeferredValueUtilsTest.java b/src/test/java/com/hubspot/jinjava/util/DeferredValueUtilsTest.java\nindex 25f8855..4285b88 100644\n--- a/src/test/java/com/hubspot/jinjava/util/DeferredValueUtilsTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/DeferredValueUtilsTest.java\n@@ -27,11 +27,15 @@ public class DeferredValueUtilsTest {\n \n   @Test\n   public void itFindsGlobalProperties() {\n-    Context context = getContext(\n-      Lists.newArrayList(getNodeForClass(TagNode.class, \"{% if java_bean %}\"))\n-    );\n+    Context context = new Context();\n     context.put(\"java_bean\", getPopulatedJavaBean());\n \n+    context =\n+      getContext(\n+        Lists.newArrayList(getNodeForClass(TagNode.class, \"{% if java_bean %}\")),\n+        Optional.of(context)\n+      );\n+\n     Set<String> deferredProperties = DeferredValueUtils.findAndMarkDeferredProperties(\n       context\n     );\n@@ -67,20 +71,23 @@ public class DeferredValueUtilsTest {\n \n   @Test\n   public void itDefersTheCompleteObjectWhenAtLeastOnePropertyIsUsed() {\n-    Context context = getContext(\n-      Lists.newArrayList(\n-        getNodeForClass(\n-          TagNode.class,\n-          \"{% if java_bean.property_one %}\",\n-          Optional.empty(),\n-          Optional.empty()\n-        )\n-      )\n-    );\n+    Context context = new Context();\n     context.put(\"java_bean\", getPopulatedJavaBean());\n \n-    Set<String> deferredProps = DeferredValueUtils.findAndMarkDeferredProperties(context);\n-    DeferredValueUtils.markDeferredProperties(context, deferredProps);\n+    context =\n+      getContext(\n+        Lists.newArrayList(\n+          getNodeForClass(\n+            TagNode.class,\n+            \"{% if java_bean.property_one %}\",\n+            Optional.empty(),\n+            Optional.empty()\n+          )\n+        ),\n+        Optional.of(context)\n+      );\n+\n+    DeferredValueUtils.findAndMarkDeferredProperties(context);\n     assertThat(context.containsKey(\"java_bean\")).isTrue();\n     assertThat(context.get(\"java_bean\")).isInstanceOf(DeferredValue.class);\n     DeferredValue deferredValue = (DeferredValue) context.get(\"java_bean\");\n@@ -102,8 +109,7 @@ public class DeferredValueUtilsTest {\n       )\n     );\n     context.put(\"property\", null);\n-    Set<String> deferredProps = DeferredValueUtils.findAndMarkDeferredProperties(context);\n-    DeferredValueUtils.markDeferredProperties(context, deferredProps);\n+    DeferredValueUtils.findAndMarkDeferredProperties(context);\n \n     assertThat(context.get(\"property\")).isNull();\n   }\n@@ -173,7 +179,18 @@ public class DeferredValueUtilsTest {\n   }\n \n   private Context getContext(List<? extends Node> nodes) {\n+    return getContext(nodes, Optional.empty());\n+  }\n+\n+  private Context getContext(\n+    List<? extends Node> nodes,\n+    Optional<Context> initialContext\n+  ) {\n     Context context = new Context();\n+\n+    if (initialContext.isPresent()) {\n+      context = initialContext.get();\n+    }\n     for (Node node : nodes) {\n       context.handleDeferredNode(node);\n     }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:47:10.149185Z", "commit_hash": "6ec3b095dcc8a6b4867b66a1bc4bcfb402889f57", "commit_message": "Merge pull request #398 from HubSpot/fix-slice-filter\n\nFix implementation for slice filter", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/SliceFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/SliceFilter.java\nindex 3b36e72..4468393 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/SliceFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/SliceFilter.java\n@@ -1,11 +1,15 @@\n package com.hubspot.jinjava.lib.filter;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.commons.lang3.math.NumberUtils;\n \n-import com.google.common.collect.Iterators;\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.InvalidArgumentException;\n+import com.hubspot.jinjava.interpret.InvalidReason;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.util.ForLoop;\n@@ -16,6 +20,7 @@ import com.hubspot.jinjava.util.ObjectIterator;\n     input = @JinjavaParam(value = \"value\", type = \"sequence\", desc = \"The sequence or dict that the filter is applied to\", required = true),\n     params = {\n         @JinjavaParam(value = \"slices\", type = \"number\", desc = \"Specifies how many items will be sliced\", required = true),\n+        @JinjavaParam(value = \"fillWith\", type = \"object\", desc = \"Specifies which object to use to fill missing values on final iteration\", required = false),\n     },\n     snippets = {\n         @JinjavaSnippet(\n@@ -47,7 +52,31 @@ public class SliceFilter implements Filter {\n     }\n \n     int slices = NumberUtils.toInt(args[0], 3);\n-    return Iterators.paddedPartition(loop, slices);\n+    if (slices <= 0) {\n+      throw new InvalidArgumentException(interpreter, this, InvalidReason.POSITIVE_NUMBER, 0, args[0]);\n+    }\n+    List<List<Object>> result = new ArrayList<>();\n+\n+    List<Object> currentList = null;\n+    int i = 0;\n+    while (loop.hasNext()) {\n+      Object next = loop.next();\n+      if (i % slices == 0) {\n+        currentList = new ArrayList<>(slices);\n+        result.add(currentList);\n+      }\n+      currentList.add(next);\n+      i++;\n+    }\n+\n+    if (args.length > 1 && currentList != null) {\n+      Object fillWith = args[1];\n+      while (currentList.size() < slices) {\n+        currentList.add(fillWith);\n+      }\n+    }\n+\n+    return result;\n   }\n \n }\ndiff --git a/src/test/resources/filter/slice-filter-empty.jinja b/src/test/resources/filter/slice-filter-empty.jinja\nnew file mode 100644\nindex 0000000..ebaa9b0\n--- /dev/null\n+++ b/src/test/resources/filter/slice-filter-empty.jinja\n@@ -0,0 +1,6 @@\n+{%- for column in items|slice(2, 'hello') %}\n+  {{ loop.index }}\n+ {%- for item in column %}\n+    {{ item }}\n+  {%- endfor %}\n+{%- endfor %}\ndiff --git a/src/test/resources/filter/slice-filter-negative.jinja b/src/test/resources/filter/slice-filter-negative.jinja\nnew file mode 100644\nindex 0000000..b2988a5\n--- /dev/null\n+++ b/src/test/resources/filter/slice-filter-negative.jinja\n@@ -0,0 +1,6 @@\n+{%- for column in items|slice(-1, 'hello') %}\n+  {{ loop.index }}\n+ {%- for item in column %}\n+    {{ item }}\n+  {%- endfor %}\n+{%- endfor %}\ndiff --git a/src/test/resources/filter/slice-filter-replacement.jinja b/src/test/resources/filter/slice-filter-replacement.jinja\nnew file mode 100644\nindex 0000000..ebaa9b0\n--- /dev/null\n+++ b/src/test/resources/filter/slice-filter-replacement.jinja\n@@ -0,0 +1,6 @@\n+{%- for column in items|slice(2, 'hello') %}\n+  {{ loop.index }}\n+ {%- for item in column %}\n+    {{ item }}\n+  {%- endfor %}\n+{%- endfor %}\ndiff --git a/src/test/resources/filter/slice-filter-zero.jinja b/src/test/resources/filter/slice-filter-zero.jinja\nnew file mode 100644\nindex 0000000..1cfb278\n--- /dev/null\n+++ b/src/test/resources/filter/slice-filter-zero.jinja\n@@ -0,0 +1,6 @@\n+{%- for column in items|slice(0, 'hello') %}\n+  {{ loop.index }}\n+ {%- for item in column %}\n+    {{ item }}\n+  {%- endfor %}\n+{%- endfor %}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SliceFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SliceFilterTest.java\nindex b02d04b..8c9cfe0 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SliceFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SliceFilterTest.java\n@@ -13,6 +13,7 @@ import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import com.google.common.io.Resources;\n import com.hubspot.jinjava.Jinjava;\n+import com.hubspot.jinjava.interpret.RenderResult;\n \n public class SliceFilterTest {\n \n@@ -24,7 +25,7 @@ public class SliceFilterTest {\n   }\n \n   @Test\n-  public void testSimpleSlice() throws Exception {\n+  public void itSlicesLists() throws Exception {\n     Document dom = Jsoup.parseBodyFragment(\n         jinjava.render(\n             Resources.toString(Resources.getResource(\"filter/slice-filter.jinja\"), StandardCharsets.UTF_8),\n@@ -33,7 +34,74 @@ public class SliceFilterTest {\n     assertThat(dom.select(\".columwrapper ul\")).hasSize(3);\n     assertThat(dom.select(\".columwrapper .column-1 li\")).hasSize(3);\n     assertThat(dom.select(\".columwrapper .column-2 li\")).hasSize(3);\n-    assertThat(dom.select(\".columwrapper .column-3 li\")).hasSize(3);\n+    assertThat(dom.select(\".columwrapper .column-3 li\")).hasSize(1);\n+  }\n+\n+  @Test\n+  public void itSlicesListWithReplacement() throws Exception {\n+    String result = jinjava.render(\n+        Resources.toString(Resources.getResource(\"filter/slice-filter-replacement.jinja\"), StandardCharsets.UTF_8),\n+        ImmutableMap.of(\"items\", (Object) Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\")));\n+\n+    assertThat(result).isEqualTo(\"\\n\" +\n+        \"  1\\n\" +\n+        \"    a\\n\" +\n+        \"    b\\n\" +\n+        \"  2\\n\" +\n+        \"    c\\n\" +\n+        \"    d\\n\" +\n+        \"  3\\n\" +\n+        \"    e\\n\" +\n+        \"    hello\\n\" +\n+        \"\");\n+  }\n+\n+  @Test\n+  public void itSlicesListWithReplacementButDivisibleSlices() throws Exception {\n+    String result = jinjava.render(\n+        Resources.toString(Resources.getResource(\"filter/slice-filter-replacement.jinja\"), StandardCharsets.UTF_8),\n+        ImmutableMap.of(\"items\", (Object) Lists.newArrayList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")));\n+\n+    assertThat(result).isEqualTo(\"\\n\" +\n+        \"  1\\n\" +\n+        \"    a\\n\" +\n+        \"    b\\n\" +\n+        \"  2\\n\" +\n+        \"    c\\n\" +\n+        \"    d\\n\" +\n+        \"  3\\n\" +\n+        \"    e\\n\" +\n+        \"    f\\n\" +\n+        \"\");\n+  }\n+\n+  @Test\n+  public void itSlicesEmptyList() throws Exception {\n+    String result = jinjava.render(\n+        Resources.toString(Resources.getResource(\"filter/slice-filter-empty.jinja\"), StandardCharsets.UTF_8),\n+        ImmutableMap.of(\"items\", (Object) Lists.newArrayList()));\n+\n+    assertThat(result).isEqualTo(\"\\n\");\n+  }\n+\n+  @Test\n+  public void itAddsErrorOnNegativeSlice() throws Exception {\n+    RenderResult result = jinjava.renderForResult(\n+        Resources.toString(Resources.getResource(\"filter/slice-filter-negative.jinja\"), StandardCharsets.UTF_8),\n+        ImmutableMap.of(\"items\", (Object) Lists.newArrayList()));\n+\n+    assertThat(result.getErrors()).hasSize(1);\n+    assertThat(result.getErrors().get(0).getMessage()).contains(\"with value -1 must be a positive number\");\n+  }\n+\n+  @Test\n+  public void itAddsErrorOnZeroSlice() throws Exception {\n+    RenderResult result = jinjava.renderForResult(\n+        Resources.toString(Resources.getResource(\"filter/slice-filter-zero.jinja\"), StandardCharsets.UTF_8),\n+        ImmutableMap.of(\"items\", (Object) Lists.newArrayList()));\n+\n+    assertThat(result.getErrors()).hasSize(1);\n+    assertThat(result.getErrors().get(0).getMessage()).contains(\"with value 0 must be a positive number\");\n   }\n \n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:51:59.806939Z", "commit_hash": "e0319095232aa70068cc0f321647ed6c5055a92b", "commit_message": "Add basic deferred value support for from tag (#381)\n\n* First draft of deferring from tag including macros\r\n\r\n* Checkstyle\r\n\r\n* Add more tests\r\n\r\n* Remove incorrect assert\r\n\r\n* Add test that checks deferring macros in depth and update DeferredValue & MacroFunction\r\n\r\n* Checkstyle\r\n\r\n* Make constructor private and overload instance method\r\n\r\n* Fixes #159: Adds dict support for DefaultFilter\r\n\r\n* removes undesired code from Filter.java\r\n\r\n* removes whitespaces from DateTimeFormatFilter.java\r\n\r\n* Fixes Style Check Errors\r\n\r\n* Removes stringArgs from DateTimeFormatFilter\r\n\r\n* Revert \"Fixes #159: Adds dict support for DefaultFilter\"\r\n\r\n* Changes DefaultFilter to extend AdvancedFilter\r\n\r\n* adds PyList support to ForTag\r\n\r\n* adds tests for ForTag\r\n\r\n* removes escape filter from fortag test\r\n\r\n* Fix resoncstruct end to honor trim tags\r\n\r\n* Add reconstructImage to MacroFunction\r\n\r\n* Add test for reconstructing macro with no trim tags\r\n\r\n* Whitespace fix\r\n\r\n* Implement safe filter as SafeString and handle SafeString in filters, functions and expressions (#385)\r\n\r\n* Start implementing safe filter\r\n\r\n* Remove comment about pass-through implementation\r\n\r\n* Return var if it's not instance of string instead of throwing\r\n\r\n* Add test for pass-through\r\n\r\n* Add support for SafeString to all filters which handle Strings\r\n\r\n* Remove utils for string reverse filter\r\n\r\n* Handle SafeString in truncate function\r\n\r\n* Formatting fix\r\n\r\n* Add SafeStringFilter interface\r\n\r\n* Handle safe strings in filters\r\n\r\n* rm trailing space\r\n\r\n* Formatting fixes\r\n\r\n* Move safeFilter method to Filter IF and remove SafeFilter IF\r\n\r\n* rm space\r\n\r\n* Change behaviour of Urlize filter to not always return a SafeString\r\n\r\n* Code style changes\r\n\r\n* Remove unnecessary call to safeString\r\n\r\n* Style fix\r\n\r\n* Add tests to handle Urlize string being escaped and made safe\r\n\r\n* rm hardcoded string\r\n\r\n* rm uneeded getValue\r\n\r\n* Add SafeString type as str\r\n\r\n* Handle SafeString in expressions\r\n\r\nCo-authored-by: Joe <Joeoh@users.noreply.github.com>\r\n\r\n* Fix template error line numbers (#380)\r\n\r\n* Fix line numbers\r\n\r\n* add to some more places\r\n\r\n* two levels deep test\r\n\r\n* Fix case with child interpreter\r\n\r\n* Add deprecation\r\n\r\n* Add another test\r\n\r\n* Update error messages\r\n\r\n* Fix up error messages and tests\r\n\r\n* Fix case with scopes\r\n\r\n* Add check for inherit\r\n\r\n* Put everything on the path stack\r\n\r\n* always push parent\r\n\r\n* remove callstack crud\r\n\r\n* Set back path management\r\n\r\n* Fix extend lineNo/position and keep track for each block\r\n\r\n* cleanup\r\n\r\n* Add test for extends\r\n\r\n* Add more tests\r\n\r\n* Check parent call stack for emtpy and line numbers\r\n\r\n* Fix test\r\n\r\n* Reorient line numbers when evaluating macros, make sure to pop import path off of stack\r\n\r\n* Add test for imported macros\r\n\r\n* Reorient line numbers when resolving blocks\r\n\r\n* Reorient line numbers when processing extend parents\r\n\r\n* Add tests for extends + includes\r\n\r\n* Revert \"Implement safe filter as SafeString and handle SafeString in filters, functions and expressions (#385)\"\r\n\r\nThis reverts commit a6bea47f670558a8bcdab9282343fea1fb7f8016.\r\n\r\n* Implement safe filter as SafeString and handle SafeString in filters, functions and expressions (#394)\r\n\r\n* Start implementing safe filter\r\n\r\n* Remove comment about pass-through implementation\r\n\r\n* Return var if it's not instance of string instead of throwing\r\n\r\n* Add test for pass-through\r\n\r\n* Handle safestrings and call implementor\r\n\r\n* Add tests\r\n\r\n* Handle SafeString in filter using kwargs\r\n\r\n* Handle safe strings in most simple expressions\r\n\r\n* Handle SafeString in IsUpperExp\r\n\r\n* Handle SafeString in filters. Allow overriding from within filter\r\n\r\n* Formatting fixes\r\n\r\nCo-authored-by: jkollmann <48923512+jkollmann@users.noreply.github.com>\r\n\r\n* First draft of deferring from tag including macros\r\n\r\n* Checkstyle\r\n\r\n* Add more tests\r\n\r\n* Remove incorrect assert\r\n\r\n* Add test that checks deferring macros in depth and update DeferredValue & MacroFunction\r\n\r\n* Checkstyle\r\n\r\n* Make constructor private and overload instance method\r\n\r\n* Fix resoncstruct end to honor trim tags\r\n\r\n* Add reconstructImage to MacroFunction\r\n\r\n* Add test for reconstructing macro with no trim tags\r\n\r\n* Whitespace fix\r\n\r\n* rm duplicate statement after merge\r\n\r\nCo-authored-by: Manish Devgan <manish.nsit8@gmail.com>\r\nCo-authored-by: Jeff Boulter <jeff@boulter.com>\r\nCo-authored-by: Joe <Joeoh@users.noreply.github.com>\r\nCo-authored-by: Matt Coley <matthewjcoley@gmail.com>\r\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\nindex 42c04f6..f9f62d3 100644\n--- a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n@@ -34,6 +34,8 @@ import com.hubspot.jinjava.el.ext.ExtendedParser;\n import com.hubspot.jinjava.el.ext.JinjavaBeanELResolver;\n import com.hubspot.jinjava.el.ext.JinjavaListELResolver;\n import com.hubspot.jinjava.el.ext.NamedParameter;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.DisabledException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.LazyExpression;\n@@ -207,6 +209,10 @@ public class JinjavaInterpreterResolver extends SimpleResolver {\n               value = ((LazyExpression) value).get();\n             }\n \n+            if (value instanceof DeferredValue) {\n+              throw new DeferredValueException(propertyName, interpreter.getLineNumber(), interpreter.getPosition());\n+            }\n+\n           } catch (PropertyNotFoundException e) {\n             if (errOnUnknownProp) {\n               interpreter.addError(TemplateError.fromUnknownProperty(base, propertyName, interpreter.getLineNumber(), -1));\ndiff --git a/src/main/java/com/hubspot/jinjava/el/ext/AstMacroFunction.java b/src/main/java/com/hubspot/jinjava/el/ext/AstMacroFunction.java\nindex 69c31f3..d0ffdf0 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/AstMacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/AstMacroFunction.java\n@@ -7,6 +7,7 @@ import javax.el.ELException;\n \n import com.google.common.collect.ImmutableMap;\n import com.hubspot.jinjava.interpret.CallStack;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.MacroTagCycleException;\n import com.hubspot.jinjava.interpret.TemplateError;\n@@ -30,6 +31,10 @@ public class AstMacroFunction extends AstFunction {\n     MacroFunction macroFunction = interpreter.getContext().getGlobalMacro(getName());\n     if (macroFunction != null) {\n \n+      if (macroFunction.isDeferred()) {\n+        throw new DeferredValueException(getName(), interpreter.getLineNumber(), interpreter.getPosition());\n+      }\n+\n       CallStack macroStack = interpreter.getContext().getMacroStack();\n       if (!macroFunction.isCaller()) {\n         try {\ndiff --git a/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java b/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java\nindex deb1efe..50c44dc 100644\n--- a/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java\n+++ b/src/main/java/com/hubspot/jinjava/interpret/DeferredValue.java\n@@ -8,10 +8,23 @@ package com.hubspot.jinjava.interpret;\n public class DeferredValue {\n   private static final DeferredValue INSTANCE = new DeferredValue();\n \n-  private DeferredValue() {\n+  private Object originalValue;\n+\n+  private DeferredValue() { }\n+\n+  private DeferredValue(Object originalValue) {\n+    this.originalValue = originalValue;\n+  }\n+\n+  public Object getOriginalValue() {\n+    return originalValue;\n   }\n \n   public static DeferredValue instance() {\n     return INSTANCE;\n   }\n+\n+  public static DeferredValue instance(Object originalValue) {\n+    return new DeferredValue(originalValue);\n+  }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\nindex fac2dd0..72994cd 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/fn/MacroFunction.java\n@@ -7,6 +7,7 @@ import java.util.Optional;\n \n import com.hubspot.jinjava.el.ext.AbstractCallableMethod;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.tree.Node;\n@@ -27,8 +28,11 @@ public class MacroFunction extends AbstractCallableMethod {\n   private final Context localContextScope;\n \n   private final int definitionLineNumber;\n+\n   private final int definitionStartPosition;\n \n+  private boolean deferred;\n+\n   public MacroFunction(List<Node> content,\n                        String name,\n                        LinkedHashMap<String, Object> argNamesWithDefaults,\n@@ -42,6 +46,7 @@ public class MacroFunction extends AbstractCallableMethod {\n     this.localContextScope = localContextScope;\n     this.definitionLineNumber = lineNumber;\n     this.definitionStartPosition = startPosition;\n+    this.deferred = false;\n   }\n \n   @Override\n@@ -79,13 +84,32 @@ public class MacroFunction extends AbstractCallableMethod {\n         result.append(node.render(interpreter));\n       }\n \n+      if (!interpreter.getContext().getDeferredNodes().isEmpty()) {\n+        throw new DeferredValueException(getName(), interpreter.getLineNumber(), interpreter.getPosition());\n+      }\n+\n       return result.toString();\n     } finally {\n       importFile.ifPresent(path -> interpreter.getContext().getCurrentPathStack().pop());\n     }\n   }\n \n+  public void setDeferred(boolean deferred) {\n+    this.deferred = deferred;\n+  }\n+\n+  public boolean isDeferred() {\n+    return deferred;\n+  }\n+\n   public boolean isCaller() {\n     return caller;\n   }\n+\n+  public String reconstructImage() {\n+    if (content != null && !content.isEmpty()) {\n+      return content.get(0).getParent().reconstructImage();\n+    }\n+    return \"\";\n+  }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/FromTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/FromTag.java\nindex 0222d69..1deaef9 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/FromTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/FromTag.java\n@@ -12,6 +12,8 @@ import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.FromTagCycleException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n@@ -108,6 +110,7 @@ public class FromTag implements Tag {\n \n         interpreter.addAllChildErrors(templateFile, child.getErrorsCopy());\n \n+        boolean importsDeferredValue = false;\n         for (Map.Entry<String, String> importMapping : imports.entrySet()) {\n           Object val = child.getContext().getGlobalMacro(importMapping.getKey());\n \n@@ -118,10 +121,31 @@ public class FromTag implements Tag {\n \n             if (val != null) {\n               interpreter.getContext().put(importMapping.getValue(), val);\n+              if (val instanceof DeferredValue) {\n+                importsDeferredValue = true;\n+              }\n             }\n           }\n         }\n \n+        if (importsDeferredValue) {\n+          for (Map.Entry<String, String> importMapping : imports.entrySet()) {\n+            Object val = child.getContext().getGlobalMacro(importMapping.getKey());\n+            if (val != null) {\n+              MacroFunction macro = (MacroFunction) val;\n+              macro.setDeferred(true);\n+              interpreter.getContext().addGlobalMacro(macro);\n+            } else {\n+              val = child.getContext().get(importMapping.getKey());\n+              if (val != null) {\n+                interpreter.getContext().put(importMapping.getValue(), DeferredValue.instance());\n+              }\n+            }\n+          }\n+\n+          throw new DeferredValueException(templateFile, tagNode.getLineNumber(), tagNode.getStartPosition());\n+        }\n+\n         return \"\";\n       } catch (IOException e) {\n         throw new InterpretException(e.getMessage(), e, tagNode.getLineNumber(), tagNode.getStartPosition());\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\nindex c34b4b7..b32081c 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ImportTag.java\n@@ -113,15 +113,29 @@ public class ImportTag implements Tag {\n \n       Map<String, Object> childBindings = child.getContext().getSessionBindings();\n \n-      // If the template depends on deferred values it should not be rendered and all defined variables should be deferred too\n+      // If the template depends on deferred values it should not be rendered and all defined variables and macros should be deferred too\n       if (!child.getContext().getDeferredNodes().isEmpty()) {\n         node.getChildren().forEach(deferredChild -> interpreter.getContext().addDeferredNode(deferredChild));\n         if (StringUtils.isBlank(contextVar)) {\n+          for (MacroFunction macro : child.getContext().getGlobalMacros().values()) {\n+            macro.setDeferred(true);\n+            interpreter.getContext().addGlobalMacro(macro);\n+          }\n           childBindings.remove(Context.GLOBAL_MACROS_SCOPE_KEY);\n           childBindings.remove(Context.IMPORT_RESOURCE_PATH_KEY);\n           childBindings.keySet().forEach(key -> interpreter.getContext().put(key, DeferredValue.instance()));\n         } else {\n-          interpreter.getContext().put(contextVar, DeferredValue.instance());\n+          for (Map.Entry<String, MacroFunction> macroEntry : child.getContext().getGlobalMacros().entrySet()) {\n+            MacroFunction macro = macroEntry.getValue();\n+            macro.setDeferred(true);\n+            childBindings.put(macroEntry.getKey(), macro);\n+          }\n+          childBindings.remove(Context.GLOBAL_MACROS_SCOPE_KEY);\n+          childBindings.remove(Context.IMPORT_RESOURCE_PATH_KEY);\n+          for (String key: childBindings.keySet()) {\n+            childBindings.put(key, DeferredValue.instance());\n+          }\n+          interpreter.getContext().put(contextVar, childBindings);\n         }\n \n         throw new DeferredValueException(templateFile, tagNode.getLineNumber(), tagNode.getStartPosition());\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\nindex 81ec671..636d279 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/MacroTag.java\n@@ -13,6 +13,7 @@ import com.google.common.collect.Lists;\n import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n@@ -77,6 +78,7 @@ public class MacroTag implements Tag {\n     LinkedHashMap<String, Object> argNamesWithDefaults = new LinkedHashMap<>();\n \n     List<String> argList = Lists.newArrayList(ARGS_SPLITTER.split(args));\n+    boolean deferred = false;\n     for (int i = 0; i < argList.size(); i++) {\n       String arg = argList.get(i);\n \n@@ -91,8 +93,12 @@ public class MacroTag implements Tag {\n           }\n         }\n \n-        Object argVal = interpreter.resolveELExpression(argValStr.toString(), tagNode.getLineNumber());\n-        argNamesWithDefaults.put(argName, argVal);\n+        try {\n+          Object argVal = interpreter.resolveELExpression(argValStr.toString(), tagNode.getLineNumber());\n+          argNamesWithDefaults.put(argName, argVal);\n+        } catch (DeferredValueException e) {\n+          deferred = true;\n+        }\n       } else {\n         argNamesWithDefaults.put(arg, null);\n       }\n@@ -100,8 +106,14 @@ public class MacroTag implements Tag {\n \n     MacroFunction macro = new MacroFunction(tagNode.getChildren(), name, argNamesWithDefaults,\n         false, interpreter.getContext(), interpreter.getLineNumber(), interpreter.getPosition());\n+    macro.setDeferred(deferred);\n+\n     interpreter.getContext().addGlobalMacro(macro);\n \n+    if (deferred) {\n+      throw new DeferredValueException(name, tagNode.getLineNumber(), tagNode.getStartPosition());\n+    }\n+\n     return \"\";\n   }\n }\ndiff --git a/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\nindex 7123bcd..71bea91 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n@@ -16,7 +16,6 @@\n package com.hubspot.jinjava.lib.tag;\n \n import java.util.List;\n-import java.util.stream.Stream;\n \n import org.apache.commons.lang3.StringUtils;\n \n@@ -104,7 +103,19 @@ public class SetTag implements Tag {\n         interpreter.getContext().put(var, interpreter.resolveELExpression(expr, tagNode.getLineNumber()));\n       }\n     } catch (DeferredValueException e) {\n-      Stream.of(varTokens).forEach(varToken -> interpreter.getContext().put(varToken.trim(), DeferredValue.instance()));\n+      for (String varToken : varTokens) {\n+        String key = varToken.trim();\n+        Object originalValue = interpreter.getContext().get(key);\n+        if (originalValue != null) {\n+          if (originalValue instanceof DeferredValue) {\n+            interpreter.getContext().put(key, originalValue);\n+          } else {\n+            interpreter.getContext().put(key, DeferredValue.instance(originalValue));\n+          }\n+        } else {\n+          interpreter.getContext().put(key, DeferredValue.instance());\n+        }\n+      }\n       throw e;\n     }\n \ndiff --git a/src/main/java/com/hubspot/jinjava/tree/TagNode.java b/src/main/java/com/hubspot/jinjava/tree/TagNode.java\nindex 8f06d5c..529405b 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/TagNode.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/TagNode.java\n@@ -15,11 +15,11 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree;\n \n+import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.InvalidArgumentException;\n import com.hubspot.jinjava.interpret.InvalidInputException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n-import com.hubspot.jinjava.interpret.DeferredValueException;\n import com.hubspot.jinjava.lib.tag.Tag;\n import com.hubspot.jinjava.tree.output.OutputNode;\n import com.hubspot.jinjava.tree.output.RenderedOutputNode;\n@@ -104,14 +104,17 @@ public class TagNode extends Node {\n   }\n \n   public String reconstructEnd() {\n-    return String.format(\n-        \"%s%s %s %s%s\",\n-        TokenScannerSymbols.TOKEN_EXPR_START_CHAR,\n-        TokenScannerSymbols.TOKEN_TAG_CHAR,\n-        getEndName(),\n-        TokenScannerSymbols.TOKEN_TAG_CHAR,\n-        TokenScannerSymbols.TOKEN_EXPR_END_CHAR\n-    );\n+    StringBuilder stringBuilder = new StringBuilder();\n+    stringBuilder.append(TokenScannerSymbols.TOKEN_EXPR_START_CHAR).append(TokenScannerSymbols.TOKEN_TAG_CHAR);\n+    if (getChildren() != null && !getChildren().isEmpty() && getChildren().getLast().getMaster().isRightTrim()) {\n+      stringBuilder.append(TokenScannerSymbols.TOKEN_TRIM_CHAR);\n+    }\n+    stringBuilder.append(\" \").append(getEndName()).append(\" \");\n+    if (getMaster().isRightTrimAfterEnd()) {\n+      stringBuilder.append(TokenScannerSymbols.TOKEN_TRIM_CHAR);\n+    }\n+    stringBuilder.append(TokenScannerSymbols.TOKEN_TAG_CHAR).append(TokenScannerSymbols.TOKEN_EXPR_END_CHAR);\n+    return stringBuilder.toString();\n   }\n \n }\ndiff --git a/src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java b/src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java\nindex ed41ab5..80b664a 100644\n--- a/src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java\n+++ b/src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java\n@@ -25,6 +25,7 @@ public interface TokenScannerSymbols {\n   char TOKEN_EXPR_START_CHAR = '{';\n   char TOKEN_EXPR_END_CHAR = '}';\n   char TOKEN_NEWLINE_CHAR = '\\n';\n+  char TOKEN_TRIM_CHAR = '-';\n \n   int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n   int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n@@ -34,5 +35,6 @@ public interface TokenScannerSymbols {\n   int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n   int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n   int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n+  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n \n }\ndiff --git a/src/test/resources/tags/macrotag/simple-no-trim.jinja b/src/test/resources/tags/macrotag/simple-no-trim.jinja\nnew file mode 100644\nindex 0000000..e8711c7\n--- /dev/null\n+++ b/src/test/resources/tags/macrotag/simple-no-trim.jinja\n@@ -0,0 +1,14 @@\n+{% macro getPath() %}\n+\n+\n+\n+\n+\n+\n+                  Hello {{ myname }}\n+\n+\n+\n+\n+\n+{% endmacro %}\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\nindex e96b60f..39543ea 100644\n--- a/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n+++ b/src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java\n@@ -2,6 +2,7 @@ package com.hubspot.jinjava.interpret;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -24,6 +25,12 @@ public class DeferredTest {\n     interpreter = new JinjavaInterpreter(jinjava, context, config);\n     interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n     interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+  }\n+\n+  @After\n+  public void teardown() {\n+    JinjavaInterpreter.popCurrent();\n   }\n \n   @Test\n@@ -135,4 +142,35 @@ public class DeferredTest {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+\n+  @Test\n+  public void itDefersMacro() {\n+    interpreter.getContext().put(\"padding\", 0);\n+    interpreter.getContext().put(\"added_padding\", 10);\n+    String deferredOutput = interpreter.render(\n+        \"{% macro inc_padding(width) %}\" +\n+            \"{% set padding = padding + width %}\" +\n+            \"{{padding}}\" +\n+            \"{% endmacro %}\" +\n+            \"{{ padding }},\" +\n+            \"{% set padding =  inc_padding(added_padding) | int %}\" +\n+            \"{{ padding }},\" +\n+            \"{% set padding = inc_padding(deferred) | int %}\" +\n+            \"{{ padding}},\" +\n+            \"{% set padding = inc_padding(added_padding) | int %}\" +\n+            \"{{ padding }}\");\n+    Object padding = interpreter.getContext().get(\"padding\");\n+    assertThat(padding).isInstanceOf(DeferredValue.class);\n+    assertThat(((DeferredValue)padding).getOriginalValue()).isEqualTo(10);\n+\n+    interpreter.getContext().put(\"padding\", ((DeferredValue)padding).getOriginalValue());\n+    interpreter.getContext().put(\"added_padding\", 10);\n+    // not deferred anymore\n+    interpreter.getContext().put(\"deferred\", 5);\n+    interpreter.getContext().getGlobalMacro(\"inc_padding\").setDeferred(false);\n+\n+    String output = interpreter.render(deferredOutput);\n+    assertThat(output).isEqualTo(\"0,10,15,25\");\n+  }\n+\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/FromTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/FromTagTest.java\nindex d694ad8..d3d9185 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/FromTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/FromTagTest.java\n@@ -16,8 +16,10 @@ import org.junit.Test;\n import com.google.common.io.Resources;\n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.errorcategory.BasicTemplateErrorCategory;\n+import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.loader.LocationResolver;\n import com.hubspot.jinjava.loader.RelativePathResolver;\n import com.hubspot.jinjava.loader.ResourceLocator;\n@@ -93,13 +95,26 @@ public class FromTagTest {\n     assertThat(interpreter.getErrorsCopy()).isEmpty();\n   }\n \n+  @Test\n+  public void itDefersImport() {\n+    interpreter.getContext().put(\"padding\", DeferredValue.instance());\n+    String template = fixtureText(\"from\");\n+    String rendered = fixture(\"from\");\n+    assertThat(rendered).isEqualTo(template);\n+    MacroFunction spacer = interpreter.getContext().getGlobalMacro(\"spacer\");\n+    assertThat(spacer.isDeferred()).isTrue();\n+  }\n+\n   private String fixture(String name) {\n+    return interpreter.renderFlat(fixtureText(name));\n+  }\n+\n+  private String fixtureText(String name) {\n     try {\n-      return interpreter.renderFlat(Resources.toString(\n-          Resources.getResource(String.format(\"tags/macrotag/%s.jinja\", name)), StandardCharsets.UTF_8));\n+      return Resources.toString(\n+          Resources.getResource(String.format(\"tags/macrotag/%s.jinja\", name)), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n   }\n-\n }\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ImportTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ImportTagTest.java\nindex 882d745..6793a18 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ImportTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ImportTagTest.java\n@@ -8,6 +8,7 @@ import java.io.IOException;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -91,7 +92,7 @@ public class ImportTagTest {\n     interpreter = new JinjavaInterpreter(jinjava, context, jinjava.getGlobalConfig());\n     interpreter.getContext().put(\"primary_font_size_num\", DeferredValue.instance());\n     fixture(\"import-property\");\n-    assertThat(interpreter.getContext().get(\"pegasus\")).isInstanceOf(DeferredValue.class);\n+    assertThat(((Map)interpreter.getContext().get(\"pegasus\")).get(\"primary_line_height\")).isInstanceOf(DeferredValue.class);\n   }\n \n   @Test\ndiff --git a/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\nindex 693045e..d3d5098 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/MacroTagTest.java\n@@ -21,6 +21,7 @@ import com.google.common.io.Resources;\n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.JinjavaConfig;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.lib.fn.MacroFunction;\n import com.hubspot.jinjava.tree.Node;\n@@ -56,7 +57,7 @@ public class MacroTagTest {\n     assertThat(fn.isCaller()).isFalse();\n \n     context.put(\"myname\", \"jared\");\n-    assertThat(snippet(\"{{ getPath() }}\").render(interpreter).getValue().trim()).isEqualTo(\"Hello jared\");\n+    assertThat(snippet(\"{{ getPath() }}\").render(interpreter).getValue()).isEqualTo(\"Hello jared\");\n   }\n \n   @Test\n@@ -72,6 +73,19 @@ public class MacroTagTest {\n   }\n \n   @Test\n+  public void testFnWithDeferredArgs() {\n+    TagNode t = fixture(\"with-args\");\n+    assertThat(t.render(interpreter).getValue()).isEmpty();\n+\n+    MacroFunction fn = (MacroFunction) interpreter.resolveObject(\"__macros__.section_link\", -1, -1);\n+    assertThat(fn.getName()).isEqualTo(\"section_link\");\n+    assertThat(fn.getArguments()).containsExactly(\"link\", \"text\");\n+\n+    interpreter.getContext().put(\"mylink\", DeferredValue.instance());\n+    assertThat(snippet(\"{{section_link(mylink, 'mytext')}}\").render(interpreter).getValue().trim()).isEqualTo(\"{{section_link(mylink, 'mytext')}}\");\n+  }\n+\n+  @Test\n   public void testFnWithKwArgs() {\n     TagNode t = fixture(\"list_kwargs\");\n     assertThat(t.render(interpreter).getValue()).isEmpty();\n@@ -247,6 +261,24 @@ public class MacroTagTest {\n         \"{f={val={f={val={{ self }}}}}}\");\n   }\n \n+  @Test\n+  public void itReconstructsMacroDefinitionFromMacroFunction(){\n+    TagNode t = fixture(\"simple\");\n+    assertThat(t.render(interpreter).getValue()).isEmpty();\n+\n+    MacroFunction fn = (MacroFunction) interpreter.resolveObject(\"__macros__.getPath\", -1, -1);\n+    assertThat(fn.reconstructImage()).isEqualTo(fixtureText(\"simple\").trim());\n+  }\n+\n+  @Test\n+  public void itReconstructsMacroDefinitionFromMacroFunctionWithNoTrim(){\n+    TagNode t = fixture(\"simple-no-trim\");\n+    assertThat(t.render(interpreter).getValue()).isEmpty();\n+\n+    MacroFunction fn = (MacroFunction) interpreter.resolveObject(\"__macros__.getPath\", -1, -1);\n+    assertThat(fn.reconstructImage()).isEqualTo(fixtureText(\"simple-no-trim\").trim());\n+  }\n+\n   private Node snippet(String jinja) {\n     return new TreeParser(interpreter, jinja).buildTree().getChildren().getFirst();\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T02:59:38.353417Z", "commit_hash": "4661af3f34e4cffc1f85d09829f089b807c172ab", "commit_message": "Merge pull request #390 from gabru-md/gabru-md-for-fix\n\nadds PyList support to ForTag", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\nindex e46dcc4..46ad735 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java\n@@ -32,6 +32,7 @@ import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter.InterpreterScopeClosable;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.objects.DummyObject;\n+import com.hubspot.jinjava.objects.collections.PyList;\n import com.hubspot.jinjava.tree.Node;\n import com.hubspot.jinjava.tree.TagNode;\n import com.hubspot.jinjava.util.ForLoop;\n@@ -148,7 +149,8 @@ public class ForTag implements Tag {\n         if (loopVars.size() == 1) {\n           interpreter.getContext().put(loopVars.get(0), val);\n         } else {\n-          for (String loopVar : loopVars) {\n+          for (int loopVarIndex = 0; loopVarIndex < loopVars.size(); loopVarIndex++) {\n+            String loopVar = loopVars.get(loopVarIndex);\n             if (Map.Entry.class.isAssignableFrom(val.getClass())) {\n               Map.Entry<String, Object> entry = (Entry<String, Object>) val;\n               Object entryVal = null;\n@@ -160,6 +162,14 @@ public class ForTag implements Tag {\n               }\n \n               interpreter.getContext().put(loopVar, entryVal);\n+            } else if (List.class.isAssignableFrom(val.getClass())) {\n+              List<Object> entries = ((PyList) val).toList();\n+              Object entryVal = null;\n+              // safety check for size\n+              if (entries.size() >= loopVarIndex) {\n+                entryVal = entries.get(loopVarIndex);\n+              }\n+              interpreter.getContext().put(loopVar, entryVal);\n             } else {\n               try {\n                 PropertyDescriptor[] valProps = Introspector.getBeanInfo(val.getClass()).getPropertyDescriptors();\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\nindex 61ded34..7a92fb1 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java\n@@ -1,6 +1,7 @@\n package com.hubspot.jinjava.lib.tag;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.junit.Assert.assertEquals;\n \n import java.io.IOException;\n@@ -22,6 +23,7 @@ import com.google.common.collect.Maps;\n import com.google.common.io.Resources;\n import com.hubspot.jinjava.Jinjava;\n import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.InterpretException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.objects.date.PyishDate;\n import com.hubspot.jinjava.tree.Node;\n@@ -205,6 +207,59 @@ public class ForTagTest {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\tString template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href}}\\\">{{caption}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\tString expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithThreeValues() {\n+\tString template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t\t  \t\t+ \"{% endfor %}\";\n+    String expected = \"<p>1 2 3</p>\\n\"\n+  \t\t+ \"<p>4 5 6</p>\\n\";\n+    String rendered = jinjava.render(template, context);\n+    assertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testWithSingleTuple() {\n+\tString template = \"{% for a, b, c, d in [(43, 21, 33, 54)] %}\"\n+\t  \t\t+ \"<h1>{{a}} - {{b}}, {{c}} - {{d}}</h1>\"\n+\t  \t\t+ \"{% endfor %}\";\n+\tString expected = \"<h1>43 - 21, 33 - 54</h1>\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, expected);\n+  }\n+  \n+  @Test\n+  public void testTuplesWithNonStringValues() {\n+\tString template = \"{% for firstVal, secondVal in [(32, 21)] %}\"\n+\t\t\t+ \"{{firstVal + secondVal}}\"\n+\t\t\t+ \"{% endfor %}\";\n+\tString rendered = jinjava.render(template, context);\n+\tassertEquals(rendered, \"53\");\n+  }\n+  \n+  @Test\n+  public void testRenderingFailsForLessValues() {\n+\t  String template = \"{% for a,b,c in [(1,2)] %}\"\n+\t  \t\t+ \"{{a}} {{b}} {{c}}\"\n+\t  \t\t+ \"{% endfor %}\";\n+\t  assertThatThrownBy(() -> jinjava.render(template, context))\n+\t  \t\t.isInstanceOf(InterpretException.class)\n+\t  \t\t.hasMessageContaining(\"Error rendering tag\");\n+  }\n+  \n   private Node fixture(String name) {\n     try {\n       return new TreeParser(interpreter, Resources.toString(\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T03:16:03.168672Z", "commit_hash": "63f14d8691a6d5b20a05b3c4010d0a8c8ad4c125", "commit_message": "Merge pull request #358 from HubSpot/fix-lazy-expression\n\nFix NPE with lazy expression in intermediate expression resolution.", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\nindex 7d96466..aaf22ae 100644\n--- a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n@@ -36,6 +36,7 @@ import com.hubspot.jinjava.el.ext.JinjavaListELResolver;\n import com.hubspot.jinjava.el.ext.NamedParameter;\n import com.hubspot.jinjava.interpret.DisabledException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.LazyExpression;\n import com.hubspot.jinjava.interpret.TemplateError;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorItem;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n@@ -218,6 +219,10 @@ public class JinjavaInterpreterResolver extends SimpleResolver {\n       return null;\n     }\n \n+    if (value instanceof LazyExpression) {\n+      value = ((LazyExpression) value).get();\n+    }\n+\n     if (value instanceof PyWrapper) {\n       return value;\n     }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\nindex 136d117..566fff9 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\n@@ -554,13 +554,26 @@ public class ExpressionResolverTest {\n     assertThat(testClass.isTouched()).isFalse();\n   }\n \n+  @Test\n+  public void itResolvesLazyExpressionsInNested() {\n+\n+    Supplier<TestClass> lazyObject = TestClass::new;\n+\n+    context.put(\"myobj\", ImmutableMap.of(\"test\", LazyExpression.of(lazyObject)));\n+\n+    assertThat(Objects.toString(interpreter.resolveELExpression(\"myobj.test.name\", -1))).isEqualTo(\n+        \"Amazing test class\");\n+    assertThat(interpreter.getErrorsCopy()).isEmpty();\n+  }\n+\n   public String result(String value, TestClass testClass) {\n     testClass.touch();\n     return value;\n   }\n \n-  public class TestClass {\n+  public static class TestClass {\n     private boolean touched = false;\n+    private String name = \"Amazing test class\";\n \n     public boolean isTouched() {\n       return touched;\n@@ -569,6 +582,10 @@ public class ExpressionResolverTest {\n     public void touch() {\n       this.touched = true;\n     }\n+\n+    public String getName() {\n+      return name;\n+    }\n   }\n \n   public static final class MyClass {\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T03:18:03.395084Z", "commit_hash": "4439f6e796fd86c152c99cc0727a12a02e3e1741", "commit_message": "Fix NPE with lazy expression in intermediate expression resolution.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\nindex 7d96466..aaf22ae 100644\n--- a/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n+++ b/src/main/java/com/hubspot/jinjava/el/JinjavaInterpreterResolver.java\n@@ -36,6 +36,7 @@ import com.hubspot.jinjava.el.ext.JinjavaListELResolver;\n import com.hubspot.jinjava.el.ext.NamedParameter;\n import com.hubspot.jinjava.interpret.DisabledException;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.LazyExpression;\n import com.hubspot.jinjava.interpret.TemplateError;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorItem;\n import com.hubspot.jinjava.interpret.TemplateError.ErrorReason;\n@@ -218,6 +219,10 @@ public class JinjavaInterpreterResolver extends SimpleResolver {\n       return null;\n     }\n \n+    if (value instanceof LazyExpression) {\n+      value = ((LazyExpression) value).get();\n+    }\n+\n     if (value instanceof PyWrapper) {\n       return value;\n     }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java b/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\nindex 136d117..566fff9 100644\n--- a/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\n+++ b/src/test/java/com/hubspot/jinjava/el/ExpressionResolverTest.java\n@@ -554,13 +554,26 @@ public class ExpressionResolverTest {\n     assertThat(testClass.isTouched()).isFalse();\n   }\n \n+  @Test\n+  public void itResolvesLazyExpressionsInNested() {\n+\n+    Supplier<TestClass> lazyObject = TestClass::new;\n+\n+    context.put(\"myobj\", ImmutableMap.of(\"test\", LazyExpression.of(lazyObject)));\n+\n+    assertThat(Objects.toString(interpreter.resolveELExpression(\"myobj.test.name\", -1))).isEqualTo(\n+        \"Amazing test class\");\n+    assertThat(interpreter.getErrorsCopy()).isEmpty();\n+  }\n+\n   public String result(String value, TestClass testClass) {\n     testClass.touch();\n     return value;\n   }\n \n-  public class TestClass {\n+  public static class TestClass {\n     private boolean touched = false;\n+    private String name = \"Amazing test class\";\n \n     public boolean isTouched() {\n       return touched;\n@@ -569,6 +582,10 @@ public class ExpressionResolverTest {\n     public void touch() {\n       this.touched = true;\n     }\n+\n+    public String getName() {\n+      return name;\n+    }\n   }\n \n   public static final class MyClass {\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T03:24:22.294078Z", "commit_hash": "1d475bafd993fc103385e2790fce103cd772817c", "commit_message": "Merge pull request #314 from HubSpot/fix-in\n\nUse type converter when evaulting 'in'", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/el/ext/CollectionMembershipOperator.java b/src/main/java/com/hubspot/jinjava/el/ext/CollectionMembershipOperator.java\nindex 9998321..3879b6f 100644\n--- a/src/main/java/com/hubspot/jinjava/el/ext/CollectionMembershipOperator.java\n+++ b/src/main/java/com/hubspot/jinjava/el/ext/CollectionMembershipOperator.java\n@@ -3,6 +3,8 @@ package com.hubspot.jinjava.el.ext;\n import java.util.Collection;\n import java.util.Objects;\n \n+import javax.el.ELException;\n+\n import org.apache.commons.lang3.StringUtils;\n \n import de.odysseus.el.misc.TypeConverter;\n@@ -26,7 +28,21 @@ public class CollectionMembershipOperator extends SimpleOperator {\n     }\n \n     if (Collection.class.isAssignableFrom(o2.getClass())) {\n-      return ((Collection<?>) o2).contains(o1);\n+      Collection<?> collection = (Collection<?>) o2;\n+\n+      for (Object value : collection) {\n+        if (value == null) {\n+          if (o1 == null) {\n+            return Boolean.TRUE;\n+          }\n+        } else {\n+          try {\n+            return collection.contains(converter.convert(o1, value.getClass()));\n+          } catch (ELException e) {\n+            return Boolean.FALSE;\n+          }\n+        }\n+      }\n     }\n \n     return Boolean.FALSE;\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/IntFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/IntFilterTest.java\nindex 3761a06..3c31933 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/IntFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/IntFilterTest.java\n@@ -6,7 +6,6 @@ import java.nio.charset.StandardCharsets;\n import java.time.ZoneOffset;\n import java.util.Locale;\n \n-import org.apache.commons.lang3.math.NumberUtils;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -113,4 +112,14 @@ public class IntFilterTest {\n     interpreter = new Jinjava(FRENCH_LOCALE_CONFIG).newInterpreter();\n     assertThat(filter.filter(\"123\\u00A0123,12\", interpreter)).isEqualTo(123123);\n   }\n+\n+  @Test\n+  public void itConvertsProperlyInExpressionTest() {\n+    assertThat(interpreter.render(\"{{ '3'|int in [null, 4, 5, 6, null, 3] }}\")).isEqualTo(\"true\");\n+  }\n+\n+  @Test\n+  public void itConvertsProperlyInExpressionTestWithWrongType() {\n+    assertThat(interpreter.render(\"{{ 'test' in [null, 4, 5, 6, null, 3] }}\")).isEqualTo(\"false\");\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T04:07:00.038521Z", "commit_hash": "a4499ba911f1b7947a33a48388b85aae6463930e", "commit_message": "fix date format conversion for single-digit values, for %e, %k, %l\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex 4fca519..d0bb5d5 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -28,14 +28,14 @@ public class StrftimeFormatter {\n     CONVERSIONS.put('B', \"MMMM\");\n     CONVERSIONS.put('c', \"EEE MMM dd HH:mm:ss yyyy\");\n     CONVERSIONS.put('d', \"dd\");\n-    CONVERSIONS.put('e', \"dd\"); // The day of the month like with %d, but padded with blank (range 1 through 31).\n+    CONVERSIONS.put('e', \"d\"); // The day of the month like with %d, but padded with blank (range 1 through 31).\n     CONVERSIONS.put('f', \"SSSS\");\n     CONVERSIONS.put('H', \"HH\");\n     CONVERSIONS.put('h', \"hh\");\n     CONVERSIONS.put('I', \"hh\");\n     CONVERSIONS.put('j', \"DDD\");\n-    CONVERSIONS.put('k', \"HH\"); // The hour as a decimal number, using a 24-hour clock like %H, but padded with blank (range 0 through 23).\n-    CONVERSIONS.put('l', \"hh\"); // The hour as a decimal number, using a 12-hour clock like %I, but padded with blank (range 1 through 12).\n+    CONVERSIONS.put('k', \"H\"); // The hour as a decimal number, using a 24-hour clock like %H, but padded with blank (range 0 through 23).\n+    CONVERSIONS.put('l', \"h\"); // The hour as a decimal number, using a 12-hour clock like %I, but padded with blank (range 1 through 12).\n     CONVERSIONS.put('m', \"MM\");\n     CONVERSIONS.put('M', \"mm\");\n     CONVERSIONS.put('p', \"a\");\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex 72891f7..6be3690 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -65,6 +65,14 @@ public class StrftimeFormatterTest {\n   }\n   \n   @Test\n+  public void testPaddedMinFmt() {\n+    ZonedDateTime dateTime = ZonedDateTime.parse(\"2013-11-06T04:02:00.000+00:00\");\n+    \n+    assertThat(StrftimeFormatter.format(dateTime, \"%I\")).isEqualTo(\"04\");\n+    assertThat(StrftimeFormatter.format(dateTime, \"%l\")).isEqualTo(\"4\");\n+  }\n+  \n+  @Test\n   public void testFinnishMonths() {\n     assertThat(StrftimeFormatter.formatter(\"long\").withLocale(Locale.forLanguageTag(\"fi\")).format(d))\n       .isEqualTo(\"6. marraskuuta 2013 klo 14.22.00\");\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T04:08:06.020778Z", "commit_hash": "69b12c8573853aafc9f9309e11775dc30a2edb9b", "commit_message": "fix issue with pyishdate.isoformat()\n", "related_issues": "", "bug_patch": "diff --git a/CHANGES.md b/CHANGES.md\nindex 270ecf4..173062e 100644\n--- a/CHANGES.md\n+++ b/CHANGES.md\n@@ -1,5 +1,9 @@\n # Jinjava Releases #\n \n+### Version 2.0.4 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.hubspot.jinjava%22%20AND%20v%3A%222.0.4%22)) ###\n+\n+* Fix issue with PyishDate.isoformat()\n+\n ### Version 2.0.3 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.hubspot.jinjava%22%20AND%20v%3A%222.0.3%22)) ###\n \n * Upgrading javassist, commons-lang3 library dependencies\ndiff --git a/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java b/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\nindex 58a0ed1..267e476 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/PyishDate.java\n@@ -43,7 +43,7 @@ public final class PyishDate extends Date implements Serializable, PyWrapper {\n   }\n   \n   public String isoformat() {\n-    return strftime(\"YYYY-MM-DD\");\n+    return strftime(\"yyyy-MM-dd\");\n   }\n \n   public String strftime(String fmt) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java b/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\nindex 3bcd9a0..169193a 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/PyishDateTest.java\n@@ -24,6 +24,12 @@ public class PyishDateTest {\n   }\n \n   @Test\n+  public void testIsoformat() {\n+    PyishDate d = new PyishDate(ZonedDateTime.parse(\"2015-05-13T12:00:00+00:00\"));\n+    assertThat(d.isoformat()).isEqualTo(\"2015-05-13\");\n+  }\n+  \n+  @Test\n   public void testEquals() {\n     PyishDate d1 = new PyishDate(ZonedDateTime.parse(\"2013-11-12T14:15:00+00:00\"));\n     PyishDate d2 = new PyishDate(ZonedDateTime.parse(\"2013-11-12T14:15:00+00:00\"));\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T04:09:16.458983Z", "commit_hash": "6a74809816f2f5d020a8bf5b0f06dbde588a9bff", "commit_message": "fix issue with include tag not allowing same include multiple times in a template\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/tag/IncludeTag.java b/src/main/java/com/hubspot/jinjava/lib/tag/IncludeTag.java\nindex 16164e6..c319d36 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/tag/IncludeTag.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/tag/IncludeTag.java\n@@ -51,13 +51,12 @@ public class IncludeTag implements Tag {\n       return \"\";\n     }\n     \n-    interpreter.getContext().put(INCLUDE_PATH_PROPERTY, path);\n-    \n     String templateFile = interpreter.resolveString(path, tagNode.getLineNumber());\n     try {\n       String template = interpreter.getResource(templateFile);\n       Node node = interpreter.parse(template);\n       JinjavaInterpreter child = new JinjavaInterpreter(interpreter);\n+      child.getContext().put(INCLUDE_PATH_PROPERTY, path);\n       interpreter.getContext().put(JinjavaInterpreter.INSERT_FLAG, true);\n       return child.render(node);\n     } catch (IOException e) {\ndiff --git a/src/test/resources/tags/includetag/c-includes-d-twice.jinja b/src/test/resources/tags/includetag/c-includes-d-twice.jinja\nnew file mode 100644\nindex 0000000..05a4352\n--- /dev/null\n+++ b/src/test/resources/tags/includetag/c-includes-d-twice.jinja\n@@ -0,0 +1,2 @@\n+{% include \"tags/includetag/d.jinja\" %}\n+{% include \"tags/includetag/d.jinja\" %}\ndiff --git a/src/test/resources/tags/includetag/d.jinja b/src/test/resources/tags/includetag/d.jinja\nnew file mode 100644\nindex 0000000..b6fc4c6\n--- /dev/null\n+++ b/src/test/resources/tags/includetag/d.jinja\n@@ -0,0 +1,1 @@\n+hello\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/tag/IncludeTagTest.java b/src/test/java/com/hubspot/jinjava/lib/tag/IncludeTagTest.java\nindex 5c6cf32..0cf5dc5 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/tag/IncludeTagTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/tag/IncludeTagTest.java\n@@ -9,6 +9,7 @@ import java.util.HashMap;\n import org.junit.Before;\n import org.junit.Test;\n \n+import com.google.common.base.Splitter;\n import com.google.common.io.Resources;\n import com.hubspot.jinjava.Jinjava;\n \n@@ -33,8 +34,14 @@ public class IncludeTagTest {\n   public void itAvoidsNestedIncludeCycles() throws IOException {\n     String result = jinjava.render(Resources.toString(Resources.getResource(\"tags/includetag/a-includes-b.jinja\"), StandardCharsets.UTF_8), \n         new HashMap<String, Object>());\n-    System.out.println(result);\n     assertThat(result).containsSequence(\"A\", \"B\");\n   }\n   \n+  @Test\n+  public void itAllowsSameIncludeMultipleTimesInATemplate() throws IOException {\n+    String result = jinjava.render(Resources.toString(Resources.getResource(\"tags/includetag/c-includes-d-twice.jinja\"), StandardCharsets.UTF_8), \n+        new HashMap<String, Object>());\n+    assertThat(Splitter.on('\\n').omitEmptyStrings().trimResults().split(result)).containsExactly(\"hello\", \"hello\");\n+  }\n+  \n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T04:10:30.553103Z", "commit_hash": "3f6ae80f666a6229c38dd38d8235c150c7138bce", "commit_message": "fix issue with date format strings with literal endings\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\nindex 27c081e..71be2a6 100644\n--- a/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n+++ b/src/main/java/com/hubspot/jinjava/objects/date/StrftimeFormatter.java\n@@ -80,7 +80,12 @@ public class StrftimeFormatter {\n         result.append(\"'\");\n         while(Character.isLetter(c)) {\n           result.append(c);\n-          c = strftime.charAt(++i);\n+          if(++i < strftime.length()) {\n+            c = strftime.charAt(i);\n+          }\n+          else {\n+            c = 0;\n+          }\n         }\n         result.append(\"'\");\n         --i;  // re-consume last char\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\nindex ecfb486..70ae50d 100644\n--- a/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/objects/date/StrftimeFormatterTest.java\n@@ -17,6 +17,11 @@ public class StrftimeFormatterTest {\n   }\n   \n   @Test\n+  public void testUtf8Chars() {\n+    assertThat(StrftimeFormatter.format(d, \"%Y\u5e74%m\u6708%d\u65e5\")).isEqualTo(\"2013\u5e7411\u670806\u65e5\");\n+  }\n+  \n+  @Test\n   public void testDefaultFormat() {\n     assertThat(StrftimeFormatter.format(d)).isEqualTo(\"14:22 / 06-11-2013\");\n   }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T04:11:45.939159Z", "commit_hash": "dcbc85b7c04daaf29070ea7485d2f30bf8cd5f5f", "commit_message": "fix issue in sort filter when using nested attribute\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/lib/filter/SortFilter.java b/src/main/java/com/hubspot/jinjava/lib/filter/SortFilter.java\nindex 853bdbe..18759f7 100644\n--- a/src/main/java/com/hubspot/jinjava/lib/filter/SortFilter.java\n+++ b/src/main/java/com/hubspot/jinjava/lib/filter/SortFilter.java\n@@ -9,7 +9,7 @@ import org.apache.commons.lang3.BooleanUtils;\n import com.google.common.collect.Lists;\n import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.util.ObjectIterator;\n-import com.hubspot.jinjava.util.VariableChain;\n+import com.hubspot.jinjava.util.Variable;\n \n public class SortFilter implements Filter {\n \n@@ -23,7 +23,7 @@ public class SortFilter implements Filter {\n     if(var == null) {\n       return var;\n     }\n-    \n+  \n     boolean reverse = false;\n     if(args.length > 0) {\n       reverse = BooleanUtils.toBoolean(args[0]);\n@@ -40,20 +40,26 @@ public class SortFilter implements Filter {\n     }\n     \n     List<?> result = Lists.newArrayList(ObjectIterator.getLoop(var));\n-    Collections.sort(result, new ObjectComparator(reverse, caseSensitive, attr));\n+    Collections.sort(result, new ObjectComparator(interpreter, reverse, caseSensitive, attr));\n     \n     return result;\n   }\n   \n   private static class ObjectComparator implements Comparator<Object> {\n-    private boolean reverse;\n-    private boolean caseSensitive;\n-    private String attr;\n+    private final boolean reverse;\n+    private final boolean caseSensitive;\n+    private final Variable variable;\n     \n-    public ObjectComparator(boolean reverse, boolean caseSensitive, String attr) {\n+    public ObjectComparator(JinjavaInterpreter interpreter, boolean reverse, boolean caseSensitive, String attr) {\n       this.reverse = reverse;\n       this.caseSensitive = caseSensitive;\n-      this.attr = attr;\n+\n+      if(attr != null) {\n+        this.variable = new Variable(interpreter, \"o.\" + attr);\n+      }\n+      else {\n+        this.variable = null;\n+      }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -61,9 +67,9 @@ public class SortFilter implements Filter {\n     public int compare(Object o1, Object o2) {\n       int result = 0;\n       \n-      if(attr != null) {\n-        o1 = new VariableChain(Lists.newArrayList(attr), o1).resolve();\n-        o2 = new VariableChain(Lists.newArrayList(attr), o2).resolve();\n+      if(variable != null) {\n+        o1 = variable.resolve(o1);\n+        o2 = variable.resolve(o2);\n       }\n       \n       if(o1 instanceof String && !caseSensitive) {\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/lib/filter/SortFilterTest.java b/src/test/java/com/hubspot/jinjava/lib/filter/SortFilterTest.java\nindex 9530524..70f8d00 100644\n--- a/src/test/java/com/hubspot/jinjava/lib/filter/SortFilterTest.java\n+++ b/src/test/java/com/hubspot/jinjava/lib/filter/SortFilterTest.java\n@@ -46,6 +46,12 @@ public class SortFilterTest {\n     assertThat(render(\"(false, false, 'date')\", new MyFoo(new Date(250L)), new MyFoo(new Date(0L)), new MyFoo(new Date(100000000L)))).isEqualTo(\"0250100000000\");\n   }\n   \n+  @Test\n+  public void sortWithNestedAttr() {\n+    assertThat(render(\"(false, false, 'foo.date')\", \n+        new MyBar(new MyFoo(new Date(250L))), new MyBar(new MyFoo(new Date(0L))), new MyBar(new MyFoo(new Date(100000000L))))).isEqualTo(\"0250100000000\");\n+  }\n+  \n   String render(Object...items) {\n     return render(\"\", items);\n   }\n@@ -70,4 +76,18 @@ public class SortFilterTest {\n       return \"\" + date.getTime();\n     }\n   }\n+  \n+  public static class MyBar {\n+    private MyFoo foo;\n+    public MyBar(MyFoo foo) {\n+      this.foo = foo;\n+    }\n+    public MyFoo getFoo() {\n+      return foo;\n+    }\n+    @Override\n+    public String toString() {\n+      return foo.toString();\n+    }\n+  }\n }\n"}
{"repository": "HubSpot/jinjava", "clone_url": "https://github.com/HubSpot/jinjava.git", "timestamp": "2023-06-01T04:12:57.470598Z", "commit_hash": "37a8895d71a940bd3e6cea6a5b5952b0581d38f8", "commit_message": "fix bug allowing null at end of tokenized helper string list\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/hubspot/jinjava/util/HelperStringTokenizer.java b/src/main/java/com/hubspot/jinjava/util/HelperStringTokenizer.java\nindex f16c832..6bf7ae8 100644\n--- a/src/main/java/com/hubspot/jinjava/util/HelperStringTokenizer.java\n+++ b/src/main/java/com/hubspot/jinjava/util/HelperStringTokenizer.java\n@@ -20,9 +20,9 @@ import static com.hubspot.jinjava.parse.ParserConstants.DQ;\n import static com.hubspot.jinjava.parse.ParserConstants.SP;\n import static com.hubspot.jinjava.parse.ParserConstants.SQ;\n \n-import java.util.Iterator;\n import java.util.List;\n \n+import com.google.common.collect.AbstractIterator;\n import com.google.common.collect.Lists;\n \n /**\n@@ -31,7 +31,7 @@ import com.google.common.collect.Lists;\n  * @author fangchq\n  * \n  */\n-public class HelperStringTokenizer implements Iterator<String> {\n+public class HelperStringTokenizer extends AbstractIterator<String> {\n \n   private char[] helpers;\n   private int currPost = 0;\n@@ -59,12 +59,7 @@ public class HelperStringTokenizer implements Iterator<String> {\n   }\n \n   @Override\n-  public boolean hasNext() {\n-    return length > currPost;\n-  }\n-\n-  @Override\n-  public String next() {\n+  protected String computeNext() {\n     String token;\n     while (currPost < length) {\n       token = makeToken();\n@@ -73,6 +68,8 @@ public class HelperStringTokenizer implements Iterator<String> {\n         return token;\n       }\n     }\n+    \n+    endOfData();\n     return null;\n   }\n \n@@ -111,11 +108,6 @@ public class HelperStringTokenizer implements Iterator<String> {\n     return String.copyValueOf(helpers, lastStart, currPost - lastStart - 1);\n   }\n \n-  @Override\n-  public void remove() {\n-    throw new UnsupportedOperationException();\n-  }\n-\n   public List<String> allTokens() {\n     return Lists.newArrayList(this);\n   }\n", "test_patch": "diff --git a/src/test/java/com/hubspot/jinjava/util/HelperStringTokenizerTest.java b/src/test/java/com/hubspot/jinjava/util/HelperStringTokenizerTest.java\nindex 363547e..7feb28f 100644\n--- a/src/test/java/com/hubspot/jinjava/util/HelperStringTokenizerTest.java\n+++ b/src/test/java/com/hubspot/jinjava/util/HelperStringTokenizerTest.java\n@@ -15,6 +15,7 @@ limitations under the License.\n  **********************************************************************/\n package com.hubspot.jinjava.util;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n@@ -97,4 +98,12 @@ public class HelperStringTokenizerTest {\n     tk.next();\n     assertEquals(\"post.id|add:'444',\\\"555\\\",666\", tk.next());\n   }\n+  \n+  @Test\n+  public void itDoesntReturnTrailingNull() {\n+    assertThat(new HelperStringTokenizer(\"product in collections.frontpage.products   \").splitComma(true).allTokens())\n+      .containsExactly(\"product\", \"in\", \"collections.frontpage.products\")\n+      .doesNotContainNull();\n+  }\n+  \n }\n"}
