{"repository": "indeedeng/proctor", "clone_url": "https://github.com/indeedeng/proctor.git", "timestamp": "2023-05-31T23:51:44.272231Z", "commit_hash": "55393821511144c2ab19c2aabe93dd26a1f6617f", "commit_message": "PROW-661: Fix a bug for the case when revision is specified\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/indeed/proctor/webapp/controllers/AbstractController.java b/src/main/java/com/indeed/proctor/webapp/controllers/AbstractController.java\nindex 3d9bc48..be974ab 100644\n--- a/src/main/java/com/indeed/proctor/webapp/controllers/AbstractController.java\n+++ b/src/main/java/com/indeed/proctor/webapp/controllers/AbstractController.java\n@@ -181,7 +181,7 @@ public abstract class AbstractController {\n         @Nullable\n         public TestDefinition queryTestDefinition(final String testName) {\n             for (final ProctorStore store : stores) {\n-                final TestDefinition test = TestDefinitionUtil.getTestDefinition(store, testName);\n+                final TestDefinition test = TestDefinitionUtil.getTestDefinition(store, testName, revisionNumber);\n                 if (test != null) {\n                     return test;\n                 }\n", "test_patch": "diff --git a/src/test/java/com/indeed/proctor/webapp/controllers/TestTestMatrixApiController.java b/src/test/java/com/indeed/proctor/webapp/controllers/TestTestMatrixApiController.java\nindex 53958c6..eadd27b 100644\n--- a/src/test/java/com/indeed/proctor/webapp/controllers/TestTestMatrixApiController.java\n+++ b/src/test/java/com/indeed/proctor/webapp/controllers/TestTestMatrixApiController.java\n@@ -1,8 +1,11 @@\n package com.indeed.proctor.webapp.controllers;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.indeed.proctor.common.model.TestDefinition;\n+import com.indeed.proctor.common.model.TestMatrixVersion;\n import com.indeed.proctor.store.Revision;\n import com.indeed.proctor.store.StoreException;\n import com.indeed.proctor.webapp.db.Environment;\n@@ -37,6 +40,8 @@ public class TestTestMatrixApiController {\n     private InMemoryProctorStore qaStore;\n     private InMemoryProctorStore prodStore;\n \n+    private static final String TEST_NAME = \"dummyTest\";\n+\n     @Before\n     public void setUp() {\n         final WebappConfiguration configuration = new WebappConfiguration(false, false, 1000, 10);\n@@ -63,13 +68,39 @@ public class TestTestMatrixApiController {\n \n     @Test\n     public void testGetTestMatrixForRevision() throws Exception {\n-        final String revision = \"1234\";\n-        addStubTest(prodStore, revision);\n-        assertThat(controller.getTestMatrix(REVISION_PREFIX + revision)).isNotNull();\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n+        final List<String> versions = ImmutableList.<String>builder()\n+                .add(trunkVersions)\n+                .add(qaVersions)\n+                .add(prodVersions)\n+                .build();\n+\n+        for (final String version : versions) {\n+            final JsonView jsonView = controller.getTestMatrix(constructRevision(version));\n+            final TestMatrixVersion testMatrixVersion = parsedRenderedJson(jsonView, TestMatrixVersion.class);\n+\n+            assertThat(testMatrixVersion.getVersion())\n+                    .isEqualTo(version);\n+        }\n     }\n \n     @Test\n     public void testGetTestMatrixHistoryForRevisionEmpty() throws Exception {\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n         assertThatThrownBy(() -> controller.getTestMatrixHistory(\"1234\", 1, 100))\n                 .isInstanceOf(NullPointerException.class)\n                 .hasMessageContaining(\"Branch 1234 not correct\");\n@@ -77,27 +108,144 @@ public class TestTestMatrixApiController {\n \n     @Test\n     public void testGetTestMatrixHistoryForBranchEmpty() throws Exception {\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+\n         final JsonView jsonView = controller.getTestMatrixHistory(Environment.PRODUCTION.getName(), 1, 100);\n         assertThat(parsedRenderedJson(jsonView, List.class)).isEqualTo(emptyList());\n     }\n \n     @Test\n     public void testGetTestDefinitionNotFound() throws Exception {\n-        assertThatThrownBy(() -> controller.getTestDefinition(\"1234\", \"fooTest\"))\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n+        assertThatThrownBy(() -> controller.getTestDefinition(\"123\", \"fooTest\"))\n                 .isInstanceOf(NullPointerException.class)\n                 .hasMessageContaining(\"fooTest not found\");\n     }\n \n     @Test\n     public void testGetTestDefinitionHistoryNotFound() throws Exception {\n-        assertThatThrownBy(() -> controller.getTestDefinitionHistory(\"1234\", \"fooTest\", 1, 100))\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n+        assertThatThrownBy(() -> controller.getTestDefinitionHistory(\"123\", \"fooTest\", 1, 100))\n                 .isInstanceOf(IllegalStateException.class)\n                 .hasMessageContaining(\"fooTest not found\");\n     }\n \n+    @Test\n+    public void testGetTestDefinitionForBranch() throws Exception {\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n+        {\n+            final JsonView jsonView = controller.getTestDefinition(Environment.WORKING.getName(), TEST_NAME);\n+            final TestDefinition testDefinition = parsedRenderedJson(jsonView, TestDefinition.class);\n+            assertThat(testDefinition.getVersion())\n+                    .isEqualTo(\"333\");\n+        }\n+        {\n+            final JsonView jsonView = controller.getTestDefinition(Environment.QA.getName(), TEST_NAME);\n+            final TestDefinition testDefinition = parsedRenderedJson(jsonView, TestDefinition.class);\n+            assertThat(testDefinition.getVersion())\n+                    .isEqualTo(\"345\");\n+        }\n+        {\n+            final JsonView jsonView = controller.getTestDefinition(Environment.PRODUCTION.getName(), TEST_NAME);\n+            final TestDefinition testDefinition = parsedRenderedJson(jsonView, TestDefinition.class);\n+            assertThat(testDefinition.getVersion())\n+                    .isEqualTo(\"369\");\n+        }\n+    }\n+\n+    @Test\n+    public void testGetTestDefinitionForRevision() throws Exception {\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n+        final List<String> versions = ImmutableList.<String>builder()\n+                .add(trunkVersions)\n+                .add(qaVersions)\n+                .add(prodVersions)\n+                .build();\n+\n+        for (final String version : versions) {\n+            final JsonView jsonView = controller.getTestDefinition(constructRevision(version), TEST_NAME);\n+            final TestDefinition testDefinition = parsedRenderedJson(jsonView, TestDefinition.class);\n+            assertThat(testDefinition.getVersion())\n+                    .isEqualTo(version);\n+        }\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     @Test\n-    public void testGetTestDefinitionHistoryForBranch() throws Exception {\n+    public void testGetTestDefinitionHistoryForBranchAndRevision() throws Exception {\n+        final String[] trunkVersions = new String[]{\"111\", \"222\", \"333\"};\n+        final String[] qaVersions = new String[]{\"123\", \"234\", \"345\"};\n+        final String[] prodVersions = new String[]{\"146\", \"257\", \"369\"};\n+\n+        addStubTest(trunkStore, trunkVersions);\n+        addStubTest(qaStore, qaVersions);\n+        addStubTest(prodStore, prodVersions);\n+\n+        {\n+            final JsonView jsonView = controller.getTestDefinitionHistory(Environment.WORKING.getName(), TEST_NAME, 1, 1);\n+            final List<Map> revisions = parsedRenderedJson(jsonView, List.class);\n+            assertThat(revisions)\n+                    .extracting(r -> r.get(\"revision\"))\n+                    .containsExactly(constructRevision(\"222\"));\n+        }\n+        {\n+            final JsonView jsonView = controller.getTestDefinitionHistory(Environment.QA.getName(), TEST_NAME, 0, 2);\n+            final List<Map> revisions = parsedRenderedJson(jsonView, List.class);\n+            assertThat(revisions)\n+                    .extracting(r -> r.get(\"revision\"))\n+                    .containsExactly(constructRevision(\"345\"), constructRevision(\"234\"));\n+        }\n+        {\n+            final JsonView jsonView = controller.getTestDefinitionHistory(Environment.PRODUCTION.getName(), TEST_NAME, 2, 3);\n+            final List<Map> revisions = parsedRenderedJson(jsonView, List.class);\n+            assertThat(revisions)\n+                    .extracting(r -> r.get(\"revision\"))\n+                    .containsExactly(constructRevision(\"146\"));\n+        }\n+        {\n+            final JsonView jsonView = controller.getTestDefinitionHistory(constructRevision(\"234\"), TEST_NAME, 0, 2);\n+            final List<Map> revisions = parsedRenderedJson(jsonView, List.class);\n+            assertThat(revisions)\n+                    .extracting(r -> r.get(\"revision\"))\n+                    .containsExactly(constructRevision(\"234\"), constructRevision(\"123\"));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testGetTestDefinitionHistoryForBranchWithMock() throws Exception {\n         final String testName = \"fooTest\";\n         final Revision expected = new Revision(\"r1\", \"a1\", new Date(), \"m1\");\n         when(qaStore.getHistory(testName, 1, 100)).thenReturn(singletonList(expected));\n@@ -111,9 +259,9 @@ public class TestTestMatrixApiController {\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n-    public void testGetTestDefinitionHistoryForRevision() throws Exception {\n-        String testName = \"fooTest\";\n-        String revision = \"1234\";\n+    public void testGetTestDefinitionHistoryForRevisionWithMock() throws Exception {\n+        final String testName = \"fooTest\";\n+        final String revision = \"1234\";\n         final Revision expected = new Revision(revision, \"a1\", new Date(), \"m1\");\n         when(prodStore.getAllHistories()).thenReturn(ImmutableMap.of(testName, singletonList(expected)));\n         when(prodStore.getHistory(testName, revision, 1, 100)).thenReturn(singletonList(expected));\n@@ -138,10 +286,21 @@ public class TestTestMatrixApiController {\n         return stringWriter.toString();\n     }\n \n-    private static void addStubTest(final InMemoryProctorStore prodStore, final String revision) throws StoreException.TestUpdateException {\n-        final TestDefinition definition = new TestDefinition();\n-        definition.setVersion(revision);\n-        prodStore.addTestDefinition(\"testUser\", \"testPassword\", \"testAuthor\", definition, null, \"testComment\");\n+    private static void addStubTest(final InMemoryProctorStore store, final String... versions) throws StoreException.TestUpdateException {\n+        String lastVersion = null;\n+        for (final String version : versions) {\n+            final TestDefinition definition = new TestDefinition();\n+            definition.setVersion(version);\n+            if (lastVersion == null) {\n+                store.addTestDefinition(\"testUser\", \"testPassword\", TEST_NAME, definition, null, \"testComment\");\n+            } else {\n+                store.updateTestDefinition(\"testUser\", \"testPassword\", lastVersion, TEST_NAME, definition, null, \"testComment\");\n+            }\n+            lastVersion = version;\n+        }\n     }\n \n+    private static String constructRevision(final String version) {\n+        return REVISION_PREFIX + version;\n+    }\n }\n"}
{"repository": "indeedeng/proctor", "clone_url": "https://github.com/indeedeng/proctor.git", "timestamp": "2023-06-01T00:16:36.826407Z", "commit_hash": "0a19688fc709709d62bdbee71bb4c47a047fec75", "commit_message": "Merge branch 'jira/PROW-486' into 'master'\n\nPROW-486: fix a bug escaping double quote\n\nSee merge request !78", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java b/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java\nindex e4e0064..de9d82e 100644\n--- a/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java\n+++ b/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java\n@@ -368,7 +368,7 @@ public class RemoteProctorSpecificationSource extends DataLoadingTimerTask imple\n     static final SpecificationParser EXPORTED_VARIABLE_PARSER = new SpecificationParser() {\n         @Override\n         public SpecificationResult parse(final InputStream inputStream) throws IOException {\n-            final String json = IOUtils.toString(inputStream).replace(\"\\\\\", \"\").trim();\n+            final String json = IOUtils.toString(inputStream).replace(\"\\\\:\", \":\").trim();\n             final ProctorSpecification proctorSpecification = OBJECT_MAPPER.readValue(json, ProctorSpecification.class);\n             final SpecificationResult specificationResult = new SpecificationResult();\n             specificationResult.setSpecification(proctorSpecification);\n", "test_patch": "diff --git a/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java b/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java\nindex f15b367..0995968 100644\n--- a/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java\n+++ b/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java\n@@ -17,7 +17,7 @@ import static org.junit.Assert.assertTrue;\n public class RemoteProctorSpecificationSourceTest {\n     @Test\n     public void testExportedVariableParser() throws Exception {\n-        final String exampleJson = \"{\\\"providedContext\\\"\\\\:{\\\"country\\\"\\\\:\\\"String\\\",\\\"lang\\\"\\\\:\\\"String\\\"},\\\"tests\\\"\\\\:{\\\"my_tst\\\"\\\\:{\\\"fallbackValue\\\"\\\\:-1,\\\"buckets\\\"\\\\:{\\\"inactive\\\"\\\\:-1,\\\"control\\\"\\\\:0,\\\"sendReactivationEmail\\\"\\\\:1}}}}\";\n+        final String exampleJson = \"{\\\"providedContext\\\"\\\\:{\\\"country\\\"\\\\:\\\"String\\\",\\\"lang\\\"\\\\:\\\"String\\\"},\\\"tests\\\"\\\\:{\\\"my_tst\\\"\\\\:{\\\"fallbackValue\\\"\\\\:-1,\\\"buckets\\\"\\\\:{\\\"inactive\\\"\\\\:-1,\\\"control\\\"\\\\:0,\\\"sendReactivationEmail\\\"\\\\:1},\\\"description\\\"\\\\:\\\"KEY-45\\\\: text with \\\\\\\"double quote\\\\\\\"\\\"}}}\";\n         final InputStream stream = new ByteArrayInputStream(exampleJson.getBytes(StandardCharsets.UTF_8.name()));\n         final SpecificationResult result = RemoteProctorSpecificationSource.EXPORTED_VARIABLE_PARSER.parse(stream);\n         assertNotNull(result.getSpecification());\n"}
{"repository": "indeedeng/proctor", "clone_url": "https://github.com/indeedeng/proctor.git", "timestamp": "2023-06-01T00:21:02.028598Z", "commit_hash": "3d93d44032766171f3220fcfd33c909b5352ebef", "commit_message": "PROW-486: fix a bug escaping double quote\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java b/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java\nindex e4e0064..de9d82e 100644\n--- a/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java\n+++ b/src/main/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSource.java\n@@ -368,7 +368,7 @@ public class RemoteProctorSpecificationSource extends DataLoadingTimerTask imple\n     static final SpecificationParser EXPORTED_VARIABLE_PARSER = new SpecificationParser() {\n         @Override\n         public SpecificationResult parse(final InputStream inputStream) throws IOException {\n-            final String json = IOUtils.toString(inputStream).replace(\"\\\\\", \"\").trim();\n+            final String json = IOUtils.toString(inputStream).replace(\"\\\\:\", \":\").trim();\n             final ProctorSpecification proctorSpecification = OBJECT_MAPPER.readValue(json, ProctorSpecification.class);\n             final SpecificationResult specificationResult = new SpecificationResult();\n             specificationResult.setSpecification(proctorSpecification);\n", "test_patch": "diff --git a/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java b/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java\nindex f15b367..0995968 100644\n--- a/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java\n+++ b/src/test/java/com/indeed/proctor/webapp/RemoteProctorSpecificationSourceTest.java\n@@ -17,7 +17,7 @@ import static org.junit.Assert.assertTrue;\n public class RemoteProctorSpecificationSourceTest {\n     @Test\n     public void testExportedVariableParser() throws Exception {\n-        final String exampleJson = \"{\\\"providedContext\\\"\\\\:{\\\"country\\\"\\\\:\\\"String\\\",\\\"lang\\\"\\\\:\\\"String\\\"},\\\"tests\\\"\\\\:{\\\"my_tst\\\"\\\\:{\\\"fallbackValue\\\"\\\\:-1,\\\"buckets\\\"\\\\:{\\\"inactive\\\"\\\\:-1,\\\"control\\\"\\\\:0,\\\"sendReactivationEmail\\\"\\\\:1}}}}\";\n+        final String exampleJson = \"{\\\"providedContext\\\"\\\\:{\\\"country\\\"\\\\:\\\"String\\\",\\\"lang\\\"\\\\:\\\"String\\\"},\\\"tests\\\"\\\\:{\\\"my_tst\\\"\\\\:{\\\"fallbackValue\\\"\\\\:-1,\\\"buckets\\\"\\\\:{\\\"inactive\\\"\\\\:-1,\\\"control\\\"\\\\:0,\\\"sendReactivationEmail\\\"\\\\:1},\\\"description\\\"\\\\:\\\"KEY-45\\\\: text with \\\\\\\"double quote\\\\\\\"\\\"}}}\";\n         final InputStream stream = new ByteArrayInputStream(exampleJson.getBytes(StandardCharsets.UTF_8.name()));\n         final SpecificationResult result = RemoteProctorSpecificationSource.EXPORTED_VARIABLE_PARSER.parse(stream);\n         assertNotNull(result.getSpecification());\n"}
