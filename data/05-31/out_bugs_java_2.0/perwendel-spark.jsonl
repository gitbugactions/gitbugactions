{"repository": "perwendel/spark", "clone_url": "https://github.com/perwendel/spark.git", "timestamp": "2023-05-31T18:50:46.257610Z", "commit_hash": "6eab08a71df93b49ef66de83bfb7cada4f90291b", "commit_message": "Adding HttpMethod to RouteMatch + Fixing usage\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/spark/route/Routes.java b/src/main/java/spark/route/Routes.java\nindex 25c59ad..acbf39c 100644\n--- a/src/main/java/spark/route/Routes.java\n+++ b/src/main/java/spark/route/Routes.java\n@@ -83,7 +83,7 @@ public class Routes {\n     public RouteMatch find(HttpMethod httpMethod, String path, String acceptType) {\n         List<RouteEntry> routeEntries = this.findTargetsForRequestedRoute(httpMethod, path);\n         RouteEntry entry = findTargetWithGivenAcceptType(routeEntries, acceptType);\n-        return entry != null ? new RouteMatch(entry.target, entry.path, path, acceptType) : null;\n+        return entry != null ? new RouteMatch(entry.target, entry.path, path, acceptType, httpMethod) : null;\n     }\n \n     /**\n@@ -103,10 +103,10 @@ public class Routes {\n                 String bestMatch = MimeParse.bestMatch(Arrays.asList(routeEntry.acceptedType), acceptType);\n \n                 if (routeWithGivenAcceptType(bestMatch)) {\n-                    matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, path, acceptType));\n+                    matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, path, acceptType, httpMethod));\n                 }\n             } else {\n-                matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, path, acceptType));\n+                matchSet.add(new RouteMatch(routeEntry.target, routeEntry.path, path, acceptType, httpMethod));\n             }\n         }\n \ndiff --git a/src/main/java/spark/routematch/RouteMatch.java b/src/main/java/spark/routematch/RouteMatch.java\nindex ecc8830..3f4029d 100644\n--- a/src/main/java/spark/routematch/RouteMatch.java\n+++ b/src/main/java/spark/routematch/RouteMatch.java\n@@ -16,6 +16,8 @@\n  */\n package spark.routematch;\n \n+import spark.route.HttpMethod;\n+\n /**\n  * @author Per Wendel\n  */\n@@ -25,13 +27,22 @@ public class RouteMatch {\n     private String matchUri;\n     private String requestURI;\n     private String acceptType;\n+    private HttpMethod httpMethod;\n \n-    public RouteMatch(Object target, String matchUri, String requestUri, String acceptType) {\n+    public RouteMatch(Object target, String matchUri, String requestUri, String acceptType, HttpMethod httpMethod) {\n         super();\n         this.target = target;\n         this.matchUri = matchUri;\n         this.requestURI = requestUri;\n         this.acceptType = acceptType;\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    /**\n+     * @return the accept type\n+     */\n+    public HttpMethod getHttpMethod() {\n+        return httpMethod;\n     }\n \n     /**\n", "test_patch": "diff --git a/src/test/java/spark/RequestTest.java b/src/test/java/spark/RequestTest.java\nindex 0a16ef1..489968f 100644\n--- a/src/test/java/spark/RequestTest.java\n+++ b/src/test/java/spark/RequestTest.java\n@@ -24,7 +24,7 @@ public class RequestTest {\n     HttpSession httpSession;\n     Request request;\n \n-    RouteMatch match = new RouteMatch(null, \"/hi\", \"/hi\", \"text/html\");\n+    RouteMatch match = new RouteMatch(null, \"/hi\", \"/hi\", \"text/html\", null);\n \n     @Before\n     public void setup() {\n"}
{"repository": "perwendel/spark", "clone_url": "https://github.com/perwendel/spark.git", "timestamp": "2023-05-31T19:05:23.970371Z", "commit_hash": "e0c4a2f94df3c40bd90cf26fe26b0cbca31b3430", "commit_message": "upgrade dependencies\n\nI had to fix JettyServerTest because Jetty behaviour has been changed: now it throws IllegalArgumentException if maxThreads < minThreads\n", "related_issues": "", "bug_patch": "diff --git a/pom.xml b/pom.xml\nindex 7d527ae..eeef7bd 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -30,9 +30,9 @@\n \n     <properties>\n         <java.version>1.8</java.version>\n-        <jetty.version>9.4.8.v20171121</jetty.version>\n+        <jetty.version>9.4.11.v20180605</jetty.version>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-        <powermock.version>1.6.6</powermock.version>\n+        <powermock.version>1.7.4</powermock.version>\n         <mockito.version>1.10.19</mockito.version>\n     </properties>\n \n@@ -103,19 +103,19 @@\n         <dependency>\n             <groupId>org.apache.httpcomponents</groupId>\n             <artifactId>httpclient</artifactId>\n-            <version>4.5.1</version>\n+            <version>4.5.5</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.freemarker</groupId>\n             <artifactId>freemarker</artifactId>\n-            <version>2.3.23</version>\n+            <version>2.3.28</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n             <groupId>com.google.code.gson</groupId>\n             <artifactId>gson</artifactId>\n-            <version>2.4</version>\n+            <version>2.8.5</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n@@ -124,12 +124,14 @@\n             <version>${jetty.version}</version>\n             <scope>test</scope>\n         </dependency>\n+<!--\n         <dependency>\n             <groupId>org.powermock.tests</groupId>\n             <artifactId>powermock-tests-utils</artifactId>\n-            <version>${powermock.version}</version>\n+            <version>1.6.6</version>\n             <scope>test</scope>\n         </dependency>\n+-->\n     </dependencies>\n \n     <build>\n@@ -155,7 +157,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n-                <version>3.3</version>\n+                <version>3.7.0</version>\n                 <configuration>\n                     <source>${java.version}</source>\n                     <target>${java.version}</target>\n@@ -166,7 +168,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-enforcer-plugin</artifactId>\n-                <version>1.4</version>\n+                <version>1.4.1</version>\n                 <executions>\n                     <execution>\n                         <id>enforce-java</id>\n@@ -186,7 +188,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n-                <version>2.18.1</version>\n+                <version>2.22.0</version>\n                 <configuration>\n                     <forkCount>1</forkCount>\n                     <reuseForks>false</reuseForks>\n@@ -195,7 +197,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-javadoc-plugin</artifactId>\n-                <version>2.10.3</version>\n+                <version>3.0.1</version>\n                 <configuration>\n                     <failOnError>false</failOnError>\n                 </configuration>\n@@ -203,7 +205,7 @@\n             <plugin>\n                 <groupId>org.apache.felix</groupId>\n                 <artifactId>maven-bundle-plugin</artifactId>\n-                <version>2.5.3</version>\n+                <version>3.5.1</version>\n                 <extensions>true</extensions>\n             </plugin>\n         </plugins>\n", "test_patch": "diff --git a/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java b/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java\nindex 06d233f..1a34a03 100644\n--- a/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java\n+++ b/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java\n@@ -3,43 +3,51 @@ package spark.embeddedserver.jetty;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.thread.QueuedThreadPool;\n import org.junit.Test;\n-import org.mockito.internal.util.reflection.Whitebox;\n+import org.powermock.reflect.Whitebox;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n \n public class JettyServerTest {\n-\n     @Test\n-    public void testCreateServer_useDefaults() throws Exception {\n-\n+    public void testCreateServer_useDefaults() {\n         Server server = new JettyServer().create(0, 0, 0);\n \n         QueuedThreadPool threadPool = (QueuedThreadPool) server.getThreadPool();\n \n-        int minThreads = (int) Whitebox.getInternalState(threadPool, \"_minThreads\");\n-        int maxThreads = (int) Whitebox.getInternalState(threadPool, \"_maxThreads\");\n-        int idleTimeout = (int) Whitebox.getInternalState(threadPool, \"_idleTimeout\");\n+        int minThreads = Whitebox.getInternalState(threadPool, \"_minThreads\");\n+        int maxThreads = Whitebox.getInternalState(threadPool, \"_maxThreads\");\n+        int idleTimeout = Whitebox.getInternalState(threadPool, \"_idleTimeout\");\n \n         assertEquals(\"Server thread pool default minThreads should be 8\", 8, minThreads);\n         assertEquals(\"Server thread pool default maxThreads should be 200\", 200, maxThreads);\n         assertEquals(\"Server thread pool default idleTimeout should be 60000\", 60000, idleTimeout);\n-\n     }\n \n     @Test\n-    public void testCreateServer_whenNonDefaultMaxThreadOnly_thenUseDefaultMinThreadAndTimeout() throws Exception {\n-\n-        Server server = new JettyServer().create(1, 0, 0);\n+    public void testCreateServer_whenNonDefaultMaxThreadsOnly_thenUseDefaultMinThreadsAndTimeout() {\n+        Server server = new JettyServer().create(9, 0, 0);\n \n         QueuedThreadPool threadPool = (QueuedThreadPool) server.getThreadPool();\n \n-        int minThreads = (int) Whitebox.getInternalState(threadPool, \"_minThreads\");\n-        int maxThreads = (int) Whitebox.getInternalState(threadPool, \"_maxThreads\");\n-        int idleTimeout = (int) Whitebox.getInternalState(threadPool, \"_idleTimeout\");\n+        int minThreads = Whitebox.getInternalState(threadPool, \"_minThreads\");\n+        int maxThreads = Whitebox.getInternalState(threadPool, \"_maxThreads\");\n+        int idleTimeout = Whitebox.getInternalState(threadPool, \"_idleTimeout\");\n \n-        assertEquals(\"Server thread pool default minThreads should be 1\", 1, minThreads);\n-        assertEquals(\"Server thread pool default maxThreads should be the same as specified\", 1, maxThreads);\n+        assertEquals(\"Server thread pool default minThreads should be 8\", 8, minThreads);\n+        assertEquals(\"Server thread pool default maxThreads should be the same as specified\", 9, maxThreads);\n         assertEquals(\"Server thread pool default idleTimeout should be 60000\", 60000, idleTimeout);\n \n     }\n+\n+    @Test\n+    public void testCreateServer_whenNonDefaultMaxThreads_isLessThanDefaultMinThreads() {\n+        try {\n+            new JettyServer().create(2, 0, 0);\n+            fail(\"expected IllegalArgumentException\");\n+        }\n+        catch (IllegalArgumentException expected) {\n+            assertEquals(\"max threads (2) less than min threads (8)\", expected.getMessage());\n+        }\n+    }\n }\n"}
