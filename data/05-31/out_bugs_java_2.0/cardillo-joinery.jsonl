{"repository": "cardillo/joinery", "clone_url": "https://github.com/cardillo/joinery.git", "timestamp": "2023-05-31T18:59:02.001297Z", "commit_hash": "8218bbd90cc49e312df94081f70ecc5eb62bf177", "commit_message": "fix column padding when adding columns.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/joinery/impl/BlockManager.java b/src/main/java/joinery/impl/BlockManager.java\nindex ab6bc9f..b5afa5c 100644\n--- a/src/main/java/joinery/impl/BlockManager.java\n+++ b/src/main/java/joinery/impl/BlockManager.java\n@@ -59,6 +59,10 @@ public class BlockManager<V> {\n     }\n \n     public void add(final List<V> col) {\n+        final int len = length();\n+        for (int r = col.size(); r < len; r++) {\n+            col.add(null);\n+        }\n         blocks.add(col);\n     }\n \n", "test_patch": "diff --git a/src/test/java/joinery/DataFrameManipulationTest.java b/src/test/java/joinery/DataFrameManipulationTest.java\nindex 34600a1..07303c2 100644\n--- a/src/test/java/joinery/DataFrameManipulationTest.java\n+++ b/src/test/java/joinery/DataFrameManipulationTest.java\n@@ -45,6 +45,33 @@ public class DataFrameManipulationTest {\n             );\n     }\n \n+    @Test\n+    public final void testAddMultiple() {\n+        df.add(\"one\", \"two\", \"three\");\n+        System.out.println(df);\n+        assertArrayEquals(\n+                new String[] { \"one\", \"two\", \"three\" },\n+                df.columns().toArray()\n+            );\n+    }\n+\n+    @Test\n+    public final void testAddWithRows() {\n+        df.add(\"one\");\n+        df.append(Arrays.<Object>asList(1));\n+        System.out.println(df);\n+        df.add(\"two\");\n+        System.out.println(df);\n+        assertArrayEquals(\n+                new String[] { \"one\", \"two\" },\n+                df.columns().toArray()\n+            );\n+        assertArrayEquals(\n+                new Object[] { 1, null },\n+                df.toArray()\n+            );\n+    }\n+\n     @Test(expected=IllegalArgumentException.class)\n     public final void testAddExisting() {\n         df.add(\"test\")\n"}
{"repository": "cardillo/joinery", "clone_url": "https://github.com/cardillo/joinery.git", "timestamp": "2023-05-31T19:03:58.001597Z", "commit_hash": "4b20a16178130e6dda0a35e5da3c2252c0fbc767", "commit_message": "factor out sorting and fix sort direction.\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/joinery/DataFrame.java b/src/main/java/joinery/DataFrame.java\nindex b35c666..d4b7824 100644\n--- a/src/main/java/joinery/DataFrame.java\n+++ b/src/main/java/joinery/DataFrame.java\n@@ -28,7 +28,6 @@ import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n@@ -46,6 +45,7 @@ import joinery.impl.Inspection;\n import joinery.impl.Pivoting;\n import joinery.impl.Selection;\n import joinery.impl.Serialization;\n+import joinery.impl.Sorting;\n import joinery.impl.Views;\n \n import com.codahale.metrics.annotation.Timed;\n@@ -1185,44 +1185,26 @@ implements Iterable<List<V>> {\n     }\n \n     public DataFrame<V> sortBy(final String ... cols) {\n-        return sortBy(columns.indices(cols));\n+        final Map<Integer, SortDirection> sortCols = new LinkedHashMap<>();\n+        for (final String col : cols) {\n+            final SortDirection dir = col.startsWith(\"-\") ?\n+                    SortDirection.DESCENDING : SortDirection.ASCENDING;\n+            final int c = columns.get(\n+                    col.startsWith(\"-\") ? col.substring(1) : col);\n+            sortCols.put(c, dir);\n+        }\n+        return Sorting.sort(this, sortCols);\n     }\n \n     @Timed\n     public DataFrame<V> sortBy(final int ... cols) {\n-        final DataFrame<V> sorted = new DataFrame<V>(columns.names());\n-        final Comparator<Integer> cmp = new Comparator<Integer>() {\n-            @Override\n-            @SuppressWarnings(\"unchecked\")\n-            public int compare(final Integer r1, final Integer r2) {\n-                int result = 0;\n-                for (final int i : cols) {\n-                    final int c = Math.abs(i);\n-                    final Comparable<Object> o1 = Comparable.class.cast(data.get(c, r1));\n-                    final Comparable<Object> o2 = Comparable.class.cast(data.get(c, r2));\n-                    result = o1.compareTo(o2);\n-                    if (result != 0) {\n-                        result *= Integer.signum(i != 0 ? i : 1);\n-                        break;\n-                    }\n-                }\n-                return result;\n-            }\n-        };\n-\n-        final List<Integer> rows = new ArrayList<>(length());\n-        for (int r = 0; r < length(); r++) {\n-            rows.add(r);\n-        }\n-        Collections.sort(rows, cmp);\n-\n-        final List<String> labels = new ArrayList<>(this.index.names());\n-        for (final Integer r : rows) {\n-            final String label = r < labels.size() ? labels.get(r) : String.valueOf(r);\n-            sorted.append(label, row(r));\n+        final Map<Integer, SortDirection> sortCols = new LinkedHashMap<>();\n+        for (final int c : cols) {\n+            final SortDirection dir = c < 0 ?\n+                    SortDirection.DESCENDING : SortDirection.ASCENDING;\n+            sortCols.put(Math.abs(c), dir);\n         }\n-\n-        return sorted;\n+        return Sorting.sort(this, sortCols);\n     }\n \n     /**\n@@ -1496,4 +1478,9 @@ implements Iterable<List<V>> {\n      */\n     public interface Predicate<I>\n     extends Function<List<I>, Boolean> { }\n+\n+    public enum SortDirection {\n+        ASCENDING,\n+        DESCENDING\n+    }\n }\ndiff --git a/src/main/java/joinery/impl/Sorting.java b/src/main/java/joinery/impl/Sorting.java\nnew file mode 100644\nindex 0000000..fc50cb3\n--- /dev/null\n+++ b/src/main/java/joinery/impl/Sorting.java\n@@ -0,0 +1,67 @@\n+/*\n+ * Joinery -- Data frames for Java\n+ * Copyright (c) 2014, 2015 IBM Corp.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package joinery.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import joinery.DataFrame;\n+import joinery.DataFrame.SortDirection;\n+\n+public class Sorting {\n+    public static <V> DataFrame<V> sort(\n+            final DataFrame<V> df, final Map<Integer, SortDirection> cols) {\n+        final DataFrame<V> sorted = new DataFrame<V>(df.columns());\n+        final Comparator<Integer> cmp = new Comparator<Integer>() {\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            public int compare(final Integer r1, final Integer r2) {\n+                int result = 0;\n+                for (final Map.Entry<Integer, SortDirection> col : cols.entrySet()) {\n+                    final int c = col.getKey();\n+                    final Comparable<V> v1 = Comparable.class.cast(df.get(r1, c));\n+                    final V v2 = df.get(r2, c);\n+                    result = v1.compareTo(v2);\n+                    result *= col.getValue() == SortDirection.DESCENDING ? -1 : 1;\n+                    if (result != 0) {\n+                        break;\n+                    }\n+                }\n+                return result;\n+            }\n+        };\n+\n+        final Integer[] rows = new Integer[df.length()];\n+        for (int r = 0; r < df.length(); r++) {\n+            rows[r] = r;\n+        }\n+        Arrays.sort(rows, cmp);\n+\n+        final List<String> labels = new ArrayList<>(df.index());\n+        for (final Integer r : rows) {\n+            final String label = r < labels.size() ? labels.get(r) : String.valueOf(r);\n+            sorted.append(label, df.row(r));\n+        }\n+\n+        return sorted;\n+    }\n+}\n", "test_patch": "diff --git a/src/test/java/joinery/DataFrameSortByTest.java b/src/test/java/joinery/DataFrameSortByTest.java\nindex 994226f..645fda2 100644\n--- a/src/test/java/joinery/DataFrameSortByTest.java\n+++ b/src/test/java/joinery/DataFrameSortByTest.java\n@@ -29,21 +29,37 @@ import org.junit.Test;\n \n public class DataFrameSortByTest {\n     private DataFrame<Object> df;\n+    private List<Object> values;\n \n     @Before\n     public final void setUp() {\n         df = new DataFrame<Object>();\n-    }\n \n-    @Test\n-    public final void testSortBy() {\n-        List<Object> values = Arrays.<Object>asList(1, 2, 3, 4, 5, 6);\n+        values = Arrays.<Object>asList(1, 2, 3, 4, 5, 6);\n         Collections.shuffle(values);\n \n         df.add(\"name\", Arrays.<Object>asList(\"one\", \"two\", \"three\", \"four\", \"one\", \"two\"));\n         df.add(\"value\", values);\n+    }\n+\n+    @Test\n+    public final void testSortBy() {\n+        final DataFrame<Object> sorted = df.sortBy(1);\n+        assertArrayEquals(\n+                \"original values are unsorted\",\n+                values.toArray(),\n+                df.col(1).toArray()\n+            );\n+        assertArrayEquals(\n+                \"values are sorted\",\n+                new Object[] { 1, 2, 3, 4, 5, 6 },\n+                sorted.col(1).toArray()\n+            );\n+    }\n \n-        DataFrame<Object> sorted = df.sortBy(1);\n+    @Test\n+    public final void testSortByString() {\n+        final DataFrame<Object> sorted = df.sortBy(\"value\");\n         assertArrayEquals(\n                 \"original values are unsorted\",\n                 values.toArray(),\n@@ -55,4 +71,34 @@ public class DataFrameSortByTest {\n                 sorted.col(1).toArray()\n             );\n     }\n+\n+    @Test\n+    public final void testSortByDesc() {\n+        final DataFrame<Object> sorted = df.sortBy(-1);\n+        assertArrayEquals(\n+                \"original values are unsorted\",\n+                values.toArray(),\n+                df.col(1).toArray()\n+            );\n+        assertArrayEquals(\n+                \"values are sorted\",\n+                new Object[] { 6, 5, 4, 3, 2, 1 },\n+                sorted.col(1).toArray()\n+            );\n+    }\n+\n+    @Test\n+    public final void testSortByStringDesc() {\n+        final DataFrame<Object> sorted = df.sortBy(\"-value\");\n+        assertArrayEquals(\n+                \"original values are unsorted\",\n+                values.toArray(),\n+                df.col(1).toArray()\n+            );\n+        assertArrayEquals(\n+                \"values are sorted\",\n+                new Object[] { 6, 5, 4, 3, 2, 1 },\n+                sorted.col(1).toArray()\n+            );\n+    }\n }\n"}
{"repository": "cardillo/joinery", "clone_url": "https://github.com/cardillo/joinery.git", "timestamp": "2023-05-31T19:10:30.449456Z", "commit_hash": "32281fb69757bd28d7338785f3c939f4a6ce2091", "commit_message": "fix data frame transform (should not transpose view)\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/joinery/DataFrame.java b/src/main/java/joinery/DataFrame.java\nindex 9b702ff..ba9bcdf 100644\n--- a/src/main/java/joinery/DataFrame.java\n+++ b/src/main/java/joinery/DataFrame.java\n@@ -260,7 +260,7 @@ implements Iterable<List<V>> {\n         return new DataFrame<>(\n                 index.names(),\n                 columns.names(),\n-                new Views.TransformedView<V, U>(this, transform, true)\n+                new Views.TransformedView<V, U>(this, transform, false)\n             );\n     }\n \n", "test_patch": "diff --git a/src/test/java/joinery/DataFrameConversionTest.java b/src/test/java/joinery/DataFrameConversionTest.java\nindex 465a58b..dcf99d3 100644\n--- a/src/test/java/joinery/DataFrameConversionTest.java\n+++ b/src/test/java/joinery/DataFrameConversionTest.java\n@@ -108,7 +108,7 @@ public class DataFrameConversionTest {\n         };\n         assertArrayEquals(\n                 expected,\n-                nulls.transpose().toArray()\n+                nulls.toArray()\n             );\n     }\n \n@@ -125,7 +125,7 @@ public class DataFrameConversionTest {\n         };\n         assertArrayEquals(\n                 expected,\n-                nonnulls.transpose().toArray()\n+                nonnulls.toArray()\n             );\n     }\n \n"}
