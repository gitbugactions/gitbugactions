{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T19:55:11.846487Z", "commit_hash": "17b80cbebdb593f883d9a9b8b3f903cc1600a163", "commit_message": "Merge pull request #89 from martinmladenov/fix-tests\n\n", "related_issues": "", "bug_patch": "diff --git a/fixtures/cbo/Coupling12.java b/fixtures/cbo/Coupling12.java\nnew file mode 100644\nindex 0000000..853d30b\n--- /dev/null\n+++ b/fixtures/cbo/Coupling12.java\n@@ -0,0 +1,7 @@\n+package cbo;\n+\n+class Coupling12 {\n+    public A sampleMethod() {\n+        return SampleClassWithStaticMethod.sampleMethod();\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/fixtures/cbo/Coupling8.java b/fixtures/cbo/Coupling8.java\nindex ce2542f..ceb1e31 100644\n--- a/fixtures/cbo/Coupling8.java\n+++ b/fixtures/cbo/Coupling8.java\n@@ -1,10 +1,6 @@\n package cbo;\n \n public class Coupling8 {\n-\n-  public A sampleMethod() {\n-      return SampleClassWithStaticMethod.sampleMethod();\n-  }\n \t\n \tpublic D m1() {\n \t\tA a = new A();\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/CBOTest.java b/src/test/java/com/github/mauricioaniche/ck/CBOTest.java\nindex b9df52f..9e6e0d5 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/CBOTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/CBOTest.java\n@@ -117,7 +117,7 @@ public class CBOTest extends BaseTest {\n \n \t@Test\n \tpublic void staticMethodCallInReturnStatement() {\n-\t\tCKClassResult a = report.get(\"cbo.Coupling8\");\n+\t\tCKClassResult a = report.get(\"cbo.Coupling12\");\n \t\tAssertions.assertEquals(3, a.getCbo());\n \t}\n \n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T20:08:02.326000Z", "commit_hash": "97e68622dc44c7cfd905781b761614c0db8a85f4", "commit_message": "Fix tests\n", "related_issues": "", "bug_patch": "diff --git a/fixtures/cbo/Coupling12.java b/fixtures/cbo/Coupling12.java\nnew file mode 100644\nindex 0000000..853d30b\n--- /dev/null\n+++ b/fixtures/cbo/Coupling12.java\n@@ -0,0 +1,7 @@\n+package cbo;\n+\n+class Coupling12 {\n+    public A sampleMethod() {\n+        return SampleClassWithStaticMethod.sampleMethod();\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/fixtures/cbo/Coupling8.java b/fixtures/cbo/Coupling8.java\nindex ce2542f..ceb1e31 100644\n--- a/fixtures/cbo/Coupling8.java\n+++ b/fixtures/cbo/Coupling8.java\n@@ -1,10 +1,6 @@\n package cbo;\n \n public class Coupling8 {\n-\n-  public A sampleMethod() {\n-      return SampleClassWithStaticMethod.sampleMethod();\n-  }\n \t\n \tpublic D m1() {\n \t\tA a = new A();\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/CBOTest.java b/src/test/java/com/github/mauricioaniche/ck/CBOTest.java\nindex b9df52f..9e6e0d5 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/CBOTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/CBOTest.java\n@@ -117,7 +117,7 @@ public class CBOTest extends BaseTest {\n \n \t@Test\n \tpublic void staticMethodCallInReturnStatement() {\n-\t\tCKClassResult a = report.get(\"cbo.Coupling8\");\n+\t\tCKClassResult a = report.get(\"cbo.Coupling12\");\n \t\tAssertions.assertEquals(3, a.getCbo());\n \t}\n \n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T20:22:00.260483Z", "commit_hash": "68f1982fee126d7e38458cce35909dae259c1d04", "commit_message": "Merge pull request #66 from jan-gerling/fix/NullMethodInvocationsLocal\n\nFix #65 - local method invocations can be null", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java b/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java\nindex 2cc1816..1065041 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java\n@@ -111,14 +111,14 @@ public class TightClassCohesion implements CKASTVisitor, ClassLevelMetric {\n     }\n \n     public void setResult(CKClassResult result) {\n+        MethodInvocationsLocal methodInvocationsLocal = new MethodInvocationsLocal();\n+        methodInvocationsLocal.extractInvocations(result);\n+\n         //in case the class does not contain any visible methods, TCC and LCC have no reasonable value, thus set it to -1\n         if(result.getVisibleMethods().size() < 1){\n             result.setTightClassCohesion(-1);\n             result.setLooseClassCohesion(-1);\n         } else {\n-            MethodInvocationsLocal methodInvocationsLocal = new MethodInvocationsLocal();\n-            methodInvocationsLocal.extractInvocations(result);\n-\n             //maximum number of possible connections (N * (N -1))\n             float np = result.getVisibleMethods().size() * (result.getVisibleMethods().size() - 1);\n \n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java b/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java\nindex a79b898..2fe0a3d 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java\n@@ -3,6 +3,7 @@ package com.github.mauricioaniche.ck.realworld;\n import com.github.mauricioaniche.ck.BaseTest;\n import com.github.mauricioaniche.ck.CKClassResult;\n import com.github.mauricioaniche.ck.CKMethodResult;\n+import com.github.mauricioaniche.ck.metric.MethodLevelMetric;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n@@ -232,4 +233,19 @@ public class RealWorldClassesTest extends BaseTest {\n \t\tAssertions.assertNotNull(class1.getMethod(\"resolveChunk/1[java.lang.Exception]\"));\n \t}\n \n+\t/**\n+\t * Tests if the for anonymous classes and classes with no visible methods methods invocations and local method invocations are generated.\n+\t * For more details see issue #65.\n+\t */\n+\t@Test\n+\tpublic void methodInvocationsInnerClass(){\n+\t\tCKClassResult class1 = report.get(\"com.github.ambry.commons.ByteBufferAsyncWritableChannel$ChunkData\");\n+\t\tCKMethodResult constructorMethod = class1.getMethod(\"ChunkData/2[java.nio.ByteBuffer,com.github.ambry.commons.Callback<java.lang.Long>]\").get();\n+\t\tSystem.out.println(constructorMethod.getMethodInvocations());\n+\t\tSystem.out.println(constructorMethod.getMethodInvocationsLocal());\n+\n+\t\tAssertions.assertEquals(1, constructorMethod.getMethodInvocations().size());\n+\t\tAssertions.assertEquals(0, constructorMethod.getMethodInvocationsLocal().size());\n+\t\tAssertions.assertEquals(0, constructorMethod.getMethodInvocationsIndirectLocal().size());\n+\t}\n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T20:32:27.736723Z", "commit_hash": "c5f729218503549c186e7903d36fd39ec8fdb852", "commit_message": "Fix #65 - local method invocations can be null\n\n * Generate local method invocations hashmap always\n * Add realdworld methodinvocations test\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java b/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java\nindex 2cc1816..1065041 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/TightClassCohesion.java\n@@ -111,14 +111,14 @@ public class TightClassCohesion implements CKASTVisitor, ClassLevelMetric {\n     }\n \n     public void setResult(CKClassResult result) {\n+        MethodInvocationsLocal methodInvocationsLocal = new MethodInvocationsLocal();\n+        methodInvocationsLocal.extractInvocations(result);\n+\n         //in case the class does not contain any visible methods, TCC and LCC have no reasonable value, thus set it to -1\n         if(result.getVisibleMethods().size() < 1){\n             result.setTightClassCohesion(-1);\n             result.setLooseClassCohesion(-1);\n         } else {\n-            MethodInvocationsLocal methodInvocationsLocal = new MethodInvocationsLocal();\n-            methodInvocationsLocal.extractInvocations(result);\n-\n             //maximum number of possible connections (N * (N -1))\n             float np = result.getVisibleMethods().size() * (result.getVisibleMethods().size() - 1);\n \n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java b/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java\nindex a79b898..2fe0a3d 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/realworld/RealWorldClassesTest.java\n@@ -3,6 +3,7 @@ package com.github.mauricioaniche.ck.realworld;\n import com.github.mauricioaniche.ck.BaseTest;\n import com.github.mauricioaniche.ck.CKClassResult;\n import com.github.mauricioaniche.ck.CKMethodResult;\n+import com.github.mauricioaniche.ck.metric.MethodLevelMetric;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n@@ -232,4 +233,19 @@ public class RealWorldClassesTest extends BaseTest {\n \t\tAssertions.assertNotNull(class1.getMethod(\"resolveChunk/1[java.lang.Exception]\"));\n \t}\n \n+\t/**\n+\t * Tests if the for anonymous classes and classes with no visible methods methods invocations and local method invocations are generated.\n+\t * For more details see issue #65.\n+\t */\n+\t@Test\n+\tpublic void methodInvocationsInnerClass(){\n+\t\tCKClassResult class1 = report.get(\"com.github.ambry.commons.ByteBufferAsyncWritableChannel$ChunkData\");\n+\t\tCKMethodResult constructorMethod = class1.getMethod(\"ChunkData/2[java.nio.ByteBuffer,com.github.ambry.commons.Callback<java.lang.Long>]\").get();\n+\t\tSystem.out.println(constructorMethod.getMethodInvocations());\n+\t\tSystem.out.println(constructorMethod.getMethodInvocationsLocal());\n+\n+\t\tAssertions.assertEquals(1, constructorMethod.getMethodInvocations().size());\n+\t\tAssertions.assertEquals(0, constructorMethod.getMethodInvocationsLocal().size());\n+\t\tAssertions.assertEquals(0, constructorMethod.getMethodInvocationsIndirectLocal().size());\n+\t}\n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T20:43:24.579937Z", "commit_hash": "20416c04194fe43ef3a10fb29da60c012b5f3911", "commit_message": "Fixed Bug in visible method detection\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java b/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java\nindex 5ff1c53..4130348 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java\n@@ -1,9 +1,7 @@\n package com.github.mauricioaniche.ck;\n \n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.eclipse.jdt.core.dom.Modifier;\n \n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n@@ -53,7 +51,7 @@ public class CKMethodResult {\n \t\tthis.qualifiedMethodName = qualifiedMethodName;\n \t\tthis.isConstructor = isConstructor;\n \t\tthis.modifiers = modifiers;\n-\t\tthis.isVisible = !(Modifier.isPrivate(modifiers) || Modifier.isDefault(modifiers));\n+\t\tthis.isVisible = Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers);\n \t}\n \n \t/**\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/TightClassCohesionTest.java b/src/test/java/com/github/mauricioaniche/ck/TightClassCohesionTest.java\nindex a773f3f..b0cd16e 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/TightClassCohesionTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/TightClassCohesionTest.java\n@@ -23,6 +23,7 @@ public class TightClassCohesionTest extends BaseTest {\n     @Test\n     public void noCohesion() {\n         CKClassResult ckClass = report.get(\"ClassCohesion.NoCohesion\");\n+        System.out.println(ckClass.getVisibleMethods());\n         Assert.assertEquals(0f, ckClass.getTightClassCohesion());\n     }\n \ndiff --git a/src/test/java/com/github/mauricioaniche/ck/VisibleMethodsTest.java b/src/test/java/com/github/mauricioaniche/ck/VisibleMethodsTest.java\nindex 2b96afb..2766405 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/VisibleMethodsTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/VisibleMethodsTest.java\n@@ -20,19 +20,19 @@ public class VisibleMethodsTest extends BaseTest{\n     @Test\n     public void countVisible() {\n         CKClassResult a = report.get(\"VisibleMethods.VisibleMethods\");\n-        Assert.assertEquals(6, a.getVisibleMethods().size());\n+        Assert.assertEquals(5, a.getVisibleMethods().size());\n     }\n \n     @Test\n     public void countNonVisible() {\n         CKClassResult a = report.get(\"VisibleMethods.VisibleMethods\");\n-        Assert.assertEquals(4, a.getNumberOfMethods() - a.getNumberOfVisibleMethods());\n+        Assert.assertEquals(5, a.getNumberOfMethods() - a.getNumberOfVisibleMethods());\n     }\n \n     @Test\n     public void visibleMethods() {\n         CKClassResult a = report.get(\"VisibleMethods.VisibleMethods\");\n         Set<String> visibleMethodsFound = a.getVisibleMethods().stream().map(method -> method.getMethodName()).collect(Collectors.toSet());\n-        Assert.assertEquals(Sets.newHashSet(\"m3/0\", \"m4/0\", \"m6/0\", \"m7/0\", \"m10/0\", \"m8/0\"), visibleMethodsFound);\n+        Assert.assertEquals(Sets.newHashSet(\"m3/0\", \"m6/0\", \"m7/0\", \"m10/0\", \"m8/0\"), visibleMethodsFound);\n     }\n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T21:02:58.159552Z", "commit_hash": "77669913b3f227f385c837d98756e5faa3614f35", "commit_message": "Fix CKVisitor visit(Qualified Node)\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java b/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java\nindex a4d7718..1199905 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java\n@@ -1279,10 +1279,11 @@ public class CKVisitor extends ASTVisitor {\n \t}\n \n \tpublic void endVisit(QualifiedName node) {\n-\t\tclasses.peek().classLevelMetrics.stream().map(metric -> (CKASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n-\t\tif(!classes.peek().methods.isEmpty())\n+\t\tif(!classes.empty()) {\n+\t\t\tclasses.peek().classLevelMetrics.stream().map(metric -> (CKASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n+\t\t}\n+\t\tif(!classes.isEmpty() && !classes.peek().methods.isEmpty())\n \t\t\tclasses.peek().methods.peek().methodLevelMetrics.stream().map(metric -> (CKASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n \t}\n \t// TODO: add all other endVisit blocks\n-\n-}\n+}\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java b/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java\nindex 38a72cb..c98ab0c 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java\n@@ -5,8 +5,6 @@ import org.eclipse.jdt.core.dom.*;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n import static com.github.mauricioaniche.ck.util.StringUtils.substringRegex;\n \n@@ -148,7 +146,6 @@ public class JDTUtils {\n \t//get the simple name from the fragments of a variable or field declaration, e.g. [a=10] -> a\n \t//Be aware: the function might return the empty string\n \tpublic static String getVariableName(List<?> fragments){\n-\t\tSystem.out.println(fragments.get(0).getClass());\n \t\tString first = fragments.get(0).toString();\n \t\tif (first == null)\n \t\t\treturn \"\";\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/FieldUsageTest.java b/src/test/java/com/github/mauricioaniche/ck/FieldUsageTest.java\nindex 9da7b0c..5467de8 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/FieldUsageTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/FieldUsageTest.java\n@@ -68,7 +68,6 @@ public class FieldUsageTest extends BaseTest {\n \tpublic void nonLocalField() {\n \t\tCKClassResult a = report.get(\"fieldusage.FieldUsage\");\n \t\tCKMethodResult m8 = a.getMethod(\"m8/0\").get();\n-\t\tAssertions.assertEquals(1, m8.getFieldUsage().get(\"a\").intValue());\n \t\tAssertions.assertEquals(1, m8.getFieldUsage().get(\"b\").intValue());\n \t}\n }\n\\ No newline at end of file\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T21:18:45.070349Z", "commit_hash": "f72adf0a2dac70ab4158a646c4ea8fd2b2002f68", "commit_message": "Fix bug in variable name extraction and add local fields property to\nCKClassResult\n", "related_issues": "", "bug_patch": "diff --git a/fixtures/fieldusage/FieldUsage.java b/fixtures/fieldusage/FieldUsage.java\nindex eece99e..570ae5f 100644\n--- a/fixtures/fieldusage/FieldUsage.java\n+++ b/fixtures/fieldusage/FieldUsage.java\n@@ -58,7 +58,7 @@ class FieldUsage {\n \n \tpublic int m8() {\n \t\tFieldUsage2 f2 = new FieldUsage2();\n-\t\treturn b + f2.a;\n+\t\treturn b + f2.a + f2.x;\n \t}\n \n \tprivate String xx;\ndiff --git a/fixtures/fieldusage/FieldUsage2.java b/fixtures/fieldusage/FieldUsage2.java\nindex f321781..1817be1 100644\n--- a/fixtures/fieldusage/FieldUsage2.java\n+++ b/fixtures/fieldusage/FieldUsage2.java\n@@ -2,4 +2,5 @@ package fieldusage;\n \n class FieldUsage2 {\n \tpublic int a = 10;\n+\tpublic int x = 10;\n }\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/CKClassResult.java b/src/main/java/com/github/mauricioaniche/ck/CKClassResult.java\nindex 13054b7..a329bf6 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/CKClassResult.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/CKClassResult.java\n@@ -18,6 +18,7 @@ public class CKClassResult {\n \tprivate int loc;\n \t\n \tprivate Set<CKMethodResult> methods;\n+\tprivate Set<String> fieldNames;\n \tprivate int returnQty;\n \tprivate int loopQty;\n \tprivate int comparisonsQty;\n@@ -154,6 +155,10 @@ public class CKClassResult {\n \t\treturn methods.stream().filter(m -> m.getMethodName().equals(methodName)).findFirst();\n \t}\n \n+\tpublic void setFieldNames(Set<String> fieldNames){ this.fieldNames = fieldNames;}\n+\n+\tpublic Set<String> getFieldNames(){ return fieldNames; }\n+\n \tpublic void setReturnQty(int returnQty) {\n \t\tthis.returnQty = returnQty;\n \t}\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java b/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java\nindex 953859b..218c828 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/CKMethodResult.java\n@@ -30,6 +30,7 @@ public class CKMethodResult {\n \tprivate int lambdasQty;\n \tprivate int uniqueWordsQty;\n \tprivate Map<String, Integer> fieldUsage;\n+\tprivate Map<String, Integer> fieldUsageLocal;\n \tprivate boolean isConstructor;\n \tprivate int modifiers;\n \tprivate int logStatementsQty;\n@@ -257,12 +258,22 @@ public class CKMethodResult {\n \t\tthis.fieldUsage = fieldUsage;\n \t}\n \n+\tpublic void setFieldUsageLocal(Map<String, Integer> fieldUsageLocal) {\n+\t\tthis.fieldUsageLocal = fieldUsageLocal;\n+\t}\n+\n \tpublic Map<String, Integer> getFieldUsage() {\n \t\treturn fieldUsage;\n \t}\n \n+\tpublic Map<String, Integer> getFieldUsageLocal() {\n+\t\treturn fieldUsageLocal;\n+\t}\n+\n \tpublic Set<String> getFieldsAccessed() { return fieldUsage.keySet(); }\n \n+\tpublic Set<String> getFieldsAccessedLocal() { return fieldUsageLocal.keySet(); }\n+\n \tpublic boolean isConstructor() {\n \t\treturn isConstructor;\n \t}\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\nindex f938f30..04045cf 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\n@@ -1,11 +1,20 @@\n package com.github.mauricioaniche.ck.metric;\n \n import com.github.mauricioaniche.ck.CKClassResult;\n+import com.github.mauricioaniche.ck.CKMethodResult;\n import org.eclipse.jdt.core.dom.FieldDeclaration;\n import org.eclipse.jdt.core.dom.Modifier;\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.github.mauricioaniche.ck.util.JDTUtils.getVariableName;\n+\n public class NumberOfFields implements CKASTVisitor, ClassLevelMetric {\n \n+\tprivate Set<String> fieldNames = new HashSet<>();\n \tprivate int fields;\n \tprivate int staticFields;\n \tprivate int publicFields;\n@@ -19,6 +28,7 @@ public class NumberOfFields implements CKASTVisitor, ClassLevelMetric {\n \tpublic void visit(FieldDeclaration node) {\n \t\tfields++;\n \n+\t\tfieldNames.add(getVariableName(node.fragments()));\n \n \t\tboolean isPublic = Modifier.isPublic(node.getModifiers());\n \t\tboolean isPrivate = Modifier.isPrivate(node.getModifiers());\n@@ -52,6 +62,7 @@ public class NumberOfFields implements CKASTVisitor, ClassLevelMetric {\n \t@Override\n \tpublic void setResult(CKClassResult result) {\n \t\tresult.setNumberOfFields(fields);\n+\t\tresult.setFieldNames(fieldNames);\n \t\tresult.setNumberOfStaticFields(staticFields);\n \t\tresult.setNumberOfPublicFields(publicFields);\n \t\tresult.setNumberOfPrivateFields(privateFields);\n@@ -59,5 +70,12 @@ public class NumberOfFields implements CKASTVisitor, ClassLevelMetric {\n \t\tresult.setNumberOfDefaultFields(defaultFields);\n \t\tresult.setNumberOfFinalFields(finalFields);\n \t\tresult.setNumberOfSynchronizedFields(synchronizedFields);\n+\n+\t\t//filter the fieldUsage to contain only local fields and set it in the method result\n+\t\tfor(CKMethodResult method : result.getMethods()){\n+\t\t\tMap<String, Integer> fieldUsageLocal = new HashMap<>(method.getFieldUsage());\n+\t\t\tfieldUsageLocal.keySet().retainAll(fieldNames);\n+\t\t\tmethod.setFieldUsageLocal(fieldUsageLocal);\n+\t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java b/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java\nindex 71174df..162472a 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/util/JDTUtils.java\n@@ -151,6 +151,6 @@ public class JDTUtils {\n \t\tString first = fragments.get(0).toString();\n \t\tif (first == null)\n \t\t\treturn \"\";\n-\t\treturn substringRegex(first.replaceAll(\"\\\\s\", \"\"), \"^(.*?)(?=[=;])\");\n+\t\treturn substringRegex(first.replaceAll(\"\\\\s\", \"\"), \"^(.+?)(?=[=;]|$)\");\n \t}\n }\n\\ No newline at end of file\ndiff --git a/src/test/java/com/github/mauricioaniche/ck/LocalFieldsTest.java b/src/test/java/com/github/mauricioaniche/ck/LocalFieldsTest.java\nnew file mode 100644\nindex 0000000..d585962\n--- /dev/null\n+++ b/src/test/java/com/github/mauricioaniche/ck/LocalFieldsTest.java\n@@ -0,0 +1,23 @@\n+package com.github.mauricioaniche.ck;\n+\n+import com.google.common.collect.Sets;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Map;\n+\n+public class LocalFieldsTest extends BaseTest {\n+    private static Map<String, CKClassResult> report;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        report = run(fixturesDir() + \"/fieldusage\");\n+    }\n+\n+    @Test\n+    public void localFieldsTest() {\n+        CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n+        Assertions.assertEquals( Sets.newHashSet(\"a\", \"b\", \"c\", \"d\", \"xx\"), a.getFieldNames());\n+    }\n+}\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/FieldsAccessedTest.java b/src/test/java/com/github/mauricioaniche/ck/FieldsAccessedTest.java\nindex 6462be5..ed86cd6 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/FieldsAccessedTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/FieldsAccessedTest.java\n@@ -14,6 +14,7 @@ public class FieldsAccessedTest extends BaseTest {\n         report = run(fixturesDir() + \"/fieldusage\");\n     }\n \n+    //test all field accesses\n     @Test\n     public void fieldsAccessedBasic() {\n         CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n@@ -36,8 +37,8 @@ public class FieldsAccessedTest extends BaseTest {\n         CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n         CKMethodResult m4 = a.getMethod(\"m4/0\").get();\n         Assertions.assertEquals(Sets.newHashSet(\"xx\"), m4.getFieldsAccessed());\n-\n     }\n+\n     @Test\n     public void lambdaFunction(){\n         CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n@@ -66,10 +67,56 @@ public class FieldsAccessedTest extends BaseTest {\n         Assertions.assertEquals(Sets.newHashSet(\"a\", \"b\"), m8.getFieldsAccessed());\n     }\n \n+    //test local field accesses\n     @Test\n     public void localNonLocalTest() {\n         CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n         CKMethodResult m8 = a.getMethod(\"m8/0\").get();\n         Assertions.assertEquals(Sets.newHashSet(\"b\"), m8.getFieldsAccessedLocal());\n     }\n+\n+    @Test\n+    public void localFieldsAccessedBasic() {\n+        CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n+\n+        //Test basic fields access\n+        CKMethodResult m1 = a.getMethod(\"m1/0\").get();\n+        Assertions.assertEquals( Sets.newHashSet(\"a\", \"b\"), m1.getFieldsAccessedLocal());\n+\n+        //Test field name overloading\n+        CKMethodResult m2 = a.getMethod(\"m2/0\").get();\n+        Assertions.assertEquals(Sets.newHashSet(\"a\"), m2.getFieldsAccessedLocal());\n+\n+        //Test field reference with this\n+        CKMethodResult m3 = a.getMethod(\"m3/0\").get();\n+        Assertions.assertEquals(Sets.newHashSet(\"a\"), m3.getFieldsAccessedLocal());\n+    }\n+\n+    @Test\n+    public void localFieldsThatAreDeclaredAfter() {\n+        CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n+        CKMethodResult m4 = a.getMethod(\"m4/0\").get();\n+        Assertions.assertEquals(Sets.newHashSet(\"xx\"), m4.getFieldsAccessedLocal());\n+    }\n+\n+    @Test\n+    public void localLambdaFunction(){\n+        CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n+        CKMethodResult m5 = a.getMethod(\"m5/0\").get();\n+        Assertions.assertEquals(Sets.newHashSet(\"b\"), m5.getFieldsAccessedLocal());\n+    }\n+\n+    @Test\n+    public void localIfBlock() {\n+        CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n+        CKMethodResult m6 = a.getMethod(\"m6/0\").get();\n+        Assertions.assertEquals(Sets.newHashSet(\"a\", \"b\", \"c\"), m6.getFieldsAccessedLocal());\n+    }\n+\n+    @Test\n+    public void localReturnStatement() {\n+        CKClassResult a = report.get(\"fieldusage.FieldUsage\");\n+        CKMethodResult m7 = a.getMethod(\"m7/0\").get();\n+        Assertions.assertEquals(Sets.newHashSet(\"a\", \"b\"), m7.getFieldsAccessedLocal());\n+    }\n }\n\\ No newline at end of file\ndiff --git a/src/test/java/com/github/mauricioaniche/ck/util/JDTUtilsTest.java b/src/test/java/com/github/mauricioaniche/ck/util/JDTUtilsTest.java\nindex a8af4df..6411bc1 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/util/JDTUtilsTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/util/JDTUtilsTest.java\n@@ -37,5 +37,8 @@ public class JDTUtilsTest {\n         String name9 = getVariableName(Arrays.asList(\"a\" +\n                 \"= 10;\"));\n         Assert.assertEquals(\"a\", name9);\n+\n+        String name10 = getVariableName(Arrays.asList(\"xx\"));\n+        Assert.assertEquals(\"xx\", name10);\n     }\n }\n\\ No newline at end of file\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T21:37:07.989745Z", "commit_hash": "9a0f937441b1cfd0a708e91becf4b732055a6ca7", "commit_message": "fix bug when counting number of subclasses in an enum\n", "related_issues": "", "bug_patch": "diff --git a/fixtures/enumdecl/EnumDecl3.java b/fixtures/enumdecl/EnumDecl3.java\nnew file mode 100644\nindex 0000000..eaef2fb\n--- /dev/null\n+++ b/fixtures/enumdecl/EnumDecl3.java\n@@ -0,0 +1,59 @@\n+package enumd;\n+\n+public enum EnumDecl3 {\n+\n+\tA(1),\n+\tB(2);\n+\n+\tprivate int i;\n+\n+\tpublic EnumDecl(int i) {\n+\t\tthis.i = i;\n+\t}\n+\n+\tpublic int getX() {\n+\n+\t\tstatic class Other {\n+\t\t\tpublic void x1(){\n+\t\t\t\tint a = 0;\n+\t\t\t\tint b = 0;\n+\n+\t\t\t\tif(a) {\n+\t\t\t\t\tif(b) {\n+\t\t\t\t\t\tSystem.out.println(\"hi\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tpublic void x2(){}\n+\t\t\tpublic void x3(){}\n+\t\t\tpublic void x4(){}\n+\t\t}\n+\n+\t\tint kk = 0;\n+\t\tif(kk > 10) {\n+\t\t\t// ...\n+\t\t}\n+\n+\t\tfor(int j = 0; j < 10; j++) {\n+\t\t\t// ...\n+\t\t}\n+\n+\t\treturn this.i * 2;\n+\t}\n+\n+\tstatic class Other2 {\n+\t\tpublic void x1(){\n+\t\t\tint a = 0;\n+\t\t\tint b = 0;\n+\n+\t\t\tif(a) {\n+\t\t\t\tif(b) {\n+\t\t\t\t\tSystem.out.println(\"hi\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tpublic void x2(){}\n+\t\tpublic void x3(){}\n+\t\tpublic void x4(){}\n+\t}\n+}\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfSubClassesLambdasAndAnonymousClasses.java b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfSubClassesLambdasAndAnonymousClasses.java\nindex bea7992..3d97202 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfSubClassesLambdasAndAnonymousClasses.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfSubClassesLambdasAndAnonymousClasses.java\n@@ -15,6 +15,12 @@ public class NumberOfSubClassesLambdasAndAnonymousClasses extends ASTVisitor imp\n \t\treturn super.visit(node);\n \t}\n \n+\tpublic boolean visit(EnumDeclaration node) {\n+\t\t// we count enum as class declaration!\n+\t\tsubClassesQty++;\n+\t\treturn super.visit(node);\n+\t}\n+\n \tpublic boolean visit(LambdaExpression node) {\n \t\tlambdasQty++;\n \t\treturn super.visit(node);\n@@ -28,7 +34,7 @@ public class NumberOfSubClassesLambdasAndAnonymousClasses extends ASTVisitor imp\n \t@Override\n \tpublic void setResult(CKClassResult result) {\n \t\tresult.setAnonymousClassesQty(anonymousClassesQty);\n-\t\tresult.setSubClassesQty(subClassesQty - 1);\n+\t\tresult.setSubClassesQty(subClassesQty - 1); // -1 as it counts its own class here\n \t\tresult.setLambdasQty(lambdasQty);\n \n \t}\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/EnumTest.java b/src/test/java/com/github/mauricioaniche/ck/EnumTest.java\nindex 815d1b8..f7c49ad 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/EnumTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/EnumTest.java\n@@ -35,6 +35,20 @@ public class EnumTest extends BaseTest {\n \t\tAssert.assertEquals(4, b.getMethod(\"m2/0\").get().getMaxNestedBlocks());\n \t}\n \n+\t@Test\n+\tpublic void subclasses() {\n+\t\tCKClassResult b = report.get(\"enumd.EnumDecl3\");\n+\n+\t\tAssert.assertEquals(1, b.getMethod(\"getX/0\").get().getSubClassesQty());\n+\t\tAssert.assertEquals(2, b.getSubClassesQty());\n+\n+\t\tCKClassResult sc = report.get(\"enumd.EnumDecl3$1Other\");\n+\t\tAssert.assertEquals(4, sc.getNumberOfMethods());\n+\t\tAssert.assertEquals(3, sc.getMethod(\"x1/0\").get().getWmc());\n+\t\tAssert.assertEquals(2, sc.getMethod(\"x1/0\").get().getVariablesQty());\n+\n+\t}\n+\n \n \n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T21:42:35.154717Z", "commit_hash": "4c776ecc30a6b9f18a6648d9c46e4711a29fac6b", "commit_message": "counting the number of unique words inside static initializer methods; this fixes issue #33\n", "related_issues": "", "bug_patch": "diff --git a/README.md b/README.md\nindex 9ee0a3a..e0cf3c1 100644\n--- a/README.md\n+++ b/README.md\n@@ -71,8 +71,11 @@ Note that whenever an anonymous class or a subclass is declared, it becomes an\n However, lambda expressions are not considered classes, and thus, are part of the\n class/method they are embedded into.\n \n-- *Number of unique words*. Number of unique words in the source code. See `WordCounter` class for details on the\n-implementation.\n+- *Number of unique words*. Number of unique words in the source code. At method level, it only uses the method body as input. At class level,\n+it uses the entire body of the class as metrics.\n+The algorithm basically counts the number of words in a method/class, after removing Java keywords. Names are split based on camel case and underline (e.g., longName_likeThis becomes four words).\n+Note that, given it sees the class as text, if a class contains a sub-class, the number of unique words will also include the number of words in the subclass.\n+See `WordCounter` class for details on the implementation.\n \n - *Number of Log Statements*. Number of log statements in the source code. The counting is based on the following regex:\n `line.matches(\".*\\\\.(info|warn|debug|error)\\\\(.*\") || line.matches(\".*log(ger)?\\\\..*\");`.\ndiff --git a/fixtures/wordcounts/WordCounts2.java b/fixtures/wordcounts/WordCounts2.java\nnew file mode 100644\nindex 0000000..e46ff55\n--- /dev/null\n+++ b/fixtures/wordcounts/WordCounts2.java\n@@ -0,0 +1,26 @@\n+package wordcounts;\n+\n+class WordCounts2 {\n+\n+\tstatic {\n+\t\tString oneMoreThing = \"1\";\n+\t}\n+\n+\tpublic void m1() {\n+\t\tSystem.out.println(\"a\");\n+\t\tSystem.out.println(\"a\");\n+\t}\n+\n+\tpublic void m2() {\n+\n+\t\tint a = 10;\n+\n+\t\tint b =  20;\n+\n+\t\tif (((a>0)) && (b < 10)) {\n+\t\t\t// ....\n+\t\t}\n+\n+\t\tString superLongVariableName = \"John\";\n+\t}\n+}\n\\ No newline at end of file\ndiff --git a/fixtures/wordcounts/WordCounts3.java b/fixtures/wordcounts/WordCounts3.java\nnew file mode 100644\nindex 0000000..d826ce1\n--- /dev/null\n+++ b/fixtures/wordcounts/WordCounts3.java\n@@ -0,0 +1,29 @@\n+package wordcounts;\n+\n+class WordCounts3 {\n+\t\n+\tpublic void m1() {\n+\t\tSystem.out.println(\"a\");\n+\t\tSystem.out.println(\"a\");\n+\t}\n+\n+\tpublic void m2() {\n+\n+\t\tint a = 10;\n+\n+\t\tint b =  20;\n+\n+\t\tif (((a>0)) && (b < 10)) {\n+\t\t\t// ....\n+\t\t}\n+\n+\t\tstatic class X {\n+\t\t\tpublic void xxx() {\n+\t\t\t\tint y = 10;\n+\t\t\t\tint z = 20;\n+\t\t\t}\n+\t\t}\n+\n+\t\tString superLongVariableName = \"John\";\n+\t}\n+}\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/metric/MethodLevelWordCounter.java b/src/main/java/com/github/mauricioaniche/ck/metric/MethodLevelWordCounter.java\nindex 5640815..6ad085d 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/MethodLevelWordCounter.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/MethodLevelWordCounter.java\n@@ -3,6 +3,7 @@ package com.github.mauricioaniche.ck.metric;\n import com.github.mauricioaniche.ck.CKMethodResult;\n import com.github.mauricioaniche.ck.util.WordCounter;\n import org.eclipse.jdt.core.dom.ASTVisitor;\n+import org.eclipse.jdt.core.dom.Initializer;\n import org.eclipse.jdt.core.dom.MethodDeclaration;\n \n public class MethodLevelWordCounter extends ASTVisitor implements MethodLevelMetric {\n@@ -16,6 +17,13 @@ public class MethodLevelWordCounter extends ASTVisitor implements MethodLevelMet\n \t\treturn super.visit(node);\n \t}\n \n+\tpublic boolean visit(Initializer node) {\n+\t\tString methodSourceCode = node.toString();\n+\n+\t\tthis.qtyOfUniqueWords = WordCounter.wordsIn(methodSourceCode).size();\n+\n+\t\treturn super.visit(node);\n+\t}\n \n \t@Override\n \tpublic void setResult(CKMethodResult result) {\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/util/WordCounter.java b/src/main/java/com/github/mauricioaniche/ck/util/WordCounter.java\nindex 17abf05..8705710 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/util/WordCounter.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/util/WordCounter.java\n@@ -85,10 +85,6 @@ public class WordCounter {\n \t\t\t\t.replace(\"/\", \" \")\n \t\t\t\t.replace(\"-\", \" \")\n \t\t\t\t.replace(\";\", \" \")\n-\n-\n-\n-\n \t\t\t\t.split(\" \");\n \n \t\tList<String> strings = Arrays.stream(cleanString).filter(word -> !javaKeywords.contains(word))\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/WordCountsTest.java b/src/test/java/com/github/mauricioaniche/ck/WordCountsTest.java\nindex 4890f6d..ae3c038 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/WordCountsTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/WordCountsTest.java\n@@ -1,6 +1,7 @@\n package com.github.mauricioaniche.ck;\n \n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -9,19 +10,50 @@ import java.util.Map;\n public class WordCountsTest extends BaseTest {\n \n \tprivate static Map<String, CKClassResult> report;\n+\tprivate CKClassResult w1;\n+\tprivate CKClassResult w2;\n+\tprivate CKClassResult w3;\n \n \t@BeforeClass\n \tpublic static void setUp() {\n \t\treport = run(fixturesDir() + \"/wordcounts\");\n \t}\n+\t\n+\t@Before\n+\tpublic void getClasses() {\n+\t\tthis.w1 = report.get(\"wordcounts.WordCounts\");\n+\t\tthis.w2 = report.get(\"wordcounts.WordCounts2\");\n+\t\tthis.w3 = report.get(\"wordcounts.WordCounts3\");\n+\t}\n \n \t@Test\n \tpublic void count() {\n-\t\tCKClassResult a = report.get(\"wordcounts.WordCounts\");\n+\t\tAssert.assertEquals(1, w1.getMethod(\"m1/0\").get().getUniqueWordsQty());\n+\t\tAssert.assertEquals(7, w1.getMethod(\"m2/0\").get().getUniqueWordsQty());\n+\t}\n+\n+\t// related to issue #33\n+\t@Test\n+\tpublic void countStaticInitializer() {\n+\t\tAssert.assertEquals(1, w2.getMethod(\"m1/0\").get().getUniqueWordsQty());\n+\t\tAssert.assertEquals(7, w2.getMethod(\"m2/0\").get().getUniqueWordsQty());\n+\t\tAssert.assertEquals(3, w2.getMethod(\"(initializer)\").get().getUniqueWordsQty());\n+\t}\n \n-\t\tAssert.assertEquals(10, a.getUniqueWordsQty());\n+\t@Test\n+\tpublic void countAtClassLevel() {\n+\t\tAssert.assertEquals(10, w1.getUniqueWordsQty());\n+\t\tAssert.assertEquals(13, w2.getUniqueWordsQty());\n+\t}\n \n-\t\tAssert.assertEquals(1, a.getMethod(\"m1/0\").get().getUniqueWordsQty());\n-\t\tAssert.assertEquals(7, a.getMethod(\"m2/0\").get().getUniqueWordsQty());\n+\t// This is a known issue.\n+\t// Currently, the number of unique words includes words that exist in sub-classes that are inside\n+\t// the method and the class.\n+\t// Issue #34 is open and looking for someone...\n+\t@Test\n+\tpublic void subclasses() {\n+\t\t// This +4 should disappear once the issue is implemented\n+\t\tAssert.assertEquals(10+4, w3.getUniqueWordsQty());\n+\t\tAssert.assertEquals(7+4, w3.getMethod(\"m2/0\").get().getUniqueWordsQty());\n \t}\n }\ndiff --git a/src/test/java/com/github/mauricioaniche/ck/util/WordCounterTest.java b/src/test/java/com/github/mauricioaniche/ck/util/WordCounterTest.java\nindex e6c5244..a64aa92 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/util/WordCounterTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/util/WordCounterTest.java\n@@ -50,4 +50,11 @@ public class WordCounterTest {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void mixOfCamelCase_and_underscore() {\n+\t\tSet<String> words = WordCounter.wordsIn(\"longName_likeThis\");\n+\n+\t\tAssert.assertEquals(4, words.size());\n+\t}\n+\n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T21:48:12.940665Z", "commit_hash": "cfa9f3af000b6025d4fae4d6b09da7259c218330", "commit_message": "improving the test fixture\n", "related_issues": "", "bug_patch": "diff --git a/fixtures/class-types/A.java b/fixtures/class-types/A.java\nindex 216b2ff..a68967c 100644\n--- a/fixtures/class-types/A.java\n+++ b/fixtures/class-types/A.java\n@@ -8,14 +8,26 @@ public class A {\n \t}\n \n \tpublic void m2() {\n-\t\tnew B() {{\n-\t\t\tvoid m2() {\n \n+\t\tThread t = new Thread()\n+\t\t{\n+\t\t\tpublic void run()\n+\t\t\t{\n+\t\t\t\tSystem.out.println(\"Child Thread 1\");\n \t\t\t}\n-\t\t}}\n+\t\t};\n \t}\n \n \tpublic void m3() {\n \t\tMathOperation addition = (int a, int b) -> a + b;\n+\n+\t\tMathOperation op2 = new MathOperation() {\n+\t\t\tpublic int operation(int a, int b) {\n+\t\t\t\treturn a + b;\n+\t\t\t}\n+\t\t};\n+\n+\t\tint result = op2.operation(2, 2);\n+\n \t}\n }\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/ClassTypeTest.java b/src/test/java/com/github/mauricioaniche/ck/ClassTypeTest.java\nindex a604fd8..67b56d6 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/ClassTypeTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/ClassTypeTest.java\n@@ -4,6 +4,8 @@ import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Map;\n \n public class ClassTypeTest extends BaseTest {\n@@ -18,6 +20,9 @@ public class ClassTypeTest extends BaseTest {\n \n \t@Test\n \tpublic void identifyTypesCorrectly() {\n+\n+\t\tAssert.assertEquals(5, report.size());\n+\n \t\tCKClassResult a = report.get(\"classtypes.A\");\n \t\tAssert.assertEquals(\"class\", a.getType());\n \n@@ -27,6 +32,13 @@ public class ClassTypeTest extends BaseTest {\n \t\tCKClassResult mathOperation = report.get(\"classtypes.MathOperation\");\n \t\tAssert.assertEquals(\"interface\", mathOperation.getType());\n \n+\t\tCKClassResult anon1 = report.get(\"classtypes.A$Anonymous1\");\n+\t\tAssert.assertEquals(\"anonymous\", anon1.getType());\n+\n+\t\tCKClassResult anon2 = report.get(\"classtypes.A$Anonymous2\");\n+\t\tAssert.assertEquals(\"anonymous\", anon2.getType());\n+\n+\n \t}\n \n \n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T21:53:11.278706Z", "commit_hash": "59db6d45a962129bc5498e64a3611b9b1807bb27", "commit_message": "fix: consider lambda as part of the place they are embedded to\n", "related_issues": "", "bug_patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 2e82581..b58a19f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,5 +1,12 @@\n # CK changelog\n \n+## 0.4.3 (under development)\n+\n+* FIX: Lambda expressions declared in field initialization used to crash\n+CK. In this version, lambda expressions are considered part of the class\n+and the method it is embedded; in other words, lambda expressions, differently\n+from anonymous classes, are not considered \"classes\".\n+\n ## 0.4.2\n \n * FEATURE: The 'number of comparisons' operator now also counts !=.\ndiff --git a/README.md b/README.md\nindex 3b80824..3e70f01 100644\n--- a/README.md\n+++ b/README.md\n@@ -65,6 +65,10 @@ available in 0.4.2+.\n - *Max nested blocks*: The highest number of blocks nested together.\n \n - *Quantity of Anonymous classes, subclasses, and lambda expressions*. The name says it all.\n+Note that whenever an anonymous class or a subclass is declared, it becomes an\n+\"entire new class\", e.g., CK generates A.B and A.B$C, C being a subclass inside A.B.\n+However, lambda expressions are not considered classes, and thus, are part of the\n+class/method they are embedded into.\n \n - *Number of unique words*. Number of unique words in the source code. See `WordCounter` class for details on the\n implementation.  \ndiff --git a/fixtures/real-world/AbstractSimpleHandler.java b/fixtures/real-world/AbstractSimpleHandler.java\nnew file mode 100644\nindex 0000000..d5a7202\n--- /dev/null\n+++ b/fixtures/real-world/AbstractSimpleHandler.java\n@@ -0,0 +1,69 @@\n+package com.firefly.net.tcp;\n+\n+import com.firefly.net.Decoder;\n+import com.firefly.net.Handler;\n+import com.firefly.net.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * @author Pengtao Qiu\n+ */\n+abstract public class AbstractSimpleHandler implements Handler {\n+\n+\tprotected static final Logger log = LoggerFactory.getLogger(\"firefly-system\");\n+\n+\tstatic final Decoder decoder = (ByteBuffer buf, Session session) -> {\n+\t\tObject o = session.getAttachment();\n+\t\tif (o != null) {\n+\t\t\tTcpConnectionImpl c = (TcpConnectionImpl) o;\n+\t\t\tif (c.buffer != null) {\n+\t\t\t\tc.buffer.call(buf);\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tstatic final Decoder sslDecoder = (ByteBuffer buf, Session session) -> {\n+\t\tObject o = session.getAttachment();\n+\t\tif (o != null && o instanceof SecureTcpConnectionImpl) {\n+\t\t\tSecureTcpConnectionImpl c = (SecureTcpConnectionImpl) o;\n+\t\t\tByteBuffer plaintext = c.secureSession.read(buf);\n+\t\t\tif (plaintext != null && c.secureSession.isHandshakeFinished()) {\n+\t\t\t\tif (c.buffer != null) {\n+\t\t\t\t\tc.buffer.call(plaintext);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\n+\t@Override\n+\tpublic void sessionClosed(Session session) throws Throwable {\n+\t\tObject o = session.getAttachment();\n+\t\tif (o != null && o instanceof AbstractTcpConnection) {\n+\t\t\tAbstractTcpConnection c = (AbstractTcpConnection) o;\n+\t\t\tc.notifyClose();\n+\t\t}\n+\t\tif (o != null && o instanceof SecureTcpConnectionImpl) {\n+\t\t\tSecureTcpConnectionImpl c = (SecureTcpConnectionImpl) o;\n+\t\t\tc.secureSession.close();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void messageReceived(Session session, Object message) {\n+\t}\n+\n+\t@Override\n+\tpublic void exceptionCaught(Session session, Throwable t) throws Throwable {\n+\t\tlog.error(\"tcp handler exception\", t);\n+\t\tObject o = session.getAttachment();\n+\t\tif (o != null && o instanceof AbstractTcpConnection) {\n+\t\t\tAbstractTcpConnection c = (AbstractTcpConnection) o;\n+\t\t\tc.notifyException(t);\n+\t\t}\n+\t}\n+\n+}\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java b/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java\nindex fb34f5a..f739e16 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/CKVisitor.java\n@@ -1188,13 +1188,15 @@ public class CKVisitor extends ASTVisitor {\n \t@Override\n \tpublic void endVisit(Block node) {\n \t\tclasses.peek().classLevelMetrics.stream().map(metric -> (ASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n-\t\tclasses.peek().methods.peek().methodLevelMetrics.stream().map(metric -> (ASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n+\t\tif(!classes.peek().methods.isEmpty())\n+\t\t\tclasses.peek().methods.peek().methodLevelMetrics.stream().map(metric -> (ASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n \t}\n \n \t@Override\n \tpublic void endVisit(FieldAccess node) {\n \t\tclasses.peek().classLevelMetrics.stream().map(metric -> (ASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n-\t\tclasses.peek().methods.peek().methodLevelMetrics.stream().map(metric -> (ASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n+\t\tif(!classes.peek().methods.isEmpty())\n+\t\t\tclasses.peek().methods.peek().methodLevelMetrics.stream().map(metric -> (ASTVisitor) metric).forEach(ast -> ast.endVisit(node));\n \t}\n \n \t// TODO: add all other endVisit blocks\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/RealWorldClassesTest.java b/src/test/java/com/github/mauricioaniche/ck/RealWorldClassesTest.java\nindex 152f520..3c25d5c 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/RealWorldClassesTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/RealWorldClassesTest.java\n@@ -75,4 +75,14 @@ public class RealWorldClassesTest extends BaseTest {\n \t\tAssert.assertNotNull(c);\n \t}\n \n+\t// this was crashing because of a lambda expression in a field.\n+\t// fix: consider the lambda as part of the class and/OR method it is embedded.\n+\t@Test\n+\tpublic void abstractSimpleHandler() {\n+\t\tCKClassResult a = report.get(\"com.firefly.net.tcp.AbstractSimpleHandler\");\n+\t\tAssert.assertNotNull(a);\n+\t\tAssert.assertEquals(3, a.getNumberOfMethods());\n+\t\tAssert.assertEquals(3, a.getNumberOfFields());\n+\t}\n+\n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T22:01:46.222686Z", "commit_hash": "a8b9f944427af0bf00328494bc02fee870eb92d9", "commit_message": "Merge pull request #25 from mauricioaniche/fix-24\n\nFix the number of default fields count", "related_issues": "", "bug_patch": "diff --git a/fixtures/fields/Fields.java b/fixtures/fields/Fields.java\nindex 8cff6db..86878fe 100644\n--- a/fixtures/fields/Fields.java\n+++ b/fixtures/fields/Fields.java\n@@ -7,5 +7,10 @@ public class Fields {\n \tpublic double c;\n \tprivate static String d;\n \tpublic static int e;\n+\n+\tint f;\n+\tstatic int k;\n+\n+\tprivate synchronized int j;\n \t\n }\n\\ No newline at end of file\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\nindex 6e0d6ef..7cf1049 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\n@@ -21,25 +21,32 @@ public class NumberOfFields extends ASTVisitor implements ClassLevelMetric {\n \tpublic boolean visit(FieldDeclaration node) {\n \t\tfields++;\n \n-\t\tif(Modifier.isStatic(node.getModifiers()))\n-\t\t\tstaticFields++;\n \n-\t\tif(Modifier.isPublic(node.getModifiers()))\n-\t\t\tpublicFields++;\n+\t\tboolean isPublic = Modifier.isPublic(node.getModifiers());\n+\t\tboolean isPrivate = Modifier.isPrivate(node.getModifiers());\n+\t\tboolean isProtected = Modifier.isProtected(node.getModifiers());\n \n-\t\tif(Modifier.isPrivate(node.getModifiers()))\n+\t\tif(isPublic)\n+\t\t\tpublicFields++;\n+\t\telse if(isPrivate)\n \t\t\tprivateFields++;\n-\n-\t\tif(Modifier.isProtected(node.getModifiers()))\n+\t\telse if(isProtected)\n \t\t\tprotectedFields++;\n-\n-\t\tif(Modifier.isDefault(node.getModifiers()))\n+\t\telse\n \t\t\tdefaultFields++;\n \n-\t\tif(Modifier.isFinal(node.getModifiers()))\n+\t\t// other characteristics rather than visibility\n+\t\tboolean isStatic = Modifier.isStatic(node.getModifiers());\n+\t\tboolean isFinal = Modifier.isFinal(node.getModifiers());\n+\t\tboolean isSynchronized = Modifier.isSynchronized(node.getModifiers());\n+\t\t\n+\t\tif(isStatic)\n+\t\t\tstaticFields++;\n+\n+\t\tif(isFinal)\n \t\t\tfinalFields++;\n \n-\t\tif(Modifier.isSynchronized(node.getModifiers()))\n+\t\tif(isSynchronized)\n \t\t\tsynchronizedFields++;\n \n \t\treturn false;\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java b/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java\nindex a22beb0..f3c62df 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java\n@@ -21,7 +21,7 @@ public class FieldsTest extends BaseTest {\n \t@Test\n \tpublic void all() {\n \t\tCKClassResult a = report.get(\"fields.Fields\");\n-\t\tAssert.assertEquals(5, a.getNumberOfFields());\n+\t\tAssert.assertEquals(8, a.getNumberOfFields());\n \t}\n \n \t@Test\n@@ -33,6 +33,26 @@ public class FieldsTest extends BaseTest {\n \t@Test\n \tpublic void allStatic() {\n \t\tCKClassResult a = report.get(\"fields.Fields\");\n-\t\tAssert.assertEquals(2, a.getNumberOfStaticFields());\n+\t\tAssert.assertEquals(3, a.getNumberOfStaticFields());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void allPrivate() {\n+\t\tCKClassResult a = report.get(\"fields.Fields\");\n+\t\tAssert.assertEquals(4, a.getNumberOfPrivateFields());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void allDefault() {\n+\t\tCKClassResult a = report.get(\"fields.Fields\");\n+\t\tAssert.assertEquals(2, a.getNumberOfDefaultFields());\n+\t}\n+\n+\t@Test\n+\tpublic void allSynchronized() {\n+\t\tCKClassResult a = report.get(\"fields.Fields\");\n+\t\tAssert.assertEquals(1, a.getNumberOfSynchronizedFields());\n \t}\n }\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T22:07:03.178447Z", "commit_hash": "bf3f3d6cf23812329cd11d85bd5f3588e0171e80", "commit_message": "more tests and now fixing it in a better way\n", "related_issues": "", "bug_patch": "diff --git a/fixtures/fields/Fields.java b/fixtures/fields/Fields.java\nindex 76ca2fe..86878fe 100644\n--- a/fixtures/fields/Fields.java\n+++ b/fixtures/fields/Fields.java\n@@ -9,6 +9,7 @@ public class Fields {\n \tpublic static int e;\n \n \tint f;\n+\tstatic int k;\n \n \tprivate synchronized int j;\n \t\ndiff --git a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\nindex 9e79628..7cf1049 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/NumberOfFields.java\n@@ -21,25 +21,32 @@ public class NumberOfFields extends ASTVisitor implements ClassLevelMetric {\n \tpublic boolean visit(FieldDeclaration node) {\n \t\tfields++;\n \n-\t\tif(Modifier.isStatic(node.getModifiers()))\n-\t\t\tstaticFields++;\n \n-\t\tif(Modifier.isPublic(node.getModifiers()))\n-\t\t\tpublicFields++;\n+\t\tboolean isPublic = Modifier.isPublic(node.getModifiers());\n+\t\tboolean isPrivate = Modifier.isPrivate(node.getModifiers());\n+\t\tboolean isProtected = Modifier.isProtected(node.getModifiers());\n \n-\t\tif(Modifier.isPrivate(node.getModifiers()))\n+\t\tif(isPublic)\n+\t\t\tpublicFields++;\n+\t\telse if(isPrivate)\n \t\t\tprivateFields++;\n-\n-\t\tif(Modifier.isProtected(node.getModifiers()))\n+\t\telse if(isProtected)\n \t\t\tprotectedFields++;\n-\n-\t\tif(node.getModifiers() == 0)\n+\t\telse\n \t\t\tdefaultFields++;\n \n-\t\tif(Modifier.isFinal(node.getModifiers()))\n+\t\t// other characteristics rather than visibility\n+\t\tboolean isStatic = Modifier.isStatic(node.getModifiers());\n+\t\tboolean isFinal = Modifier.isFinal(node.getModifiers());\n+\t\tboolean isSynchronized = Modifier.isSynchronized(node.getModifiers());\n+\t\t\n+\t\tif(isStatic)\n+\t\t\tstaticFields++;\n+\n+\t\tif(isFinal)\n \t\t\tfinalFields++;\n \n-\t\tif(Modifier.isSynchronized(node.getModifiers()))\n+\t\tif(isSynchronized)\n \t\t\tsynchronizedFields++;\n \n \t\treturn false;\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java b/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java\nindex c522da0..f3c62df 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/metric/FieldsTest.java\n@@ -21,7 +21,7 @@ public class FieldsTest extends BaseTest {\n \t@Test\n \tpublic void all() {\n \t\tCKClassResult a = report.get(\"fields.Fields\");\n-\t\tAssert.assertEquals(7, a.getNumberOfFields());\n+\t\tAssert.assertEquals(8, a.getNumberOfFields());\n \t}\n \n \t@Test\n@@ -33,7 +33,7 @@ public class FieldsTest extends BaseTest {\n \t@Test\n \tpublic void allStatic() {\n \t\tCKClassResult a = report.get(\"fields.Fields\");\n-\t\tAssert.assertEquals(2, a.getNumberOfStaticFields());\n+\t\tAssert.assertEquals(3, a.getNumberOfStaticFields());\n \t}\n \n \n@@ -47,7 +47,7 @@ public class FieldsTest extends BaseTest {\n \t@Test\n \tpublic void allDefault() {\n \t\tCKClassResult a = report.get(\"fields.Fields\");\n-\t\tAssert.assertEquals(1, a.getNumberOfDefaultFields());\n+\t\tAssert.assertEquals(2, a.getNumberOfDefaultFields());\n \t}\n \n \t@Test\n"}
{"repository": "mauricioaniche/ck", "clone_url": "https://github.com/mauricioaniche/ck.git", "timestamp": "2023-05-31T22:21:41.583173Z", "commit_hash": "b0b85e448761c4aa514b1f147c0749b06a33fb76", "commit_message": "Merge pull request #8 from klerisson/master\n\nFix WMC increase(int)", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/github/mauricioaniche/ck/metric/WMC.java b/src/main/java/com/github/mauricioaniche/ck/metric/WMC.java\nindex 54515b9..e90cbe2 100644\n--- a/src/main/java/com/github/mauricioaniche/ck/metric/WMC.java\n+++ b/src/main/java/com/github/mauricioaniche/ck/metric/WMC.java\n@@ -95,7 +95,7 @@ public class WMC extends ASTVisitor implements Metric {\n     }\n \n     protected void increaseCc(int qtd) {\n-    \tcc++;\n+    \tcc += qtd;\n     }\n \n \t@Override\n", "test_patch": "diff --git a/src/test/java/com/github/mauricioaniche/ck/metric/WMCTest.java b/src/test/java/com/github/mauricioaniche/ck/metric/WMCTest.java\nindex 9a9cf7a..8fc2f5d 100644\n--- a/src/test/java/com/github/mauricioaniche/ck/metric/WMCTest.java\n+++ b/src/test/java/com/github/mauricioaniche/ck/metric/WMCTest.java\n@@ -21,7 +21,7 @@ public class WMCTest extends BaseTest {\n \tpublic void countAllBranchInstructions() {\n \t\t\n \t\tCKNumber a = report.getByClassName(\"wmc.CC1\");\n-\t\tAssert.assertEquals(5, a.getWmc());\n+\t\tAssert.assertEquals(4, a.getWmc());\n \t\tCKNumber b = report.getByClassName(\"wmc.CC2\");\n \t\tAssert.assertEquals(5, b.getWmc());\n \t}\n"}
