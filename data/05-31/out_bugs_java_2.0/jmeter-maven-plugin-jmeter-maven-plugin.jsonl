{"repository": "jmeter-maven-plugin/jmeter-maven-plugin", "clone_url": "https://github.com/jmeter-maven-plugin/jmeter-maven-plugin.git", "timestamp": "2023-05-31T19:38:48.081853Z", "commit_hash": "f527f8b3f5fbc0f9e708cb3f6ea2429efb88d3d5", "commit_message": "Merge pull request #429 from Serhiiilnytskyi/ISSUE-428\n\nFixed calculation of successes/failures for multiple report files ISSUE 428", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java b/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java\nindex ae239f1..bab8206 100644\n--- a/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java\n+++ b/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java\n@@ -51,18 +51,18 @@ public class ResultScanner implements IResultScanner {\n         LOGGER.info(\"Parsing results file '{}' as type: {}\", file, this.csv ? \"CSV\" : \"XML\");\n         if (csv) {\n             CSVScanResult csvScanResult = CSVFileScanner.scanCsvForValues(file, failureMessages);\n-            successCount = csvScanResult.getSuccessCount();\n-            failureCount = csvScanResult.getFailureCount();\n+            successCount += csvScanResult.getSuccessCount();\n+            failureCount += csvScanResult.getFailureCount();\n             for (Map.Entry<String, Integer> entry : csvScanResult.getSpecificFailureMessages().entrySet()) {\n                 customFailureCount = customFailureCount + entry.getValue();\n                 LOGGER.info(\"Number of potential custom failures using '{}' in '{}': {}\", entry.getKey(), file.getName(), customFailureCount);\n             }\n         } else {\n             if (countSuccesses) {\n-                successCount = scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_SUCCESS_PATTERN, Pattern.CASE_INSENSITIVE));\n+                successCount += scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_SUCCESS_PATTERN, Pattern.CASE_INSENSITIVE));\n             }\n             if (countFailures) {\n-                failureCount = scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_FAILURE_PATTERN, Pattern.CASE_INSENSITIVE));\n+                failureCount += scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_FAILURE_PATTERN, Pattern.CASE_INSENSITIVE));\n             }\n         }\n     }\n", "test_patch": "diff --git a/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java b/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java\nindex c6366c0..af55346 100644\n--- a/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java\n+++ b/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java\n@@ -40,6 +40,18 @@ public class ResultScannerTest {\n     }\n \n     @Test\n+    public void jtlMultipleFileWithFailuresCountSuccessAndFailures() throws Exception {\n+        File resultsFile = new File(jtlFailingResultsFileURL.toURI());\n+        ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, COUNT_FAILURES, DEFAULT_IS_CSV, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n+        fileScanner.parseResultFile(resultsFile);\n+        fileScanner.parseResultFile(resultsFile);\n+\n+        assertThat(fileScanner.getFailureCount()).isEqualTo(4);\n+        assertThat(fileScanner.getSuccessCount()).isEqualTo(4);\n+        assertThat(fileScanner.getTotalCount()).isEqualTo(8);\n+    }\n+\n+    @Test\n     public void jtlFileWithFailuresCountSuccessesOnly() throws Exception {\n         File resultsFile = new File(jtlFailingResultsFileURL.toURI());\n         ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, DO_NOT_COUNT_FAILURES, DEFAULT_IS_CSV, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n@@ -106,6 +118,18 @@ public class ResultScannerTest {\n     }\n \n     @Test\n+    public void csvMultipleFilesWithFailuresCountSuccessAndFailures() throws Exception {\n+        File resultsFile = new File(csvFailingResultsFileURL.toURI());\n+        ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, COUNT_FAILURES, true, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n+        fileScanner.parseResultFile(resultsFile);\n+        fileScanner.parseResultFile(resultsFile);\n+\n+        assertThat(fileScanner.getFailureCount()).isEqualTo(4);\n+        assertThat(fileScanner.getSuccessCount()).isEqualTo(0);\n+        assertThat(fileScanner.getTotalCount()).isEqualTo(4);\n+    }\n+\n+    @Test\n     public void csvFileWithNoFailuresCountSuccessAndFailures() throws Exception {\n         File resultsFile = new File(csvPassingResultsFileURL.toURI());\n         ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, COUNT_FAILURES, true, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n"}
{"repository": "jmeter-maven-plugin/jmeter-maven-plugin", "clone_url": "https://github.com/jmeter-maven-plugin/jmeter-maven-plugin.git", "timestamp": "2023-05-31T19:51:50.351014Z", "commit_hash": "bf000ccf36bae2f632795f5c1461b3afc5fbe407", "commit_message": "Fixed calculation of successes/failures for multiple report files ISSUE 428\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java b/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java\nindex ae239f1..bab8206 100644\n--- a/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java\n+++ b/src/main/java/com/lazerycode/jmeter/results/ResultScanner.java\n@@ -51,18 +51,18 @@ public class ResultScanner implements IResultScanner {\n         LOGGER.info(\"Parsing results file '{}' as type: {}\", file, this.csv ? \"CSV\" : \"XML\");\n         if (csv) {\n             CSVScanResult csvScanResult = CSVFileScanner.scanCsvForValues(file, failureMessages);\n-            successCount = csvScanResult.getSuccessCount();\n-            failureCount = csvScanResult.getFailureCount();\n+            successCount += csvScanResult.getSuccessCount();\n+            failureCount += csvScanResult.getFailureCount();\n             for (Map.Entry<String, Integer> entry : csvScanResult.getSpecificFailureMessages().entrySet()) {\n                 customFailureCount = customFailureCount + entry.getValue();\n                 LOGGER.info(\"Number of potential custom failures using '{}' in '{}': {}\", entry.getKey(), file.getName(), customFailureCount);\n             }\n         } else {\n             if (countSuccesses) {\n-                successCount = scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_SUCCESS_PATTERN, Pattern.CASE_INSENSITIVE));\n+                successCount += scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_SUCCESS_PATTERN, Pattern.CASE_INSENSITIVE));\n             }\n             if (countFailures) {\n-                failureCount = scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_FAILURE_PATTERN, Pattern.CASE_INSENSITIVE));\n+                failureCount += scanXmlFileForPattern(file, Pattern.compile(XML_REQUEST_FAILURE_PATTERN, Pattern.CASE_INSENSITIVE));\n             }\n         }\n     }\n", "test_patch": "diff --git a/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java b/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java\nindex c6366c0..af55346 100644\n--- a/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java\n+++ b/src/test/java/com/lazerycode/jmeter/testrunner/ResultScannerTest.java\n@@ -40,6 +40,18 @@ public class ResultScannerTest {\n     }\n \n     @Test\n+    public void jtlMultipleFileWithFailuresCountSuccessAndFailures() throws Exception {\n+        File resultsFile = new File(jtlFailingResultsFileURL.toURI());\n+        ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, COUNT_FAILURES, DEFAULT_IS_CSV, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n+        fileScanner.parseResultFile(resultsFile);\n+        fileScanner.parseResultFile(resultsFile);\n+\n+        assertThat(fileScanner.getFailureCount()).isEqualTo(4);\n+        assertThat(fileScanner.getSuccessCount()).isEqualTo(4);\n+        assertThat(fileScanner.getTotalCount()).isEqualTo(8);\n+    }\n+\n+    @Test\n     public void jtlFileWithFailuresCountSuccessesOnly() throws Exception {\n         File resultsFile = new File(jtlFailingResultsFileURL.toURI());\n         ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, DO_NOT_COUNT_FAILURES, DEFAULT_IS_CSV, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n@@ -106,6 +118,18 @@ public class ResultScannerTest {\n     }\n \n     @Test\n+    public void csvMultipleFilesWithFailuresCountSuccessAndFailures() throws Exception {\n+        File resultsFile = new File(csvFailingResultsFileURL.toURI());\n+        ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, COUNT_FAILURES, true, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n+        fileScanner.parseResultFile(resultsFile);\n+        fileScanner.parseResultFile(resultsFile);\n+\n+        assertThat(fileScanner.getFailureCount()).isEqualTo(4);\n+        assertThat(fileScanner.getSuccessCount()).isEqualTo(0);\n+        assertThat(fileScanner.getTotalCount()).isEqualTo(4);\n+    }\n+\n+    @Test\n     public void csvFileWithNoFailuresCountSuccessAndFailures() throws Exception {\n         File resultsFile = new File(csvPassingResultsFileURL.toURI());\n         ResultScanner fileScanner = new ResultScanner(COUNT_SUCCESSES, COUNT_FAILURES, true, DEFAULT_ONLY_FAIL_WHEN_MATCHING_FAILURE_MESSAGES, DEFAULT_FAILURE_LIST);\n"}
