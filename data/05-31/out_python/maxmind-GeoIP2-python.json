{
    "repository": "maxmind/GeoIP2-python",
    "clone_url": "https://github.com/maxmind/GeoIP2-python.git",
    "timestamp": "2023-05-29T14:46:28.529215Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Python tests/Python 3.7 on ubuntu-latest] \ud83d\ude80  Start image=crawlergpt:latest\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/maxmind-GeoIP2-python] user=0 workdir=\n[Python tests/Python 3.7 on ubuntu-latest]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[Python tests/Python 3.7 on ubuntu-latest] \ud83e\uddea  Matrix: map[platform:ubuntu-latest python-version:3.7]\n[Python tests/Python 3.7 on ubuntu-latest] \u2b50 Run Main Checkout\n[Python tests/Python 3.7 on ubuntu-latest]   \u2705  Success - Main Checkout\n[Python tests/Python 3.7 on ubuntu-latest] \u2b50 Run Main Set up Python 3.7\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[Python tests/Python 3.7 on ubuntu-latest]   \u2753  ::group::Installed versions\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: \n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? false\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::explicit? true\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::evaluating 6 versions\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::matched: 3.7.11\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[Python tests/Python 3.7 on ubuntu-latest]   | Successfully set up CPython (3.7.11)\n[Python tests/Python 3.7 on ubuntu-latest]   \u2753  ::endgroup::\n[Python tests/Python 3.7 on ubuntu-latest]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[Python tests/Python 3.7 on ubuntu-latest]   \u2705  Success - Main Set up Python 3.7\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-output:: python-version=3.7.11\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[Python tests/Python 3.7 on ubuntu-latest]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[Python tests/Python 3.7 on ubuntu-latest] \u2b50 Run Main Install dependencies\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Python tests/Python 3.7 on ubuntu-latest]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting pip\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Installing collected packages: pip\n[Python tests/Python 3.7 on ubuntu-latest]   |   Attempting uninstall: pip\n[Python tests/Python 3.7 on ubuntu-latest]   |     Found existing installation: pip 21.2.4\n[Python tests/Python 3.7 on ubuntu-latest]   |     Uninstalling pip-21.2.4:\n[Python tests/Python 3.7 on ubuntu-latest]   |       Successfully uninstalled pip-21.2.4\n[Python tests/Python 3.7 on ubuntu-latest]   | Successfully installed pip-23.1.2\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting tox\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading tox-4.5.2-py3-none-any.whl (148 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 149.0/149.0 kB 2.2 MB/s eta 0:00:00\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting tox-gh-actions\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading tox_gh_actions-3.1.1-py2.py3-none-any.whl (9.8 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting cachetools>=5.3 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading cachetools-5.3.1-py3-none-any.whl (9.3 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting chardet>=5.1 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading chardet-5.1.0-py3-none-any.whl (199 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 199.1/199.1 kB 13.2 MB/s eta 0:00:00\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting colorama>=0.4.6 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting filelock>=3.12 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading filelock-3.12.0-py3-none-any.whl (10 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting importlib-metadata>=6.6 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading importlib_metadata-6.6.0-py3-none-any.whl (22 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting packaging>=23.1 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.5 MB/s eta 0:00:00\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting platformdirs>=3.5.1 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading platformdirs-3.5.1-py3-none-any.whl (15 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting pluggy>=1 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting pyproject-api>=1.5.1 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading pyproject_api-1.5.1-py3-none-any.whl (12 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting tomli>=2.0.1 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting typing-extensions>=4.6.2 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading typing_extensions-4.6.2-py3-none-any.whl (31 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting virtualenv>=20.23 (from tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[Python tests/Python 3.7 on ubuntu-latest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 49.8 MB/s eta 0:00:00\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting zipp>=0.5 (from importlib-metadata>=6.6->tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=20.23->tox)\n[Python tests/Python 3.7 on ubuntu-latest]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[Python tests/Python 3.7 on ubuntu-latest]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 45.7 MB/s eta 0:00:00\n[Python tests/Python 3.7 on ubuntu-latest]   | Installing collected packages: distlib, zipp, typing-extensions, tomli, packaging, filelock, colorama, chardet, cachetools, pyproject-api, platformdirs, importlib-metadata, virtualenv, pluggy, tox, tox-gh-actions\n[Python tests/Python 3.7 on ubuntu-latest]   | Successfully installed cachetools-5.3.1 chardet-5.1.0 colorama-0.4.6 distlib-0.3.6 filelock-3.12.0 importlib-metadata-6.6.0 packaging-23.1 platformdirs-3.5.1 pluggy-1.0.0 pyproject-api-1.5.1 tomli-2.0.1 tox-4.5.2 tox-gh-actions-3.1.1 typing-extensions-4.6.2 virtualenv-20.23.0 zipp-3.15.0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[Python tests/Python 3.7 on ubuntu-latest]   | [notice] To update, run: pip install --upgrade pip\n[Python tests/Python 3.7 on ubuntu-latest]   \u2705  Success - Main Install dependencies\n[Python tests/Python 3.7 on ubuntu-latest] \u2b50 Run Main Test with tox\n[Python tests/Python 3.7 on ubuntu-latest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Python tests/Python 3.7 on ubuntu-latest]   | ROOT: tox-gh-actions couldn't understand the parallel option. ignoring the given option: 0\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: install_deps> python -I -m pip install charset-normalizer==2.1.1 mocket pytest\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: install_requires> python -I -m pip install 'setuptools>=40.8.0' wheel\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: _optional_hooks> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: get_requires_for_build_sdist> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: freeze> python -m pip freeze --all\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: pip==23.1.2,setuptools==67.7.2,wheel==0.40.0\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: prepare_metadata_for_build_wheel> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: build_sdist> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: install_package_deps> python -I -m pip install 'aiohttp<4.0.0,>=3.6.2' 'maxminddb<3.0.0,>=2.3.0' 'requests<3.0.0,>=2.24.0'\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: install_package> python -I -m pip install --force-reinstall --no-deps /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/maxmind-GeoIP2-python/.tox/.tmp/package/1/geoip2-4.7.0.tar.gz\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: freeze> python -m pip freeze --all\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: aiohttp==3.8.4,aiosignal==1.3.1,async-timeout==4.0.2,asynctest==0.13.0,attrs==23.1.0,certifi==2023.5.7,charset-normalizer==2.1.1,decorator==5.1.1,exceptiongroup==1.1.1,frozenlist==1.3.3,geoip2 @ file:///tmp/de65f406-fe28-11ed-a890-af2cc187fc11/maxmind-GeoIP2-python/.tox/.tmp/package/1/geoip2-4.7.0.tar.gz#sha256=9af3479398052ec9ac9ec34188f6137c763e8b9cbc48dd5c20b6ee2ed60b8cb3,httptools==0.5.0,idna==3.4,importlib-metadata==6.6.0,iniconfig==2.0.0,maxminddb==2.3.0,mocket==3.11.1,multidict==6.0.4,packaging==23.1,pip==23.1.2,pluggy==1.0.0,pytest==7.3.1,python-magic==0.4.27,requests==2.31.0,setuptools==67.7.2,tomli==2.0.1,typing_extensions==4.6.2,urllib3==2.0.2,wheel==0.40.0,yarl==1.9.2,zipp==3.15.0\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: tox-gh-actions couldn't understand the parallel option. ignoring the given option: 0\n[Python tests/Python 3.7 on ubuntu-latest]   \u2753  ::group::tox: py37-test\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: commands[0]> pytest tests\n[Python tests/Python 3.7 on ubuntu-latest]   | ============================= test session starts ==============================\n[Python tests/Python 3.7 on ubuntu-latest]   | platform linux -- Python 3.7.11, pytest-7.3.1, pluggy-1.0.0\n[Python tests/Python 3.7 on ubuntu-latest]   | cachedir: .tox/py37-test/.pytest_cache\n[Python tests/Python 3.7 on ubuntu-latest]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/maxmind-GeoIP2-python\n[Python tests/Python 3.7 on ubuntu-latest]   | collected 151 items\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 32%]\n[Python tests/Python 3.7 on ubuntu-latest]   | FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                                [ 59%]\n[Python tests/Python 3.7 on ubuntu-latest]   | tests/models_test.py .........                                           [ 65%]\n[Python tests/Python 3.7 on ubuntu-latest]   | tests/webservice_test.py ............................................... [ 96%]\n[Python tests/Python 3.7 on ubuntu-latest]   | .....                                                                    [100%]\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | =================================== FAILURES ===================================\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ BaseTestReader.test_anonymous_ip _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_anonymous_ip>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:73: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ BaseTestReader.test_anonymous_ip_all_set ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_anonymous_ip_all_set>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip_all_set(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:90: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ BaseTestReader.test_asn ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_asn>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_asn(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoLite2-ASN-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:106: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoLite2-ASN-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoLite2-ASN-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ BaseTestReader.test_city ___________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_city>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_city(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:127: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ BaseTestReader.test_connection_type ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_connection_type>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_connection_type(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:143: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ BaseTestReader.test_context_manager ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_context_manager>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_context_manager(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Country-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:248: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ BaseTestReader.test_country __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_country>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_country(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Country-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:166: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ BaseTestReader.test_domain __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_domain>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_domain(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Domain-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:177: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Domain-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Domain-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________________ BaseTestReader.test_enterprise ________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_enterprise>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_enterprise(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Enterprise-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:198: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ BaseTestReader.test_invalid_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_invalid_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_invalid_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:64: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ BaseTestReader.test_isp ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_isp>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_isp(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-ISP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:222: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-ISP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-ISP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ BaseTestReader.test_language_list _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_language_list>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_language_list(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   |             \"tests/data/test-data/GeoIP2-Country-Test.mmdb\",\n[Python tests/Python 3.7 on ubuntu-latest]   | >           [\"xx\", \"ru\", \"pt-BR\", \"es\", \"en\"],\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:26: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ BaseTestReader.test_unknown_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_unknown_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:34: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________ BaseTestReader.test_unknown_address_network __________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_unknown_address_network>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address_network(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:43: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ BaseTestReader.test_wrong_database ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.BaseTestReader testMethod=test_wrong_database>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_wrong_database(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:55: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ____________________ TestExtensionReader.test_anonymous_ip _____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_anonymous_ip>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:73: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________ TestExtensionReader.test_anonymous_ip_all_set _________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_anonymous_ip_all_set>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip_all_set(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:90: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ TestExtensionReader.test_asn _________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_asn>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_asn(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoLite2-ASN-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:106: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoLite2-ASN-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoLite2-ASN-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________________ TestExtensionReader.test_city _________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_city>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_city(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:127: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestExtensionReader.test_connection_type ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_connection_type>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_connection_type(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:143: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestExtensionReader.test_context_manager ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_context_manager>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_context_manager(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Country-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:248: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ TestExtensionReader.test_country _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_country>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_country(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Country-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:166: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ TestExtensionReader.test_domain ________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_domain>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_domain(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Domain-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:177: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Domain-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Domain-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestExtensionReader.test_enterprise ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_enterprise>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_enterprise(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Enterprise-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:198: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestExtensionReader.test_invalid_address ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_invalid_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_invalid_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:64: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ TestExtensionReader.test_isp _________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_isp>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_isp(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-ISP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:222: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-ISP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-ISP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ____________________ TestExtensionReader.test_language_list ____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_language_list>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_language_list(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   |             \"tests/data/test-data/GeoIP2-Country-Test.mmdb\",\n[Python tests/Python 3.7 on ubuntu-latest]   | >           [\"xx\", \"ru\", \"pt-BR\", \"es\", \"en\"],\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:26: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestExtensionReader.test_unknown_address ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_unknown_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:34: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________ TestExtensionReader.test_unknown_address_network _______________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_unknown_address_network>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address_network(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:43: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestExtensionReader.test_wrong_database ____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestExtensionReader testMethod=test_wrong_database>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_wrong_database(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:55: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ TestMMAPReader.test_anonymous_ip _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_anonymous_ip>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:73: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestMMAPReader.test_anonymous_ip_all_set ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_anonymous_ip_all_set>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip_all_set(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:90: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestMMAPReader.test_asn ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_asn>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_asn(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoLite2-ASN-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:106: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoLite2-ASN-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoLite2-ASN-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestMMAPReader.test_city ___________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_city>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_city(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:127: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestMMAPReader.test_connection_type ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_connection_type>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_connection_type(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:143: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestMMAPReader.test_context_manager ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_context_manager>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_context_manager(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Country-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:248: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ TestMMAPReader.test_country __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_country>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_country(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Country-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:166: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ TestMMAPReader.test_domain __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_domain>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_domain(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Domain-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:177: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Domain-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Domain-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________________ TestMMAPReader.test_enterprise ________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_enterprise>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_enterprise(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Enterprise-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:198: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestMMAPReader.test_invalid_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_invalid_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_invalid_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:64: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestMMAPReader.test_isp ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_isp>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_isp(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-ISP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:222: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-ISP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-ISP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestMMAPReader.test_language_list _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_language_list>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_language_list(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   |             \"tests/data/test-data/GeoIP2-Country-Test.mmdb\",\n[Python tests/Python 3.7 on ubuntu-latest]   | >           [\"xx\", \"ru\", \"pt-BR\", \"es\", \"en\"],\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:26: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestMMAPReader.test_unknown_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_unknown_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:34: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________ TestMMAPReader.test_unknown_address_network __________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_unknown_address_network>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address_network(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:43: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestMMAPReader.test_wrong_database ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMMAPReader testMethod=test_wrong_database>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_wrong_database(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:55: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ TestFileReader.test_anonymous_ip _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_anonymous_ip>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:73: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestFileReader.test_anonymous_ip_all_set ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_anonymous_ip_all_set>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip_all_set(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:90: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestFileReader.test_asn ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_asn>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_asn(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoLite2-ASN-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:106: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoLite2-ASN-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoLite2-ASN-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestFileReader.test_city ___________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_city>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_city(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:127: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestFileReader.test_connection_type ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_connection_type>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_connection_type(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:143: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestFileReader.test_context_manager ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_context_manager>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_context_manager(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Country-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:248: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ TestFileReader.test_country __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_country>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_country(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Country-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:166: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ TestFileReader.test_domain __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_domain>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_domain(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Domain-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:177: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Domain-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Domain-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________________ TestFileReader.test_enterprise ________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_enterprise>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_enterprise(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Enterprise-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:198: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestFileReader.test_invalid_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_invalid_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_invalid_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:64: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestFileReader.test_isp ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_isp>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_isp(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-ISP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:222: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-ISP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-ISP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestFileReader.test_language_list _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_language_list>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_language_list(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   |             \"tests/data/test-data/GeoIP2-Country-Test.mmdb\",\n[Python tests/Python 3.7 on ubuntu-latest]   | >           [\"xx\", \"ru\", \"pt-BR\", \"es\", \"en\"],\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:26: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestFileReader.test_unknown_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_unknown_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:34: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________ TestFileReader.test_unknown_address_network __________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_unknown_address_network>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address_network(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:43: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestFileReader.test_wrong_database ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestFileReader testMethod=test_wrong_database>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_wrong_database(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:55: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestMemoryReader.test_anonymous_ip ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_anonymous_ip>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:73: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________ TestMemoryReader.test_anonymous_ip_all_set __________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_anonymous_ip_all_set>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip_all_set(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:90: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ TestMemoryReader.test_asn ___________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_asn>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_asn(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoLite2-ASN-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:106: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoLite2-ASN-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoLite2-ASN-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ TestMemoryReader.test_city __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_city>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_city(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:127: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ____________________ TestMemoryReader.test_connection_type _____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_connection_type>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_connection_type(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:143: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ____________________ TestMemoryReader.test_context_manager _____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_context_manager>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_context_manager(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Country-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:248: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________________ TestMemoryReader.test_country _________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_country>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_country(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Country-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:166: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ TestMemoryReader.test_domain _________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_domain>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_domain(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Domain-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:177: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Domain-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Domain-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ TestMemoryReader.test_enterprise _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_enterprise>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_enterprise(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Enterprise-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:198: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ____________________ TestMemoryReader.test_invalid_address _____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_invalid_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_invalid_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:64: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ TestMemoryReader.test_isp ___________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_isp>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_isp(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-ISP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:222: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-ISP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-ISP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestMemoryReader.test_language_list ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_language_list>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_language_list(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   |             \"tests/data/test-data/GeoIP2-Country-Test.mmdb\",\n[Python tests/Python 3.7 on ubuntu-latest]   | >           [\"xx\", \"ru\", \"pt-BR\", \"es\", \"en\"],\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:26: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ____________________ TestMemoryReader.test_unknown_address _____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_unknown_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:34: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________ TestMemoryReader.test_unknown_address_network _________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_unknown_address_network>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address_network(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:43: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestMemoryReader.test_wrong_database _____________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestMemoryReader testMethod=test_wrong_database>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_wrong_database(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:55: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _______________________ TestAutoReader.test_anonymous_ip _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_anonymous_ip>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:73: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________ TestAutoReader.test_anonymous_ip_all_set ___________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_anonymous_ip_all_set>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_anonymous_ip_all_set(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:90: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Anonymous-IP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestAutoReader.test_asn ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_asn>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_asn(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoLite2-ASN-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:106: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoLite2-ASN-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoLite2-ASN-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestAutoReader.test_city ___________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_city>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_city(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:127: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestAutoReader.test_connection_type ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_connection_type>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_connection_type(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:143: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Connection-Type-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestAutoReader.test_context_manager ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_context_manager>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_context_manager(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Country-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:248: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________________ TestAutoReader.test_country __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_country>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_country(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Country-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:166: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | __________________________ TestAutoReader.test_domain __________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_domain>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_domain(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-Domain-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:177: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Domain-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Domain-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ________________________ TestAutoReader.test_enterprise ________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_enterprise>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_enterprise(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-Enterprise-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:198: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Enterprise-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestAutoReader.test_invalid_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_invalid_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_invalid_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:64: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ___________________________ TestAutoReader.test_isp ____________________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_isp>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_isp(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         with geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   | >           \"tests/data/test-data/GeoIP2-ISP-Test.mmdb\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         ) as reader:\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:222: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-ISP-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-ISP-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestAutoReader.test_language_list _______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_language_list>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_language_list(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   |         reader = geoip2.database.Reader(\n[Python tests/Python 3.7 on ubuntu-latest]   |             \"tests/data/test-data/GeoIP2-Country-Test.mmdb\",\n[Python tests/Python 3.7 on ubuntu-latest]   | >           [\"xx\", \"ru\", \"pt-BR\", \"es\", \"en\"],\n[Python tests/Python 3.7 on ubuntu-latest]   |         )\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:26: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-Country-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-Country-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _____________________ TestAutoReader.test_unknown_address ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_unknown_address>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:34: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | _________________ TestAutoReader.test_unknown_address_network __________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_unknown_address_network>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_unknown_address_network(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:43: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | ______________________ TestAutoReader.test_wrong_database ______________________\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | self = <tests.database_test.TestAutoReader testMethod=test_wrong_database>\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def test_wrong_database(self) -> None:\n[Python tests/Python 3.7 on ubuntu-latest]   | >       reader = geoip2.database.Reader(\"tests/data/test-data/GeoIP2-City-Test.mmdb\")\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | tests/database_test.py:55: \n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | geoip2/database.py:119: in __init__\n[Python tests/Python 3.7 on ubuntu-latest]   |     self._db_reader = maxminddb.open_database(fileish, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | database = 'tests/data/test-data/GeoIP2-City-Test.mmdb', mode = 0\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   |     def open_database(\n[Python tests/Python 3.7 on ubuntu-latest]   |         database: Union[AnyStr, int, os.PathLike, IO],\n[Python tests/Python 3.7 on ubuntu-latest]   |         mode: int = MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |     ) -> Reader:\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"Open a MaxMind DB database\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         Arguments:\n[Python tests/Python 3.7 on ubuntu-latest]   |             database -- A path to a valid MaxMind DB file such as a GeoIP2 database\n[Python tests/Python 3.7 on ubuntu-latest]   |                         file, or a file descriptor in the case of MODE_FD.\n[Python tests/Python 3.7 on ubuntu-latest]   |             mode -- mode to open the database with. Valid mode are:\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP_EXT - use the C extension with memory map.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MMAP - read from memory map. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FILE - read database as standard file. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_MEMORY - load database into memory. Pure Python.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_FD - the param passed via database is a file descriptor, not\n[Python tests/Python 3.7 on ubuntu-latest]   |                             a path. This mode implies MODE_MEMORY.\n[Python tests/Python 3.7 on ubuntu-latest]   |                 * MODE_AUTO - tries MODE_MMAP_EXT, MODE_MMAP, MODE_FILE in that\n[Python tests/Python 3.7 on ubuntu-latest]   |                               order. Default mode.\n[Python tests/Python 3.7 on ubuntu-latest]   |         \"\"\"\n[Python tests/Python 3.7 on ubuntu-latest]   |         if mode not in (\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_AUTO,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FD,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_FILE,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MEMORY,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP,\n[Python tests/Python 3.7 on ubuntu-latest]   |             MODE_MMAP_EXT,\n[Python tests/Python 3.7 on ubuntu-latest]   |         ):\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(f\"Unsupported open mode: {mode}\")\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         has_extension = _extension and hasattr(_extension, \"Reader\")\n[Python tests/Python 3.7 on ubuntu-latest]   |         use_extension = has_extension if mode == MODE_AUTO else mode == MODE_MMAP_EXT\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not use_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             return Reader(database, mode)\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         if not has_extension:\n[Python tests/Python 3.7 on ubuntu-latest]   |             raise ValueError(\n[Python tests/Python 3.7 on ubuntu-latest]   |                 \"MODE_MMAP_EXT requires the maxminddb.extension module to be available\"\n[Python tests/Python 3.7 on ubuntu-latest]   |             )\n[Python tests/Python 3.7 on ubuntu-latest]   |     \n[Python tests/Python 3.7 on ubuntu-latest]   |         # The C type exposes the same API as the Python Reader, so for type\n[Python tests/Python 3.7 on ubuntu-latest]   |         # checking purposes, pretend it is one. (Ideally this would be a subclass\n[Python tests/Python 3.7 on ubuntu-latest]   |         # of, or share a common parent class with, the Python Reader\n[Python tests/Python 3.7 on ubuntu-latest]   |         # implementation.)\n[Python tests/Python 3.7 on ubuntu-latest]   | >       return cast(Reader, _extension.Reader(database, mode))\n[Python tests/Python 3.7 on ubuntu-latest]   | E       FileNotFoundError: [Errno 2] No such file or directory: b'tests/data/test-data/GeoIP2-City-Test.mmdb'\n[Python tests/Python 3.7 on ubuntu-latest]   | \n[Python tests/Python 3.7 on ubuntu-latest]   | .tox/py37-test/lib/python3.7/site-packages/maxminddb/__init__.py:80: FileNotFoundError\n[Python tests/Python 3.7 on ubuntu-latest]   | =========================== short test summary info ============================\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_anonymous_ip - FileNotFou...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_anonymous_ip_all_set - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_asn - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_city - FileNotFoundError:...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_connection_type - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_context_manager - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_country - FileNotFoundErr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_domain - FileNotFoundErro...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_enterprise - FileNotFound...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_invalid_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_isp - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_language_list - FileNotFo...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_unknown_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_unknown_address_network\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::BaseTestReader::test_wrong_database - FileNotF...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_anonymous_ip - FileN...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_anonymous_ip_all_set\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_asn - FileNotFoundEr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_city - FileNotFoundE...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_connection_type - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_context_manager - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_country - FileNotFou...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_domain - FileNotFoun...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_enterprise - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_invalid_address - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_isp - FileNotFoundEr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_language_list - File...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_unknown_address - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_unknown_address_network\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestExtensionReader::test_wrong_database - Fil...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_anonymous_ip - FileNotFou...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_anonymous_ip_all_set - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_asn - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_city - FileNotFoundError:...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_connection_type - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_context_manager - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_country - FileNotFoundErr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_domain - FileNotFoundErro...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_enterprise - FileNotFound...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_invalid_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_isp - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_language_list - FileNotFo...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_unknown_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_unknown_address_network\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMMAPReader::test_wrong_database - FileNotF...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_anonymous_ip - FileNotFou...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_anonymous_ip_all_set - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_asn - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_city - FileNotFoundError:...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_connection_type - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_context_manager - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_country - FileNotFoundErr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_domain - FileNotFoundErro...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_enterprise - FileNotFound...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_invalid_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_isp - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_language_list - FileNotFo...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_unknown_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_unknown_address_network\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestFileReader::test_wrong_database - FileNotF...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_anonymous_ip - FileNotF...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_anonymous_ip_all_set - ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_asn - FileNotFoundError...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_city - FileNotFoundErro...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_connection_type - FileN...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_context_manager - FileN...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_country - FileNotFoundE...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_domain - FileNotFoundEr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_enterprise - FileNotFou...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_invalid_address - FileN...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_isp - FileNotFoundError...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_language_list - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_unknown_address - FileN...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_unknown_address_network\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestMemoryReader::test_wrong_database - FileNo...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_anonymous_ip - FileNotFou...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_anonymous_ip_all_set - Fi...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_asn - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_city - FileNotFoundError:...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_connection_type - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_context_manager - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_country - FileNotFoundErr...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_domain - FileNotFoundErro...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_enterprise - FileNotFound...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_invalid_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_isp - FileNotFoundError: ...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_language_list - FileNotFo...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_unknown_address - FileNot...\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_unknown_address_network\n[Python tests/Python 3.7 on ubuntu-latest]   | FAILED tests/database_test.py::TestAutoReader::test_wrong_database - FileNotF...\n[Python tests/Python 3.7 on ubuntu-latest]   | ======================== 90 failed, 61 passed in 3.12s =========================\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: exit 1 (3.61 seconds) /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/maxmind-GeoIP2-python> pytest tests pid=192\n[Python tests/Python 3.7 on ubuntu-latest]   | py37-test: tox-gh-actions couldn't understand the parallel option. ignoring the given option: 0\n[Python tests/Python 3.7 on ubuntu-latest]   \u2753  ::endgroup::\n[Python tests/Python 3.7 on ubuntu-latest]   | .pkg: _exit> python /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__\n[Python tests/Python 3.7 on ubuntu-latest]   |   py37-test: FAIL code 1 (37.46=setup[33.85]+cmd[3.61] seconds)\n[Python tests/Python 3.7 on ubuntu-latest]   |   evaluation failed :( (37.75 seconds)\n[Python tests/Python 3.7 on ubuntu-latest]   \u274c  Failure - Main Test with tox\n[Python tests/Python 3.7 on ubuntu-latest] exitcode '1': failure\n[Python tests/Python 3.7 on ubuntu-latest] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'Python ${{ matrix.python-version }} on ${{ matrix.platform }}' failed\n"
}