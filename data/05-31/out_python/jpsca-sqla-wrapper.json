{
    "repository": "jpsca/sqla-wrapper",
    "clone_url": "https://github.com/jpsca/sqla-wrapper.git",
    "timestamp": "2023-05-29T14:43:59.118265Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[run_tests/lint ] \ud83d\ude80  Start image=crawlergpt:latest\n[run_tests/tests] \ud83d\ude80  Start image=crawlergpt:latest\n[run_tests/lint ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[run_tests/tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[run_tests/tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[run_tests/lint ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[run_tests/tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[run_tests/lint ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[run_tests/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/jpsca-sqla-wrapper] user=0 workdir=\n[run_tests/lint ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/jpsca-sqla-wrapper] user=0 workdir=\n[run_tests/tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[run_tests/lint ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[run_tests/tests] \ud83e\uddea  Matrix: map[python:3.9]\n[run_tests/tests] \u2b50 Run Main actions/checkout@v2\n[run_tests/tests]   \u2705  Success - Main actions/checkout@v2\n[run_tests/lint ] \u2b50 Run Main actions/checkout@v2\n[run_tests/lint ]   \u2705  Success - Main actions/checkout@v2\n[run_tests/tests] \u2b50 Run Main actions/setup-python@v2\n[run_tests/tests]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[run_tests/lint ] \u2b50 Run Main actions/setup-python@v2\n[run_tests/lint ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[run_tests/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[run_tests/lint ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[run_tests/tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[run_tests/lint ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[run_tests/tests]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: \n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? false\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[run_tests/tests]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/tests]   \ud83d\udcac  ::debug::evaluating 6 versions\n[run_tests/tests]   \ud83d\udcac  ::debug::matched: 3.9.6\n[run_tests/tests]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[run_tests/tests]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[run_tests/tests]   | Successfully setup CPython (3.9.6)\n[run_tests/tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[run_tests/tests]   \u2705  Success - Main actions/setup-python@v2\n[run_tests/lint ]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: \n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? false\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/lint ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[run_tests/lint ]   \ud83d\udcac  ::debug::explicit? true\n[run_tests/lint ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[run_tests/lint ]   \ud83d\udcac  ::debug::matched: 3.9.6\n[run_tests/lint ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[run_tests/lint ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[run_tests/lint ]   | Successfully setup CPython (3.9.6)\n[run_tests/lint ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[run_tests/lint ]   \u2705  Success - Main actions/setup-python@v2\n[run_tests/tests]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[run_tests/tests]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[run_tests/lint ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[run_tests/lint ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[run_tests/tests]   \u2699  ::set-output:: python-version=3.9.6\n[run_tests/tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[run_tests/tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[run_tests/lint ]   \u2699  ::set-output:: python-version=3.9.6\n[run_tests/tests] \u2b50 Run Main Installs dependencies\n[run_tests/lint ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[run_tests/lint ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[run_tests/lint ] \u2b50 Run Main Installs dependencies\n[run_tests/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[run_tests/lint ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[run_tests/lint ]   | Retrieving Poetry metadata\n[run_tests/lint ]   | \n[run_tests/lint ]   | # Welcome to Poetry!\n[run_tests/lint ]   | \n[run_tests/lint ]   | This will download and install the latest version of Poetry,\n[run_tests/lint ]   | a dependency and package manager for Python.\n[run_tests/lint ]   | \n[run_tests/lint ]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[run_tests/lint ]   | \n[run_tests/lint ]   | /home/runneradmin/.local/bin\n[run_tests/lint ]   | \n[run_tests/lint ]   | You can uninstall at any time by executing this script with the --uninstall option,\n[run_tests/lint ]   | and these changes will be reverted.\n[run_tests/lint ]   | \n[run_tests/lint ]   | Installing Poetry (1.5.0)\n[run_tests/lint ]   | Installing Poetry (1.5.0): Creating environment\n[run_tests/lint ]   | Installing Poetry (1.5.0): Installing Poetry\n[run_tests/lint ]   | Installing Poetry (1.5.0): Creating script\n[run_tests/lint ]   | Installing Poetry (1.5.0): Done\n[run_tests/lint ]   | \n[run_tests/lint ]   | Poetry (1.5.0) is installed now. Great!\n[run_tests/lint ]   | \n[run_tests/lint ]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[run_tests/lint ]   | environment variable.\n[run_tests/lint ]   | \n[run_tests/lint ]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[run_tests/lint ]   | \n[run_tests/lint ]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[run_tests/lint ]   | \n[run_tests/lint ]   | You can test that everything is set up by executing:\n[run_tests/lint ]   | \n[run_tests/lint ]   | `poetry --version`\n[run_tests/lint ]   | \n[run_tests/lint ]   \u2705  Success - Main Installs dependencies\n[run_tests/lint ] \u2b50 Run Main ~/.local/share/pypoetry/venv/bin/poetry install --with lint\n[run_tests/lint ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[run_tests/tests]   | Retrieving Poetry metadata\n[run_tests/tests]   | \n[run_tests/tests]   | # Welcome to Poetry!\n[run_tests/tests]   | \n[run_tests/tests]   | This will download and install the latest version of Poetry,\n[run_tests/tests]   | a dependency and package manager for Python.\n[run_tests/tests]   | \n[run_tests/tests]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[run_tests/tests]   | \n[run_tests/tests]   | /home/runneradmin/.local/bin\n[run_tests/tests]   | \n[run_tests/tests]   | You can uninstall at any time by executing this script with the --uninstall option,\n[run_tests/tests]   | and these changes will be reverted.\n[run_tests/tests]   | \n[run_tests/tests]   | Installing Poetry (1.5.0)\n[run_tests/tests]   | Installing Poetry (1.5.0): Creating environment\n[run_tests/tests]   | Installing Poetry (1.5.0): Installing Poetry\n[run_tests/tests]   | Installing Poetry (1.5.0): Creating script\n[run_tests/tests]   | Installing Poetry (1.5.0): Done\n[run_tests/tests]   | \n[run_tests/tests]   | Poetry (1.5.0) is installed now. Great!\n[run_tests/tests]   | \n[run_tests/tests]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[run_tests/tests]   | environment variable.\n[run_tests/tests]   | \n[run_tests/tests]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[run_tests/tests]   | \n[run_tests/tests]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[run_tests/tests]   | \n[run_tests/tests]   | You can test that everything is set up by executing:\n[run_tests/tests]   | \n[run_tests/tests]   | `poetry --version`\n[run_tests/tests]   | \n[run_tests/tests]   \u2705  Success - Main Installs dependencies\n[run_tests/tests] \u2b50 Run Main ~/.local/share/pypoetry/venv/bin/poetry install --with test\n[run_tests/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[run_tests/lint ]   | Creating virtualenv sqla-wrapper-Gig1yytw-py3.9 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[run_tests/tests]   | Creating virtualenv sqla-wrapper-Gig1yytw-py3.9 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[run_tests/tests]   | Installing dependencies from lock file\n[run_tests/lint ]   | Installing dependencies from lock file\n[run_tests/tests]   | \n[run_tests/tests]   | Package operations: 25 installs, 0 updates, 0 removals\n[run_tests/tests]   | \n[run_tests/tests]   |   \u2022 Installing attrs (22.2.0)\n[run_tests/tests]   |   \u2022 Installing exceptiongroup (1.1.0)\n[run_tests/tests]   |   \u2022 Installing greenlet (2.0.2)\n[run_tests/tests]   |   \u2022 Installing iniconfig (2.0.0)\n[run_tests/tests]   |   \u2022 Installing markupsafe (2.1.2)\n[run_tests/tests]   |   \u2022 Installing packaging (23.0)\n[run_tests/tests]   |   \u2022 Installing pluggy (1.0.0)\n[run_tests/tests]   |   \u2022 Installing tomli (2.0.1)\n[run_tests/tests]   |   \u2022 Installing typing-extensions (4.5.0)\n[run_tests/tests]   |   \u2022 Installing zipp (3.13.0)\n[run_tests/lint ]   | \n[run_tests/lint ]   | Package operations: 14 installs, 1 update, 0 removals\n[run_tests/lint ]   | \n[run_tests/lint ]   |   \u2022 Installing greenlet (2.0.2)\n[run_tests/lint ]   |   \u2022 Installing markupsafe (2.1.2)\n[run_tests/lint ]   |   \u2022 Installing mccabe (0.7.0)\n[run_tests/lint ]   |   \u2022 Installing pycodestyle (2.10.0)\n[run_tests/lint ]   |   \u2022 Installing pyflakes (3.0.1)\n[run_tests/lint ]   |   \u2022 Updating setuptools (67.7.2 -> 67.3.2)\n[run_tests/lint ]   |   \u2022 Installing typing-extensions (4.5.0)\n[run_tests/tests]   |   \u2022 Installing blinker (1.6.2)\n[run_tests/tests]   |   \u2022 Installing click (8.1.3)\n[run_tests/tests]   |   \u2022 Installing coverage (7.1.0)\n[run_tests/tests]   |   \u2022 Installing importlib-metadata (6.0.0)\n[run_tests/tests]   |   \u2022 Installing itsdangerous (2.1.2)\n[run_tests/tests]   |   \u2022 Installing mako (1.2.4)\n[run_tests/tests]   |   \u2022 Installing pytest (7.2.1)\n[run_tests/tests]   |   \u2022 Installing jinja2 (3.1.2)\n[run_tests/tests]   |   \u2022 Installing werkzeug (2.3.3)\n[run_tests/tests]   |   \u2022 Installing sqlalchemy (2.0.3)\n[run_tests/tests]   |   \u2022 Installing alembic (1.9.4)\n[run_tests/tests]   |   \u2022 Installing flask (2.3.2)\n[run_tests/tests]   |   \u2022 Installing proper-cli (1.2)\n[run_tests/tests]   |   \u2022 Installing psycopg2-binary (2.9.5)\n[run_tests/tests]   |   \u2022 Installing pytest-cov (4.0.0)\n[run_tests/tests]   | \n[run_tests/tests]   | Installing the current project: sqla_wrapper (6.0.0)\n[run_tests/tests]   \u2705  Success - Main ~/.local/share/pypoetry/venv/bin/poetry install --with test\n[run_tests/lint ]   |   \u2022 Installing attrs (22.2.0)\n[run_tests/lint ]   |   \u2022 Installing flake8 (6.0.0)\n[run_tests/lint ]   |   \u2022 Installing mako (1.2.4)\n[run_tests/lint ]   |   \u2022 Installing nodeenv (1.7.0)\n[run_tests/lint ]   |   \u2022 Installing sqlalchemy (2.0.3)\n[run_tests/tests] \u2b50 Run Main make test\n[run_tests/lint ]   |   \u2022 Installing alembic (1.9.4)\n[run_tests/lint ]   |   \u2022 Installing flake8-bugbear (23.2.13)\n[run_tests/lint ]   |   \u2022 Installing pyright (1.1.294)\n[run_tests/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[run_tests/lint ]   | \n[run_tests/lint ]   | Installing the current project: sqla_wrapper (6.0.0)\n[run_tests/lint ]   \u2705  Success - Main ~/.local/share/pypoetry/venv/bin/poetry install --with lint\n[run_tests/lint ] \u2b50 Run Main make lint\n[run_tests/lint ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[run_tests/tests]   | poetry run pytest -x -vv src/sqla_wrapper tests\n[run_tests/tests]   | make: poetry: Command not found\n[run_tests/tests]   | make: *** [Makefile:3: test] Error 127\n[run_tests/tests]   \u274c  Failure - Main make test\n[run_tests/lint ]   | poetry run flake8 src/sqla_wrapper tests\n[run_tests/lint ]   | make: poetry: Command not found\n[run_tests/lint ]   | make: *** [Makefile:7: lint] Error 127\n[run_tests/lint ]   \u274c  Failure - Main make lint\n[run_tests/tests] exitcode '2': failure\n[run_tests/lint ] exitcode '2': failure\n[run_tests/lint ] \ud83c\udfc1  Job failed\n[run_tests/tests] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'lint' failed\n"
}