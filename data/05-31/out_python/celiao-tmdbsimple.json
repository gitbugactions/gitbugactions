{
    "repository": "celiao/tmdbsimple",
    "clone_url": "https://github.com/celiao/tmdbsimple.git",
    "timestamp": "2023-05-29T15:10:47.162482Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[build/build] \ud83d\ude80  Start image=crawlergpt:latest\n[build/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[build/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/celiao-tmdbsimple] user=0 workdir=\n[build/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[build/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[build/build] \ud83e\uddea  Matrix: map[python-version:3.6]\n[build/build] \u2b50 Run Main actions/checkout@v2\n[build/build]   \u2705  Success - Main actions/checkout@v2\n[build/build] \u2b50 Run Main Set up Python 3.6\n[build/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[build/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[build/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[build/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.6 is 3.6\n[build/build]   \ud83d\udcac  ::debug::isExplicit: \n[build/build]   \ud83d\udcac  ::debug::explicit? false\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[build/build]   \ud83d\udcac  ::debug::explicit? true\n[build/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[build/build]   \ud83d\udcac  ::debug::matched: 3.6.14\n[build/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.6.14/x64\n[build/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.6.14 x64\n[build/build]   | Successfully setup CPython (3.6.14)\n[build/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[build/build]   \u2705  Success - Main Set up Python 3.6\n[build/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.6.14/x64\n[build/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.6.14/x64/lib\n[build/build]   \u2699  ::set-output:: python-version=3.6.14\n[build/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64\n[build/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64/bin\n[build/build] \u2b50 Run Main Install dependencies\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[build/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (21.2.4)\n[build/build]   | Collecting pip\n[build/build]   |   Downloading pip-21.3.1-py3-none-any.whl (1.7 MB)\n[build/build]   | Installing collected packages: pip\n[build/build]   |   Attempting uninstall: pip\n[build/build]   |     Found existing installation: pip 21.2.4\n[build/build]   |     Uninstalling pip-21.2.4:\n[build/build]   |       Successfully uninstalled pip-21.2.4\n[build/build]   | Successfully installed pip-21.3.1\n[build/build]   | Collecting flake8\n[build/build]   |   Downloading flake8-5.0.4-py2.py3-none-any.whl (61 kB)\n[build/build]   | Collecting pycodestyle<2.10.0,>=2.9.0\n[build/build]   |   Downloading pycodestyle-2.9.1-py2.py3-none-any.whl (41 kB)\n[build/build]   | Collecting mccabe<0.8.0,>=0.7.0\n[build/build]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[build/build]   | Collecting pyflakes<2.6.0,>=2.5.0\n[build/build]   |   Downloading pyflakes-2.5.0-py2.py3-none-any.whl (66 kB)\n[build/build]   | Collecting importlib-metadata<4.3,>=1.1.0\n[build/build]   |   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)\n[build/build]   | Collecting typing-extensions>=3.6.4\n[build/build]   |   Downloading typing_extensions-4.1.1-py3-none-any.whl (26 kB)\n[build/build]   | Collecting zipp>=0.5\n[build/build]   |   Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)\n[build/build]   | Installing collected packages: zipp, typing-extensions, pyflakes, pycodestyle, mccabe, importlib-metadata, flake8\n[build/build]   | Successfully installed flake8-5.0.4 importlib-metadata-4.2.0 mccabe-0.7.0 pycodestyle-2.9.1 pyflakes-2.5.0 typing-extensions-4.1.1 zipp-3.6.0\n[build/build]   | Collecting pytest\n[build/build]   |   Downloading pytest-7.0.1-py3-none-any.whl (296 kB)\n[build/build]   | Collecting pluggy<2.0,>=0.12\n[build/build]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[build/build]   | Collecting attrs>=19.2.0\n[build/build]   |   Downloading attrs-22.2.0-py3-none-any.whl (60 kB)\n[build/build]   | Collecting py>=1.8.2\n[build/build]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[build/build]   | Requirement already satisfied: importlib-metadata>=0.12 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest) (4.2.0)\n[build/build]   | Collecting iniconfig\n[build/build]   |   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)\n[build/build]   | Collecting tomli>=1.0.0\n[build/build]   |   Downloading tomli-1.2.3-py3-none-any.whl (12 kB)\n[build/build]   | Collecting packaging\n[build/build]   |   Downloading packaging-21.3-py3-none-any.whl (40 kB)\n[build/build]   | Requirement already satisfied: zipp>=0.5 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from importlib-metadata>=0.12->pytest) (3.6.0)\n[build/build]   | Requirement already satisfied: typing-extensions>=3.6.4 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from importlib-metadata>=0.12->pytest) (4.1.1)\n[build/build]   | Collecting pyparsing!=3.0.5,>=2.0.2\n[build/build]   |   Downloading pyparsing-3.0.9-py3-none-any.whl (98 kB)\n[build/build]   | Installing collected packages: pyparsing, tomli, py, pluggy, packaging, iniconfig, attrs, pytest\n[build/build]   | Successfully installed attrs-22.2.0 iniconfig-1.1.1 packaging-21.3 pluggy-1.0.0 py-1.11.0 pyparsing-3.0.9 pytest-7.0.1 tomli-1.2.3\n[build/build]   | Collecting pytest-cov\n[build/build]   |   Downloading pytest_cov-4.0.0-py3-none-any.whl (21 kB)\n[build/build]   | Collecting coverage[toml]>=5.2.1\n[build/build]   |   Downloading coverage-6.2-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (212 kB)\n[build/build]   | Requirement already satisfied: pytest>=4.6 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest-cov) (7.0.1)\n[build/build]   | Requirement already satisfied: tomli in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from coverage[toml]>=5.2.1->pytest-cov) (1.2.3)\n[build/build]   | Requirement already satisfied: packaging in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest>=4.6->pytest-cov) (21.3)\n[build/build]   | Requirement already satisfied: py>=1.8.2 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest>=4.6->pytest-cov) (1.11.0)\n[build/build]   | Requirement already satisfied: importlib-metadata>=0.12 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest>=4.6->pytest-cov) (4.2.0)\n[build/build]   | Requirement already satisfied: pluggy<2.0,>=0.12 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest>=4.6->pytest-cov) (1.0.0)\n[build/build]   | Requirement already satisfied: iniconfig in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest>=4.6->pytest-cov) (1.1.1)\n[build/build]   | Requirement already satisfied: attrs>=19.2.0 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from pytest>=4.6->pytest-cov) (22.2.0)\n[build/build]   | Requirement already satisfied: zipp>=0.5 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from importlib-metadata>=0.12->pytest>=4.6->pytest-cov) (3.6.0)\n[build/build]   | Requirement already satisfied: typing-extensions>=3.6.4 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from importlib-metadata>=0.12->pytest>=4.6->pytest-cov) (4.1.1)\n[build/build]   | Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from packaging->pytest>=4.6->pytest-cov) (3.0.9)\n[build/build]   | Installing collected packages: coverage, pytest-cov\n[build/build]   | Successfully installed coverage-6.2 pytest-cov-4.0.0\n[build/build]   | Collecting codecov\n[build/build]   |   Downloading codecov-2.1.13-py2.py3-none-any.whl (16 kB)\n[build/build]   | Collecting requests>=2.7.9\n[build/build]   |   Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)\n[build/build]   | Requirement already satisfied: coverage in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from codecov) (6.2)\n[build/build]   | Collecting idna<4,>=2.5\n[build/build]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[build/build]   | Collecting urllib3<1.27,>=1.21.1\n[build/build]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[build/build]   | Collecting charset-normalizer~=2.0.0\n[build/build]   |   Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)\n[build/build]   | Collecting certifi>=2017.4.17\n[build/build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[build/build]   | Installing collected packages: urllib3, idna, charset-normalizer, certifi, requests, codecov\n[build/build]   | Successfully installed certifi-2023.5.7 charset-normalizer-2.0.12 codecov-2.1.13 idna-3.4 requests-2.27.1 urllib3-1.26.16\n[build/build]   | Requirement already satisfied: requests in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (2.27.1)\n[build/build]   | Requirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from requests) (1.26.16)\n[build/build]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from requests) (3.4)\n[build/build]   | Requirement already satisfied: charset-normalizer~=2.0.0 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from requests) (2.0.12)\n[build/build]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (from requests) (2023.5.7)\n[build/build]   \u2705  Success - Main Install dependencies\n[build/build] \u2b50 Run Main Lint with flake8\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[build/build]   | 0\n[build/build]   | ./tmdbsimple/__init__.py:26:1: F401 'requests' imported but unused\n[build/build]   | ./tmdbsimple/__init__.py:36:1: F401 '.people.Credits' imported but unused\n[build/build]   | ./tmdbsimple/__init__.py:37:1: F401 '.search.Search' imported but unused\n[build/build]   | ./tests/test_requests_session.py:20:1: E402 module level import not at top of file\n[build/build]   | 1     E402 module level import not at top of file\n[build/build]   | 3     F401 'requests' imported but unused\n[build/build]   | 4\n[build/build]   \u2705  Success - Main Lint with flake8\n[build/build] \u2b50 Run Main Test with pytest\n[build/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[build/build]   | ============================= test session starts ==============================\n[build/build]   | platform linux -- Python 3.6.14, pytest-7.0.1, pluggy-1.0.0\n[build/build]   | rootdir: /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/celiao-tmdbsimple\n[build/build]   | plugins: cov-4.0.0\n[build/build]   | collected 142 items\n[build/build]   | \n[build/build]   | tests/test_account.py FFFFFFFFFFFFFFFFFFF                                [ 13%]\n[build/build]   | tests/test_base.py FFF                                                   [ 15%]\n[build/build]   | tests/test_changes.py FFF                                                [ 17%]\n[build/build]   | tests/test_configuration.py FFFFFFFFF                                    [ 23%]\n[build/build]   | tests/test_discover.py FFFFFF                                            [ 28%]\n[build/build]   | tests/test_find.py FF                                                    [ 29%]\n[build/build]   | tests/test_genres.py FFF                                                 [ 31%]\n[build/build]   | tests/test_movies.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                  [ 55%]\n[build/build]   | tests/test_people.py FFFFFFFFFFFF                                        [ 64%]\n[build/build]   | tests/test_requests_session.py F                                         [ 64%]\n[build/build]   | tests/test_search.py FFFFFFF                                             [ 69%]\n[build/build]   | tests/test_tv.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF             [100%]\n[build/build]   | \n[build/build]   | =================================== FAILURES ===================================\n[build/build]   | ____________________ AccountTestCase.test_account_favorite _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_favorite>\n[build/build]   | \n[build/build]   |     def test_account_favorite(self):\n[build/build]   |         status_code = SUCCESSFUL_UPDATE\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:76: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ AccountTestCase.test_account_favorite_movies _________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_favorite_movies>\n[build/build]   | \n[build/build]   |     def test_account_favorite_movies(self):\n[build/build]   |         movietitle = MOVIETITLE\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:62: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ AccountTestCase.test_account_favorite_tv ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_favorite_tv>\n[build/build]   | \n[build/build]   |     def test_account_favorite_tv(self):\n[build/build]   |         tvtitle = TVTITLE\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:69: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ AccountTestCase.test_account_info _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_info>\n[build/build]   | \n[build/build]   |     def test_account_info(self):\n[build/build]   |         username = USERNAME\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()\n[build/build]   | \n[build/build]   | tests/test_account.py:50: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ AccountTestCase.test_account_lists ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_lists>\n[build/build]   | \n[build/build]   |     def test_account_lists(self):\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:55: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ AccountTestCase.test_account_rated_movies ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_rated_movies>\n[build/build]   | \n[build/build]   |     def test_account_rated_movies(self):\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:87: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ AccountTestCase.test_account_rated_tv _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_rated_tv>\n[build/build]   | \n[build/build]   |     def test_account_rated_tv(self):\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:94: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ AccountTestCase.test_account_rated_tv_episodes ________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_rated_tv_episodes>\n[build/build]   | \n[build/build]   |     def test_account_rated_tv_episodes(self):\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:101: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ AccountTestCase.test_account_watchlist ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_watchlist>\n[build/build]   | \n[build/build]   |     def test_account_watchlist(self):\n[build/build]   |         status_code = SUCCESSFUL_UPDATE\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:125: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ AccountTestCase.test_account_watchlist_movies _________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_watchlist_movies>\n[build/build]   | \n[build/build]   |     def test_account_watchlist_movies(self):\n[build/build]   |         movietitle = MOVIETITLE\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:109: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ AccountTestCase.test_account_watchlist_tv ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AccountTestCase testMethod=test_account_watchlist_tv>\n[build/build]   | \n[build/build]   |     def test_account_watchlist_tv(self):\n[build/build]   |         tvtitle = TVTITLE\n[build/build]   |         account = tmdb.Account(SESSION_ID)\n[build/build]   | >       account.info()    # to set account.id\n[build/build]   | \n[build/build]   | tests/test_account.py:117: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/account?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________ AuthenticationTestCase.test_authentication_guest_session_new _________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AuthenticationTestCase testMethod=test_authentication_guest_session_new>\n[build/build]   | \n[build/build]   |     def test_authentication_guest_session_new(self):\n[build/build]   |         success = True\n[build/build]   |         auth = tmdb.Authentication()\n[build/build]   | >       auth.guest_session_new()\n[build/build]   | \n[build/build]   | tests/test_account.py:139: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:304: in guest_session_new\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/authentication/guest_session/new?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________ AuthenticationTestCase.test_authentication_token_new _____________\n[build/build]   | \n[build/build]   | self = <tests.test_account.AuthenticationTestCase testMethod=test_authentication_token_new>\n[build/build]   | \n[build/build]   |     def test_authentication_token_new(self):\n[build/build]   |         success = True\n[build/build]   |         auth = tmdb.Authentication()\n[build/build]   | >       auth.token_new()\n[build/build]   | \n[build/build]   | tests/test_account.py:145: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:321: in token_new\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/authentication/token/new?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________ GuestSessionsTestCase.test_guest_sessions_rated_movies ____________\n[build/build]   | \n[build/build]   | self = <tests.test_account.GuestSessionsTestCase testMethod=test_guest_sessions_rated_movies>\n[build/build]   | \n[build/build]   |     def test_guest_sessions_rated_movies(self):\n[build/build]   |         # get a guest session id\n[build/build]   |         auth = tmdb.Authentication()\n[build/build]   | >       auth.guest_session_new()\n[build/build]   | \n[build/build]   | tests/test_account.py:183: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:304: in guest_session_new\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/authentication/guest_session/new?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ GuestSessionsTestCase.test_guest_sessions_rated_tv ______________\n[build/build]   | \n[build/build]   | self = <tests.test_account.GuestSessionsTestCase testMethod=test_guest_sessions_rated_tv>\n[build/build]   | \n[build/build]   |     def test_guest_sessions_rated_tv(self):\n[build/build]   |         # get a guest session id\n[build/build]   |         auth = tmdb.Authentication()\n[build/build]   | >       auth.guest_session_new()\n[build/build]   | \n[build/build]   | tests/test_account.py:194: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:304: in guest_session_new\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/authentication/guest_session/new?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________ GuestSessionsTestCase.test_guest_sessions_rated_tv_episodes __________\n[build/build]   | \n[build/build]   | self = <tests.test_account.GuestSessionsTestCase testMethod=test_guest_sessions_rated_tv_episodes>\n[build/build]   | \n[build/build]   |     def test_guest_sessions_rated_tv_episodes(self):\n[build/build]   |         # get a guest session id\n[build/build]   |         auth = tmdb.Authentication()\n[build/build]   | >       auth.guest_session_new()\n[build/build]   | \n[build/build]   | tests/test_account.py:205: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:304: in guest_session_new\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/authentication/guest_session/new?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________ ListsTestCase.test_lists_create_add_remove_clear_delete ____________\n[build/build]   | \n[build/build]   | self = <tests.test_account.ListsTestCase testMethod=test_lists_create_add_remove_clear_delete>\n[build/build]   | \n[build/build]   |     def test_lists_create_add_remove_clear_delete(self):\n[build/build]   |         kwargs = {\n[build/build]   |             'name': LIST_NAME,\n[build/build]   |             'description': LIST_DESCRIPTION,\n[build/build]   |             'language': LIST_LANGUAGE,\n[build/build]   |         }\n[build/build]   |         status_message = SUCCESS_PERIOD\n[build/build]   |         lst = tmdb.Lists(0, SESSION_ID)\n[build/build]   | >       lst.list_create(**kwargs)\n[build/build]   | \n[build/build]   | tests/test_account.py:237: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:541: in list_create\n[build/build]   |     response = self._POST(path, kwargs, payload)\n[build/build]   | tmdbsimple/base.py:113: in _POST\n[build/build]   |     return self._request('POST', path, params=params, payload=payload)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/list?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________________ ListsTestCase.test_lists_info _________________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.ListsTestCase testMethod=test_lists_info>\n[build/build]   | \n[build/build]   |     def test_lists_info(self):\n[build/build]   |         id = LIST_ID\n[build/build]   |         created_by = LIST_CREATED_BY\n[build/build]   |         lst = tmdb.Lists(id)\n[build/build]   | >       lst.info()\n[build/build]   | \n[build/build]   | tests/test_account.py:219: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:499: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/list/509ec17b19c2950a0600050d?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ ListsTestCase.test_lists_item_status _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_account.ListsTestCase testMethod=test_lists_item_status>\n[build/build]   | \n[build/build]   |     def test_lists_item_status(self):\n[build/build]   |         id = LIST_ID\n[build/build]   |         movie_id = LIST_MOVIE_ID\n[build/build]   |         lst = tmdb.Lists(id)\n[build/build]   | >       lst.item_status(movie_id=movie_id)\n[build/build]   | \n[build/build]   | tests/test_account.py:226: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/account.py:516: in item_status\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/list/509ec17b19c2950a0600050d/item_status?movie_id=76203&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ TMDBTestCase.test_tmdb_get_params_bool ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_base.TMDBTestCase testMethod=test_tmdb_get_params_bool>\n[build/build]   | \n[build/build]   |     def test_tmdb_get_params_bool(self):\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.movie(query=MOVIEQUERY3, include_adult=True)\n[build/build]   | \n[build/build]   | tests/test_base.py:59: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:112: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/movie?query=Kind&include_adult=true&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____ TMDBTestCase.test_tmdb_set_attrs_to_values_attribute_multiple_calls ______\n[build/build]   | \n[build/build]   | self = <tests.test_base.TMDBTestCase testMethod=test_tmdb_set_attrs_to_values_attribute_multiple_calls>\n[build/build]   | \n[build/build]   |     def test_tmdb_set_attrs_to_values_attribute_multiple_calls(self):\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.movie(query=MOVIEQUERY1)\n[build/build]   | \n[build/build]   | tests/test_base.py:50: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:112: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/movie?query=Matrix&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______ TMDBTestCase.test_tmdb_set_attrs_to_values_method_equals_attribute ______\n[build/build]   | \n[build/build]   | self = <tests.test_base.TMDBTestCase testMethod=test_tmdb_set_attrs_to_values_method_equals_attribute>\n[build/build]   | \n[build/build]   |     def test_tmdb_set_attrs_to_values_method_equals_attribute(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.keywords()\n[build/build]   | \n[build/build]   | tests/test_base.py:38: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:208: in keywords\n[build/build]   |     response = self._GET(path)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/keywords?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ ChangesTestCase.test_changes_movie ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_changes.ChangesTestCase testMethod=test_changes_movie>\n[build/build]   | \n[build/build]   |     def test_changes_movie(self):\n[build/build]   |         changes = tmdb.Changes()\n[build/build]   | >       changes.movie()\n[build/build]   | \n[build/build]   | tests/test_changes.py:25: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/changes.py:49: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ ChangesTestCase.test_changes_person ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_changes.ChangesTestCase testMethod=test_changes_person>\n[build/build]   | \n[build/build]   |     def test_changes_person(self):\n[build/build]   |         change = tmdb.Changes()\n[build/build]   | >       change.person()\n[build/build]   | \n[build/build]   | tests/test_changes.py:35: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/changes.py:95: in person\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ ChangesTestCase.test_changes_tv ________________________\n[build/build]   | \n[build/build]   | self = <tests.test_changes.ChangesTestCase testMethod=test_changes_tv>\n[build/build]   | \n[build/build]   |     def test_changes_tv(self):\n[build/build]   |         change = tmdb.Changes()\n[build/build]   | >       change.tv()\n[build/build]   | \n[build/build]   | tests/test_changes.py:30: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/changes.py:72: in tv\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ ConfigurationTestCase.test_configuration_countries ______________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.ConfigurationTestCase testMethod=test_configuration_countries>\n[build/build]   | \n[build/build]   |     def test_configuration_countries(self):\n[build/build]   |         config = tmdb.Configuration()\n[build/build]   | >       response = config.countries()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:61: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:80: in countries\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/configuration/countries?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ ConfigurationTestCase.test_configuration_info _________________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.ConfigurationTestCase testMethod=test_configuration_info>\n[build/build]   | \n[build/build]   |     def test_configuration_info(self):\n[build/build]   |         change_keys = CHANGE_KEYS\n[build/build]   |         config = tmdb.Configuration()\n[build/build]   | >       config.info()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:48: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:64: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/configuration?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ ConfigurationTestCase.test_configuration_jobs _________________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.ConfigurationTestCase testMethod=test_configuration_jobs>\n[build/build]   | \n[build/build]   |     def test_configuration_jobs(self):\n[build/build]   |         config = tmdb.Configuration()\n[build/build]   | >       config.jobs()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:67: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:96: in jobs\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/configuration/jobs?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ ConfigurationTestCase.test_configuration_languages ______________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.ConfigurationTestCase testMethod=test_configuration_languages>\n[build/build]   | \n[build/build]   |     def test_configuration_languages(self):\n[build/build]   |         config = tmdb.Configuration()\n[build/build]   | >       response = config.languages()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:72: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:112: in languages\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/configuration/languages?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________ ConfigurationTestCase.test_configuration_primary_translations _________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.ConfigurationTestCase testMethod=test_configuration_primary_translations>\n[build/build]   | \n[build/build]   |     def test_configuration_primary_translations(self):\n[build/build]   |         config = tmdb.Configuration()\n[build/build]   | >       response = config.primary_translations()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:78: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:128: in primary_translations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/configuration/primary_translations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ ConfigurationTestCase.test_configuration_timezones ______________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.ConfigurationTestCase testMethod=test_configuration_timezones>\n[build/build]   | \n[build/build]   |     def test_configuration_timezones(self):\n[build/build]   |         config = tmdb.Configuration()\n[build/build]   | >       response = config.timezones()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:84: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:144: in timezones\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/configuration/timezones?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ CertificationsTestCase.test_certifications_list ________________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.CertificationsTestCase testMethod=test_certifications_list>\n[build/build]   | \n[build/build]   |     def test_certifications_list(self):\n[build/build]   |         certifications = tmdb.Certifications()\n[build/build]   | >       certifications.list()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:102: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:206: in list\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/certification/movie/list?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________ CertificationsTestCase.test_certifications_movie_list _____________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.CertificationsTestCase testMethod=test_certifications_movie_list>\n[build/build]   | \n[build/build]   |     def test_certifications_movie_list(self):\n[build/build]   |         certifications = tmdb.Certifications()\n[build/build]   | >       certifications.movie_list()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:92: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:173: in movie_list\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/certification/movie/list?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ CertificationsTestCase.test_certifications_tv_list ______________\n[build/build]   | \n[build/build]   | self = <tests.test_configuration.CertificationsTestCase testMethod=test_certifications_tv_list>\n[build/build]   | \n[build/build]   |     def test_certifications_tv_list(self):\n[build/build]   |         certifications = tmdb.Certifications()\n[build/build]   | >       certifications.tv_list()\n[build/build]   | \n[build/build]   | tests/test_configuration.py:97: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/configuration.py:189: in tv_list\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/certification/tv/list?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ DiscoverTestCase.test_discover_movie _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_discover.DiscoverTestCase testMethod=test_discover_movie>\n[build/build]   | \n[build/build]   |     def test_discover_movie(self):\n[build/build]   |         discover = tmdb.Discover()\n[build/build]   | >       discover.movie(page=1, year=DISCOVER_YEAR)\n[build/build]   | \n[build/build]   | tests/test_discover.py:32: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/discover.py:153: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/discover/movie?page=1&year=2004&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ DiscoverTestCase.test_discover_movie_dot_gte _________________\n[build/build]   | \n[build/build]   | self = <tests.test_discover.DiscoverTestCase testMethod=test_discover_movie_dot_gte>\n[build/build]   | \n[build/build]   |     def test_discover_movie_dot_gte(self):\n[build/build]   |         discover = tmdb.Discover()\n[build/build]   |         kwargs = {'page': 2, 'vote_average.gte': DISCOVER_VOTE_AVERAGE_GTE}\n[build/build]   | >       discover.movie(**kwargs)\n[build/build]   | \n[build/build]   | tests/test_discover.py:39: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/discover.py:153: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/discover/movie?page=2&vote_average.gte=5&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________ DiscoverTestCase.test_discover_movie_underscore_gte ______________\n[build/build]   | \n[build/build]   | self = <tests.test_discover.DiscoverTestCase testMethod=test_discover_movie_underscore_gte>\n[build/build]   | \n[build/build]   |     def test_discover_movie_underscore_gte(self):\n[build/build]   |         discover = tmdb.Discover()\n[build/build]   | >       discover.movie(page=2, vote_average_gte=DISCOVER_VOTE_AVERAGE_GTE)\n[build/build]   | \n[build/build]   | tests/test_discover.py:45: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/discover.py:153: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/discover/movie?page=2&vote_average.gte=5&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________ DiscoverTestCase.test_discover_movie_underscore_lte ______________\n[build/build]   | \n[build/build]   | self = <tests.test_discover.DiscoverTestCase testMethod=test_discover_movie_underscore_lte>\n[build/build]   | \n[build/build]   |     def test_discover_movie_underscore_lte(self):\n[build/build]   |         discover = tmdb.Discover()\n[build/build]   | >       discover.movie(page=2, vote_average_lte=DISCOVER_VOTE_AVERAGE_LTE)\n[build/build]   | \n[build/build]   | tests/test_discover.py:50: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/discover.py:153: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/discover/movie?page=2&vote_average.lte=5&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ DiscoverTestCase.test_discover_tv_underscore_gte _______________\n[build/build]   | \n[build/build]   | self = <tests.test_discover.DiscoverTestCase testMethod=test_discover_tv_underscore_gte>\n[build/build]   | \n[build/build]   |     def test_discover_tv_underscore_gte(self):\n[build/build]   |         discover = tmdb.Discover()\n[build/build]   | >       discover.tv(page=2, vote_average_gte=DISCOVER_VOTE_AVERAGE_GTE)\n[build/build]   | \n[build/build]   | tests/test_discover.py:55: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/discover.py:252: in tv\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/discover/tv?page=2&vote_average.gte=5&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ DiscoverTestCase.test_discover_tv_underscore_lte _______________\n[build/build]   | \n[build/build]   | self = <tests.test_discover.DiscoverTestCase testMethod=test_discover_tv_underscore_lte>\n[build/build]   | \n[build/build]   |     def test_discover_tv_underscore_lte(self):\n[build/build]   |         discover = tmdb.Discover()\n[build/build]   | >       discover.tv(page=2, vote_average_lte=DISCOVER_VOTE_AVERAGE_LTE)\n[build/build]   | \n[build/build]   | tests/test_discover.py:60: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/discover.py:252: in tv\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/discover/tv?page=2&vote_average.lte=5&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________________ FindTestCase.test_find_info __________________________\n[build/build]   | \n[build/build]   | self = <tests.test_find.FindTestCase testMethod=test_find_info>\n[build/build]   | \n[build/build]   |     def test_find_info(self):\n[build/build]   |         id = FIND_MOVIE_ID\n[build/build]   |         external_source = FIND_SOURCE\n[build/build]   |         title = FIND_TITLE\n[build/build]   |         find = tmdb.Find(id)\n[build/build]   | >       find.info(external_source=external_source)\n[build/build]   | \n[build/build]   | tests/test_find.py:37: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/find.py:56: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/find/tt0266543?external_source=imdb_id&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ TrendingTestCase.test_trending_info ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_find.TrendingTestCase testMethod=test_trending_info>\n[build/build]   | \n[build/build]   |     def test_trending_info(self):\n[build/build]   |         media_type = TRENDING_MEDIA_TYPE\n[build/build]   |         time_window = TRENDING_TIME_WINDOW\n[build/build]   |         trend = tmdb.Trending(media_type=media_type, time_window=time_window)\n[build/build]   | >       trend.info()\n[build/build]   | \n[build/build]   | tests/test_find.py:46: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/find.py:103: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/trending/movie/week?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ GenresTestCase.test_genres_movie_list _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_genres.GenresTestCase testMethod=test_genres_movie_list>\n[build/build]   | \n[build/build]   |     def test_genres_movie_list(self):\n[build/build]   |         genre = tmdb.Genres()\n[build/build]   | >       genre.movie_list()\n[build/build]   | \n[build/build]   | tests/test_genres.py:30: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/genres.py:46: in movie_list\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/genre/movie/list?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ GenresTestCase.test_genres_movies _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_genres.GenresTestCase testMethod=test_genres_movies>\n[build/build]   | \n[build/build]   |     def test_genres_movies(self):\n[build/build]   |         id = GENRE_ID\n[build/build]   |         genre = tmdb.Genres(id)\n[build/build]   | >       genre.movies()\n[build/build]   | \n[build/build]   | tests/test_genres.py:41: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/genres.py:86: in movies\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/genre/18/movies?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ GenresTestCase.test_genres_tv_list ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_genres.GenresTestCase testMethod=test_genres_tv_list>\n[build/build]   | \n[build/build]   |     def test_genres_tv_list(self):\n[build/build]   |         genre = tmdb.Genres()\n[build/build]   | >       genre.tv_list()\n[build/build]   | \n[build/build]   | tests/test_genres.py:35: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/genres.py:62: in tv_list\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/genre/tv/list?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ MoviesTestCase.test_movies_account_states ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_account_states>\n[build/build]   | \n[build/build]   |     def test_movies_account_states(self):\n[build/build]   |         id = MOVIE_ID_ALTERNATIVE\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.account_states(session_id=SESSION_ID)\n[build/build]   | \n[build/build]   | tests/test_movies.py:63: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:93: in account_states\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/550/account_states?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ MoviesTestCase.test_movies_alternative_titles _________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_alternative_titles>\n[build/build]   | \n[build/build]   |     def test_movies_alternative_titles(self):\n[build/build]   |         id = MOVIE_ID_ALTERNATIVE\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.alternative_titles()\n[build/build]   | \n[build/build]   | tests/test_movies.py:69: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:109: in alternative_titles\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/550/alternative_titles?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_changes ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_changes>\n[build/build]   | \n[build/build]   |     def test_movies_changes(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.changes()\n[build/build]   | \n[build/build]   | tests/test_movies.py:75: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:132: in changes\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_credits ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_credits>\n[build/build]   | \n[build/build]   |     def test_movies_credits(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.credits()\n[build/build]   | \n[build/build]   | tests/test_movies.py:81: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:148: in credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ MoviesTestCase.test_movies_external_ids ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_external_ids>\n[build/build]   | \n[build/build]   |     def test_movies_external_ids(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.external_ids()\n[build/build]   | \n[build/build]   | tests/test_movies.py:87: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:168: in external_ids\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/external_ids?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_images _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_images>\n[build/build]   | \n[build/build]   |     def test_movies_images(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.images()\n[build/build]   | \n[build/build]   | tests/test_movies.py:93: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:192: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ MoviesTestCase.test_movies_info ________________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_info>\n[build/build]   | \n[build/build]   |     def test_movies_info(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         title = MOVIE_TITLE\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.info()\n[build/build]   | \n[build/build]   | tests/test_movies.py:50: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:73: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ MoviesTestCase.test_movies_info_with_params __________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_info_with_params>\n[build/build]   | \n[build/build]   |     def test_movies_info_with_params(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         title = MOVIE_TITLE_GERMAN\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.info(language='de')\n[build/build]   | \n[build/build]   | tests/test_movies.py:57: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:73: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332?language=de&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ MoviesTestCase.test_movies_keywords ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_keywords>\n[build/build]   | \n[build/build]   |     def test_movies_keywords(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.keywords()\n[build/build]   | \n[build/build]   | tests/test_movies.py:99: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:208: in keywords\n[build/build]   |     response = self._GET(path)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/keywords?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_latest _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_latest>\n[build/build]   | \n[build/build]   |     def test_movies_latest(self):\n[build/build]   |         movie = tmdb.Movies()\n[build/build]   | >       movie.latest()\n[build/build]   | \n[build/build]   | tests/test_movies.py:164: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:421: in latest\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/latest?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ MoviesTestCase.test_movies_lists _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_lists>\n[build/build]   | \n[build/build]   |     def test_movies_lists(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.lists()\n[build/build]   | \n[build/build]   | tests/test_movies.py:105: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:225: in lists\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/lists?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ MoviesTestCase.test_movies_now_playing ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_now_playing>\n[build/build]   | \n[build/build]   |     def test_movies_now_playing(self):\n[build/build]   |         movie = tmdb.Movies()\n[build/build]   | >       movie.now_playing()\n[build/build]   | \n[build/build]   | tests/test_movies.py:169: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:446: in now_playing\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/now_playing?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_popular ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_popular>\n[build/build]   | \n[build/build]   |     def test_movies_popular(self):\n[build/build]   |         movie = tmdb.Movies()\n[build/build]   | >       movie.popular()\n[build/build]   | \n[build/build]   | tests/test_movies.py:174: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:466: in popular\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/popular?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________ MoviesTestCase.test_movies_rating_and_rating_delete ______________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_rating_and_rating_delete>\n[build/build]   | \n[build/build]   |     def test_movies_rating_and_rating_delete(self):\n[build/build]   |         status_code_create = SUCCESSFUL_CREATE\n[build/build]   |         status_code_update = SUCCESSFUL_UPDATE\n[build/build]   |         status_code_delete = SUCCESSFUL_DELETE\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.rating(session_id=SESSION_ID, value=RATING)\n[build/build]   | \n[build/build]   | tests/test_movies.py:156: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:379: in rating\n[build/build]   |     response = self._POST(path, kwargs, payload)\n[build/build]   | tmdbsimple/base.py:113: in _POST\n[build/build]   |     return self._request('POST', path, params=params, payload=payload)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/rating?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ MoviesTestCase.test_movies_recommendations __________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_recommendations>\n[build/build]   | \n[build/build]   |     def test_movies_recommendations(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.recommendations()\n[build/build]   | \n[build/build]   | tests/test_movies.py:111: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:242: in recommendations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/recommendations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ MoviesTestCase.test_movies_release_dates ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_release_dates>\n[build/build]   | \n[build/build]   |     def test_movies_release_dates(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.release_dates()\n[build/build]   | \n[build/build]   | tests/test_movies.py:117: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:267: in release_dates\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/release_dates?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ MoviesTestCase.test_movies_releases ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_releases>\n[build/build]   | \n[build/build]   |     def test_movies_releases(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.releases()\n[build/build]   | \n[build/build]   | tests/test_movies.py:190: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:528: in releases\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/releases?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_reviews ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_reviews>\n[build/build]   | \n[build/build]   |     def test_movies_reviews(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.reviews()\n[build/build]   | \n[build/build]   | tests/test_movies.py:123: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:284: in reviews\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/reviews?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ MoviesTestCase.test_movies_similar_movies ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_similar_movies>\n[build/build]   | \n[build/build]   |     def test_movies_similar_movies(self):\n[build/build]   |         id = MOVIE_ID_ALTERNATIVE\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.similar_movies()\n[build/build]   | \n[build/build]   | tests/test_movies.py:129: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:304: in similar_movies\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/550/similar_movies?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ MoviesTestCase.test_movies_top_rated _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_top_rated>\n[build/build]   | \n[build/build]   |     def test_movies_top_rated(self):\n[build/build]   |         movie = tmdb.Movies()\n[build/build]   | >       movie.top_rated()\n[build/build]   | \n[build/build]   | tests/test_movies.py:179: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:485: in top_rated\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/top_rated?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ MoviesTestCase.test_movies_translations ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_translations>\n[build/build]   | \n[build/build]   |     def test_movies_translations(self):\n[build/build]   |         id = MOVIE_ID_ALTERNATIVE\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.translations()\n[build/build]   | \n[build/build]   | tests/test_movies.py:135: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:320: in translations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/550/translations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ MoviesTestCase.test_movies_upcoming ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_upcoming>\n[build/build]   | \n[build/build]   |     def test_movies_upcoming(self):\n[build/build]   |         movie = tmdb.Movies()\n[build/build]   | >       movie.upcoming()\n[build/build]   | \n[build/build]   | tests/test_movies.py:184: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:510: in upcoming\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/upcoming?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ MoviesTestCase.test_movies_videos _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_videos>\n[build/build]   | \n[build/build]   |     def test_movies_videos(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.videos()\n[build/build]   | \n[build/build]   | tests/test_movies.py:141: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:336: in videos\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/videos?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ MoviesTestCase.test_movies_watch_providers __________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.MoviesTestCase testMethod=test_movies_watch_providers>\n[build/build]   | \n[build/build]   |     def test_movies_watch_providers(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.watch_providers()\n[build/build]   | \n[build/build]   | tests/test_movies.py:147: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:352: in watch_providers\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332/watch/providers?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ CollectionsTestCase.test_collections_images __________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CollectionsTestCase testMethod=test_collections_images>\n[build/build]   | \n[build/build]   |     def test_collections_images(self):\n[build/build]   |         id = COLLECTION_ID\n[build/build]   |         collection = tmdb.Collections(id)\n[build/build]   | >       collection.images()\n[build/build]   | \n[build/build]   | tests/test_movies.py:205: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:578: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/collection/10/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ CollectionsTestCase.test_collections_info ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CollectionsTestCase testMethod=test_collections_info>\n[build/build]   | \n[build/build]   |     def test_collections_info(self):\n[build/build]   |         id = COLLECTION_ID\n[build/build]   |         name = COLLECTION_NAME\n[build/build]   |         collection = tmdb.Collections(id)\n[build/build]   | >       collection.info()\n[build/build]   | \n[build/build]   | tests/test_movies.py:199: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:562: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/collection/10?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ CollectionsTestCase.test_collections_translations _______________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CollectionsTestCase testMethod=test_collections_translations>\n[build/build]   | \n[build/build]   |     def test_collections_translations(self):\n[build/build]   |         id = COLLECTION_ID\n[build/build]   |         collection = tmdb.Collections(id)\n[build/build]   | >       collection.translations()\n[build/build]   | \n[build/build]   | tests/test_movies.py:211: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:594: in translations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/collection/10/translations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ CompaniesTestCase.test_companies_alternative_names ______________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CompaniesTestCase testMethod=test_companies_alternative_names>\n[build/build]   | \n[build/build]   |     def test_companies_alternative_names(self):\n[build/build]   |         id = COMPANY_ID\n[build/build]   |         company = tmdb.Companies(id)\n[build/build]   | >       company.alternative_names()\n[build/build]   | \n[build/build]   | tests/test_movies.py:226: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:643: in alternative_names\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/company/1/alternative_names?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ CompaniesTestCase.test_companies_images ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CompaniesTestCase testMethod=test_companies_images>\n[build/build]   | \n[build/build]   |     def test_companies_images(self):\n[build/build]   |         id = COMPANY_ID\n[build/build]   |         company = tmdb.Companies(id)\n[build/build]   | >       company.images()\n[build/build]   | \n[build/build]   | tests/test_movies.py:232: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:668: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/company/1/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ CompaniesTestCase.test_companies_info _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CompaniesTestCase testMethod=test_companies_info>\n[build/build]   | \n[build/build]   |     def test_companies_info(self):\n[build/build]   |         id = COMPANY_ID\n[build/build]   |         name = COMPANY_NAME\n[build/build]   |         company = tmdb.Companies(id)\n[build/build]   | >       company.info()\n[build/build]   | \n[build/build]   | tests/test_movies.py:220: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:628: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/company/1?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ CompaniesTestCase.test_companies_movies ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.CompaniesTestCase testMethod=test_companies_movies>\n[build/build]   | \n[build/build]   |     def test_companies_movies(self):\n[build/build]   |         id = COMPANY_ID\n[build/build]   |         company = tmdb.Companies(id)\n[build/build]   | >       company.movies()\n[build/build]   | \n[build/build]   | tests/test_movies.py:238: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:686: in movies\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/company/1/movies?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ KeywordsTestCase.test_keywords_info ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.KeywordsTestCase testMethod=test_keywords_info>\n[build/build]   | \n[build/build]   |     def test_keywords_info(self):\n[build/build]   |         id = KEYWORD_ID\n[build/build]   |         name = KEYWORD_NAME\n[build/build]   |         keyword = tmdb.Keywords(id)\n[build/build]   | >       keyword.info()\n[build/build]   | \n[build/build]   | tests/test_movies.py:247: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:719: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/keyword/1721?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ KeywordsTestCase.test_keywords_movies _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.KeywordsTestCase testMethod=test_keywords_movies>\n[build/build]   | \n[build/build]   |     def test_keywords_movies(self):\n[build/build]   |         id = KEYWORD_ID\n[build/build]   |         keyword = tmdb.Keywords(id)\n[build/build]   | >       keyword.movies()\n[build/build]   | \n[build/build]   | tests/test_movies.py:253: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:740: in movies\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/keyword/1721/movies?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ ReviewsTestCase.test_reviews_info _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_movies.ReviewsTestCase testMethod=test_reviews_info>\n[build/build]   | \n[build/build]   |     def test_reviews_info(self):\n[build/build]   |         id = REVIEW_ID\n[build/build]   |         author = REVIEW_AUTHOR\n[build/build]   |         review = tmdb.Reviews(id)\n[build/build]   | >       review.info()\n[build/build]   | \n[build/build]   | tests/test_movies.py:262: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:772: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/review/5013bc76760ee372cb00253e?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ PeopleTestCase.test_people_changes ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_changes>\n[build/build]   | \n[build/build]   |     def test_people_changes(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.changes()\n[build/build]   | \n[build/build]   | tests/test_people.py:41: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:82: in changes\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ PeopleTestCase.test_people_combined_credits __________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_combined_credits>\n[build/build]   | \n[build/build]   |     def test_people_combined_credits(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.combined_credits()\n[build/build]   | \n[build/build]   | tests/test_people.py:59: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:133: in combined_credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/combined_credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ PeopleTestCase.test_people_external_ids ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_external_ids>\n[build/build]   | \n[build/build]   |     def test_people_external_ids(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.external_ids()\n[build/build]   | \n[build/build]   | tests/test_people.py:65: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:158: in external_ids\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/external_ids?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ PeopleTestCase.test_people_images _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_images>\n[build/build]   | \n[build/build]   |     def test_people_images(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.images()\n[build/build]   | \n[build/build]   | tests/test_people.py:71: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:174: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ PeopleTestCase.test_people_info ________________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_info>\n[build/build]   | \n[build/build]   |     def test_people_info(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         name = PEOPLE_NAME\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.info()\n[build/build]   | \n[build/build]   | tests/test_people.py:35: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:59: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ PeopleTestCase.test_people_latest _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_latest>\n[build/build]   | \n[build/build]   |     def test_people_latest(self):\n[build/build]   |         person = tmdb.People()\n[build/build]   | >       person.latest()\n[build/build]   | \n[build/build]   | tests/test_people.py:88: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:224: in latest\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/latest?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ PeopleTestCase.test_people_movie_credits ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_movie_credits>\n[build/build]   | \n[build/build]   |     def test_people_movie_credits(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.movie_credits()\n[build/build]   | \n[build/build]   | tests/test_people.py:47: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:98: in movie_credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/movie_credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ PeopleTestCase.test_people_popular ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_popular>\n[build/build]   | \n[build/build]   |     def test_people_popular(self):\n[build/build]   |         person = tmdb.People()\n[build/build]   | >       person.popular()\n[build/build]   | \n[build/build]   | tests/test_people.py:93: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:241: in popular\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/popular?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ PeopleTestCase.test_people_tagged_images ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_tagged_images>\n[build/build]   | \n[build/build]   |     def test_people_tagged_images(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.tagged_images()\n[build/build]   | \n[build/build]   | tests/test_people.py:77: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:191: in tagged_images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/tagged_images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ PeopleTestCase.test_people_translations ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_translations>\n[build/build]   | \n[build/build]   |     def test_people_translations(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.translations()\n[build/build]   | \n[build/build]   | tests/test_people.py:83: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:207: in translations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/translations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ PeopleTestCase.test_people_tv_credits _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.PeopleTestCase testMethod=test_people_tv_credits>\n[build/build]   | \n[build/build]   |     def test_people_tv_credits(self):\n[build/build]   |         id = PEOPLE_ID\n[build/build]   |         person = tmdb.People(id)\n[build/build]   | >       person.tv_credits()\n[build/build]   | \n[build/build]   | tests/test_people.py:53: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:117: in tv_credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/person/287/tv_credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ CreditsTestCase.test_credits_info _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_people.CreditsTestCase testMethod=test_credits_info>\n[build/build]   | \n[build/build]   |     def test_credits_info(self):\n[build/build]   |         id = CREDITS_ID\n[build/build]   |         department = CREDITS_DEPARTMENT\n[build/build]   |         credit = tmdb.Credits(id)\n[build/build]   | >       credit.info()\n[build/build]   | \n[build/build]   | tests/test_people.py:102: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/people.py:273: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/credit/52542282760ee313280017f9?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ RequestsSessionTestCase.test_requests_session _________________\n[build/build]   | \n[build/build]   | self = <tests.test_requests_session.RequestsSessionTestCase testMethod=test_requests_session>\n[build/build]   | \n[build/build]   |     def test_requests_session(self):\n[build/build]   |         id = MOVIE_ID\n[build/build]   |         title = MOVIE_TITLE\n[build/build]   |         movie = tmdb.Movies(id)\n[build/build]   | >       movie.info()\n[build/build]   | \n[build/build]   | tests/test_requests_session.py:35: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/movies.py:73: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/movie/103332?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ SearchTestCase.test_search_collection _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_collection>\n[build/build]   | \n[build/build]   |     def test_search_collection(self):\n[build/build]   |         query = QUERY_2\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.collection(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:43: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:67: in collection\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/collection?query=Avenger&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ SearchTestCase.test_search_company ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_company>\n[build/build]   | \n[build/build]   |     def test_search_company(self):\n[build/build]   |         query = QUERY_6\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.company(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:37: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:48: in company\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/company?query=Sony+Pictures&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ SearchTestCase.test_search_keyword ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_keyword>\n[build/build]   | \n[build/build]   |     def test_search_keyword(self):\n[build/build]   |         query = QUERY_7\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.keyword(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:49: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:85: in keyword\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/keyword?query=fight&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ SearchTestCase.test_search_movie _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_movie>\n[build/build]   | \n[build/build]   |     def test_search_movie(self):\n[build/build]   |         query = QUERY_1\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.movie(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:55: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:112: in movie\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/movie?query=Club&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ SearchTestCase.test_search_multi _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_multi>\n[build/build]   | \n[build/build]   |     def test_search_multi(self):\n[build/build]   |         query = QUERY_8\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.multi(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:61: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:136: in multi\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/multi?query=blackjack&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ SearchTestCase.test_search_person _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_person>\n[build/build]   | \n[build/build]   |     def test_search_person(self):\n[build/build]   |         query = QUERY_4\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.person(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:67: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:159: in person\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/person?query=Brad+Pitt&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________________ SearchTestCase.test_search_tv _________________________\n[build/build]   | \n[build/build]   | self = <tests.test_search.SearchTestCase testMethod=test_search_tv>\n[build/build]   | \n[build/build]   |     def test_search_tv(self):\n[build/build]   |         query = QUERY_3\n[build/build]   |         search = tmdb.Search()\n[build/build]   | >       search.tv(query=query)\n[build/build]   | \n[build/build]   | tests/test_search.py:73: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/search.py:182: in tv\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/search/tv?query=Breaking&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ TVTestCase.test_tv_account_states _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_account_states>\n[build/build]   | \n[build/build]   |     def test_tv_account_states(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.account_states(session_id=SESSION_ID)\n[build/build]   | \n[build/build]   | tests/test_tv.py:60: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:92: in account_states\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/account_states?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ TVTestCase.test_tv_airing_today ________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_airing_today>\n[build/build]   | \n[build/build]   |     def test_tv_airing_today(self):\n[build/build]   |         tv = tmdb.TV()\n[build/build]   | >       tv.airing_today()\n[build/build]   | \n[build/build]   | tests/test_tv.py:167: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:426: in airing_today\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/airing_today?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ TVTestCase.test_tv_alternative_titles _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_alternative_titles>\n[build/build]   | \n[build/build]   |     def test_tv_alternative_titles(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.alternative_titles()\n[build/build]   | \n[build/build]   | tests/test_tv.py:66: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:108: in alternative_titles\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/alternative_titles?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ TVTestCase.test_tv_content_ratings ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_content_ratings>\n[build/build]   | \n[build/build]   |     def test_tv_content_ratings(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.content_ratings()\n[build/build]   | \n[build/build]   | tests/test_tv.py:72: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:125: in content_ratings\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/content_ratings?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_credits __________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_credits>\n[build/build]   | \n[build/build]   |     def test_tv_credits(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.credits()\n[build/build]   | \n[build/build]   | tests/test_tv.py:78: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:141: in credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ TVTestCase.test_tv_episode_groups _______________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_episode_groups>\n[build/build]   | \n[build/build]   |     def test_tv_episode_groups(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.episode_groups()\n[build/build]   | \n[build/build]   | tests/test_tv.py:84: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:158: in episode_groups\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/episode_groups?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ TVTestCase.test_tv_external_ids ________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_external_ids>\n[build/build]   | \n[build/build]   |     def test_tv_external_ids(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         imdb_id = TV_IMDB_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.external_ids()\n[build/build]   | \n[build/build]   | tests/test_tv.py:91: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:181: in external_ids\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/external_ids?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_images ___________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_images>\n[build/build]   | \n[build/build]   |     def test_tv_images(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.images()\n[build/build]   | \n[build/build]   | tests/test_tv.py:97: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:203: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________________ TVTestCase.test_tv_info ____________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_info>\n[build/build]   | \n[build/build]   |     def test_tv_info(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         name = TV_NAME\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.info()\n[build/build]   | \n[build/build]   | tests/test_tv.py:54: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:71: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________________ TVTestCase.test_tv_keywords __________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_keywords>\n[build/build]   | \n[build/build]   |     def test_tv_keywords(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.keywords()\n[build/build]   | \n[build/build]   | tests/test_tv.py:103: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:219: in keywords\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/keywords?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_latest ___________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_latest>\n[build/build]   | \n[build/build]   |     def test_tv_latest(self):\n[build/build]   |         tv = tmdb.TV()\n[build/build]   | >       tv.latest()\n[build/build]   | \n[build/build]   | tests/test_tv.py:162: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:404: in latest\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/latest?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________________ TVTestCase.test_tv_on_the_air _________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_on_the_air>\n[build/build]   | \n[build/build]   |     def test_tv_on_the_air(self):\n[build/build]   |         tv = tmdb.TV()\n[build/build]   | >       tv.on_the_air()\n[build/build]   | \n[build/build]   | tests/test_tv.py:172: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:446: in on_the_air\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/on_the_air?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_popular __________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_popular>\n[build/build]   | \n[build/build]   |     def test_tv_popular(self):\n[build/build]   |         tv = tmdb.TV()\n[build/build]   | >       tv.popular()\n[build/build]   | \n[build/build]   | tests/test_tv.py:177: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:464: in popular\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/popular?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ TVTestCase.test_tv_rating_and_rating_delete __________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_rating_and_rating_delete>\n[build/build]   | \n[build/build]   |     def test_tv_rating_and_rating_delete(self):\n[build/build]   |         status_code_create = SUCCESSFUL_CREATE\n[build/build]   |         status_code_update = SUCCESSFUL_UPDATE\n[build/build]   |         status_code_delete = SUCCESSFUL_DELETE\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.rating(session_id=SESSION_ID, value=RATING)\n[build/build]   | \n[build/build]   | tests/test_tv.py:154: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:362: in rating\n[build/build]   |     response = self._POST(path, kwargs, payload)\n[build/build]   | tmdbsimple/base.py:113: in _POST\n[build/build]   |     return self._request('POST', path, params=params, payload=payload)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/rating?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ TVTestCase.test_tv_recommendations ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_recommendations>\n[build/build]   | \n[build/build]   |     def test_tv_recommendations(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.recommendations()\n[build/build]   | \n[build/build]   | tests/test_tv.py:109: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:236: in recommendations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/recommendations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_reviews __________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_reviews>\n[build/build]   | \n[build/build]   |     def test_tv_reviews(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.reviews()\n[build/build]   | \n[build/build]   | tests/test_tv.py:115: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:253: in reviews\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/reviews?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ TVTestCase.test_tv_screened_theatrically ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_screened_theatrically>\n[build/build]   | \n[build/build]   |     def test_tv_screened_theatrically(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.screened_theatrically()\n[build/build]   | \n[build/build]   | tests/test_tv.py:121: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:270: in screened_theatrically\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/screened_theatrically?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_similar __________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_similar>\n[build/build]   | \n[build/build]   |     def test_tv_similar(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.similar()\n[build/build]   | \n[build/build]   | tests/test_tv.py:127: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:288: in similar\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/similar?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________________ TVTestCase.test_tv_top_rated _________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_top_rated>\n[build/build]   | \n[build/build]   |     def test_tv_top_rated(self):\n[build/build]   |         tv = tmdb.TV()\n[build/build]   | >       tv.top_rated()\n[build/build]   | \n[build/build]   | tests/test_tv.py:182: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:481: in top_rated\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/top_rated?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________________ TVTestCase.test_tv_translations ________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_translations>\n[build/build]   | \n[build/build]   |     def test_tv_translations(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.translations()\n[build/build]   | \n[build/build]   | tests/test_tv.py:133: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:304: in translations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/translations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________________ TVTestCase.test_tv_videos ___________________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_videos>\n[build/build]   | \n[build/build]   |     def test_tv_videos(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.videos()\n[build/build]   | \n[build/build]   | tests/test_tv.py:139: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:320: in videos\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/videos?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________________ TVTestCase.test_tv_watch_providers ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVTestCase testMethod=test_tv_watch_providers>\n[build/build]   | \n[build/build]   |     def test_tv_watch_providers(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv = tmdb.TV(id)\n[build/build]   | >       tv.watch_providers()\n[build/build]   | \n[build/build]   | tests/test_tv.py:145: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:336: in watch_providers\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/watch/providers?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ TVSeasonsTestCase.test_tv_seasons_account_states _______________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVSeasonsTestCase testMethod=test_tv_seasons_account_states>\n[build/build]   | \n[build/build]   |     def test_tv_seasons_account_states(self):\n[build/build]   |         series_id = TV_SEASON_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         tv_seasons = tmdb.TV_Seasons(series_id, season_number)\n[build/build]   | >       tv_seasons.account_states(session_id=SESSION_ID)\n[build/build]   | \n[build/build]   | tests/test_tv.py:199: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:542: in account_states\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/3572/season/1/account_states?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ TVSeasonsTestCase.test_tv_seasons_credits ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVSeasonsTestCase testMethod=test_tv_seasons_credits>\n[build/build]   | \n[build/build]   |     def test_tv_seasons_credits(self):\n[build/build]   |         series_id = TV_SEASON_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         tv_seasons = tmdb.TV_Seasons(series_id, season_number)\n[build/build]   | >       tv_seasons.credits()\n[build/build]   | \n[build/build]   | tests/test_tv.py:206: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:558: in credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/3572/season/1/credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ________________ TVSeasonsTestCase.test_tv_seasons_external_ids ________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVSeasonsTestCase testMethod=test_tv_seasons_external_ids>\n[build/build]   | \n[build/build]   |     def test_tv_seasons_external_ids(self):\n[build/build]   |         series_id = TV_SEASON_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         tvdb_id = TV_SEASON_TVDB_ID\n[build/build]   |         tv_seasons = tmdb.TV_Seasons(series_id, season_number)\n[build/build]   | >       tv_seasons.external_ids()\n[build/build]   | \n[build/build]   | tests/test_tv.py:214: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:579: in external_ids\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/3572/season/1/external_ids?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ TVSeasonsTestCase.test_tv_seasons_images ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVSeasonsTestCase testMethod=test_tv_seasons_images>\n[build/build]   | \n[build/build]   |     def test_tv_seasons_images(self):\n[build/build]   |         series_id = TV_SEASON_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         tv_seasons = tmdb.TV_Seasons(series_id, season_number)\n[build/build]   | >       tv_seasons.images()\n[build/build]   | \n[build/build]   | tests/test_tv.py:221: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:601: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/3572/season/1/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ TVSeasonsTestCase.test_tv_seasons_info ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVSeasonsTestCase testMethod=test_tv_seasons_info>\n[build/build]   | \n[build/build]   |     def test_tv_seasons_info(self):\n[build/build]   |         series_id = TV_SEASON_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         name = TV_SEASON_NAME\n[build/build]   |         tv_seasons = tmdb.TV_Seasons(series_id, season_number)\n[build/build]   | >       tv_seasons.info()\n[build/build]   | \n[build/build]   | tests/test_tv.py:192: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:524: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/3572/season/1?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ TVSeasonsTestCase.test_tv_seasons_videos ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVSeasonsTestCase testMethod=test_tv_seasons_videos>\n[build/build]   | \n[build/build]   |     def test_tv_seasons_videos(self):\n[build/build]   |         series_id = TV_SEASON_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         tv_seasons = tmdb.TV_Seasons(series_id, season_number)\n[build/build]   | >       tv_seasons.videos()\n[build/build]   | \n[build/build]   | tests/test_tv.py:228: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:617: in videos\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/3572/season/1/videos?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ______________ TVEpisodesTestCase.test_tv_episodes_account_states ______________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_account_states>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_account_states(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.account_states(session_id=SESSION_ID)\n[build/build]   | \n[build/build]   | tests/test_tv.py:247: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:681: in account_states\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/account_states?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _________________ TVEpisodesTestCase.test_tv_episodes_credits __________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_credits>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_credits(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.credits()\n[build/build]   | \n[build/build]   | tests/test_tv.py:255: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:697: in credits\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/credits?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ TVEpisodesTestCase.test_tv_episodes_external_ids _______________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_external_ids>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_external_ids(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         imdb_id = TV_EPISODE_IMDB_ID\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.external_ids()\n[build/build]   | \n[build/build]   | tests/test_tv.py:264: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:720: in external_ids\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/external_ids?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ TVEpisodesTestCase.test_tv_episodes_images __________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_images>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_images(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.images()\n[build/build]   | \n[build/build]   | tests/test_tv.py:272: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:742: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ___________________ TVEpisodesTestCase.test_tv_episodes_info ___________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_info>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_info(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         name = TV_EPISODE_NAME\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.info()\n[build/build]   | \n[build/build]   | tests/test_tv.py:239: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:663: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ TVEpisodesTestCase.test_tv_episodes_rating __________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_rating>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_rating(self):\n[build/build]   |         status_code_create = SUCCESSFUL_CREATE\n[build/build]   |         status_code_update = SUCCESSFUL_UPDATE\n[build/build]   |         status_code_delete = SUCCESSFUL_DELETE\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.rating(session_id=SESSION_ID, value=RATING)\n[build/build]   | \n[build/build]   | tests/test_tv.py:291: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:786: in rating\n[build/build]   |     response = self._POST(path, kwargs, payload)\n[build/build]   | tmdbsimple/base.py:113: in _POST\n[build/build]   |     return self._request('POST', path, params=params, payload=payload)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/rating?session_id=%3CYOUR+TMDB+SESSION_ID+HERE%3E&api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ TVEpisodesTestCase.test_tv_episodes_translations _______________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_translations>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_translations(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.translations()\n[build/build]   | \n[build/build]   | tests/test_tv.py:280: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:759: in translations\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/translations?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | __________________ TVEpisodesTestCase.test_tv_episodes_videos __________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodesTestCase testMethod=test_tv_episodes_videos>\n[build/build]   | \n[build/build]   |     def test_tv_episodes_videos(self):\n[build/build]   |         series_id = TV_ID\n[build/build]   |         season_number = TV_SEASON_NUMBER\n[build/build]   |         episode_number = TV_EPISODE_NUMBER\n[build/build]   |         tv_episode = tmdb.TV_Episodes(series_id, season_number, episode_number)\n[build/build]   | >       tv_episode.videos()\n[build/build]   | \n[build/build]   | tests/test_tv.py:302: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:827: in videos\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/season/1/episode/1/videos?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________ TVEpisodeGroupsTestCase.test_tv_episode_groups_info ______________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVEpisodeGroupsTestCase testMethod=test_tv_episode_groups_info>\n[build/build]   | \n[build/build]   |     def test_tv_episode_groups_info(self):\n[build/build]   |         tv_episode_group_id = TV_EPISODE_GROUP_ID\n[build/build]   |         tv_episode_group = tmdb.TV_Episode_Groups(tv_episode_group_id)\n[build/build]   | >       tv_episode_group.info()\n[build/build]   | \n[build/build]   | tests/test_tv.py:310: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:867: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/episode_group/5acf93e60e0a26346d0000ce?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ TVChangesTestCase.test_episode_changes ____________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVChangesTestCase testMethod=test_episode_changes>\n[build/build]   | \n[build/build]   |     def test_episode_changes(self):\n[build/build]   |         id = TV_EPISODE_ID\n[build/build]   |         tv_changes = tmdb.TV_Changes(id)\n[build/build]   | >       tv_changes.episode()\n[build/build]   | \n[build/build]   | tests/test_tv.py:330: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:962: in episode\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/episode/62085/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ TVChangesTestCase.test_season_changes _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVChangesTestCase testMethod=test_season_changes>\n[build/build]   | \n[build/build]   |     def test_season_changes(self):\n[build/build]   |         id = TV_SEASON_ID\n[build/build]   |         tv_changes = tmdb.TV_Changes(id)\n[build/build]   | >       tv_changes.season()\n[build/build]   | \n[build/build]   | tests/test_tv.py:324: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:939: in season\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/season/3572/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ TVChangesTestCase.test_series_changes _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.TVChangesTestCase testMethod=test_series_changes>\n[build/build]   | \n[build/build]   |     def test_series_changes(self):\n[build/build]   |         id = TV_ID\n[build/build]   |         tv_changes = tmdb.TV_Changes(id)\n[build/build]   | >       tv_changes.series()\n[build/build]   | \n[build/build]   | tests/test_tv.py:318: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:916: in series\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/tv/1396/changes?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _______________ NetworksTestCase.test_networks_alternative_names _______________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.NetworksTestCase testMethod=test_networks_alternative_names>\n[build/build]   | \n[build/build]   |     def test_networks_alternative_names(self):\n[build/build]   |         id = NETWORK_ID\n[build/build]   |         network = tmdb.Networks(id)\n[build/build]   | >       network.alternative_names()\n[build/build]   | \n[build/build]   | tests/test_tv.py:345: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:1012: in alternative_names\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/network/49/alternative_names?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | ____________________ NetworksTestCase.test_networks_images _____________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.NetworksTestCase testMethod=test_networks_images>\n[build/build]   | \n[build/build]   |     def test_networks_images(self):\n[build/build]   |         id = NETWORK_ID\n[build/build]   |         network = tmdb.Networks(id)\n[build/build]   | >       network.images()\n[build/build]   | \n[build/build]   | tests/test_tv.py:351: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:1038: in images\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/network/49/images?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | _____________________ NetworksTestCase.test_networks_info ______________________\n[build/build]   | \n[build/build]   | self = <tests.test_tv.NetworksTestCase testMethod=test_networks_info>\n[build/build]   | \n[build/build]   |     def test_networks_info(self):\n[build/build]   |         id = NETWORK_ID\n[build/build]   |         name = NETWORK_NAME\n[build/build]   |         network = tmdb.Networks(id)\n[build/build]   | >       network.info()\n[build/build]   | \n[build/build]   | tests/test_tv.py:339: \n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | tmdbsimple/tv.py:996: in info\n[build/build]   |     response = self._GET(path, kwargs)\n[build/build]   | tmdbsimple/base.py:110: in _GET\n[build/build]   |     return self._request('GET', path, params=params)\n[build/build]   | tmdbsimple/base.py:105: in _request\n[build/build]   |     response.raise_for_status()\n[build/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[build/build]   | \n[build/build]   | self = <Response [401]>\n[build/build]   | \n[build/build]   |     def raise_for_status(self):\n[build/build]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[build/build]   |     \n[build/build]   |         http_error_msg = ''\n[build/build]   |         if isinstance(self.reason, bytes):\n[build/build]   |             # We attempt to decode utf-8 first because some servers\n[build/build]   |             # choose to localize their reason strings. If the string\n[build/build]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[build/build]   |             # encodings. (See PR #3538)\n[build/build]   |             try:\n[build/build]   |                 reason = self.reason.decode('utf-8')\n[build/build]   |             except UnicodeDecodeError:\n[build/build]   |                 reason = self.reason.decode('iso-8859-1')\n[build/build]   |         else:\n[build/build]   |             reason = self.reason\n[build/build]   |     \n[build/build]   |         if 400 <= self.status_code < 500:\n[build/build]   |             http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         elif 500 <= self.status_code < 600:\n[build/build]   |             http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n[build/build]   |     \n[build/build]   |         if http_error_msg:\n[build/build]   | >           raise HTTPError(http_error_msg, response=self)\n[build/build]   | E           requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: https://api.themoviedb.org/3/network/49?api_key=%3CYOUR+TMDB+API_KEY+HERE%3E\n[build/build]   | \n[build/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/models.py:960: HTTPError\n[build/build]   | \n[build/build]   | ---------- coverage: platform linux, python 3.6.14-final-0 -----------\n[build/build]   | Name                          Stmts   Miss  Cover   Missing\n[build/build]   | -----------------------------------------------------------\n[build/build]   | tmdbsimple/__init__.py           24      0   100%\n[build/build]   | tmdbsimple/account.py           179    116    35%   57-59, 73-78, 92-97, 111-116, 130-141, 155-160, 174-179, 193-198, 212-217, 231-236, 250-261, 305-306, 322-323, 340-344, 369-373, 385-393, 410-411, 424-428, 441-445, 458-462, 500-501, 517-518, 542-544, 556-565, 577-586, 598-605, 617-622\n[build/build]   | tmdbsimple/base.py               63     10    84%   43, 68, 87, 106-107, 116, 128-131\n[build/build]   | tmdbsimple/changes.py            20      6    70%   50-51, 73-74, 96-97\n[build/build]   | tmdbsimple/configuration.py      53     18    66%   65-66, 81-82, 97-98, 113-114, 129-130, 145-146, 174-175, 190-191, 207-208\n[build/build]   | tmdbsimple/discover.py           25      4    84%   154-155, 253-254\n[build/build]   | tmdbsimple/find.py               25      4    84%   57-58, 104-105\n[build/build]   | tmdbsimple/genres.py             23      6    74%   47-48, 63-64, 87-88\n[build/build]   | tmdbsimple/movies.py            204     71    65%   74-75, 94-95, 110-111, 133-134, 149-150, 169-170, 193-194, 209-210, 226-227, 243-244, 268-269, 285-286, 305-306, 321-322, 337-338, 353-354, 380-381, 398-406, 422-423, 447-448, 467-468, 486-487, 511-512, 529-530, 563-564, 579-580, 595-596, 629-630, 644-645, 669-670, 687-688, 720-721, 741-742, 773-774\n[build/build]   | tmdbsimple/people.py             74     24    68%   60-61, 83-84, 99-100, 118-119, 134-135, 159-160, 175-176, 192-193, 208-209, 225-226, 242-243, 274-275\n[build/build]   | tmdbsimple/search.py             40     14    65%   49-50, 68-69, 86-87, 113-114, 137-138, 160-161, 183-184\n[build/build]   | tmdbsimple/tv.py                269     95    65%   72-73, 93-94, 109-110, 126-127, 142-143, 159-160, 182-183, 204-205, 220-221, 237-238, 254-255, 271-272, 289-290, 305-306, 321-322, 337, 363-364, 381-389, 405-406, 427-428, 447-448, 465-466, 482-483, 525-526, 543-544, 559-560, 580-581, 602-603, 618-619, 664-665, 682-683, 698-699, 721-722, 743-744, 760-761, 787-788, 805-813, 828-829, 868-869, 917-918, 940-941, 963-964, 997-998, 1013-1014, 1039-1040\n[build/build]   | -----------------------------------------------------------\n[build/build]   | TOTAL                           999    368    63%\n[build/build]   | Coverage XML written to file coverage.xml\n[build/build]   | \n[build/build]   | =========================== short test summary info ============================\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_favorite - reques...\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_favorite_movies\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_favorite_tv - req...\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_info - requests.e...\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_lists - requests....\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_rated_movies - re...\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_rated_tv - reques...\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_rated_tv_episodes\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_watchlist - reque...\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_watchlist_movies\n[build/build]   | FAILED tests/test_account.py::AccountTestCase::test_account_watchlist_tv - re...\n[build/build]   | FAILED tests/test_account.py::AuthenticationTestCase::test_authentication_guest_session_new\n[build/build]   | FAILED tests/test_account.py::AuthenticationTestCase::test_authentication_token_new\n[build/build]   | FAILED tests/test_account.py::GuestSessionsTestCase::test_guest_sessions_rated_movies\n[build/build]   | FAILED tests/test_account.py::GuestSessionsTestCase::test_guest_sessions_rated_tv\n[build/build]   | FAILED tests/test_account.py::GuestSessionsTestCase::test_guest_sessions_rated_tv_episodes\n[build/build]   | FAILED tests/test_account.py::ListsTestCase::test_lists_create_add_remove_clear_delete\n[build/build]   | FAILED tests/test_account.py::ListsTestCase::test_lists_info - requests.excep...\n[build/build]   | FAILED tests/test_account.py::ListsTestCase::test_lists_item_status - request...\n[build/build]   | FAILED tests/test_base.py::TMDBTestCase::test_tmdb_get_params_bool - requests...\n[build/build]   | FAILED tests/test_base.py::TMDBTestCase::test_tmdb_set_attrs_to_values_attribute_multiple_calls\n[build/build]   | FAILED tests/test_base.py::TMDBTestCase::test_tmdb_set_attrs_to_values_method_equals_attribute\n[build/build]   | FAILED tests/test_changes.py::ChangesTestCase::test_changes_movie - requests....\n[build/build]   | FAILED tests/test_changes.py::ChangesTestCase::test_changes_person - requests...\n[build/build]   | FAILED tests/test_changes.py::ChangesTestCase::test_changes_tv - requests.exc...\n[build/build]   | FAILED tests/test_configuration.py::ConfigurationTestCase::test_configuration_countries\n[build/build]   | FAILED tests/test_configuration.py::ConfigurationTestCase::test_configuration_info\n[build/build]   | FAILED tests/test_configuration.py::ConfigurationTestCase::test_configuration_jobs\n[build/build]   | FAILED tests/test_configuration.py::ConfigurationTestCase::test_configuration_languages\n[build/build]   | FAILED tests/test_configuration.py::ConfigurationTestCase::test_configuration_primary_translations\n[build/build]   | FAILED tests/test_configuration.py::ConfigurationTestCase::test_configuration_timezones\n[build/build]   | FAILED tests/test_configuration.py::CertificationsTestCase::test_certifications_list\n[build/build]   | FAILED tests/test_configuration.py::CertificationsTestCase::test_certifications_movie_list\n[build/build]   | FAILED tests/test_configuration.py::CertificationsTestCase::test_certifications_tv_list\n[build/build]   | FAILED tests/test_discover.py::DiscoverTestCase::test_discover_movie - reques...\n[build/build]   | FAILED tests/test_discover.py::DiscoverTestCase::test_discover_movie_dot_gte\n[build/build]   | FAILED tests/test_discover.py::DiscoverTestCase::test_discover_movie_underscore_gte\n[build/build]   | FAILED tests/test_discover.py::DiscoverTestCase::test_discover_movie_underscore_lte\n[build/build]   | FAILED tests/test_discover.py::DiscoverTestCase::test_discover_tv_underscore_gte\n[build/build]   | FAILED tests/test_discover.py::DiscoverTestCase::test_discover_tv_underscore_lte\n[build/build]   | FAILED tests/test_find.py::FindTestCase::test_find_info - requests.exceptions...\n[build/build]   | FAILED tests/test_find.py::TrendingTestCase::test_trending_info - requests.ex...\n[build/build]   | FAILED tests/test_genres.py::GenresTestCase::test_genres_movie_list - request...\n[build/build]   | FAILED tests/test_genres.py::GenresTestCase::test_genres_movies - requests.ex...\n[build/build]   | FAILED tests/test_genres.py::GenresTestCase::test_genres_tv_list - requests.e...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_account_states - req...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_alternative_titles\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_changes - requests.e...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_credits - requests.e...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_external_ids - reque...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_images - requests.ex...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_info - requests.exce...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_info_with_params - r...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_keywords - requests....\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_latest - requests.ex...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_lists - requests.exc...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_now_playing - reques...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_popular - requests.e...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_rating_and_rating_delete\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_recommendations - re...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_release_dates - requ...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_releases - requests....\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_reviews - requests.e...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_similar_movies - req...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_top_rated - requests...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_translations - reque...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_upcoming - requests....\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_videos - requests.ex...\n[build/build]   | FAILED tests/test_movies.py::MoviesTestCase::test_movies_watch_providers - re...\n[build/build]   | FAILED tests/test_movies.py::CollectionsTestCase::test_collections_images - r...\n[build/build]   | FAILED tests/test_movies.py::CollectionsTestCase::test_collections_info - req...\n[build/build]   | FAILED tests/test_movies.py::CollectionsTestCase::test_collections_translations\n[build/build]   | FAILED tests/test_movies.py::CompaniesTestCase::test_companies_alternative_names\n[build/build]   | FAILED tests/test_movies.py::CompaniesTestCase::test_companies_images - reque...\n[build/build]   | FAILED tests/test_movies.py::CompaniesTestCase::test_companies_info - request...\n[build/build]   | FAILED tests/test_movies.py::CompaniesTestCase::test_companies_movies - reque...\n[build/build]   | FAILED tests/test_movies.py::KeywordsTestCase::test_keywords_info - requests....\n[build/build]   | FAILED tests/test_movies.py::KeywordsTestCase::test_keywords_movies - request...\n[build/build]   | FAILED tests/test_movies.py::ReviewsTestCase::test_reviews_info - requests.ex...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_changes - requests.e...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_combined_credits - r...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_external_ids - reque...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_images - requests.ex...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_info - requests.exce...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_latest - requests.ex...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_movie_credits - requ...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_popular - requests.e...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_tagged_images - requ...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_translations - reque...\n[build/build]   | FAILED tests/test_people.py::PeopleTestCase::test_people_tv_credits - request...\n[build/build]   | FAILED tests/test_people.py::CreditsTestCase::test_credits_info - requests.ex...\n[build/build]   | FAILED tests/test_requests_session.py::RequestsSessionTestCase::test_requests_session\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_collection - request...\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_company - requests.e...\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_keyword - requests.e...\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_movie - requests.exc...\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_multi - requests.exc...\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_person - requests.ex...\n[build/build]   | FAILED tests/test_search.py::SearchTestCase::test_search_tv - requests.except...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_account_states - requests.except...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_airing_today - requests.exceptio...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_alternative_titles - requests.ex...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_content_ratings - requests.excep...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_credits - requests.exceptions.HT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_episode_groups - requests.except...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_external_ids - requests.exceptio...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_images - requests.exceptions.HTT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_info - requests.exceptions.HTTPE...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_keywords - requests.exceptions.H...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_latest - requests.exceptions.HTT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_on_the_air - requests.exceptions...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_popular - requests.exceptions.HT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_rating_and_rating_delete - reque...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_recommendations - requests.excep...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_reviews - requests.exceptions.HT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_screened_theatrically - requests...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_similar - requests.exceptions.HT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_top_rated - requests.exceptions....\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_translations - requests.exceptio...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_videos - requests.exceptions.HTT...\n[build/build]   | FAILED tests/test_tv.py::TVTestCase::test_tv_watch_providers - requests.excep...\n[build/build]   | FAILED tests/test_tv.py::TVSeasonsTestCase::test_tv_seasons_account_states - ...\n[build/build]   | FAILED tests/test_tv.py::TVSeasonsTestCase::test_tv_seasons_credits - request...\n[build/build]   | FAILED tests/test_tv.py::TVSeasonsTestCase::test_tv_seasons_external_ids - re...\n[build/build]   | FAILED tests/test_tv.py::TVSeasonsTestCase::test_tv_seasons_images - requests...\n[build/build]   | FAILED tests/test_tv.py::TVSeasonsTestCase::test_tv_seasons_info - requests.e...\n[build/build]   | FAILED tests/test_tv.py::TVSeasonsTestCase::test_tv_seasons_videos - requests...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_account_states\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_credits - reque...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_external_ids - ...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_images - reques...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_info - requests...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_rating - reques...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_translations - ...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodesTestCase::test_tv_episodes_videos - reques...\n[build/build]   | FAILED tests/test_tv.py::TVEpisodeGroupsTestCase::test_tv_episode_groups_info\n[build/build]   | FAILED tests/test_tv.py::TVChangesTestCase::test_episode_changes - requests.e...\n[build/build]   | FAILED tests/test_tv.py::TVChangesTestCase::test_season_changes - requests.ex...\n[build/build]   | FAILED tests/test_tv.py::TVChangesTestCase::test_series_changes - requests.ex...\n[build/build]   | FAILED tests/test_tv.py::NetworksTestCase::test_networks_alternative_names - ...\n[build/build]   | FAILED tests/test_tv.py::NetworksTestCase::test_networks_images - requests.ex...\n[build/build]   | FAILED tests/test_tv.py::NetworksTestCase::test_networks_info - requests.exce...\n[build/build]   | ============================= 142 failed in 44.00s =============================\n[build/build]   \u274c  Failure - Main Test with pytest\n[build/build] exitcode '1': failure\n[build/build] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'build' failed\n"
}