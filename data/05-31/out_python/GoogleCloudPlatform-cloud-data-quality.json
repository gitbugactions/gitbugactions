{
    "repository": "GoogleCloudPlatform/cloud-data-quality",
    "clone_url": "https://github.com/GoogleCloudPlatform/cloud-data-quality.git",
    "timestamp": "2023-05-29T16:25:25.106774Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[build-test/build] \ud83d\ude80  Start image=crawlergpt:latest\n[build-test/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[build-test/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build-test/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[build-test/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/de65f406-fe28-11ed-a890-af2cc187fc11/GoogleCloudPlatform-cloud-data-quality] user=0 workdir=\n[build-test/build]   \u2601  git clone 'https://github.com/actions/setup-go' # ref=v2\n[build-test/build]   \u2601  git clone 'https://github.com/egor-tensin/setup-gcc' # ref=v1\n[build-test/build] \u2b50 Run Pre Set up GCC\n[build-test/build]   \u2705  Success - Pre Set up GCC\n[build-test/build]   \u2601  git clone 'https://github.com/google-github-actions/setup-gcloud' # ref=v0\n[build-test/build] \ud83e\uddea  Matrix: map[os:ubuntu-latest]\n[build-test/build] \u2b50 Run Main actions/checkout@v2\n[build-test/build]   \u2705  Success - Main actions/checkout@v2\n[build-test/build] \u2b50 Run Main get git ref\n[build-test/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/vars.sh] user= workdir=\n[build-test/build]   \u2699  ::set-output:: branch=refs-tags-v1.0.7\n[build-test/build]   \u2699  ::set-output:: sha_short=fae420e\n[build-test/build]   \u2705  Success - Main get git ref\n[build-test/build] \u2b50 Run Main Set up Go\n[build-test/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-setup-go@v2/ dst=/var/run/act/actions/actions-setup-go@v2/\n[build-test/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-setup-go@v2/] user=0 workdir=\n[build-test/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-go@v2/dist/index.js] user= workdir=\n[build-test/build]   | Setup go stable version spec 1.16\n[build-test/build]   \ud83d\udcac  ::debug::isExplicit: \n[build-test/build]   \ud83d\udcac  ::debug::explicit? false\n[build-test/build]   \ud83d\udcac  ::debug::isExplicit: 1.14.15\n[build-test/build]   \ud83d\udcac  ::debug::explicit? true\n[build-test/build]   \ud83d\udcac  ::debug::isExplicit: 1.15.15\n[build-test/build]   \ud83d\udcac  ::debug::explicit? true\n[build-test/build]   \ud83d\udcac  ::debug::isExplicit: 1.16.7\n[build-test/build]   \ud83d\udcac  ::debug::explicit? true\n[build-test/build]   \ud83d\udcac  ::debug::evaluating 3 versions\n[build-test/build]   \ud83d\udcac  ::debug::matched: 1.16.7\n[build-test/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/go/1.16.7/x64\n[build-test/build]   \ud83d\udcac  ::debug::Found tool in cache go 1.16.7 x64\n[build-test/build]   | Found in cache @ /opt/hostedtoolcache/go/1.16.7/x64\n[build-test/build]   | Added go to the path\n[build-test/build]   \ud83d\udcac  ::debug::which go :/opt/hostedtoolcache/go/1.16.7/x64/bin/go:\n[build-test/build]   \ud83d\udcac  ::debug::go env GOPATH :/home/runneradmin/go:\n[build-test/build]   \ud83d\udcac  ::debug::creating /home/runneradmin/go\n[build-test/build]   \ud83d\udcac  ::debug::creating /home/runneradmin/go/bin\n[build-test/build]   \ud83d\udcac  ::debug::add bin true\n[build-test/build]   | Successfully setup go version 1.16\n[build-test/build]   \u2753 add-matcher /run/act/actions/actions-setup-go@v2/matchers.json\n[build-test/build]   | go version go1.16.7 linux/amd64\n[build-test/build]   | \n[build-test/build]   \u2753  ::group::go env\n[build-test/build]   | GO111MODULE=\"\"\n[build-test/build]   | GOARCH=\"amd64\"\n[build-test/build]   | GOBIN=\"\"\n[build-test/build]   | GOCACHE=\"/home/runneradmin/.cache/go-build\"\n[build-test/build]   | GOENV=\"/home/runneradmin/.config/go/env\"\n[build-test/build]   | GOEXE=\"\"\n[build-test/build]   | GOFLAGS=\"\"\n[build-test/build]   | GOHOSTARCH=\"amd64\"\n[build-test/build]   | GOHOSTOS=\"linux\"\n[build-test/build]   | GOINSECURE=\"\"\n[build-test/build]   | GOMODCACHE=\"/home/runneradmin/go/pkg/mod\"\n[build-test/build]   | GONOPROXY=\"\"\n[build-test/build]   | GONOSUMDB=\"\"\n[build-test/build]   | GOOS=\"linux\"\n[build-test/build]   | GOPATH=\"/home/runneradmin/go\"\n[build-test/build]   | GOPRIVATE=\"\"\n[build-test/build]   | GOPROXY=\"https://proxy.golang.org,direct\"\n[build-test/build]   | GOROOT=\"/opt/hostedtoolcache/go/1.16.7/x64\"\n[build-test/build]   | GOSUMDB=\"sum.golang.org\"\n[build-test/build]   | GOTMPDIR=\"\"\n[build-test/build]   | GOTOOLDIR=\"/opt/hostedtoolcache/go/1.16.7/x64/pkg/tool/linux_amd64\"\n[build-test/build]   | GOVCS=\"\"\n[build-test/build]   | GOVERSION=\"go1.16.7\"\n[build-test/build]   | GCCGO=\"gccgo\"\n[build-test/build]   | AR=\"ar\"\n[build-test/build]   | CC=\"gcc\"\n[build-test/build]   | CXX=\"g++\"\n[build-test/build]   | CGO_ENABLED=\"1\"\n[build-test/build]   | GOMOD=\"/dev/null\"\n[build-test/build]   | CGO_CFLAGS=\"-g -O2\"\n[build-test/build]   | CGO_CPPFLAGS=\"\"\n[build-test/build]   | CGO_CXXFLAGS=\"-g -O2\"\n[build-test/build]   | CGO_FFLAGS=\"-g -O2\"\n[build-test/build]   | CGO_LDFLAGS=\"-g -O2\"\n[build-test/build]   | PKG_CONFIG=\"pkg-config\"\n[build-test/build]   | GOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2814471633=/tmp/go-build -gno-record-gcc-switches\"\n[build-test/build]   | \n[build-test/build]   \u2753  ::endgroup::\n[build-test/build]   \u2705  Success - Main Set up Go\n[build-test/build]   \u2699  ::set-env:: GOROOT=/opt/hostedtoolcache/go/1.16.7/x64\n[build-test/build]   \u2699  ::add-path:: /opt/hostedtoolcache/go/1.16.7/x64/bin\n[build-test/build]   \u2699  ::add-path:: /home/runneradmin/go/bin\n[build-test/build] \u2b50 Run Main Set up GCC\n[build-test/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/egor-tensin-setup-gcc@v1/ dst=/var/run/act/actions/egor-tensin-setup-gcc@v1/\n[build-test/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/egor-tensin-setup-gcc@v1/] user=0 workdir=\n[build-test/build] \u2b50 Run Main New-Variable os -Value 'Linux' -Option Constant\n\nNew-Variable linux_host -Value ($os -eq 'Linux') -Option Constant\nNew-Variable cygwin_host -Value ('0' -eq '1') -Option Constant\nNew-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin_host) -Option Constant\n\nNew-Variable version -Value ('10') -Option Constant\nNew-Variable latest -Value ($version -eq 'latest') -Option Constant\nNew-Variable x64 -Value ('x64' -eq 'x64') -Option Constant\n\nfunction Locate-Choco {\n    $path = Get-Command 'choco' -ErrorAction SilentlyContinue\n    if ($path) {\n        $path.Path\n    } else {\n        Join-Path ${env:ProgramData} 'chocolatey' 'bin' 'choco'\n    }\n}\n\nfunction Enable-TestingPPA {\n    sudo add-apt-repository --yes --update ppa:ubuntu-toolchain-r/test\n}\n\nfunction Install-Package {\n    param(\n        [Parameter(Mandatory=$true, ValueFromRemainingArguments=$true)]\n        [string[]] $Packages\n    )\n\n    if ($script:linux_host) {\n        sudo apt-get update\n        sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends $Packages\n    } elseif ($script:cygwin_host) {\n        $choco = Locate-Choco\n        & $choco install $Packages -y --no-progress --source=cygwin\n    } elseif ($script:windows_host) {\n        $choco = Locate-Choco\n        & $choco upgrade $Packages -y --no-progress --allow-downgrade\n    } else {\n        throw \"Sorry, installing packages is unsupported on $script:os\"\n    }\n}\n\nif ($linux_host) {\n    $pkg = 'g++'\n    $gcc = 'gcc'\n    $gxx = 'g++'\n    if (!$latest) {\n        Enable-TestingPPA\n        $pkg += \"-$version\"\n        $gcc += \"-$version\"\n        $gxx += \"-$version\"\n    }\n    if (!$x64) {\n        $pkg += '-multilib'\n    }\n    Install-Package $pkg\n} elseif ($cygwin_host) {\n    if (!$x64) {\n        echo @'\n::warning ::\n32-bit-targeting GCC is unstable and/or unmaintained on 64-bit Cygwin.\nPlease use 32-bit Cygwin instead.\nIf you _are_ using 32-bit Cygwin, you can ignore this message.\n'@\n    }\n\n    $pkg = 'gcc-g++'\n    $gcc = 'gcc'\n    $gxx = 'g++'\n\n    Install-Package $pkg\n} elseif ($windows_host) {\n    # TODO: use setup-mingw when calling composite actions within\n    # composite actions is implemented.\n    echo @'\n::error ::\nPlease use the egor-tensin/setup-mingw action to install GCC on Windows.\n'@\n    exit 1\n} else {\n    throw \"Sorry, installing GCC is unsupported on $os\"\n}\n\necho \"gcc=$gcc\" >> $env:GITHUB_OUTPUT\necho \"gxx=$gxx\" >> $env:GITHUB_OUTPUT\n[build-test/build]   \ud83d\udc33  docker exec cmd=[pwsh -command . /var/run/act/workflow/3-composite-install.ps1] user= workdir=\n[build-test/build]   | Get:1 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease [3622 B]\n[build-test/build]   | Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease\n[build-test/build]   | Get:3 https://dl.hhvm.com/ubuntu focal InRelease [3137 B]\n[build-test/build]   | Get:4 http://dl.google.com/linux/chrome/deb stable InRelease [1825 B]\n[build-test/build]   | Get:5 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]\n[build-test/build]   | Hit:6 http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu focal InRelease\n[build-test/build]   | Get:7 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]\n[build-test/build]   | Get:8 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease [3611 B]\n[build-test/build]   | Get:9 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]\n[build-test/build]   | Get:10 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ Packages [77.6 kB]\n[build-test/build]   | Hit:11 https://adoptopenjdk.jfrog.io/adoptopenjdk/deb focal InRelease\n[build-test/build]   | Get:12 https://dl.hhvm.com/ubuntu focal/main amd64 Packages [1880 B]\n[build-test/build]   | Err:4 http://dl.google.com/linux/chrome/deb stable InRelease\n[build-test/build]   |   The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[build-test/build]   | Get:13 https://packages.microsoft.com/ubuntu/20.04/prod focal/main amd64 Packages [201 kB]\n[build-test/build]   | Get:14 https://packages.microsoft.com/ubuntu/20.04/prod focal/main all Packages [2521 B]\n[build-test/build]   | Get:15 http://security.ubuntu.com/ubuntu focal-security/restricted i386 Packages [36.9 kB]\n[build-test/build]   | Get:16 http://security.ubuntu.com/ubuntu focal-security/main i386 Packages [739 kB]\n[build-test/build]   | Get:17 http://security.ubuntu.com/ubuntu focal-security/restricted amd64 Packages [2270 kB]\n[build-test/build]   | Get:18 http://security.ubuntu.com/ubuntu focal-security/multiverse amd64 Packages [28.5 kB]\n[build-test/build]   | Get:19 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages [1052 kB]\n[build-test/build]   | Get:20 http://security.ubuntu.com/ubuntu focal-security/universe i386 Packages [739 kB]\n[build-test/build]   | Get:21 http://security.ubuntu.com/ubuntu focal-security/main amd64 Packages [2726 kB]\n[build-test/build]   | Get:22 http://security.ubuntu.com/ubuntu focal-security/multiverse i386 Packages [8141 B]\n[build-test/build]   | Get:23 http://archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1346 kB]\n[build-test/build]   | Get:24 http://archive.ubuntu.com/ubuntu focal-updates/restricted amd64 Packages [2412 kB]\n[build-test/build]   | Get:25 http://archive.ubuntu.com/ubuntu focal-updates/multiverse amd64 Packages [31.2 kB]\n[build-test/build]   | Get:26 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [3204 kB]\n[build-test/build]   | Get:27 http://archive.ubuntu.com/ubuntu focal-backports/main amd64 Packages [55.2 kB]\n[build-test/build]   | Get:28 http://archive.ubuntu.com/ubuntu focal-backports/universe amd64 Packages [28.6 kB]\n[build-test/build]   | Fetched 15.3 MB in 3s (4492 kB/s)\n[build-test/build]   | Reading package lists...\n[build-test/build]   | W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://dl.google.com/linux/chrome/deb stable InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[build-test/build]   | W: Failed to fetch http://dl.google.com/linux/chrome/deb/dists/stable/InRelease  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[build-test/build]   | W: Some index files failed to download. They have been ignored, or old ones used instead.\n[build-test/build]   | Hit:1 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease\n[build-test/build]   | Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease\n[build-test/build]   | Hit:3 http://security.ubuntu.com/ubuntu focal-security InRelease\n[build-test/build]   | Hit:4 https://dl.hhvm.com/ubuntu focal InRelease\n[build-test/build]   | Hit:5 http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu focal InRelease\n[build-test/build]   | Hit:6 http://archive.ubuntu.com/ubuntu focal-updates InRelease\n[build-test/build]   | Hit:7 http://archive.ubuntu.com/ubuntu focal-backports InRelease\n[build-test/build]   | Hit:8 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease\n[build-test/build]   | Get:9 http://dl.google.com/linux/chrome/deb stable InRelease [1825 B]\n[build-test/build]   | Hit:10 https://adoptopenjdk.jfrog.io/adoptopenjdk/deb focal InRelease\n[build-test/build]   | Err:9 http://dl.google.com/linux/chrome/deb stable InRelease\n[build-test/build]   |   The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[build-test/build]   | Reading package lists...\n[build-test/build]   | W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://dl.google.com/linux/chrome/deb stable InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[build-test/build]   | W: Failed to fetch http://dl.google.com/linux/chrome/deb/dists/stable/InRelease  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[build-test/build]   | W: Some index files failed to download. They have been ignored, or old ones used instead.\n[build-test/build]   | Reading package lists...\n[build-test/build]   | Building dependency tree...\n[build-test/build]   | Reading state information...\n[build-test/build]   | g++-10 is already the newest version (10.3.0-1ubuntu1~20.04).\n[build-test/build]   | 0 upgraded, 0 newly installed, 0 to remove and 388 not upgraded.\n[build-test/build]   \u2705  Success - Main New-Variable os -Value 'Linux' -Option Constant\n\nNew-Variable linux_host -Value ($os -eq 'Linux') -Option Constant\nNew-Variable cygwin_host -Value ('0' -eq '1') -Option Constant\nNew-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin_host) -Option Constant\n\nNew-Variable version -Value ('10') -Option Constant\nNew-Variable latest -Value ($version -eq 'latest') -Option Constant\nNew-Variable x64 -Value ('x64' -eq 'x64') -Option Constant\n\nfunction Locate-Choco {\n    $path = Get-Command 'choco' -ErrorAction SilentlyContinue\n    if ($path) {\n        $path.Path\n    } else {\n        Join-Path ${env:ProgramData} 'chocolatey' 'bin' 'choco'\n    }\n}\n\nfunction Enable-TestingPPA {\n    sudo add-apt-repository --yes --update ppa:ubuntu-toolchain-r/test\n}\n\nfunction Install-Package {\n    param(\n        [Parameter(Mandatory=$true, ValueFromRemainingArguments=$true)]\n        [string[]] $Packages\n    )\n\n    if ($script:linux_host) {\n        sudo apt-get update\n        sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends $Packages\n    } elseif ($script:cygwin_host) {\n        $choco = Locate-Choco\n        & $choco install $Packages -y --no-progress --source=cygwin\n    } elseif ($script:windows_host) {\n        $choco = Locate-Choco\n        & $choco upgrade $Packages -y --no-progress --allow-downgrade\n    } else {\n        throw \"Sorry, installing packages is unsupported on $script:os\"\n    }\n}\n\nif ($linux_host) {\n    $pkg = 'g++'\n    $gcc = 'gcc'\n    $gxx = 'g++'\n    if (!$latest) {\n        Enable-TestingPPA\n        $pkg += \"-$version\"\n        $gcc += \"-$version\"\n        $gxx += \"-$version\"\n    }\n    if (!$x64) {\n        $pkg += '-multilib'\n    }\n    Install-Package $pkg\n} elseif ($cygwin_host) {\n    if (!$x64) {\n        echo @'\n::warning ::\n32-bit-targeting GCC is unstable and/or unmaintained on 64-bit Cygwin.\nPlease use 32-bit Cygwin instead.\nIf you _are_ using 32-bit Cygwin, you can ignore this message.\n'@\n    }\n\n    $pkg = 'gcc-g++'\n    $gcc = 'gcc'\n    $gxx = 'g++'\n\n    Install-Package $pkg\n} elseif ($windows_host) {\n    # TODO: use setup-mingw when calling composite actions within\n    # composite actions is implemented.\n    echo @'\n::error ::\nPlease use the egor-tensin/setup-mingw action to install GCC on Windows.\n'@\n    exit 1\n} else {\n    throw \"Sorry, installing GCC is unsupported on $os\"\n}\n\necho \"gcc=$gcc\" >> $env:GITHUB_OUTPUT\necho \"gxx=$gxx\" >> $env:GITHUB_OUTPUT\n[build-test/build]   \u2699  ::set-output:: gcc=gcc-10\n[build-test/build]   \u2699  ::set-output:: gxx=g++-10\n[build-test/build] \u2b50 Run Main New-Variable os -Value 'Linux' -Option Constant\n\nNew-Variable linux_host -Value ($os -eq 'Linux') -Option Constant\nNew-Variable cygwin_host -Value ('0' -eq '1') -Option Constant\nNew-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin_host) -Option Constant\n\nNew-Variable cc -Value ('1' -eq '1') -Option Constant\n\nNew-Variable gcc -Value 'gcc-10' -Option Constant\nNew-Variable gxx -Value 'g++-10' -Option Constant\n\nfunction Link-Exe {\n    param(\n        [Parameter(Mandatory=$true)]\n        [string] $Exe,\n        [Parameter(Mandatory=$true)]\n        [string] $LinkName\n    )\n\n    $exe_path = (Get-Command $Exe).Path\n    $link_dir = if ($script:windows_host) { Split-Path $exe_path } else { '/usr/local/bin' }\n    $link_name = if ($script:windows_host) { \"$LinkName.exe\" } else { $LinkName }\n    $link_path = if ($script:cygwin_host) { \"$link_dir/$link_name\" } else { Join-Path $link_dir $link_name }\n    echo \"Creating link $link_path -> $exe_path\"\n    if ($script:linux_host) {\n        sudo ln -f -s $exe_path $link_path\n    } elseif ($script:cygwin_host) {\n        ln.exe -f -s $exe_path $link_path\n    } elseif ($script:windows_host) {\n        New-Item -ItemType HardLink -Path $link_path -Value $exe_path -Force | Out-Null\n    }\n}\n\nif ($cc) {\n    Link-Exe $gcc cc\n    if ($gcc -ne 'gcc') {\n        Link-Exe $gcc 'gcc'\n    }\n    Link-Exe $gxx c++\n    if ($gxx -ne 'g++') {\n        Link-Exe $gxx 'g++'\n    }\n}\n[build-test/build]   \ud83d\udc33  docker exec cmd=[pwsh -command . /var/run/act/workflow/3-composite-1.ps1] user= workdir=\n[build-test/build]   | Creating link /usr/local/bin/cc -> /usr/bin/gcc-10\n[build-test/build]   | Creating link /usr/local/bin/gcc -> /usr/bin/gcc-10\n[build-test/build]   | Creating link /usr/local/bin/c++ -> /usr/bin/g++-10\n[build-test/build]   | Creating link /usr/local/bin/g++ -> /usr/bin/g++-10\n[build-test/build]   \u2705  Success - Main New-Variable os -Value 'Linux' -Option Constant\n\nNew-Variable linux_host -Value ($os -eq 'Linux') -Option Constant\nNew-Variable cygwin_host -Value ('0' -eq '1') -Option Constant\nNew-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin_host) -Option Constant\n\nNew-Variable cc -Value ('1' -eq '1') -Option Constant\n\nNew-Variable gcc -Value 'gcc-10' -Option Constant\nNew-Variable gxx -Value 'g++-10' -Option Constant\n\nfunction Link-Exe {\n    param(\n        [Parameter(Mandatory=$true)]\n        [string] $Exe,\n        [Parameter(Mandatory=$true)]\n        [string] $LinkName\n    )\n\n    $exe_path = (Get-Command $Exe).Path\n    $link_dir = if ($script:windows_host) { Split-Path $exe_path } else { '/usr/local/bin' }\n    $link_name = if ($script:windows_host) { \"$LinkName.exe\" } else { $LinkName }\n    $link_path = if ($script:cygwin_host) { \"$link_dir/$link_name\" } else { Join-Path $link_dir $link_name }\n    echo \"Creating link $link_path -> $exe_path\"\n    if ($script:linux_host) {\n        sudo ln -f -s $exe_path $link_path\n    } elseif ($script:cygwin_host) {\n        ln.exe -f -s $exe_path $link_path\n    } elseif ($script:windows_host) {\n        New-Item -ItemType HardLink -Path $link_path -Value $exe_path -Force | Out-Null\n    }\n}\n\nif ($cc) {\n    Link-Exe $gcc cc\n    if ($gcc -ne 'gcc') {\n        Link-Exe $gcc 'gcc'\n    }\n    Link-Exe $gxx c++\n    if ($gxx -ne 'g++') {\n        Link-Exe $gxx 'g++'\n    }\n}\n[build-test/build] \u2b50 Run Main New-Variable cygwin_host -Value ('0' -eq '1') -Option Constant\nNew-Variable hardlinks -Value ('0' -eq '1') -Option Constant\n\nif ($cygwin_host -and $hardlinks) {\n    echo @'\nwhile IFS= read -d '' -r link_path; do\n    dest_path=\"$( readlink --canonicalize-existing -- \"$link_path\" )\"\n    dest_ext=\".${dest_path##*.}\"\n    [ \"$dest_ext\" == \".$dest_path\" ] && dest_ext=\n    link_ext=\".${link_path##*.}\"\n    [ \"$link_ext\" == \".$link_path\" ] && link_ext=\n    echo \"Removing symlink $link_path\" && rm -f -- \"$link_path\"\n    [ \"$link_ext\" != \"$dest_ext\" ] && echo \"${PATHEXT//\\;/\n}\" | grep -q --ignore-case --line-regexp -F -- \"$dest_ext\" && link_path=\"$link_path$dest_ext\"\n    echo \"Creating hardlink $link_path -> $dest_path\" && ln -- \"$dest_path\" \"$link_path\"\ndone < <( find /usr/local/bin /usr/bin \\\n               -type l '-(' \\\n               -path /usr/local/bin/cc -o \\\n               -path /usr/local/bin/c++ \\\n               '-)' -print0 )\n'@ | & bash.exe --login -o errexit -o nounset -o pipefail -o igncr\n}\n[build-test/build]   \ud83d\udc33  docker exec cmd=[pwsh -command . /var/run/act/workflow/3-composite-2.ps1] user= workdir=\n[build-test/build]   \u2705  Success - Main New-Variable cygwin_host -Value ('0' -eq '1') -Option Constant\nNew-Variable hardlinks -Value ('0' -eq '1') -Option Constant\n\nif ($cygwin_host -and $hardlinks) {\n    echo @'\nwhile IFS= read -d '' -r link_path; do\n    dest_path=\"$( readlink --canonicalize-existing -- \"$link_path\" )\"\n    dest_ext=\".${dest_path##*.}\"\n    [ \"$dest_ext\" == \".$dest_path\" ] && dest_ext=\n    link_ext=\".${link_path##*.}\"\n    [ \"$link_ext\" == \".$link_path\" ] && link_ext=\n    echo \"Removing symlink $link_path\" && rm -f -- \"$link_path\"\n    [ \"$link_ext\" != \"$dest_ext\" ] && echo \"${PATHEXT//\\;/\n}\" | grep -q --ignore-case --line-regexp -F -- \"$dest_ext\" && link_path=\"$link_path$dest_ext\"\n    echo \"Creating hardlink $link_path -> $dest_path\" && ln -- \"$dest_path\" \"$link_path\"\ndone < <( find /usr/local/bin /usr/bin \\\n               -type l '-(' \\\n               -path /usr/local/bin/cc -o \\\n               -path /usr/local/bin/c++ \\\n               '-)' -print0 )\n'@ | & bash.exe --login -o errexit -o nounset -o pipefail -o igncr\n}\n[build-test/build]   \u2699  ::set-output:: gxx=g++-10\n[build-test/build]   \u2699  ::set-output:: gcc=gcc-10\n[build-test/build]   \u2705  Success - Main Set up GCC\n[build-test/build] \u2b50 Run Main Set up Google Cloud SDK\n[build-test/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/google-github-actions-setup-gcloud@v0/ dst=/var/run/act/actions/google-github-actions-setup-gcloud@v0/\n[build-test/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/google-github-actions-setup-gcloud@v0/] user=0 workdir=\n[build-test/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/google-github-actions-setup-gcloud@v0/dist/main/index.js] user= workdir=\n[build-test/build]   \ud83d\udcac  ::debug::isExplicit: 432.0.0\n[build-test/build]   \ud83d\udcac  ::debug::explicit? true\n[build-test/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/gcloud/432.0.0/x64\n[build-test/build]   \ud83d\udcac  ::debug::not found\n[build-test/build]   \ud83d\udcac  ::debug::Downloading https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-432.0.0-linux-x86_64.tar.gz\n[build-test/build]   \ud83d\udcac  ::debug::Destination /tmp/66fd3dc0-4854-4a5f-a7ab-09660384ec03\n[build-test/build]   \ud83d\udcac  ::debug::download complete\n[build-test/build]   \ud83d\udcac  ::debug::Checking tar --version\n[build-test/build]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[build-test/build]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /tmp/5c9073ae-fac3-487a-83ec-21fe0e7e504c -f /tmp/66fd3dc0-4854-4a5f-a7ab-09660384ec03\n[build-test/build]   \ud83d\udcac  ::debug::Caching tool gcloud 432.0.0 x64\n[build-test/build]   \ud83d\udcac  ::debug::source dir: /tmp/5c9073ae-fac3-487a-83ec-21fe0e7e504c/google-cloud-sdk\n[build-test/build]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/gcloud/432.0.0/x64\n[build-test/build]   \ud83d\udcac  ::debug::finished caching tool\n[build-test/build]   | No credentials detected, skipping authentication\n[build-test/build]   \u2757  ::error::google-github-actions/setup-gcloud failed with: no credentials provided to export\n[build-test/build]   \u274c  Failure - Main Set up Google Cloud SDK\n[build-test/build]   \u2699  ::set-env:: CLOUDSDK_METRICS_ENVIRONMENT=github-actions-setup-gcloud\n[build-test/build]   \u2699  ::add-path:: /opt/hostedtoolcache/gcloud/432.0.0/x64/bin\n[build-test/build] exitcode '1': failure\n[build-test/build] \u2b50 Run Post Set up Google Cloud SDK\n[build-test/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/google-github-actions-setup-gcloud@v0/dist/post/index.js] user= workdir=\n[build-test/build]   | No exported credentials were found at \"\".\n[build-test/build]   \u2705  Success - Post Set up Google Cloud SDK\n[build-test/build] \u2b50 Run Post Set up GCC\n[build-test/build]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/egor-tensin-setup-gcc@v1/ dst=/var/run/act/actions/egor-tensin-setup-gcc@v1/\n[build-test/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/egor-tensin-setup-gcc@v1/] user=0 workdir=\n[build-test/build]   \u2705  Success - Post Set up GCC\n[build-test/build] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'build' failed\n"
}