{
    "repository": "ryboe/q",
    "clone_url": "https://github.com/ryboe/q.git",
    "timestamp": "2023-05-30T11:32:57.529307Z",
    "clone_success": true,
    "number of actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_stdout": "[PR/GolangCI Lint                                ] \ud83d\ude80  Start image=golangci/golangci-lint:v1.50-alpine\n[PR/Run unit tests with the race detector enabled] \ud83d\ude80  Start image=golang:1.20-alpine\n[PR/GolangCI Lint                                ]   \ud83d\udc33  docker pull image=golangci/golangci-lint:v1.50-alpine platform= username= forcePull=false\n[PR/Run unit tests with the race detector enabled]   \ud83d\udc33  docker pull image=golang:1.20-alpine platform= username= forcePull=false\n[PR/Run unit tests with the race detector enabled]   \ud83d\udc33  docker create image=golang:1.20-alpine platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[PR/GolangCI Lint                                ]   \ud83d\udc33  docker create image=golangci/golangci-lint:v1.50-alpine platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[PR/Run unit tests with the race detector enabled]   \ud83d\udc33  docker run image=golang:1.20-alpine platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[PR/GolangCI Lint                                ]   \ud83d\udc33  docker run image=golangci/golangci-lint:v1.50-alpine platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[PR/Run unit tests with the race detector enabled] \u2b50 Run Main Checkout repository\n[PR/GolangCI Lint                                ] \u2b50 Run Main Checkout repository\n[PR/Run unit tests with the race detector enabled]   \u2705  Success - Main Checkout repository\n[PR/GolangCI Lint                                ]   \u2705  Success - Main Checkout repository\n[PR/Run unit tests with the race detector enabled] \u2b50 Run Main Install GCC and C libraries required by the race detector\n[PR/GolangCI Lint                                ] \u2b50 Run Main Run linter\n[PR/Run unit tests with the race detector enabled]   \ud83d\udc33  docker exec cmd=[sh -e /var/run/act/workflow/1.sh] user= workdir=\n[PR/GolangCI Lint                                ]   \ud83d\udc33  docker exec cmd=[sh -e /var/run/act/workflow/1.sh] user= workdir=\n[PR/Run unit tests with the race detector enabled]   | fetch https://dl-cdn.alpinelinux.org/alpine/v3.18/main/x86_64/APKINDEX.tar.gz\n[PR/Run unit tests with the race detector enabled]   | fetch https://dl-cdn.alpinelinux.org/alpine/v3.18/community/x86_64/APKINDEX.tar.gz\n[PR/Run unit tests with the race detector enabled]   | (1/12) Installing libgcc (12.2.1_git20220924-r10)\n[PR/Run unit tests with the race detector enabled]   | (2/12) Installing libstdc++ (12.2.1_git20220924-r10)\n[PR/Run unit tests with the race detector enabled]   | (3/12) Installing zstd-libs (1.5.5-r4)\n[PR/Run unit tests with the race detector enabled]   | (4/12) Installing binutils (2.40-r7)\n[PR/Run unit tests with the race detector enabled]   | (5/12) Installing libgomp (12.2.1_git20220924-r10)\n[PR/Run unit tests with the race detector enabled]   | (6/12) Installing libatomic (12.2.1_git20220924-r10)\n[PR/Run unit tests with the race detector enabled]   | (7/12) Installing gmp (6.2.1-r3)\n[PR/Run unit tests with the race detector enabled]   | (8/12) Installing isl26 (0.26-r1)\n[PR/Run unit tests with the race detector enabled]   | (9/12) Installing mpfr4 (4.2.0-r3)\n[PR/Run unit tests with the race detector enabled]   | (10/12) Installing mpc1 (1.3.1-r1)\n[PR/Run unit tests with the race detector enabled]   | (11/12) Installing gcc (12.2.1_git20220924-r10)\n[PR/Run unit tests with the race detector enabled]   | (12/12) Installing musl-dev (1.2.4-r0)\n[PR/Run unit tests with the race detector enabled]   | Executing busybox-1.36.0-r9.trigger\n[PR/Run unit tests with the race detector enabled]   | OK: 151 MiB in 28 packages\n[PR/Run unit tests with the race detector enabled]   \u2705  Success - Main Install GCC and C libraries required by the race detector\n[PR/GolangCI Lint                                ]   | level=warning msg=\"[linters_context] rowserrcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649.\"\n[PR/GolangCI Lint                                ]   | level=warning msg=\"[linters_context] sqlclosecheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649.\"\n[PR/GolangCI Lint                                ]   | level=warning msg=\"[linters_context] wastedassign is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649.\"\n[PR/GolangCI Lint                                ]   \u2705  Success - Main Run linter\n[PR/Run unit tests with the race detector enabled] \u2b50 Run Main Run unit tests\n[PR/GolangCI Lint                                ] \ud83c\udfc1  Job succeeded\n[PR/Run unit tests with the race detector enabled]   \ud83d\udc33  docker exec cmd=[sh -e /var/run/act/workflow/2.sh] user= workdir=\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.Ident)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.Ident)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#01\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.Ident)#01\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#02\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.Ident)#02\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#03\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.Ident)#03\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.BinaryExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.BinaryExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.BinaryExpr)#01\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.BinaryExpr)#01\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.BinaryExpr)#02\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.BinaryExpr)#02\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.CallExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.CallExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.IndexExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.IndexExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.KeyValueExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.KeyValueExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.ParenExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.ParenExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.SelectorExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.SelectorExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.SliceExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.SliceExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.TypeAssertExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.TypeAssertExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.UnaryExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.UnaryExpr)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#04\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestExtractingArgsFromSourceText/argName(*ast.Ident)#04\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestExtractingArgsFromSourceText (0.01s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.Ident) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.Ident) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#01 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.Ident)#01 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#02 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.Ident)#02 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#03 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.Ident)#03 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.BinaryExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.BinaryExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.BinaryExpr)#01 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.BinaryExpr)#01 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.BinaryExpr)#02 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.BinaryExpr)#02 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.CallExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.CallExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.IndexExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.IndexExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.KeyValueExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.KeyValueExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.ParenExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.ParenExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.SelectorExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.SelectorExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.SliceExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.SliceExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.TypeAssertExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.TypeAssertExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.UnaryExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.UnaryExpr) (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/exprToString(*ast.Ident)#04 (0.00s)\n[PR/Run unit tests with the race detector enabled]   |     --- PASS: TestExtractingArgsFromSourceText/argName(*ast.Ident)#04 (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestArgNames\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestArgNames (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestArgNamesBadFilename\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestArgNamesBadFilename (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestArgWidth\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestArgWidth (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestFormatArgs\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestFormatArgs (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestPrependArgName\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestPrependArgName (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestIsQCall\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestIsQCall (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestHeader\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestHeader (0.00s)\n[PR/Run unit tests with the race detector enabled]   | === RUN   TestOutput\n[PR/Run unit tests with the race detector enabled]   | --- PASS: TestOutput (0.00s)\n[PR/Run unit tests with the race detector enabled]   | PASS\n[PR/Run unit tests with the race detector enabled]   | ok  \tgithub.com/ryboe/q\t0.047s\n[PR/Run unit tests with the race detector enabled]   \u2705  Success - Main Run unit tests\n[PR/Run unit tests with the race detector enabled] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": ""
}