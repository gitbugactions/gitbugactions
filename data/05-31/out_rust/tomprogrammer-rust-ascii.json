{
    "repository": "tomprogrammer/rust-ascii",
    "clone_url": "https://github.com/tomprogrammer/rust-ascii.git",
    "timestamp": "2023-05-30T08:33:40.039850Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[CI/Test minimal dependency version with Rust nightly] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Run tests under `miri` to check for UB           ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test with Rust 1.56.1                            ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Lint with Clippy                                 ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test minimal dependency version with Rust nightly]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test minimal dependency version with Rust nightly]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test minimal dependency version with Rust nightly]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tomprogrammer-rust-ascii] user=0 workdir=\n[CI/Test minimal dependency version with Rust nightly]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tomprogrammer-rust-ascii] user=0 workdir=\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tomprogrammer-rust-ascii] user=0 workdir=\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/tomprogrammer-rust-ascii] user=0 workdir=\n[CI/Test minimal dependency version with Rust nightly]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Lint with Clippy                                 ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Run tests under `miri` to check for UB           ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[CI/Test with Rust 1.56.1                            ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Test minimal dependency version with Rust nightly] \u2b50 Run Main actions/checkout@v2\n[CI/Test with Rust 1.56.1                            ] \ud83e\uddea  Matrix: map[rust:1.56.1]\n[CI/Lint with Clippy                                 ] \u2b50 Run Main actions/checkout@v2\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[CI/Test with Rust 1.56.1                            ] \u2b50 Run Main actions/checkout@v2\n[CI/Lint with Clippy                                 ]   \u2705  Success - Main actions/checkout@v2\n[CI/Test minimal dependency version with Rust nightly]   \u2705  Success - Main actions/checkout@v2\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[CI/Test with Rust 1.56.1                            ]   \u2705  Success - Main actions/checkout@v2\n[CI/Test minimal dependency version with Rust nightly] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Lint with Clippy                                 ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test with Rust 1.56.1                            ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main actions/checkout@v3\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Main actions/checkout@v3\n[CI/Test minimal dependency version with Rust nightly]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[CI/Lint with Clippy                                 ]   | (node:33) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Lint with Clippy                                 ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Lint with Clippy                                 ]   |     at Generator.next (<anonymous>)\n[CI/Lint with Clippy                                 ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Lint with Clippy                                 ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Lint with Clippy                                 ]   | (node:33) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Lint with Clippy                                 ]   | (node:33) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Test with Rust 1.56.1                            ]   | (node:32) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Test with Rust 1.56.1                            ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Test with Rust 1.56.1                            ]   |     at Generator.next (<anonymous>)\n[CI/Test with Rust 1.56.1                            ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Test with Rust 1.56.1                            ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Test with Rust 1.56.1                            ]   | (node:32) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Test with Rust 1.56.1                            ]   | (node:32) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Lint with Clippy                                 ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Test with Rust 1.56.1                            ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Test with Rust 1.56.1                            ] \u2b50 Run Main cargo test --verbose --all-features\n[CI/Lint with Clippy                                 ] \u2b50 Run Main cargo clippy --all-targets --verbose --no-default-features\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: toolchain=nightly\n[CI/Test with Rust 1.56.1                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/Lint with Clippy                                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/Test with Rust 1.56.1                            ]   | /var/run/act/workflow/2: line 2: cargo: command not found\n[CI/Test with Rust 1.56.1                            ]   \u274c  Failure - Main cargo test --verbose --all-features\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[CI/Lint with Clippy                                 ]   | /var/run/act/workflow/2: line 2: cargo: command not found\n[CI/Lint with Clippy                                 ]   \u274c  Failure - Main cargo clippy --all-targets --verbose --no-default-features\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: targets=\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: components= --component miri\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: downgrade= --allow-downgrade\n[CI/Lint with Clippy                                 ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Test with Rust 1.56.1                            ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/Run tests under `miri` to check for UB           ]   | info: downloading installer\n[CI/Lint with Clippy                                 ] \ud83c\udfc1  Job failed\n[CI/Test with Rust 1.56.1                            ] \ud83c\udfc1  Job failed\n[CI/Run tests under `miri` to check for UB           ]   | info: profile set to 'default'\n[CI/Run tests under `miri` to check for UB           ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/Run tests under `miri` to check for UB           ]   | info: skipping toolchain installation\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   | Rust is installed now. Great!\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   | To get started you may need to restart your current shell.\n[CI/Run tests under `miri` to check for UB           ]   | This would reload your PATH environment variable to include\n[CI/Run tests under `miri` to check for UB           ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   | To configure your current shell, run:\n[CI/Run tests under `miri` to check for UB           ]   | source \"$HOME/.cargo/env\"\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main rustup toolchain install nightly\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/Run tests under `miri` to check for UB           ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[CI/Run tests under `miri` to check for UB           ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[CI/Run tests under `miri` to check for UB           ]   | info: downloading component 'cargo'\n[CI/Run tests under `miri` to check for UB           ]   | info: downloading component 'miri'\n[CI/Run tests under `miri` to check for UB           ]   | info: downloading component 'rust-std'\n[CI/Run tests under `miri` to check for UB           ]   | info: downloading component 'rustc'\n[CI/Run tests under `miri` to check for UB           ]   | info: installing component 'cargo'\n[CI/Run tests under `miri` to check for UB           ]   | info: installing component 'miri'\n[CI/Run tests under `miri` to check for UB           ]   | info: installing component 'rust-std'\n[CI/Run tests under `miri` to check for UB           ]   | info: installing component 'rustc'\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Main rustup toolchain install nightly\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main rustup default nightly\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/Run tests under `miri` to check for UB           ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[CI/Run tests under `miri` to check for UB           ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[CI/Run tests under `miri` to check for UB           ]   | \n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Main rustup default nightly\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/Run tests under `miri` to check for UB           ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/Run tests under `miri` to check for UB           ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/cffc93cb57caff151e3c4ecf78bb0c489da7c46252f89b7a1c64af92f37859f3/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Test minimal dependency version with Rust nightly]   \u274c  Failure - Main hecrj/setup-rust-action@v1\n[CI/Test minimal dependency version with Rust nightly] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/497b71b6ea2c9775127cdbaef223f1c3287e10f71c1e8d991a7ba577c9de6a0a/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: cachekey=\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: name=nightly\n[CI/Run tests under `miri` to check for UB           ]   \u274c  Failure - Main dtolnay/rust-toolchain@nightly\n[CI/Run tests under `miri` to check for UB           ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/cffc93cb57caff151e3c4ecf78bb0c489da7c46252f89b7a1c64af92f37859f3/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Run tests under `miri` to check for UB           ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[CI/Run tests under `miri` to check for UB           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[CI/Run tests under `miri` to check for UB           ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[CI/Run tests under `miri` to check for UB           ]   \u2699  ::set-output:: cachekey=202305294985\n[CI/Run tests under `miri` to check for UB           ] \ud83c\udfc1  Job succeeded\n[CI/Test minimal dependency version with Rust nightly] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/497b71b6ea2c9775127cdbaef223f1c3287e10f71c1e8d991a7ba577c9de6a0a?force=1&v=1\": context deadline exceeded\n[CI/Test minimal dependency version with Rust nightly] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}