{
    "repository": "flier/rust-fasthash",
    "clone_url": "https://github.com/flier/rust-fasthash.git",
    "timestamp": "2023-05-30T09:16:25.608161Z",
    "clone_success": true,
    "number of actions": 5,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Continuous integration/Lints                                ] \ud83d\ude80  Start image=crawlergpt:latest\n[Continuous integration/Check with Rust stable               ] \ud83d\ude80  Start image=crawlergpt:latest\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \ud83d\ude80  Start image=crawlergpt:latest\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Continuous integration/Lints                                ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous integration/Lints                                ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous integration/Lints                                ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous integration/Lints                                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash] user=0 workdir=\n[Continuous integration/Lints                                ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash] user=0 workdir=\n[Continuous integration/Lints                                ] Unable to reset to 16499b5e05bf2e26879000db0c1d13f7e13fa3af: from: open /home/andre-silva/.cache/act/actions-rs-toolchain@v1/README.md: no such file or directory\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \ud83e\uddea  Matrix: map[os:ubuntu-latest toolchain:stable]\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash] user=0 workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \u2b50 Run Main actions/checkout@v2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2705  Success - Main actions/checkout@v2\n[Continuous integration/Check with Rust stable               ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Continuous integration/Lints                                ] \ud83c\udfc1  Job succeeded\n[Continuous integration/Check with Rust stable               ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Continuous integration/Check with Rust stable               ] \ud83e\uddea  Matrix: map[toolchain:stable]\n[Continuous integration/Check with Rust stable               ] \u2b50 Run Main actions/checkout@v2\n[Continuous integration/Check with Rust stable               ]   \u2705  Success - Main actions/checkout@v2\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \u2b50 Run Main Cache Cargo\n[Continuous integration/Check with Rust stable               ] \u2b50 Run Main Install stable toolchain\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-cache@v2/ dst=/var/run/act/actions/actions-cache@v2/\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-cache@v2/] user=0 workdir=\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/restore/index.js] user= workdir=\n[Continuous integration/Check with Rust stable               ]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Continuous integration/Check with Rust stable               ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Continuous integration/Check with Rust stable               ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Continuous integration/Check with Rust stable               ]   \ud83d\udcac  ::debug::Destination /tmp/8506859e-ba82-4be4-9b44-0518cbf8ec85\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::Resolved Keys:\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::[\"Linux-cargo-\"]\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::Checking zstd --version\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::getCacheEntry - Attempt 1 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[Continuous integration/Check with Rust stable               ]   \ud83d\udcac  ::debug::download complete\n[Continuous integration/Check with Rust stable               ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/8506859e-ba82-4be4-9b44-0518cbf8ec85\n[Continuous integration/Check with Rust stable               ]   | [command]/tmp/8506859e-ba82-4be4-9b44-0518cbf8ec85 --default-toolchain none -y\n[Continuous integration/Check with Rust stable               ]   | info: downloading installer\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::getCacheEntry - Attempt 2 of 2 failed with error: Cache Service Url not found, unable to restore cache.\n[Continuous integration/Check with Rust stable               ]   | info: profile set to 'default'\n[Continuous integration/Check with Rust stable               ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   | info: skipping toolchain installation\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | Rust is installed now. Great!\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | To get started you may need to restart your current shell.\n[Continuous integration/Check with Rust stable               ]   | This would reload your PATH environment variable to include\n[Continuous integration/Check with Rust stable               ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | To configure your current shell, run:\n[Continuous integration/Check with Rust stable               ]   | source \"$HOME/.cargo/env\"\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Continuous integration/Check with Rust stable               ]   | Default host: x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   | rustup home:  /home/runneradmin/.rustup\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | no active toolchain\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Continuous integration/Check with Rust stable               ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Continuous integration/Check with Rust stable               ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Continuous integration/Check with Rust stable               ]   | Installed rustup 1.26.0 support profiles\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Continuous integration/Check with Rust stable               ]   | info: profile set to 'minimal'\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Continuous integration/Check with Rust stable               ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Check with Rust stable               ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Check with Rust stable               ]   | info: downloading component 'cargo'\n[Continuous integration/Check with Rust stable               ]   | info: downloading component 'rust-std'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [warning]getCacheEntry failed: Cache Service Url not found, unable to restore cache.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2705  Success - Main Cache Cargo\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2699  ::set-output:: cache-hit=false\n[Continuous integration/Check with Rust stable               ]   | info: downloading component 'rustc'\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \u2b50 Run Main Install Rust stable toolchain\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::Destination /tmp/7182cce0-96b5-40bf-9d27-29b244b57ad7\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::download complete\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/7182cce0-96b5-40bf-9d27-29b244b57ad7\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/tmp/7182cce0-96b5-40bf-9d27-29b244b57ad7 --default-toolchain none -y\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: downloading installer\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: profile set to 'default'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: default host triple is x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: skipping toolchain installation\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | Rust is installed now. Great!\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | To get started you may need to restart your current shell.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | This would reload your PATH environment variable to include\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | To configure your current shell, run:\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | source \"$HOME/.cargo/env\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | Default host: x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | rustup home:  /home/runneradmin/.rustup\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | no active toolchain\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | Installed rustup 1.26.0 support profiles\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: profile set to 'minimal'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: downloading component 'cargo'\n[Continuous integration/Check with Rust stable               ]   | info: installing component 'cargo'\n[Continuous integration/Check with Rust stable               ]   | info: installing component 'rust-std'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: downloading component 'rust-std'\n[Continuous integration/Check with Rust stable               ]   | info: installing component 'rustc'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: downloading component 'rustc'\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Check with Rust stable               ]   | info: checking for self-update\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Continuous integration/Check with Rust stable               ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Check with Rust stable               ]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash' set to 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   \u2753  ::group::Gathering installed versions\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Continuous integration/Check with Rust stable               ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Check with Rust stable               ]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Check with Rust stable               ]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Continuous integration/Check with Rust stable               ]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Continuous integration/Check with Rust stable               ]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Continuous integration/Check with Rust stable               ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Continuous integration/Check with Rust stable               ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Continuous integration/Check with Rust stable               ]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Continuous integration/Check with Rust stable               ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Continuous integration/Check with Rust stable               ]   \u2753  ::endgroup::\n[Continuous integration/Check with Rust stable               ]   \u2705  Success - Main Install stable toolchain\n[Continuous integration/Check with Rust stable               ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Continuous integration/Check with Rust stable               ] \u2b50 Run Main Run cargo check\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: installing component 'cargo'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: installing component 'rust-std'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: installing component 'rustc'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: checking for self-update\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustup override set stable\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: override toolchain for '/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash' set to 'stable-x86_64-unknown-linux-gnu'\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2753  ::group::Gathering installed versions\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2753  ::endgroup::\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2705  Success - Main Install Rust stable toolchain\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \u2b50 Run Main Run cargo test\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Continuous integration/Check with Rust stable               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | [command]/home/runneradmin/.cargo/bin/cargo test\n[Continuous integration/Check with Rust stable               ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Continuous integration/Check with Rust stable               ]   | [command]/home/runneradmin/.cargo/bin/cargo check\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Updating\u001b[0m crates.io index\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m clap v2.34.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m proc-macro2 v1.0.59\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m plotters v0.3.4\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m oorandom v11.1.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m autocfg v1.1.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m unicode-ident v1.0.9\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m tinytemplate v1.2.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m lazy_static v1.4.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m bitflags v1.3.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m textwrap v0.11.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m seahash v4.1.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m raw-cpuid v10.7.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rand_chacha v0.2.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ppv-lite86 v0.2.17\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m memchr v2.5.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde_cbor v0.11.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m walkdir v2.3.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m unicode-width v0.1.10\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m semver v1.0.17\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m scopeguard v1.1.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ryu v1.0.13\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rand_core v0.5.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde v1.0.163\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde_derive v1.0.163\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m plotters-backend v0.3.4\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m version_check v0.9.4\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m memoffset v0.8.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m itoa v1.0.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m regex v1.8.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m num_cpus v1.15.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-utils v0.8.15\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rayon v1.7.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m num-traits v0.2.15\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m serde_json v1.0.96\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m syn v1.0.109\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m regex-syntax v0.7.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-epoch v0.9.14\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m csv v1.2.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xoroshiro128 v0.5.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m once_cell v1.17.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-deque v0.8.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m either v1.8.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m atty v0.2.14\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cfg-if v1.0.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m derive_more v0.99.17\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m convert_case v0.4.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rayon-core v1.11.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m criterion v0.3.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cargo-emit v0.2.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m same-file v1.0.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rustc_version v0.4.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m itertools v0.10.5\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m crossbeam-channel v0.5.8\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m getrandom v0.2.9\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rand v0.7.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m plotters-svg v0.3.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cast v0.3.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m syn v2.0.18\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m quote v1.0.28\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ahash v0.7.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m half v1.8.2\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m Downloading\u001b[0m crates ...\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m getrandom v0.1.16\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m csv-core v0.1.10\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m criterion-plot v0.4.5\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cfg-if v1.0.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m libc v0.2.144\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m autocfg v1.1.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m bitflags v1.3.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m proc-macro2 v1.0.59\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m quote v1.0.28\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-utils v0.8.15\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m unicode-ident v1.0.9\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m serde v1.0.163\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m lazy_static v1.4.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m getrandom v0.1.16\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cc v1.0.79\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cargo-emit v0.2.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m memchr v2.5.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m scopeguard v1.1.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ryu v1.0.13\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m version_check v0.9.4\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rayon-core v1.11.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m itoa v1.0.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m serde_json v1.0.96\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ppv-lite86 v0.2.17\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m either v1.8.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m syn v1.0.109\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m unicode-width v0.1.10\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m plotters-backend v0.3.4\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m cast v0.3.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m convert_case v0.4.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m once_cell v1.17.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m regex-syntax v0.7.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m same-file v1.0.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m half v1.8.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m seahash v4.1.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m oorandom v11.1.3\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m num-traits v0.2.15\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m unicode-ident v1.0.9\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m semver v1.0.17\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m seahash v4.1.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m once_cell v1.17.2\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m getrandom v0.1.16\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rand_chacha v0.2.2\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m version_check v0.9.4\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m proc-macro2 v1.0.59\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rand v0.7.3\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rand_core v0.5.1\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m xoroshiro128 v0.5.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m raw-cpuid v10.7.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m libc v0.2.144\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m lazy_static v1.4.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m rustc_version v0.4.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m quote v1.0.28\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cfg-if v1.0.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ahash v0.7.6\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m convert_case v0.4.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cargo-emit v0.2.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m walkdir v2.3.3\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m getrandom v0.2.9\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m cc v1.0.79\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m bitflags v1.3.2\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m autocfg v1.1.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m raw-cpuid v10.7.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m textwrap v0.11.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m derive_more v0.99.17\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m itertools v0.10.5\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m syn v1.0.109\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m  Downloaded\u001b[0m ppv-lite86 v0.2.17\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m memoffset v0.8.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-epoch v0.9.14\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m num-traits v0.2.15\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m plotters-svg v0.3.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m clap v2.34.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[36m    Blocking\u001b[0m waiting for file lock on build directory\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m ahash v0.7.6\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m csv-core v0.1.10\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-channel v0.5.8\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m syn v2.0.18\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m num_cpus v1.15.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m getrandom v0.2.9\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m atty v0.2.14\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m regex v1.8.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m crossbeam-deque v0.8.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rand_core v0.5.1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m fasthash-sys v0.4.1 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/fasthash-sys)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m fasthash v0.4.1 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/fasthash)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rand_chacha v0.2.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m criterion-plot v0.4.5\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rand v0.7.3\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rayon v1.7.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m plotters v0.3.4\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | The following warnings were emitted during compilation:\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m In file included from src/fasthash.cpp:1:\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m src/fasthash.hpp:4:10: fatal error: smhasher/City.h: No such file or directory\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m     4 | #include \"smhasher/City.h\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m       |          ^~~~~~~~~~~~~~~~~\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m compilation terminated.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `fasthash-sys v0.4.1 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/fasthash-sys)`\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | Caused by:\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/target/debug/build/fasthash-sys-4d6d18ec7504eca2/build-script-build` (exit status: 1)\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   --- stdout\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rustc-cfg=feature=\"aes\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rustc-cfg=feature=\"sse41\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rustc-cfg=feature=\"sse42\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rustc-cfg=feature=\"avx\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rustc-cfg=feature=\"avx2\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   TARGET = Some(\"x86_64-unknown-linux-gnu\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   OPT_LEVEL = Some(\"0\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST = Some(\"x86_64-unknown-linux-gnu\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   DEBUG = Some(\"true\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CARGO_CFG_TARGET_FEATURE = Some(\"fxsr,sse,sse2\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CARGO_CFG_TARGET_FEATURE = Some(\"fxsr,sse,sse2\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXX = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   HOST_CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CXXFLAGS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   CARGO_CFG_TARGET_FEATURE = Some(\"fxsr,sse,sse2\")\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   running: \"c++\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"-gdwarf-4\" \"-fno-omit-frame-pointer\" \"-m64\" \"-static\" \"-I\" \"src/highwayhash\" \"-Wall\" \"-Wextra\" \"-std=c++11\" \"-DCITY_HASH=1\" \"-DFARM_HASH=1\" \"-DKOMI_HASH=1\" \"-DHIGHWAY_HASH=1\" \"-DLOOKUP3=1\" \"-DMEOW_HASH=1\" \"-DMX3_HASH=1\" \"-DNM_HASH=1\" \"-DPENGY_HASH=1\" \"-DPRV_HASH=1\" \"-DT1_HASH=1\" \"-DMETRO_HASH=1\" \"-DMUM_HASH=1\" \"-DMURMUR_HASH=1\" \"-DSPOOKY_HASH=1\" \"-DWY_HASH=1\" \"-DXX_HASH=1\" \"-march=native\" \"-Wno-implicit-fallthrough\" \"-Wno-unknown-attributes\" \"-Wno-sign-compare\" \"-o\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/target/debug/build/fasthash-sys-067bf91b108b4320/out/src/fasthash.o\" \"-c\" \"src/fasthash.cpp\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:warning=In file included from src/fasthash.cpp:1:\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:warning=src/fasthash.hpp:4:10: fatal error: smhasher/City.h: No such file or directory\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:warning=    4 | #include \"smhasher/City.h\"\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:warning=      |          ^~~~~~~~~~~~~~~~~\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   cargo:warning=compilation terminated.\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   exit status: 1\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   --- stderr\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   |   error occurred: Command \"c++\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"-gdwarf-4\" \"-fno-omit-frame-pointer\" \"-m64\" \"-static\" \"-I\" \"src/highwayhash\" \"-Wall\" \"-Wextra\" \"-std=c++11\" \"-DCITY_HASH=1\" \"-DFARM_HASH=1\" \"-DKOMI_HASH=1\" \"-DHIGHWAY_HASH=1\" \"-DLOOKUP3=1\" \"-DMEOW_HASH=1\" \"-DMX3_HASH=1\" \"-DNM_HASH=1\" \"-DPENGY_HASH=1\" \"-DPRV_HASH=1\" \"-DT1_HASH=1\" \"-DMETRO_HASH=1\" \"-DMUM_HASH=1\" \"-DMURMUR_HASH=1\" \"-DSPOOKY_HASH=1\" \"-DWY_HASH=1\" \"-DXX_HASH=1\" \"-march=native\" \"-Wno-implicit-fallthrough\" \"-Wno-unknown-attributes\" \"-Wno-sign-compare\" \"-o\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/target/debug/build/fasthash-sys-067bf91b108b4320/out/src/fasthash.o\" \"-c\" \"src/fasthash.cpp\" with args \"c++\" did not execute successfully (status code exit status: 1).\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \n[Continuous integration/Test with Rust stable @ ubuntu-latest]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m build failed, waiting for other jobs to finish...\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m cfg-if v1.0.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m libc v0.2.144\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m bitflags v1.3.2\n[Continuous integration/Test with Rust stable @ ubuntu-latest]   \u274c  Failure - Main Run cargo test\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m lazy_static v1.4.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m ppv-lite86 v0.2.17\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m once_cell v1.17.2\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m seahash v4.1.0\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m num-traits v0.2.15\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m derive_more v0.99.17\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m raw-cpuid v10.7.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest] exitcode '1': failure\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m getrandom v0.1.16\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m getrandom v0.2.9\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m ahash v0.7.6\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m rand_core v0.5.1\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m rand_chacha v0.2.2\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m rand v0.7.3\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m fasthash-sys v0.4.1 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/fasthash-sys)\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m fasthash v0.4.1 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/fasthash)\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Checking\u001b[0m xoroshiro128 v0.5.0\n[Continuous integration/Test with Rust stable @ ubuntu-latest] \ud83c\udfc1  Job failed\n[Continuous integration/Check with Rust stable               ]   | The following warnings were emitted during compilation:\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m In file included from src/fasthash.cpp:1:\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m src/fasthash.hpp:4:10: fatal error: smhasher/City.h: No such file or directory\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m     4 | #include \"smhasher/City.h\"\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m       |          ^~~~~~~~~~~~~~~~~\n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m compilation terminated.\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[31merror\u001b[0m\u001b[1m:\u001b[0m failed to run custom build command for `fasthash-sys v0.4.1 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/fasthash-sys)`\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | Caused by:\n[Continuous integration/Check with Rust stable               ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/target/debug/build/fasthash-sys-07cdca597c89cf5e/build-script-build` (exit status: 1)\n[Continuous integration/Check with Rust stable               ]   |   --- stdout\n[Continuous integration/Check with Rust stable               ]   |   cargo:rustc-cfg=feature=\"aes\"\n[Continuous integration/Check with Rust stable               ]   |   cargo:rustc-cfg=feature=\"sse41\"\n[Continuous integration/Check with Rust stable               ]   |   cargo:rustc-cfg=feature=\"sse42\"\n[Continuous integration/Check with Rust stable               ]   |   cargo:rustc-cfg=feature=\"avx\"\n[Continuous integration/Check with Rust stable               ]   |   cargo:rustc-cfg=feature=\"avx2\"\n[Continuous integration/Check with Rust stable               ]   |   TARGET = Some(\"x86_64-unknown-linux-gnu\")\n[Continuous integration/Check with Rust stable               ]   |   OPT_LEVEL = Some(\"0\")\n[Continuous integration/Check with Rust stable               ]   |   HOST = Some(\"x86_64-unknown-linux-gnu\")\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Check with Rust stable               ]   |   CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Check with Rust stable               ]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Check with Rust stable               ]   |   DEBUG = Some(\"true\")\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Check with Rust stable               ]   |   CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Check with Rust stable               ]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Check with Rust stable               ]   |   CARGO_CFG_TARGET_FEATURE = Some(\"fxsr,sse,sse2\")\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Check with Rust stable               ]   |   CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Check with Rust stable               ]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Check with Rust stable               ]   |   CARGO_CFG_TARGET_FEATURE = Some(\"fxsr,sse,sse2\")\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXX_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXX\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXX\n[Continuous integration/Check with Rust stable               ]   |   CXX = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64-unknown-linux-gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS_x86_64_unknown_linux_gnu = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=HOST_CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   HOST_CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CXXFLAGS\n[Continuous integration/Check with Rust stable               ]   |   CXXFLAGS = None\n[Continuous integration/Check with Rust stable               ]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Continuous integration/Check with Rust stable               ]   |   CRATE_CC_NO_DEFAULTS = None\n[Continuous integration/Check with Rust stable               ]   |   CARGO_CFG_TARGET_FEATURE = Some(\"fxsr,sse,sse2\")\n[Continuous integration/Check with Rust stable               ]   |   running: \"c++\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"-gdwarf-4\" \"-fno-omit-frame-pointer\" \"-m64\" \"-static\" \"-I\" \"src/highwayhash\" \"-Wall\" \"-Wextra\" \"-std=c++11\" \"-DCITY_HASH=1\" \"-DFARM_HASH=1\" \"-DKOMI_HASH=1\" \"-DHIGHWAY_HASH=1\" \"-DLOOKUP3=1\" \"-DMEOW_HASH=1\" \"-DMX3_HASH=1\" \"-DNM_HASH=1\" \"-DPENGY_HASH=1\" \"-DPRV_HASH=1\" \"-DT1_HASH=1\" \"-DMETRO_HASH=1\" \"-DMUM_HASH=1\" \"-DMURMUR_HASH=1\" \"-DSPOOKY_HASH=1\" \"-DWY_HASH=1\" \"-DXX_HASH=1\" \"-march=native\" \"-Wno-implicit-fallthrough\" \"-Wno-unknown-attributes\" \"-Wno-sign-compare\" \"-o\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/target/debug/build/fasthash-sys-d1967ba963a8c3ee/out/src/fasthash.o\" \"-c\" \"src/fasthash.cpp\"\n[Continuous integration/Check with Rust stable               ]   |   cargo:warning=In file included from src/fasthash.cpp:1:\n[Continuous integration/Check with Rust stable               ]   |   cargo:warning=src/fasthash.hpp:4:10: fatal error: smhasher/City.h: No such file or directory\n[Continuous integration/Check with Rust stable               ]   |   cargo:warning=    4 | #include \"smhasher/City.h\"\n[Continuous integration/Check with Rust stable               ]   |   cargo:warning=      |          ^~~~~~~~~~~~~~~~~\n[Continuous integration/Check with Rust stable               ]   |   cargo:warning=compilation terminated.\n[Continuous integration/Check with Rust stable               ]   |   exit status: 1\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   |   --- stderr\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   |   error occurred: Command \"c++\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"-gdwarf-4\" \"-fno-omit-frame-pointer\" \"-m64\" \"-static\" \"-I\" \"src/highwayhash\" \"-Wall\" \"-Wextra\" \"-std=c++11\" \"-DCITY_HASH=1\" \"-DFARM_HASH=1\" \"-DKOMI_HASH=1\" \"-DHIGHWAY_HASH=1\" \"-DLOOKUP3=1\" \"-DMEOW_HASH=1\" \"-DMX3_HASH=1\" \"-DNM_HASH=1\" \"-DPENGY_HASH=1\" \"-DPRV_HASH=1\" \"-DT1_HASH=1\" \"-DMETRO_HASH=1\" \"-DMUM_HASH=1\" \"-DMURMUR_HASH=1\" \"-DSPOOKY_HASH=1\" \"-DWY_HASH=1\" \"-DXX_HASH=1\" \"-march=native\" \"-Wno-implicit-fallthrough\" \"-Wno-unknown-attributes\" \"-Wno-sign-compare\" \"-o\" \"/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/flier-rust-fasthash/target/debug/build/fasthash-sys-d1967ba963a8c3ee/out/src/fasthash.o\" \"-c\" \"src/fasthash.cpp\" with args \"c++\" did not execute successfully (status code exit status: 1).\n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | \n[Continuous integration/Check with Rust stable               ]   | \u001b[0m\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[1m:\u001b[0m build failed, waiting for other jobs to finish...\n[Continuous integration/Check with Rust stable               ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Continuous integration/Check with Rust stable               ]   \u274c  Failure - Main Run cargo check\n[Continuous integration/Check with Rust stable               ] exitcode '1': failure\n[Continuous integration/Check with Rust stable               ] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: from: open /home/andre-silva/.cache/act/actions-rs-toolchain@v1/README.md: no such file or directory\n"
}