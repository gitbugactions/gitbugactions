{"repository": "darrachequesne/spring-data-jpa-datatables", "clone_url": "https://github.com/darrachequesne/spring-data-jpa-datatables.git", "timestamp": "2023-05-30T23:12:20.836143Z", "commit_hash": "a6a8a0d9d97919e8321927ac4f35078844cdfa26", "commit_message": "fix: fix integration with Spring Boot 3\n\nThe library creates the following queries:\n\n- 1 count query (unfiltered, to compute the \"recordsTotal\" field)\n- 1 data query (filtered)\n- 1 optional count query (filtered), if the data query returns a complete slice, in order to compute the \"recordsFiltered\" field\n\nBefore this commit, when the optional count query ran,\nDataTablesSpecification.toPredicate() was called a second time and\nreused the globalPredicates array, triggering one of the following\nerror:\n\n> java.lang.IllegalArgumentException: Already registered a copy\n\n> jakarta.persistence.PersistenceException: Converting org.hibernate.sql.ast.SqlTreeCreationException to JPA PersistenceException : Could not locate TableGroup\n\nRelated: https://github.com/darrachequesne/spring-data-jpa-datatables/issues/150\n", "related_issues": "", "bug_patch": "diff --git a/src/main/java/org/springframework/data/jpa/datatables/SpecificationBuilder.java b/src/main/java/org/springframework/data/jpa/datatables/SpecificationBuilder.java\nindex c80aff6..39c11f8 100644\n--- a/src/main/java/org/springframework/data/jpa/datatables/SpecificationBuilder.java\n+++ b/src/main/java/org/springframework/data/jpa/datatables/SpecificationBuilder.java\n@@ -20,39 +20,35 @@ public class SpecificationBuilder<T> extends AbstractPredicateBuilder<Specificat\n     }\n \n     private class DataTablesSpecification<S> implements Specification<S> {\n-        protected List<Predicate> columnPredicates = new ArrayList<>();\n-        protected List<Predicate> globalPredicates = new ArrayList<>();\n-\n         @Override\n         public Predicate toPredicate(@NonNull Root<S> root, @NonNull CriteriaQuery<?> query, @NonNull CriteriaBuilder criteriaBuilder) {\n-            initPredicatesRecursively(query, tree, root, root, criteriaBuilder);\n+            Predicates predicates = new Predicates();\n+            initPredicatesRecursively(predicates, query, tree, root, root, criteriaBuilder);\n \n             if (input.getSearchPanes() != null) {\n                 input.getSearchPanes().forEach((attribute, values) -> {\n                     if (!values.isEmpty()) {\n-                        columnPredicates.add(root.get(attribute).in(values));\n+                        predicates.columns.add(root.get(attribute).in(values));\n                     }\n                 });\n             }\n \n-            final Predicate predicate = createFinalPredicate(criteriaBuilder);\n-            columnPredicates.clear();\n-            return predicate;\n+            return predicates.toPredicate(criteriaBuilder);\n         }\n \n         private boolean isCountQuery(CriteriaQuery<?> query) {\n             return query.getResultType() == Long.class;\n         }\n \n-        protected void initPredicatesRecursively(CriteriaQuery<?> query, Node<Filter> node, From<S, S> from, FetchParent<S, S> fetch, CriteriaBuilder criteriaBuilder) {\n+        protected void initPredicatesRecursively(Predicates predicates, CriteriaQuery<?> query, Node<Filter> node, From<S, S> from, FetchParent<S, S> fetch, CriteriaBuilder criteriaBuilder) {\n             if (node.isLeaf()) {\n                 boolean hasColumnFilter = node.getData() != null;\n                 if (hasColumnFilter) {\n                     Filter columnFilter = node.getData();\n-                    columnPredicates.add(columnFilter.createPredicate(from, criteriaBuilder, node.getName()));\n+                    predicates.columns.add(columnFilter.createPredicate(from, criteriaBuilder, node.getName()));\n                 } else if (hasGlobalFilter) {\n                     Filter globalFilter = tree.getData();\n-                    globalPredicates.add(globalFilter.createPredicate(from, criteriaBuilder, node.getName()));\n+                    predicates.global.add(globalFilter.createPredicate(from, criteriaBuilder, node.getName()));\n                 }\n             }\n             for (Node<Filter> child : node.getChildren()) {\n@@ -62,44 +58,34 @@ public class SpecificationBuilder<T> extends AbstractPredicateBuilder<Specificat\n                     continue;\n                 }\n                 if (child.isLeaf()) {\n-                    initPredicatesRecursively(query, child, from, fetch, criteriaBuilder);\n+                    initPredicatesRecursively(predicates, query, child, from, fetch, criteriaBuilder);\n                 } else {\n                     Join<S, S> join = from.join(child.getName(), JoinType.LEFT);\n \n                     if (isCountQuery(query)) {\n-                        initPredicatesRecursively(query, child, join, join, criteriaBuilder);\n+                        initPredicatesRecursively(predicates, query, child, join, join, criteriaBuilder);\n                     } else {\n                         Fetch<S, S> childFetch = fetch.fetch(child.getName(), JoinType.LEFT);\n-                        initPredicatesRecursively(query, child, join, childFetch, criteriaBuilder);\n+                        initPredicatesRecursively(predicates, query, child, join, childFetch, criteriaBuilder);\n                     }\n                 }\n             }\n         }\n-\n-        protected Predicate createFinalPredicate(CriteriaBuilder criteriaBuilder) {\n-            List<Predicate> allPredicates = new ArrayList<>(columnPredicates);\n-\n-            if (!globalPredicates.isEmpty()) {\n-                allPredicates.add(criteriaBuilder.or(globalPredicates.toArray(new Predicate[0])));\n-            }\n-\n-            return allPredicates.isEmpty() ? criteriaBuilder.conjunction() : criteriaBuilder.and(allPredicates.toArray(new Predicate[0]));\n-        }\n     }\n \n     private class DataTablesSearchPaneSpecification<S> extends DataTablesSpecification<S> {\n \n         @Override\n-        protected void initPredicatesRecursively(CriteriaQuery<?> query, Node<Filter> node, From<S, S> from,\n+        protected void initPredicatesRecursively(Predicates predicates, CriteriaQuery<?> query, Node<Filter> node, From<S, S> from,\n             FetchParent<S, S> fetch, CriteriaBuilder criteriaBuilder) {\n             if (node.isLeaf()) {\n                 boolean hasColumnFilter = node.getData() != null;\n                 if (hasColumnFilter) {\n                     Filter columnFilter = node.getData();\n-                    columnPredicates.add(columnFilter.createPredicate(from, criteriaBuilder, node.getName()));\n+                    predicates.columns.add(columnFilter.createPredicate(from, criteriaBuilder, node.getName()));\n                 } else if (hasGlobalFilter) {\n                     Filter globalFilter = tree.getData();\n-                    globalPredicates.add(globalFilter.createPredicate(from, criteriaBuilder, node.getName()));\n+                    predicates.global.add(globalFilter.createPredicate(from, criteriaBuilder, node.getName()));\n                 }\n             }\n             for (Node<Filter> child : node.getChildren()) {\n@@ -109,10 +95,10 @@ public class SpecificationBuilder<T> extends AbstractPredicateBuilder<Specificat\n                     continue;\n                 }\n                 if (child.isLeaf()) {\n-                    initPredicatesRecursively(query, child, from, fetch, criteriaBuilder);\n+                    initPredicatesRecursively(predicates, query, child, from, fetch, criteriaBuilder);\n                 } else {\n                     Join<S, S> join = from.join(child.getName(), JoinType.LEFT);\n-                    initPredicatesRecursively(query, child, join, fetch, criteriaBuilder);\n+                    initPredicatesRecursively(predicates, query, child, join, fetch, criteriaBuilder);\n                 }\n             }\n         }\n@@ -121,4 +107,17 @@ public class SpecificationBuilder<T> extends AbstractPredicateBuilder<Specificat\n     public Specification<T> buildSearchPane() {\n         return new DataTablesSearchPaneSpecification<>();\n     }\n+\n+    private static class Predicates {\n+        public List<Predicate> columns = new ArrayList<>();\n+        public List<Predicate> global = new ArrayList<>();\n+\n+        Predicate toPredicate(CriteriaBuilder criteriaBuilder) {\n+            if (!global.isEmpty()) {\n+                columns.add(criteriaBuilder.or(global.toArray(new Predicate[0])));\n+            }\n+\n+            return columns.isEmpty() ? criteriaBuilder.conjunction() : criteriaBuilder.and(columns.toArray(new Predicate[0]));\n+        }\n+    }\n }\n\\ No newline at end of file\n", "test_patch": "diff --git a/src/test/java/org/springframework/data/jpa/datatables/repository/EmployeeRepositoryTest.java b/src/test/java/org/springframework/data/jpa/datatables/repository/EmployeeRepositoryTest.java\nindex 0ae54b7..bd7a07b 100644\n--- a/src/test/java/org/springframework/data/jpa/datatables/repository/EmployeeRepositoryTest.java\n+++ b/src/test/java/org/springframework/data/jpa/datatables/repository/EmployeeRepositoryTest.java\n@@ -98,6 +98,17 @@ public class EmployeeRepositoryTest {\n     }\n \n     @Test\n+    void globalFilterWithMultiplePages() {\n+        input.getSearch().setValue(\"e\");\n+        input.setLength(1);\n+\n+        DataTablesOutput<Employee> output = getOutput(input);\n+        assertThat(output.getError()).isNull();\n+        assertThat(output.getRecordsFiltered()).isEqualTo(6);\n+        assertThat(output.getRecordsTotal()).isEqualTo(6);\n+    }\n+\n+    @Test\n     void globalFilterIgnoreCaseIgnoreSpace() {\n         input.getSearch().setValue(\" aMoS  \");\n \n"}
