{
    "repository": "rusqlite/rusqlite",
    "clone_url": "https://github.com/rusqlite/rusqlite.git",
    "timestamp": "2023-05-30T08:30:06.836039Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[CI/Test with winsqlite3                            ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Docs                                            ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Clippy                                          ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test x86_64-pc-windows-msvc                     ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Format                                          ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Address Sanitizer                               ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test with sqlcipher                             ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Generate code coverage                          ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Clippy                                          ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Format                                          ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Docs                                            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Docs                                            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Clippy                                          ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Docs                                            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Clippy                                          ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Format                                          ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Format                                          ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Test with winsqlite3                            ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Clippy                                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \ud83e\uddea  Matrix: map[os:ubuntu-latest]\n[CI/Test with winsqlite3                            ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Clippy                                          ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Generate code coverage                          ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \u2b50 Run Main actions/checkout@v3\n[CI/Clippy                                          ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u2705  Success - Main actions/checkout@v3\n[CI/Test with winsqlite3                            ] \u2b50 Run Main actions/checkout@v3\n[CI/Test with winsqlite3                            ]   \u2705  Success - Main actions/checkout@v3\n[CI/Generate code coverage                          ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[CI/Clippy                                          ] \u2b50 Run Main actions/checkout@v3\n[CI/Clippy                                          ]   \u2705  Success - Main actions/checkout@v3\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Docs                                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Generate code coverage                          ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test with winsqlite3                            ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Clippy                                          ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Clippy                                          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Generate code coverage                          ]   \u2601  git clone 'https://github.com/taiki-e/install-action' # ref=main\n[CI/Clippy                                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Generate code coverage                          ] \u2b50 Run Pre taiki-e/install-action@main\n[CI/Generate code coverage                          ]   \u2705  Success - Pre taiki-e/install-action@main\n[CI/Generate code coverage                          ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[CI/Generate code coverage                          ] \u2b50 Run Main actions/checkout@v3\n[CI/Generate code coverage                          ]   \u2705  Success - Main actions/checkout@v3\n[CI/Generate code coverage                          ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/Format                                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rusqlite-rusqlite] user=0 workdir=\n[CI/Clippy                                          ]   | OCI runtime exec failed: exec failed: unable to start container process: error executing setns process: exit status 1: unknown\r\n[CI/Clippy                                          ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Test with sqlcipher                             ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Test with winsqlite3                            ]   | (node:30) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Test with winsqlite3                            ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Test with winsqlite3                            ]   |     at Generator.next (<anonymous>)\n[CI/Test with winsqlite3                            ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Test with winsqlite3                            ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Test with winsqlite3                            ]   | (node:30) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Test with winsqlite3                            ]   | (node:30) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Test with winsqlite3                            ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   | (node:30) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   |     at Generator.next (<anonymous>)\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   | (node:30) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   | (node:30) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Generate code coverage                          ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Test x86_64-pc-windows-msvc                     ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Format                                          ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Docs                                            ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Address Sanitizer                               ]   \u2601  git clone 'https://github.com/hecrj/setup-rust-action' # ref=v1\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/Test with sqlcipher                             ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Test x86_64-pc-windows-msvc                     ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Docs                                            ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Test with winsqlite3                            ] \u2b50 Run Main Swatinem/rust-cache@v2\n[CI/Address Sanitizer                               ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \u2b50 Run Main Swatinem/rust-cache@v2\n[CI/Test x86_64-pc-windows-msvc                     ] \ud83e\uddea  Matrix: map[os:ubuntu-latest target:x86_64-pc-windows-msvc]\n[CI/Format                                          ] \u2b50 Run Main actions/checkout@v3\n[CI/Test with sqlcipher                             ] \u2b50 Run Main actions/checkout@v3\n[CI/Docs                                            ] \u2b50 Run Main actions/checkout@v3\n[CI/Test x86_64-pc-windows-msvc                     ] \u2b50 Run Main actions/checkout@v3\n[CI/Address Sanitizer                               ] \u2b50 Run Main actions/checkout@v3\n[CI/Docs                                            ]   \u2705  Success - Main actions/checkout@v3\n[CI/Format                                          ]   \u2705  Success - Main actions/checkout@v3\n[CI/Test with sqlcipher                             ]   \u2705  Success - Main actions/checkout@v3\n[CI/Test x86_64-pc-windows-msvc                     ]   \u2705  Success - Main actions/checkout@v3\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/Swatinem-rust-cache@v2/ dst=/var/run/act/actions/Swatinem-rust-cache@v2/\n[CI/Address Sanitizer                               ]   \u2705  Success - Main actions/checkout@v3\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/Swatinem-rust-cache@v2/ dst=/var/run/act/actions/Swatinem-rust-cache@v2/\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/Swatinem-rust-cache@v2/] user=0 workdir=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/Swatinem-rust-cache@v2/] user=0 workdir=\n[CI/Docs                                            ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test x86_64-pc-windows-msvc                     ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Format                                          ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test with sqlcipher                             ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Docs                                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Format                                          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Address Sanitizer                               ] \u2b50 Run Main hecrj/setup-rust-action@v1\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Format                                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Docs                                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/hecrj-setup-rust-action@v1/ dst=/var/run/act/actions/hecrj-setup-rust-action@v1/\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/hecrj-setup-rust-action@v1/] user=0 workdir=\n[CI/Clippy                                          ]   \u274c  Failure - Main hecrj/setup-rust-action@v1\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/Swatinem-rust-cache@v2/dist/restore/index.js] user= workdir=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/Swatinem-rust-cache@v2/dist/restore/index.js] user= workdir=\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Clippy                                          ] Error response from daemon: Could not find the file /var/run/act/workflow/pathcmd.txt in container 14c6d3e7e7f80db34ded441c73af001335856ad94520d4145f7600455b2efd9f\n[CI/Generate code coverage                          ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Test with winsqlite3                            ]   \u2705  Success - Main Swatinem/rust-cache@v2\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Format                                          ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Docs                                            ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js] user= workdir=\n[CI/Address Sanitizer                               ]   | (node:31) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Address Sanitizer                               ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Address Sanitizer                               ]   |     at Generator.next (<anonymous>)\n[CI/Address Sanitizer                               ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Address Sanitizer                               ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Address Sanitizer                               ]   | (node:31) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Address Sanitizer                               ]   | (node:31) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Address Sanitizer                               ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u2705  Success - Main Swatinem/rust-cache@v2\n[CI/Docs                                            ]   | (node:31) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Docs                                            ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Docs                                            ]   |     at Generator.next (<anonymous>)\n[CI/Docs                                            ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Docs                                            ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Docs                                            ]   | (node:31) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Docs                                            ]   | (node:31) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Docs                                            ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Format                                          ]   | (node:30) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Format                                          ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Format                                          ]   |     at Generator.next (<anonymous>)\n[CI/Format                                          ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Format                                          ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Format                                          ]   | (node:30) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Format                                          ]   | (node:30) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Format                                          ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Clippy                                          ] failed to remove container: Error response from daemon: No such container: 14c6d3e7e7f80db34ded441c73af001335856ad94520d4145f7600455b2efd9f\n[CI/Clippy                                          ] \ud83c\udfc1  Job failed\n[CI/Test with sqlcipher                             ]   | (node:31) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Test with sqlcipher                             ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Test with sqlcipher                             ]   |     at Generator.next (<anonymous>)\n[CI/Test with sqlcipher                             ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Test with sqlcipher                             ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Test with sqlcipher                             ]   | (node:31) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Test with sqlcipher                             ]   | (node:31) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Test with sqlcipher                             ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Test x86_64-pc-windows-msvc                     ]   | (node:31) UnhandledPromiseRejectionWarning: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[CI/Test x86_64-pc-windows-msvc                     ]   |     at Object.<anonymous> (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:3806)\n[CI/Test x86_64-pc-windows-msvc                     ]   |     at Generator.next (<anonymous>)\n[CI/Test x86_64-pc-windows-msvc                     ]   |     at fulfilled (/run/act/actions/hecrj-setup-rust-action@v1/dist/index.js:1:1155)\n[CI/Test x86_64-pc-windows-msvc                     ]   | (Use `node --trace-warnings ...` to show where the warning was created)\n[CI/Test x86_64-pc-windows-msvc                     ]   | (node:31) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)\n[CI/Test x86_64-pc-windows-msvc                     ]   | (node:31) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n[CI/Test x86_64-pc-windows-msvc                     ]   \u2705  Success - Main hecrj/setup-rust-action@v1\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u2699  ::set-output:: cache-hit=false\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: toolchain=stable\n[CI/Test with winsqlite3                            ]   \u2699  ::set-output:: cache-hit=false\n[CI/Address Sanitizer                               ] \u2b50 Run Main Swatinem/rust-cache@v2\n[CI/Format                                          ] \u2b50 Run Main cargo fmt --all -- --check\n[CI/Docs                                            ] \u2b50 Run Main Swatinem/rust-cache@v2\n[CI/Test x86_64-pc-windows-msvc                     ] \u2b50 Run Main Swatinem/rust-cache@v2\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \u2b50 Run Main cargo test --features 'bundled-sqlcipher' --workspace --all-targets --verbose\n[CI/Test with winsqlite3                            ] \u2b50 Run Main cargo build --features winsqlite3 --workspace --all-targets --verbose\n[CI/Generate code coverage                          ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/Test with sqlcipher                             ] \u2b50 Run Main Swatinem/rust-cache@v2\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/Swatinem-rust-cache@v2/ dst=/var/run/act/actions/Swatinem-rust-cache@v2/\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/Swatinem-rust-cache@v2/ dst=/var/run/act/actions/Swatinem-rust-cache@v2/\n[CI/Docs                                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/Swatinem-rust-cache@v2/ dst=/var/run/act/actions/Swatinem-rust-cache@v2/\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/Swatinem-rust-cache@v2/ dst=/var/run/act/actions/Swatinem-rust-cache@v2/\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/Swatinem-rust-cache@v2/] user=0 workdir=\n[CI/Docs                                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/Swatinem-rust-cache@v2/] user=0 workdir=\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/Swatinem-rust-cache@v2/] user=0 workdir=\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/Swatinem-rust-cache@v2/] user=0 workdir=\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/Test with winsqlite3                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Format                                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   | /var/run/act/workflow/3: line 2: cargo: command not found\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)]   \u274c  Failure - Main cargo test --features 'bundled-sqlcipher' --workspace --all-targets --verbose\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/Swatinem-rust-cache@v2/dist/restore/index.js] user= workdir=\n[CI/Test with winsqlite3                            ]   | /var/run/act/workflow/3: line 2: cargo: command not found\n[CI/Test with winsqlite3                            ]   \u274c  Failure - Main cargo build --features winsqlite3 --workspace --all-targets --verbose\n[CI/Docs                                            ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/Swatinem-rust-cache@v2/dist/restore/index.js] user= workdir=\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/Swatinem-rust-cache@v2/dist/restore/index.js] user= workdir=\n[CI/Generate code coverage                          ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/Format                                          ]   | /var/run/act/workflow/2: line 2: cargo: command not found\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/Swatinem-rust-cache@v2/dist/restore/index.js] user= workdir=\n[CI/Format                                          ]   \u274c  Failure - Main cargo fmt --all -- --check\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: targets=\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: components= --component llvm-tools-preview\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: downgrade=\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Test with winsqlite3                            ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Format                                          ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Generate code coverage                          ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Format                                          ] \ud83c\udfc1  Job failed\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/Test with winsqlite3                            ] \ud83c\udfc1  Job failed\n[CI/Test ubuntu-latest (bundled SQLcipher + OpenSSL)] \ud83c\udfc1  Job failed\n[CI/Test x86_64-pc-windows-msvc                     ]   \u2705  Success - Main Swatinem/rust-cache@v2\n[CI/Docs                                            ]   \u2705  Success - Main Swatinem/rust-cache@v2\n[CI/Address Sanitizer                               ]   \u2705  Success - Main Swatinem/rust-cache@v2\n[CI/Test with sqlcipher                             ]   \u2705  Success - Main Swatinem/rust-cache@v2\n[CI/Generate code coverage                          ]   | info: downloading installer\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   | Rust is installed now. Great!\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   | To get started you may need to restart your current shell.\n[CI/Generate code coverage                          ]   | This would reload your PATH environment variable to include\n[CI/Generate code coverage                          ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   | To configure your current shell, run:\n[CI/Generate code coverage                          ]   | source \"$HOME/.cargo/env\"\n[CI/Generate code coverage                          ]   | info: profile set to 'default'\n[CI/Generate code coverage                          ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/Generate code coverage                          ]   | info: skipping toolchain installation\n[CI/Generate code coverage                          ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Test x86_64-pc-windows-msvc                     ]   \u2699  ::set-output:: cache-hit=false\n[CI/Docs                                            ]   \u2699  ::set-output:: cache-hit=false\n[CI/Address Sanitizer                               ]   \u2699  ::set-output:: cache-hit=false\n[CI/Test with sqlcipher                             ]   \u2699  ::set-output:: cache-hit=false\n[CI/Generate code coverage                          ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/Test x86_64-pc-windows-msvc                     ] \u2b50 Run Main cargo build --features bundled --workspace --all-targets --verbose\n[CI/Test with sqlcipher                             ] \u2b50 Run Main sudo apt-get install sqlcipher libsqlcipher-dev\n[CI/Docs                                            ] \u2b50 Run Main cargo doc --features 'bundled-full session buildtime_bindgen' --no-deps\n[CI/Generate code coverage                          ] \u2b50 Run Main rustup toolchain install stable\n[CI/Address Sanitizer                               ] \u2b50 Run Main Tests with asan\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Docs                                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Address Sanitizer                               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Test x86_64-pc-windows-msvc                     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/Docs                                            ]   | /var/run/act/workflow/3: line 2: cargo: command not found\n[CI/Address Sanitizer                               ]   | /var/run/act/workflow/3: line 2: cargo: command not found\n[CI/Generate code coverage                          ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/Test x86_64-pc-windows-msvc                     ]   | /var/run/act/workflow/3: line 2: cargo: command not found\n[CI/Address Sanitizer                               ]   \u274c  Failure - Main Tests with asan\n[CI/Docs                                            ]   \u274c  Failure - Main cargo doc --features 'bundled-full session buildtime_bindgen' --no-deps\n[CI/Test x86_64-pc-windows-msvc                     ]   \u274c  Failure - Main cargo build --features bundled --workspace --all-targets --verbose\n[CI/Generate code coverage                          ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/Generate code coverage                          ]   | info: downloading component 'cargo'\n[CI/Generate code coverage                          ]   | info: downloading component 'llvm-tools'\n[CI/Test with sqlcipher                             ]   | Reading package lists...\n[CI/Test with sqlcipher                             ]   | Building dependency tree...\n[CI/Test with sqlcipher                             ]   | Reading state information...\n[CI/Test with sqlcipher                             ]   | The following additional packages will be installed:\n[CI/Test with sqlcipher                             ]   |   libsqlcipher0\n[CI/Test with sqlcipher                             ]   | Suggested packages:\n[CI/Test with sqlcipher                             ]   |   sqlite3-doc\n[CI/Test with sqlcipher                             ]   | The following NEW packages will be installed:\n[CI/Test with sqlcipher                             ]   |   libsqlcipher-dev libsqlcipher0 sqlcipher\n[CI/Test with sqlcipher                             ]   | 0 upgraded, 3 newly installed, 0 to remove and 20 not upgraded.\n[CI/Test with sqlcipher                             ]   | Need to get 981 kB of archives.\n[CI/Test with sqlcipher                             ]   | After this operation, 2758 kB of additional disk space will be used.\n[CI/Test with sqlcipher                             ]   | Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 libsqlcipher0 amd64 3.4.1-1build2 [409 kB]\n[CI/Test with sqlcipher                             ]   | Get:2 http://archive.ubuntu.com/ubuntu focal/universe amd64 libsqlcipher-dev amd64 3.4.1-1build2 [531 kB]\n[CI/Test with sqlcipher                             ]   | Get:3 http://archive.ubuntu.com/ubuntu focal/universe amd64 sqlcipher amd64 3.4.1-1build2 [40.6 kB]\n[CI/Generate code coverage                          ]   | info: downloading component 'rust-std'\n[CI/Generate code coverage                          ]   | info: downloading component 'rustc'\n[CI/Test with sqlcipher                             ]   | Fetched 981 kB in 1s (930 kB/s)\n[CI/Test with sqlcipher                             ]   | Selecting previously unselected package libsqlcipher0:amd64.\r\n[CI/Test with sqlcipher                             ]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[CI/Test with sqlcipher                             ]   | Preparing to unpack .../libsqlcipher0_3.4.1-1build2_amd64.deb ...\r\n[CI/Address Sanitizer                               ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Docs                                            ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Test x86_64-pc-windows-msvc                     ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/Test with sqlcipher                             ]   | Unpacking libsqlcipher0:amd64 (3.4.1-1build2) ...\r\n[CI/Generate code coverage                          ]   | info: installing component 'cargo'\n[CI/Test with sqlcipher                             ]   | Selecting previously unselected package libsqlcipher-dev.\r\n[CI/Test with sqlcipher                             ]   | Preparing to unpack .../libsqlcipher-dev_3.4.1-1build2_amd64.deb ...\r\n[CI/Test with sqlcipher                             ]   | Unpacking libsqlcipher-dev (3.4.1-1build2) ...\r\n[CI/Generate code coverage                          ]   | info: installing component 'llvm-tools'\n[CI/Test with sqlcipher                             ]   | Selecting previously unselected package sqlcipher.\r\n[CI/Test with sqlcipher                             ]   | Preparing to unpack .../sqlcipher_3.4.1-1build2_amd64.deb ...\r\n[CI/Test with sqlcipher                             ]   | Unpacking sqlcipher (3.4.1-1build2) ...\r\n[CI/Test with sqlcipher                             ]   | Setting up libsqlcipher0:amd64 (3.4.1-1build2) ...\r\n[CI/Test with sqlcipher                             ]   | Setting up libsqlcipher-dev (3.4.1-1build2) ...\r\n[CI/Test with sqlcipher                             ]   | Setting up sqlcipher (3.4.1-1build2) ...\r\n[CI/Test with sqlcipher                             ]   | Processing triggers for libc-bin (2.31-0ubuntu9.2) ...\r\n[CI/Test with sqlcipher                             ]   \u2705  Success - Main sudo apt-get install sqlcipher libsqlcipher-dev\n[CI/Generate code coverage                          ]   | info: installing component 'rust-std'\n[CI/Test with sqlcipher                             ] \u2b50 Run Main sqlcipher --version\n[CI/Generate code coverage                          ]   | info: installing component 'rustc'\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[CI/Docs                                            ] \ud83c\udfc1  Job failed\n[CI/Address Sanitizer                               ] \ud83c\udfc1  Job failed\n[CI/Test x86_64-pc-windows-msvc                     ] \ud83c\udfc1  Job failed\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/Generate code coverage                          ]   \u2705  Success - Main rustup toolchain install stable\n[CI/Generate code coverage                          ] \u2b50 Run Main rustup default stable\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/Test with sqlcipher                             ]   | 3.15.2 2016-11-28 19:13:37 bbd85d235f7037c6a033a9690534391ffeacecc8\n[CI/Test with sqlcipher                             ]   \u2705  Success - Main sqlcipher --version\n[CI/Generate code coverage                          ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/Generate code coverage                          ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/Generate code coverage                          ]   | \n[CI/Generate code coverage                          ]   \u2705  Success - Main rustup default stable\n[CI/Generate code coverage                          ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/Test with sqlcipher                             ] \u2b50 Run Main cargo build --features sqlcipher --workspace --all-targets --verbose\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/Test with sqlcipher                             ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[CI/Test with sqlcipher                             ]   \u274c  Failure - Main cargo build --features sqlcipher --workspace --all-targets --verbose\n[CI/Generate code coverage                          ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/Generate code coverage                          ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/cdd42b9daed5b4f0332f8c6d02cf38c83d401acc1db6fa1d69bec1b6e137675e/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Test with sqlcipher                             ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/e0e68c884a8490d760f24fd655a493251ea4e45a47d83d399da34772774f15f2/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: cachekey=\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: name=stable\n[CI/Generate code coverage                          ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[CI/Generate code coverage                          ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/cdd42b9daed5b4f0332f8c6d02cf38c83d401acc1db6fa1d69bec1b6e137675e/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Generate code coverage                          ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/Generate code coverage                          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/Generate code coverage                          ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[CI/Test with sqlcipher                             ] \ud83c\udfc1  Job succeeded\n[CI/Generate code coverage                          ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/Generate code coverage                          ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}