{
    "repository": "rust-lang/stacker",
    "clone_url": "https://github.com/rust-lang/stacker.git",
    "timestamp": "2023-05-30T08:48:47.307452Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Test stacker on WASM                                                                 ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml rust_target:powerpc64le-unknown-linux-gnu]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] \u2b50 Run Main actions/checkout@v2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2705  Success - Main actions/checkout@v2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] \u2b50 Run Main Install Rust nightly\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::Destination /tmp/ae8f3216-bf65-40a2-b28a-d18fe0bab11e\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::download complete\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/ae8f3216-bf65-40a2-b28a-d18fe0bab11e\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/tmp/ae8f3216-bf65-40a2-b28a-d18fe0bab11e --default-toolchain none -y\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: downloading installer\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: profile set to 'default'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: skipping toolchain installation\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | Rust is installed now. Great!\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | To get started you may need to restart your current shell.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | This would reload your PATH environment variable to include\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | To configure your current shell, run:\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | source \"$HOME/.cargo/env\"\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | Default host: x86_64-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | rustup home:  /home/runneradmin/.rustup\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | no active toolchain\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | Installed rustup 1.26.0 support profiles\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: profile set to 'minimal'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml rust_target:aarch64-apple-ios rust_toolchain:nightly]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: downloading component 'cargo'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml mode:--release rust_target:aarch64-linux-android]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: downloading component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \u2601  git clone 'https://github.com/msys2/setup-msys2' # ref=v2\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml rust_target:x86_64-pc-windows-msvc xwin_version:0.1.6]\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] \u2b50 Run Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \u2601  git clone 'https://github.com/msys2/setup-msys2' # ref=v2\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Test stacker on WASM                                                                 ]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] \u2b50 Run Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: downloading component 'rustc'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \u2b50 Run Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml mingw_path:C:/msys64/mingw64/bin package:mingw-w64-x86_64-gcc rust_target:x86_64-pc-windows-gnu rust_toolchain:nightly]\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2705  Success - Main actions/checkout@v2\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2705  Success - Main actions/checkout@v2\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2705  Success - Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \u2601  git clone 'https://github.com/actions-rs/toolchain' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: installing component 'cargo'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ] \u2b50 Run Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: installing component 'rust-std'\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \u2705  Success - Main actions/checkout@v2\n[Test/Test stacker on WASM                                                                 ] \u2b50 Run Main actions/checkout@v1\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Test stacker on WASM                                                                 ]   \u2705  Success - Main actions/checkout@v1\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml rust_target:i686-unknown-freebsd]\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \u2b50 Run Main Install Rust\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] \u2b50 Run Main Install Rust\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] \u2b50 Run Main Install Rust\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ] \u2b50 Run Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2601  git clone 'https://github.com/actions-rs/cargo' # ref=v1\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe] \ud83e\uddea  Matrix: map[clang_cl:C:/msys64/mingw64/bin/clang-cl.exe manifest:psm/Cargo.toml package:mingw-w64-x86_64-clang rust_target:x86_64-pc-windows-msvc]\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2705  Success - Main actions/checkout@v2\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe] \u2b50 Run Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ] \u2b50 Run Main msys2/setup-msys2@v2\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \ud83e\uddea  Matrix: map[manifest:psm/Cargo.toml mode:--release os:ubuntu-latest rust_toolchain:nightly]\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: installing component 'rustc'\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \u2705  Success - Main actions/checkout@v2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \u2b50 Run Main actions/checkout@v2\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Test stacker on WASM                                                                 ] \u2b50 Run Main Install Rust nightly\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/msys2-setup-msys2@v2/ dst=/var/run/act/actions/msys2-setup-msys2@v2/\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2705  Success - Main actions/checkout@v2\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/msys2-setup-msys2@v2/] user=0 workdir=\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ] \u2b50 Run Main Install Rust\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe] \u2b50 Run Main msys2/setup-msys2@v2\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/msys2-setup-msys2@v2/ dst=/var/run/act/actions/msys2-setup-msys2@v2/\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/msys2-setup-msys2@v2/] user=0 workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \u2b50 Run Main Install Rust nightly\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-toolchain@v1/ dst=/var/run/act/actions/actions-rs-toolchain@v1/\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-toolchain@v1/] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: checking for self-update\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup default nightly\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | \n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain nightly powerpc64le-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: downloading component 'rust-std' for 'powerpc64le-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: installing component 'rust-std' for 'powerpc64le-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2753  ::group::Gathering installed versions\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2753  ::endgroup::\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2705  Success - Main Install Rust nightly\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] \u2b50 Run Main Build powerpc64le-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/msys2-setup-msys2@v2/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/msys2-setup-msys2@v2/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-toolchain@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::Destination /tmp/52cb814a-a233-4b5c-ad21-b07e05c3e638\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::download complete\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/52cb814a-a233-4b5c-ad21-b07e05c3e638\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/tmp/52cb814a-a233-4b5c-ad21-b07e05c3e638 --default-toolchain none -y\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udcac  ::debug::using toolchain from input: stable\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udcac  ::debug::Destination /tmp/a78e49c4-3b12-4f31-8d56-38628984b0a8\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udcac  ::debug::Destination /tmp/cc114131-14cd-49c4-b15e-250c7d35b4e6\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: downloading installer\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udcac  ::debug::download complete\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/a78e49c4-3b12-4f31-8d56-38628984b0a8\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/tmp/a78e49c4-3b12-4f31-8d56-38628984b0a8 --default-toolchain none -y\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udcac  ::debug::download complete\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/cc114131-14cd-49c4-b15e-250c7d35b4e6\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/tmp/cc114131-14cd-49c4-b15e-250c7d35b4e6 --default-toolchain none -y\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: downloading installer\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: downloading installer\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: profile set to 'default'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: skipping toolchain installation\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | Rust is installed now. Great!\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | To get started you may need to restart your current shell.\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | This would reload your PATH environment variable to include\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | To configure your current shell, run:\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | source \"$HOME/.cargo/env\"\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | Default host: x86_64-unknown-linux-gnu\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | rustup home:  /home/runneradmin/.rustup\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | no active toolchain\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | Installed rustup 1.26.0 support profiles\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: profile set to 'minimal'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: profile set to 'default'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: skipping toolchain installation\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | Rust is installed now. Great!\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | To get started you may need to restart your current shell.\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | This would reload your PATH environment variable to include\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | To configure your current shell, run:\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | source \"$HOME/.cargo/env\"\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: downloading component 'cargo'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | Default host: x86_64-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | rustup home:  /home/runneradmin/.rustup\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | no active toolchain\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | Installed rustup 1.26.0 support profiles\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: profile set to 'default'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: skipping toolchain installation\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | Rust is installed now. Great!\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | To get started you may need to restart your current shell.\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | This would reload your PATH environment variable to include\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | To configure your current shell, run:\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | source \"$HOME/.cargo/env\"\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: profile set to 'minimal'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: downloading component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | Default host: x86_64-unknown-linux-gnu\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | rustup home:  /home/runneradmin/.rustup\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | no active toolchain\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install stable\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | Installed rustup 1.26.0 support profiles\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: profile set to 'minimal'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: downloading component 'rustc'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: downloading component 'cargo'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: downloading component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: downloading component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: downloading component 'rust-std'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: installing component 'cargo'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: downloading component 'rustc'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: downloading component 'rustc'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: installing component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: installing component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: installing component 'cargo'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: installing component 'rustc'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: installing component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: installing component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: installing component 'rustc'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: installing component 'rustc'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: checking for self-update\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup default nightly\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain nightly aarch64-linux-android\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: downloading component 'rust-std' for 'aarch64-linux-android'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: installing component 'rust-std' for 'aarch64-linux-android'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: checking for self-update\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain stable x86_64-pc-windows-msvc\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-msvc'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: installing component 'rust-std' for 'x86_64-pc-windows-msvc'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2753  ::group::Gathering installed versions\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: checking for self-update\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup default nightly\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2753  ::endgroup::\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2705  Success - Main Install Rust\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain nightly aarch64-apple-ios\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: downloading component 'rust-std' for 'aarch64-apple-ios'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] \u2b50 Run Main Test\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: installing component 'rust-std' for 'aarch64-apple-ios'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2753  ::group::Gathering installed versions\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2699  ::set-output:: rustc=1.69.0 (84c898d65 2023-04-16)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2699  ::set-output:: rustc_hash=84c898d65\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | cargo 1.69.0 (6e9a83356 2023-04-12)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2699  ::set-output:: cargo=1.69.0 (6e9a83356 2023-04-12)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | info: The currently active `rustc` version is `rustc 1.69.0 (84c898d65 2023-04-16)`\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2753  ::endgroup::\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2705  Success - Main Install Rust\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udcac  ::debug::Destination /tmp/1040f675-cb9c-4af4-954e-992364855644\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udcac  ::debug::download complete\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/1040f675-cb9c-4af4-954e-992364855644\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/tmp/1040f675-cb9c-4af4-954e-992364855644 --default-toolchain none -y\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: downloading installer\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udcac  ::debug::Destination /tmp/b490ad7b-d8e4-4828-ae09-bdd1f4c1a342\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udcac  ::debug::using toolchain from input: nightly\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udcac  ::debug::Unable to find \"rustup\" executable, installing it now. Reason: Error: Unable to locate executable file: rustup. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udcac  ::debug::Downloading https://sh.rustup.rs\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udcac  ::debug::Destination /tmp/524cf675-acc9-4bb2-8db2-05f7484859f1\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   | internal/modules/cjs/loader.js:889\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |   const err = new Error(message);\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |               ^\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   | \n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   | Error: Cannot find module 'node:path'\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   | Require stack:\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   | - /run/act/actions/msys2-setup-msys2@v2/index.js\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:889:15)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at Function.Module._load (internal/modules/cjs/loader.js:745:27)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at Module.require (internal/modules/cjs/loader.js:961:19)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at require (internal/modules/cjs/helpers.js:92:18)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at file:///run/act/actions/msys2-setup-msys2@v2/index.js:16:569368\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at file:///run/act/actions/msys2-setup-msys2@v2/index.js:16:577337\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at ModuleJob.run (internal/modules/esm/module_job.js:170:25)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at async Loader.import (internal/modules/esm/loader.js:178:24)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |     at async Object.loadESM (internal/process/esm_loader.js:68:5) {\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |   code: 'MODULE_NOT_FOUND',\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   |   requireStack: [ '/run/act/actions/msys2-setup-msys2@v2/index.js' ]\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   | }\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \ud83d\udcac  ::debug::Error: Unable to locate executable file: cross. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2753  ::group::Installing \"cross = latest\"\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ]   \u274c  Failure - Main msys2/setup-msys2@v2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]/home/runneradmin/.cargo/bin/cargo install cross\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udcac  ::debug::download complete\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/b490ad7b-d8e4-4828-ae09-bdd1f4c1a342\n[Test/Test stacker on WASM                                                                 ]   | [command]/tmp/b490ad7b-d8e4-4828-ae09-bdd1f4c1a342 --default-toolchain none -y\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |     Updating crates.io index\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udcac  ::debug::download complete\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udcac  ::debug::Executing chmod 755 on the /tmp/524cf675-acc9-4bb2-8db2-05f7484859f1\n[Test/Test stacker on WASM                                                                 ]   | info: downloading installer\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/tmp/524cf675-acc9-4bb2-8db2-05f7484859f1 --default-toolchain none -y\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   | internal/modules/cjs/loader.js:889\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |   const err = new Error(message);\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |               ^\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   | \n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   | Error: Cannot find module 'node:path'\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   | Require stack:\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   | - /run/act/actions/msys2-setup-msys2@v2/index.js\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:889:15)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at Function.Module._load (internal/modules/cjs/loader.js:745:27)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at Module.require (internal/modules/cjs/loader.js:961:19)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at require (internal/modules/cjs/helpers.js:92:18)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at file:///run/act/actions/msys2-setup-msys2@v2/index.js:16:569368\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at file:///run/act/actions/msys2-setup-msys2@v2/index.js:16:577337\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at ModuleJob.run (internal/modules/esm/module_job.js:170:25)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at async Loader.import (internal/modules/esm/loader.js:178:24)\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |     at async Object.loadESM (internal/process/esm_loader.js:68:5) {\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |   code: 'MODULE_NOT_FOUND',\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   |   requireStack: [ '/run/act/actions/msys2-setup-msys2@v2/index.js' ]\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   | }\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe]   \u274c  Failure - Main msys2/setup-msys2@v2\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: downloading installer\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: profile set to 'default'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: skipping toolchain installation\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | Rust is installed now. Great!\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | To get started you may need to restart your current shell.\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | This would reload your PATH environment variable to include\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | To configure your current shell, run:\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | source \"$HOME/.cargo/env\"\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | Default host: x86_64-unknown-linux-gnu\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | rustup home:  /home/runneradmin/.rustup\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | no active toolchain\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | Installed rustup 1.26.0 support profiles\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: profile set to 'minimal'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |  Downloading crates ...\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2753  ::group::Gathering installed versions\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Test stacker on WASM                                                                 ]   | info: profile set to 'default'\n[Test/Test stacker on WASM                                                                 ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Test stacker on WASM                                                                 ]   | info: skipping toolchain installation\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | Rust is installed now. Great!\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | To get started you may need to restart your current shell.\n[Test/Test stacker on WASM                                                                 ]   | This would reload your PATH environment variable to include\n[Test/Test stacker on WASM                                                                 ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | To configure your current shell, run:\n[Test/Test stacker on WASM                                                                 ]   | source \"$HOME/.cargo/env\"\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Test stacker on WASM                                                                 ]   | Default host: x86_64-unknown-linux-gnu\n[Test/Test stacker on WASM                                                                 ]   | rustup home:  /home/runneradmin/.rustup\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | no active toolchain\n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Test stacker on WASM                                                                 ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded cross v0.2.5\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2753  ::endgroup::\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2705  Success - Main Install Rust\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Installing cross v0.2.5\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: downloading component 'cargo'\n[Test/Test stacker on WASM                                                                 ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |     Updating crates.io index\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \u2b50 Run Main Add toolchain shims\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ] exitcode '1': failure\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe] exitcode '1': failure\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: profile set to 'default'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: skipping toolchain installation\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | Rust is installed now. Great!\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | To get started you may need to restart your current shell.\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | This would reload your PATH environment variable to include\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | To configure your current shell, run:\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | source \"$HOME/.cargo/env\"\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'clippy'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: downloading component 'rust-std'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustup show\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | Default host: x86_64-unknown-linux-gnu\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | rustup home:  /home/runneradmin/.rustup\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | no active toolchain\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'rust-docs'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | Installed rustup 1.26.0 support profiles\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustup set profile minimal\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: profile set to 'minimal'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustup toolchain install nightly\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'rust-std'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: downloading component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: downloading component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] \u2b50 Run Main Build\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: downloading component 'rustc'\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-msvc with C:/msys64/mingw64/bin/clang-cl.exe] \ud83c\udfc1  Job failed\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |  Downloading crates ...\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded cfg-if v1.0.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded adler v1.0.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded proc-macro2 v1.0.59\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded serde v1.0.163\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded thiserror v1.0.40\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded version_check v0.9.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded static_assertions v1.1.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded shell-words v1.1.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded indexmap v1.9.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded textwrap v0.16.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded semver v1.0.17\n[Test/Test psm/Cargo.toml on x86_64-pc-windows-gnu with nightly                            ] \ud83c\udfc1  Job failed\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded rustc-demangle v0.1.23\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded owo-colors v3.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded termcolor v1.2.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded memchr v2.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded proc-macro-error-attr v1.0.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded object v0.30.3\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded shell-escape v0.1.5\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded which v4.4.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded color-eyre v0.6.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded linux-raw-sys v0.3.8\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded nix v0.26.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded nix v0.24.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded is_ci v1.1.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded clap v3.2.25\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded clap_derive v3.2.25\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded syn v2.0.18\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded serde_json v1.0.96\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded os_str_bytes v6.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded once_cell v1.17.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded indenter v0.3.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded eyre v0.6.8\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded ctrlc v3.3.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded addr2line v0.19.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded proc-macro-error v1.0.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded clap_lex v0.2.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded supports-color v1.3.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded directories v4.0.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded const-sha1 v0.2.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded serde_ignored v0.1.7\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded home v0.5.5\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded hashbrown v0.12.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded fastrand v1.9.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded backtrace v0.3.67\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded autocfg v1.1.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded atty v0.2.14\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded unicode-ident v1.0.9\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded toml v0.5.11\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded thiserror-impl v1.0.40\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'rustc'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded tempfile v3.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded strsim v0.10.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded serde_derive v1.0.163\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded ryu v1.0.13\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded rustix v0.37.19\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded rustc_version v0.4.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded quote v1.0.28\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded miniz_oxide v0.6.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded libc v0.2.144\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded io-lifetimes v1.0.11\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded heck v0.4.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded either v1.8.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded dirs-sys v0.3.7\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded cc v1.0.79\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded bitflags v1.3.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded syn v1.0.109\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded itoa v1.0.6\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Downloaded gimli v0.27.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling libc v0.2.144\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling proc-macro2 v1.0.59\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling unicode-ident v1.0.9\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling quote v1.0.28\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling version_check v0.9.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling cfg-if v1.0.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling bitflags v1.3.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling serde v1.0.163\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling syn v1.0.109\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling memchr v2.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling autocfg v1.1.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling io-lifetimes v1.0.11\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling cc v1.0.79\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling gimli v0.27.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling is_ci v1.1.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling rustix v0.37.19\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling once_cell v1.17.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling semver v1.0.17\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling adler v1.0.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling eyre v0.6.8\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling serde_json v1.0.96\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling static_assertions v1.1.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling heck v0.4.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling indenter v0.3.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling os_str_bytes v6.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling rustc-demangle v0.1.23\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling hashbrown v0.12.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling linux-raw-sys v0.3.8\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling thiserror v1.0.40\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling itoa v1.0.6\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling ryu v1.0.13\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling either v1.8.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling textwrap v0.16.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling cross v0.2.5\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling termcolor v1.2.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling fastrand v1.9.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling strsim v0.10.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling const-sha1 v0.2.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling shell-escape v0.1.5\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling shell-words v1.1.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling home v0.5.5\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling miniz_oxide v0.6.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling indexmap v1.9.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling proc-macro-error-attr v1.0.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling proc-macro-error v1.0.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling clap_lex v0.2.4\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling object v0.30.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling rustc_version v0.4.0\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: downloading component 'rustc'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling backtrace v0.3.67\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling syn v2.0.18\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling atty v0.2.14\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling nix v0.26.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling dirs-sys v0.3.7\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling which v4.4.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling nix v0.24.3\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling supports-color v1.3.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling directories v4.0.1\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling owo-colors v3.5.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling addr2line v0.19.0\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling ctrlc v3.3.1\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: installing component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling serde_derive v1.0.163\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling thiserror-impl v1.0.40\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'rustfmt'\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling tempfile v3.5.0\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: installing component 'rust-std'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling color-eyre v0.6.2\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: installing component 'cargo'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling clap_derive v3.2.25\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'clippy'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: installing component 'rust-std'\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'rust-docs'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling clap v3.2.25\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: installing component 'rustc'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: installing component 'rustc'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling toml v0.5.11\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Compiling serde_ignored v0.1.7\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'rust-std'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: checking for self-update\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup default nightly\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | \n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain nightly i686-unknown-freebsd\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: downloading component 'rust-std' for 'i686-unknown-freebsd'\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: installing component 'rust-std' for 'i686-unknown-freebsd'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: checking for self-update\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustup default nightly\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2753  ::group::Gathering installed versions\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'rustc'\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2753  ::endgroup::\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2705  Success - Main Install Rust nightly\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \u2b50 Run Main Test psm/Cargo.toml with --release\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2753  ::group::Gathering installed versions\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2753  ::endgroup::\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2705  Success - Main Install Rust\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ] \u2b50 Run Main Build i686-unknown-freebsd\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'rustfmt'\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test stacker on WASM                                                                 ]   | info: checking for self-update\n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/rustup default nightly\n[Test/Test stacker on WASM                                                                 ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test stacker on WASM                                                                 ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/rustup target add --toolchain nightly wasm32-wasi\n[Test/Test stacker on WASM                                                                 ]   | info: downloading component 'rust-std' for 'wasm32-wasi'\n[Test/Test stacker on WASM                                                                 ]   | info: installing component 'rust-std' for 'wasm32-wasi'\n[Test/Test stacker on WASM                                                                 ]   \u2753  ::group::Gathering installed versions\n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/rustc -V\n[Test/Test stacker on WASM                                                                 ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::set-output:: rustc=1.72.0-nightly (498553fc0 2023-05-29)\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::set-output:: rustc_hash=498553fc0\n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/cargo -V\n[Test/Test stacker on WASM                                                                 ]   | cargo 1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::set-output:: cargo=1.72.0-nightly (64fb38c97 2023-05-23)\n[Test/Test stacker on WASM                                                                 ]   | [command]/home/runneradmin/.cargo/bin/rustup -V\n[Test/Test stacker on WASM                                                                 ]   | rustup 1.26.0 (5af9b9484 2023-04-05)\n[Test/Test stacker on WASM                                                                 ]   | info: This is the version for the rustup toolchain manager, not the rustc compiler.\n[Test/Test stacker on WASM                                                                 ]   | info: The currently active `rustc` version is `rustc 1.72.0-nightly (498553fc0 2023-05-29)`\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::set-output:: rustup=1.26.0 (5af9b9484 2023-04-05)\n[Test/Test stacker on WASM                                                                 ]   \u2753  ::endgroup::\n[Test/Test stacker on WASM                                                                 ]   \u2705  Success - Main Install Rust nightly\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Test/Test stacker on WASM                                                                 ] \u2b50 Run Main curl -Lf https://github.com/bytecodealliance/wasmtime/releases/download/v0.19.0/wasmtime-v0.19.0-x86_64-linux.tar.xz | tar xJf - -C /opt/hostedtoolcache\necho \"/opt/hostedtoolcache/wasmtime-v0.19.0-x86_64-linux\" >> $GITHUB_PATH\necho \"CARGO_TARGET_WASM32_WASI_RUNNER=wasmtime run --\" >> $GITHUB_ENV\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + sudo ln -s clang-12 /usr/bin/clang-cl\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + sudo ln -s llvm-ar-12 /usr/bin/llvm-lib\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \ud83d\udcac  ::debug::Error: Unable to locate executable file: cross. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2753  ::group::Installing \"cross = latest\"\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]/home/runneradmin/.cargo/bin/cargo install cross\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + sudo ln -s lld-link-12 /usr/bin/lld-link\n[Test/Test stacker on WASM                                                                 ]   |   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n[Test/Test stacker on WASM                                                                 ]   |                                  Dload  Upload   Total   Spent    Left  Speed\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u2705  Success - Main Add toolchain shims\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |     Updating crates.io index\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Test/Test stacker on WASM                                                                 ]   | \r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |  Downloading crates ...\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   | [command]/home/runneradmin/.cargo/bin/cargo build --target i686-unknown-freebsd --manifest-path=psm/Cargo.toml\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded cross v0.2.5\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/cargo test --manifest-path=psm/Cargo.toml --release -- --nocapture\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Installing cross v0.2.5\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |     Updating crates.io index\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |     Updating crates.io index\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | [command]/home/runneradmin/.cargo/bin/cargo build --target=aarch64-apple-ios --manifest-path=psm/Cargo.toml\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |  Downloading crates ...\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |     Updating crates.io index\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |  Downloading crates ...\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |     Updating crates.io index\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |   Downloaded cc v1.0.79\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |  Downloading crates ...\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |    Compiling cc v1.0.79\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |   Downloaded cc v1.0.79\n[Test/Test stacker on WASM                                                                 ]   | \r 39 3612k   39 1434k    0     0  1631k      0  0:00:02 --:--:--  0:00:02 1631k\r100 3612k  100 3612k    0     0  2910k      0  0:00:01  0:00:01 --:--:-- 6032k\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |    Compiling cc v1.0.79\n[Test/Test stacker on WASM                                                                 ]   \u2705  Success - Main curl -Lf https://github.com/bytecodealliance/wasmtime/releases/download/v0.19.0/wasmtime-v0.19.0-x86_64-linux.tar.xz | tar xJf - -C /opt/hostedtoolcache\necho \"/opt/hostedtoolcache/wasmtime-v0.19.0-x86_64-linux\" >> $GITHUB_PATH\necho \"CARGO_TARGET_WASM32_WASI_RUNNER=wasmtime run --\" >> $GITHUB_ENV\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   Downloaded cc v1.0.79\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |     Blocking waiting for file lock on build directory\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |    Compiling psm v0.1.21 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |    Compiling psm v0.1.21 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm)\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::set-env:: CARGO_TARGET_WASM32_WASI_RUNNER=wasmtime run --\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   |     Finished dev [unoptimized + debuginfo] target(s) in 2.74s\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |    Compiling psm v0.1.21 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | error: failed to run custom build command for `psm v0.1.21 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm)`\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | Caused by:\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   process didn't exit successfully: `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm/target/debug/build/psm-286a80e2514e5967/build-script-build` (exit status: 1)\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   --- stdout\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   OPT_LEVEL = Some(\"0\")\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   TARGET = Some(\"aarch64-apple-ios\")\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   HOST = Some(\"x86_64-unknown-linux-gnu\")\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CC_aarch64-apple-ios\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CC_aarch64-apple-ios = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CC_aarch64_apple_ios\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CC_aarch64_apple_ios = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=TARGET_CC\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   TARGET_CC = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CC\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CC = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CFLAGS_aarch64-apple-ios\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CFLAGS_aarch64-apple-ios = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CFLAGS_aarch64_apple_ios\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CFLAGS_aarch64_apple_ios = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=TARGET_CFLAGS\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   TARGET_CFLAGS = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CFLAGS\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CFLAGS = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   CRATE_CC_NO_DEFAULTS = None\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   DEBUG = Some(\"true\")\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   Detecting iOS SDK path for iphoneos\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   running: \"xcrun\" \"--show-sdk-path\" \"--sdk\" \"iphoneos\"\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   --- stderr\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   |   error occurred: Failed to find tool. Is `xcrun` installed?\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |  Downloading crates ...\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u2757  ::error::The process '/home/runneradmin/.cargo/bin/cargo' failed with exit code 101\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ]   \u2705  Success - Main Build i686-unknown-freebsd\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ]   \u274c  Failure - Main Build\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |     Finished release [optimized] target(s) in 3.17s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests src/lib.rs (psm/target/release/deps/psm-ba042d3f63dfe35b)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 0 tests\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running tests/stack_direction.rs (psm/target/release/deps/stack_direction-96b81fa440f4fac4)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded object v0.30.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded syn v2.0.18\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded thiserror v1.0.40\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded which v4.4.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded proc-macro-error v1.0.4\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded quote v1.0.28\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded version_check v0.9.4\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded rustix v0.37.19\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded serde_derive v1.0.163\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded ryu v1.0.13\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded nix v0.24.3\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test always_equal ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.26s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded proc-macro-error-attr v1.0.4\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded memchr v2.5.0\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running tests/stack_direction_2.rs (psm/target/release/deps/stack_direction_2-2bb0408abda91de5)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded nix v0.26.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded linux-raw-sys v0.3.8\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded gimli v0.27.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded color-eyre v0.6.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded indexmap v1.9.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded fastrand v1.9.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded cfg-if v1.0.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded bitflags v1.3.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded autocfg v1.1.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded semver v1.0.17\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded rustc_version v0.4.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded os_str_bytes v6.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded unicode-ident v1.0.9\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded syn v1.0.109\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded serde v1.0.163\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded proc-macro2 v1.0.59\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded itoa v1.0.6\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded owo-colors v3.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded miniz_oxide v0.6.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded indenter v0.3.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded home v0.5.5\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded hashbrown v0.12.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded either v1.8.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded dirs-sys v0.3.7\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded const-sha1 v0.2.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded clap_lex v0.2.4\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded clap_derive v3.2.25\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded atty v0.2.14\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded adler v1.0.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded addr2line v0.19.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded io-lifetimes v1.0.11\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded toml v0.5.11\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded thiserror-impl v1.0.40\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded textwrap v0.16.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded termcolor v1.2.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded strsim v0.10.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded static_assertions v1.1.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded shell-words v1.1.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded serde_json v1.0.96\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded serde_ignored v0.1.7\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded is_ci v1.1.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded heck v0.4.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded eyre v0.6.8\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded directories v4.0.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded ctrlc v3.3.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded clap v3.2.25\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test direction_right ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.38s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |    Doc-tests psm\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded cc v1.0.79\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded backtrace v0.3.67\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded tempfile v3.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded once_cell v1.17.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded libc v0.2.144\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded supports-color v1.3.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded shell-escape v0.1.5\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Downloaded rustc-demangle v0.1.23\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling libc v0.2.144\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling proc-macro2 v1.0.59\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling quote v1.0.28\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling unicode-ident v1.0.9\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling version_check v0.9.4\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling cfg-if v1.0.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling bitflags v1.3.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling memchr v2.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling syn v1.0.109\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling serde v1.0.163\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling io-lifetimes v1.0.11\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling autocfg v1.1.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling cc v1.0.79\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling eyre v0.6.8\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling rustix v0.37.19\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling semver v1.0.17\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling adler v1.0.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling gimli v0.27.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling once_cell v1.17.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling is_ci v1.1.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling indenter v0.3.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling hashbrown v0.12.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling os_str_bytes v6.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling static_assertions v1.1.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling rustc-demangle v0.1.23\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling heck v0.4.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling thiserror v1.0.40\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling linux-raw-sys v0.3.8\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling serde_json v1.0.96\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling ryu v1.0.13\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling either v1.8.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling termcolor v1.2.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling textwrap v0.16.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling strsim v0.10.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling itoa v1.0.6\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling cross v0.2.5\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling fastrand v1.9.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling shell-escape v0.1.5\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling home v0.5.5\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling shell-words v1.1.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling const-sha1 v0.2.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling miniz_oxide v0.6.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling clap_lex v0.2.4\n[Test/Test stacker on WASM                                                                 ]   \u2699  ::add-path:: /opt/hostedtoolcache/wasmtime-v0.19.0-x86_64-linux\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling indexmap v1.9.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling proc-macro-error-attr v1.0.4\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling proc-macro-error v1.0.4\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 3 tests\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling rustc_version v0.4.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling object v0.30.3\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test src/lib.rs - psm_stack_information (line 369) ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test src/lib.rs - on_stack (line 166) ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test src/lib.rs - psm_stack_manipulation (line 326) ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.41s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2705  Success - Main Test psm/Cargo.toml with --release\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling syn v2.0.18\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling backtrace v0.3.67\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling atty v0.2.14\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling nix v0.26.2\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling dirs-sys v0.3.7\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling nix v0.24.3\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling which v4.4.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling supports-color v1.3.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling directories v4.0.1\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling owo-colors v3.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling addr2line v0.19.0\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \u2b50 Run Main Install Windows SDK\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] exitcode '1': failure\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling ctrlc v3.3.1\n[Test/Test stacker on WASM                                                                 ] \u2b50 Run Main cargo test --target wasm32-wasi --all -- --nocapture\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling serde_derive v1.0.163\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling thiserror-impl v1.0.40\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling tempfile v3.5.0\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling clap_derive v3.2.25\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling color-eyre v0.6.2\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |     Finished release [optimized] target(s) in 47.34s\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Installing /home/runneradmin/.cargo/bin/cross\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |   Installing /home/runneradmin/.cargo/bin/cross-util\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   |    Installed package `cross v0.2.5` (executables `cross`, `cross-util`)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling clap v3.2.25\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2753  ::endgroup::\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2753  ::endgroup::\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | [command]cross build --target powerpc64le-unknown-linux-gnu --manifest-path=psm/Cargo.toml\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \u2b50 Run Main Test psm/Cargo.toml examples with --release\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: downloading component 'rust-src'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | info: installing component 'rust-src'\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create\": dial unix /var/run/docker.sock: connect: permission denied.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   | See 'docker run --help'.\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u2757  ::error::The process 'cross' failed with exit code 126\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ]   \u274c  Failure - Main Build powerpc64le-unknown-linux-gnu\n[Test/Build psm/Cargo.toml to i686-unknown-freebsd on nightly                              ] \ud83c\udfc1  Job succeeded\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling serde_ignored v0.1.7\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Compiling toml v0.5.11\n[Test/Cross-compile psm/Cargo.toml to aarch64-apple-ios on nightly                         ] \ud83c\udfc1  Job failed\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Test/Test stacker on WASM                                                                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/actions-rs-cargo@v1/ dst=/var/run/act/actions/actions-rs-cargo@v1/\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + xwin_version=0.1.6\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + xwin_prefix=xwin-0.1.6-x86_64-unknown-linux-musl\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + curl --fail -L https://github.com/Jake-Shadle/xwin/releases/download/0.1.6/xwin-0.1.6-x86_64-unknown-linux-musl.tar.gz\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | + tar -xzv -C /home/runner/.cargo/bin --strip-components=1 xwin-0.1.6-x86_64-unknown-linux-musl/xwin\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   |   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   |                                  Dload  Upload   Total   Spent    Left  Speed\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n[Test/Test stacker on WASM                                                                 ]   |     Updating crates.io index\n[Test/Test stacker on WASM                                                                 ]   |  Downloading crates ...\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0tar: /home/runner/.cargo/bin: Cannot open: No such file or directory\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | tar: Error is not recoverable: exiting now\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | \r 12 3155k   12  399k    0     0   394k      0  0:00:08  0:00:01  0:00:07  716k\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   | curl: (23) Failed writing body (4738 != 16375)\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu]   \u274c  Failure - Main Install Windows SDK\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/actions-rs-cargo@v1/] user=0 workdir=\n[Test/Test stacker on WASM                                                                 ]   |   Downloaded cfg-if v1.0.0\n[Test/Test stacker on WASM                                                                 ]   |   Downloaded libc v0.2.144\n[Test/Test stacker on WASM                                                                 ]   |   Downloaded cc v1.0.79\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-rs-cargo@v1/dist/index.js] user= workdir=\n[Test/Test stacker on WASM                                                                 ]   |    Compiling cc v1.0.79\n[Test/Test stacker on WASM                                                                 ]   |    Compiling libc v0.2.144\n[Test/Test stacker on WASM                                                                 ]   |    Compiling cfg-if v1.0.0\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2753 add-matcher /run/act/actions/actions-rs-cargo@v1/dist/.matchers/rust.json\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | [command]/home/runneradmin/.cargo/bin/cargo test --manifest-path=psm/Cargo.toml --release --examples -- --nocapture\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |    Compiling psm v0.1.21 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm)\n[Test/Test stacker on WASM                                                                 ]   |    Compiling psm v0.1.21 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/psm)\n[Test/Test stacker on WASM                                                                 ]   |    Compiling stacker v0.1.15 (/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |     Finished release [optimized] target(s) in 0.78s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests examples/info.rs (psm/target/release/examples/info-a3ae203ee62a0926)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test stacker on WASM                                                                 ]   | warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n[Test/Test stacker on WASM                                                                 ]   |   --> tests/simple.rs:16:5\n[Test/Test stacker on WASM                                                                 ]   |    |\n[Test/Test stacker on WASM                                                                 ]   | 16 |     drop(x);\n[Test/Test stacker on WASM                                                                 ]   |    |     ^^^^^-^\n[Test/Test stacker on WASM                                                                 ]   |    |          |\n[Test/Test stacker on WASM                                                                 ]   |    |          argument has type `[u8; 50000]`\n[Test/Test stacker on WASM                                                                 ]   |    |\n[Test/Test stacker on WASM                                                                 ]   |    = note: use `let _ = ...` to ignore the expression or result\n[Test/Test stacker on WASM                                                                 ]   |    = note: `#[warn(dropping_copy_types)]` on by default\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | warning: `stacker` (test \"simple\") generated 1 warning\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | Stack is Descending and is at 0x7f0acd586620 currently\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test run_example ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.49s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests examples/on_stack_fibo.rs (psm/target/release/examples/on_stack_fibo-30372cd31b24119f)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(8) with 130560 bytes of stack\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(8) = 21\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(16) with 130560 bytes of stack\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(16) = 987\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(32) with 130560 bytes of stack\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(32) = 2178309\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test run_example ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.18s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests examples/on_stack_fibo_alloc_each_frame.rs (psm/target/release/examples/on_stack_fibo_alloc_each_frame-69017273a30cb6a0)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(8) = 21\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(16) = 987\n[Test/Test stacker on WASM                                                                 ]   |     Finished test [unoptimized + debuginfo] target(s) in 5.07s\n[Test/Test stacker on WASM                                                                 ]   |      Running tests/simple.rs (target/wasm32-wasi/debug/deps/simple-923024f36e26f071.wasm)\n[Test/Test stacker on WASM                                                                 ]   | Error: failed to run main module `/tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/target/wasm32-wasi/debug/deps/simple-923024f36e26f071.wasm`\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | Caused by:\n[Test/Test stacker on WASM                                                                 ]   |     bulk memory support is not enabled (at offset 312572)\n[Test/Test stacker on WASM                                                                 ]   | error: test failed, to rerun pass `--test simple`\n[Test/Test stacker on WASM                                                                 ]   | \n[Test/Test stacker on WASM                                                                 ]   | Caused by:\n[Test/Test stacker on WASM                                                                 ]   |   process didn't exit successfully: `wasmtime run -- /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/rust-lang-stacker/target/wasm32-wasi/debug/deps/simple-923024f36e26f071.wasm --nocapture` (exit status: 1)\n[Test/Test stacker on WASM                                                                 ]   \u274c  Failure - Main cargo test --target wasm32-wasi --all -- --nocapture\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(24) = 46368\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test run_example ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.05s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests examples/panics.rs (psm/target/release/examples/panics-cfbf8cd40287c546)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | thread 'run_example' panicked at 'full chain!', examples/panics.rs:18:17\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test run_example ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests examples/replace_stack_1.rs (psm/target/release/examples/replace_stack_1-afaa3766c88937ae)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | current stack pointer is 0x7f8b30745600\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | new stack is between 0x7f8b30505000 and 0x7f8b30545000\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | after replacement stack pointer is 0x7f8b30544fa0\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   |      Running unittests examples/thread.rs (psm/target/release/examples/thread-ae927289317e3478)\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | running 1 test\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(8) = 21\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(16) = 987\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | fib(24) = 46368\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test run_example ... ok\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.07s\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   | \n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ]   \u2705  Success - Main Test psm/Cargo.toml examples with --release\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] exitcode '1': failure\n[Test/Cross-compile psm/Cargo.toml to powerpc64le-unknown-linux-gnu with cargo-cross       ] \ud83c\udfc1  Job failed\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] exitcode '2': failure\n[Test/Test stacker on WASM                                                                 ] exitcode '1': failure\n[Test/Test psm/Cargo.toml on ubuntu-latest with nightly and --release                      ] \ud83c\udfc1  Job succeeded\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |     Finished release [optimized] target(s) in 47.26s\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Installing /home/runneradmin/.cargo/bin/cross\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |   Installing /home/runneradmin/.cargo/bin/cross-util\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   |    Installed package `cross v0.2.5` (executables `cross`, `cross-util`)\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2753  ::endgroup::\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2753  ::endgroup::\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | [command]cross test --target aarch64-linux-android --manifest-path=psm/Cargo.toml --release -- --test-threads=1 --nocapture\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: downloading component 'rust-src'\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | info: installing component 'rust-src'\n[Test/Cross-compile psm/Cargo.toml for x86_64-pc-windows-msvc from x86_64-unknown-linux-gnu] \ud83c\udfc1  Job failed\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create\": dial unix /var/run/docker.sock: connect: permission denied.\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   | See 'docker run --help'.\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u2757  ::error::The process 'cross' failed with exit code 126\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ]   \u274c  Failure - Main Test\n[Test/Test stacker on WASM                                                                 ] \ud83c\udfc1  Job failed\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] exitcode '1': failure\n[Test/Test psm/Cargo.toml on aarch64-linux-android with nightly --release                  ] \ud83c\udfc1  Job failed\n",
    "actions_stderr": "Error: Job 'Cross-compile ${{ matrix.manifest }} to ${{ matrix.rust_target }} with cargo-cross' failed\n"
}