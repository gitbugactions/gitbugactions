{
    "repository": "gakonst/ethers-rs",
    "clone_url": "https://github.com/gakonst/ethers-rs.git",
    "timestamp": "2023-05-30T09:38:34.824901Z",
    "clone_success": true,
    "number of actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[CI/clippy                                    ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/Examples                                  ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/feature checks                            ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/docs                                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/test celo feature (ubuntu-latest)-2       ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/WASM                                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/fmt                                       ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/test no default features (ubuntu-latest)-1] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/docs                                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/fmt                                       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/clippy                                    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/WASM                                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/Examples                                  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/feature checks                            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/docs                                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/WASM                                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/fmt                                       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Examples                                  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/feature checks                            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/clippy                                    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/docs                                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/clippy                                    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/fmt                                       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/feature checks                            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/Examples                                  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/WASM                                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gakonst-ethers-rs] user=0 workdir=\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gakonst-ethers-rs] user=0 workdir=\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gakonst-ethers-rs] user=0 workdir=\n[CI/docs                                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gakonst-ethers-rs] user=0 workdir=\n[CI/clippy                                    ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=clippy\n[CI/clippy                                    ] \u2b50 Run Pre dtolnay/rust-toolchain@clippy\n[CI/clippy                                    ]   \u2705  Success - Pre dtolnay/rust-toolchain@clippy\n[CI/clippy                                    ] failed to remove container: Error response from daemon: No such container: 8c1e9fea9af65e1218040451f1de7e99fc5e6dcb360042e1ccc30e41c2860e76\n[CI/clippy                                    ] \ud83c\udfc1  Job succeeded\n[CI/fmt                                       ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[CI/fmt                                       ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[CI/fmt                                       ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[CI/fmt                                       ] failed to remove container: Error response from daemon: No such container: 4589769cc590c520f915e0a1337760e4530e3c6cc0581eb01c860377112ff35a\n[CI/fmt                                       ] \ud83c\udfc1  Job succeeded\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gakonst-ethers-rs] user=0 workdir=\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gakonst-ethers-rs] user=0 workdir=\n[CI/feature checks                            ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/docs                                      ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/test no default features (ubuntu-latest)-1]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/feature checks                            ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[CI/docs                                      ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[CI/feature checks                            ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[CI/docs                                      ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[CI/test no default features (ubuntu-latest)-1] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[CI/test no default features (ubuntu-latest)-1]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[CI/feature checks                            ]   \u2601  git clone 'https://github.com/taiki-e/install-action' # ref=cargo-hack\n[CI/docs                                      ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/feature checks                            ] \u2b50 Run Pre taiki-e/install-action@cargo-hack\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2601  git clone 'https://github.com/foundry-rs/foundry-toolchain' # ref=v1\n[CI/test no default features (ubuntu-latest)-1]   \u2601  git clone 'https://github.com/foundry-rs/foundry-toolchain' # ref=v1\n[CI/feature checks                            ]   \u2705  Success - Pre taiki-e/install-action@cargo-hack\n[CI/docs                                      ] \u2b50 Run Main actions/checkout@v3\n[CI/docs                                      ]   \u2705  Success - Main actions/checkout@v3\n[CI/feature checks                            ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/docs                                      ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[CI/docs                                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[CI/docs                                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2601  git clone 'https://github.com/taiki-e/install-action' # ref=nextest\n[CI/test no default features (ubuntu-latest)-1]   \u2601  git clone 'https://github.com/taiki-e/install-action' # ref=nextest\n[CI/feature checks                            ] \u2b50 Run Main actions/checkout@v3\n[CI/feature checks                            ]   \u2705  Success - Main actions/checkout@v3\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Pre Install nextest\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Pre Install nextest\n[CI/feature checks                            ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[CI/test no default features (ubuntu-latest)-1] \u2b50 Run Pre Install nextest\n[CI/feature checks                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/test no default features (ubuntu-latest)-1]   \u2705  Success - Pre Install nextest\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/test no default features (ubuntu-latest)-1]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/test celo feature (ubuntu-latest)-2       ] \ud83e\uddea  Matrix: map[flags:map[flags:-p ethers-core -p ethers-providers -p ethers-contract --features celo name:celo feature] os:ubuntu-latest]\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main actions/checkout@v3\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Main actions/checkout@v3\n[CI/test no default features (ubuntu-latest)-1] \ud83e\uddea  Matrix: map[flags:map[flags:--no-default-features name:no default features] os:ubuntu-latest]\n[CI/test no default features (ubuntu-latest)-1] \u2b50 Run Main actions/checkout@v3\n[CI/test no default features (ubuntu-latest)-1]   \u2705  Success - Main actions/checkout@v3\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/test no default features (ubuntu-latest)-1] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/docs                                      ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/test no default features (ubuntu-latest)-1] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/feature checks                            ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Examples                                  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/WASM                                      ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/Examples                                  ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/docs                                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/WASM                                      ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[CI/Examples                                  ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[CI/WASM                                      ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[CI/Examples                                  ]   \u2601  git clone 'https://github.com/foundry-rs/foundry-toolchain' # ref=v1\n[CI/WASM                                      ]   \u2601  git clone 'https://github.com/foundry-rs/foundry-toolchain' # ref=v1\n[CI/Examples                                  ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/WASM                                      ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/Examples                                  ] \u2b50 Run Main actions/checkout@v3\n[CI/WASM                                      ]   \u2601  git clone 'https://github.com/actions/setup-node' # ref=v3\n[CI/Examples                                  ]   \u2705  Success - Main actions/checkout@v3\n[CI/WASM                                      ] \u2b50 Run Main actions/checkout@v3\n[CI/WASM                                      ]   \u2705  Success - Main actions/checkout@v3\n[CI/Examples                                  ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[CI/Examples                                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/WASM                                      ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[CI/WASM                                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/docs                                      ]   | /var/run/act/workflow/1-composite-parse.sh: line 12: echo: write error: No space left on device\n[CI/test no default features (ubuntu-latest)-1]   | /var/run/act/workflow/1-composite-parse.sh: line 12: echo: write error: No space left on device\n[CI/test no default features (ubuntu-latest)-1]   \u274c  Failure - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/docs                                      ]   \u274c  Failure - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/feature checks                            ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/WASM                                      ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Examples                                  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/Examples                                  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::set-output:: toolchain=stable\n[CI/feature checks                            ]   \u2699  ::set-output:: toolchain=stable\n[CI/docs                                      ] exitcode '1': failure\n[CI/test no default features (ubuntu-latest)-1] exitcode '1': failure\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/feature checks                            ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/Examples                                  ]   \u2699  ::set-output:: toolchain=stable\n[CI/Examples                                  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/WASM                                      ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/docs                                      ]   \u2699  ::set-output:: cachekey=\n[CI/docs                                      ]   \u2699  ::set-output:: name=\n[CI/docs                                      ]   \u274c  Failure - Main dtolnay/rust-toolchain@nightly\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/test no default features (ubuntu-latest)-1]   \u2699  ::set-output:: cachekey=\n[CI/test no default features (ubuntu-latest)-1]   \u2699  ::set-output:: name=\n[CI/test no default features (ubuntu-latest)-1]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[CI/WASM                                      ]   \u2699  ::set-output:: toolchain=stable\n[CI/WASM                                      ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/test no default features (ubuntu-latest)-1] exitcode '1': failure\n[CI/docs                                      ] exitcode '1': failure\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/docs                                      ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[CI/docs                                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[CI/test no default features (ubuntu-latest)-1] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/docs                                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[CI/test no default features (ubuntu-latest)-1]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/docs                                      ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/test no default features (ubuntu-latest)-1]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[CI/feature checks                            ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/Examples                                  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/WASM                                      ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/Examples                                  ]   \u2699  ::set-output:: targets=\n[CI/Examples                                  ]   \u2699  ::set-output:: components=\n[CI/Examples                                  ]   \u2699  ::set-output:: downgrade=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::set-output:: targets=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::set-output:: components=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::set-output:: downgrade=\n[CI/feature checks                            ]   \u2699  ::set-output:: components=\n[CI/feature checks                            ]   \u2699  ::set-output:: downgrade=\n[CI/feature checks                            ]   \u2699  ::set-output:: targets=\n[CI/WASM                                      ]   \u2699  ::set-output:: targets= --target wasm32-unknown-unknown\n[CI/WASM                                      ]   \u2699  ::set-output:: components=\n[CI/WASM                                      ]   \u2699  ::set-output:: downgrade=\n[CI/feature checks                            ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Examples                                  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/WASM                                      ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/docs                                      ] \ud83c\udfc1  Job failed\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/test no default features (ubuntu-latest)-1] \ud83c\udfc1  Job failed\n[CI/Examples                                  ]   | info: downloading installer\n[CI/WASM                                      ]   | info: downloading installer\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: downloading installer\n[CI/feature checks                            ]   | info: downloading installer\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: profile set to 'default'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: skipping toolchain installation\n[CI/test celo feature (ubuntu-latest)-2       ]   | \n[CI/test celo feature (ubuntu-latest)-2       ]   | \n[CI/test celo feature (ubuntu-latest)-2       ]   | Rust is installed now. Great!\n[CI/test celo feature (ubuntu-latest)-2       ]   | \n[CI/test celo feature (ubuntu-latest)-2       ]   | To get started you may need to restart your current shell.\n[CI/test celo feature (ubuntu-latest)-2       ]   | This would reload your PATH environment variable to include\n[CI/test celo feature (ubuntu-latest)-2       ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/test celo feature (ubuntu-latest)-2       ]   | \n[CI/test celo feature (ubuntu-latest)-2       ]   | To configure your current shell, run:\n[CI/test celo feature (ubuntu-latest)-2       ]   | source \"$HOME/.cargo/env\"\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/feature checks                            ]   | info: profile set to 'default'\n[CI/feature checks                            ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/feature checks                            ]   | info: skipping toolchain installation\n[CI/feature checks                            ]   | \n[CI/feature checks                            ]   | \n[CI/feature checks                            ]   | Rust is installed now. Great!\n[CI/feature checks                            ]   | \n[CI/feature checks                            ]   | To get started you may need to restart your current shell.\n[CI/feature checks                            ]   | This would reload your PATH environment variable to include\n[CI/feature checks                            ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/feature checks                            ]   | \n[CI/feature checks                            ]   | To configure your current shell, run:\n[CI/feature checks                            ]   | source \"$HOME/.cargo/env\"\n[CI/WASM                                      ]   | info: profile set to 'default'\n[CI/WASM                                      ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/WASM                                      ]   | info: skipping toolchain installation\n[CI/WASM                                      ]   | \n[CI/WASM                                      ]   | \n[CI/WASM                                      ]   | Rust is installed now. Great!\n[CI/WASM                                      ]   | \n[CI/WASM                                      ]   | To get started you may need to restart your current shell.\n[CI/WASM                                      ]   | This would reload your PATH environment variable to include\n[CI/WASM                                      ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/WASM                                      ]   | \n[CI/WASM                                      ]   | To configure your current shell, run:\n[CI/WASM                                      ]   | source \"$HOME/.cargo/env\"\n[CI/feature checks                            ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/WASM                                      ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Examples                                  ]   | info: profile set to 'default'\n[CI/Examples                                  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/Examples                                  ]   | info: skipping toolchain installation\n[CI/Examples                                  ]   | \n[CI/Examples                                  ]   | \n[CI/Examples                                  ]   | Rust is installed now. Great!\n[CI/Examples                                  ]   | \n[CI/Examples                                  ]   | To get started you may need to restart your current shell.\n[CI/Examples                                  ]   | This would reload your PATH environment variable to include\n[CI/Examples                                  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/Examples                                  ]   | \n[CI/Examples                                  ]   | To configure your current shell, run:\n[CI/Examples                                  ]   | source \"$HOME/.cargo/env\"\n[CI/Examples                                  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/Examples                                  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/feature checks                            ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/WASM                                      ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/feature checks                            ] \u2b50 Run Main rustup toolchain install stable\n[CI/Examples                                  ] \u2b50 Run Main rustup toolchain install stable\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main rustup toolchain install stable\n[CI/WASM                                      ] \u2b50 Run Main rustup toolchain install stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/Examples                                  ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/WASM                                      ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/feature checks                            ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: downloading component 'cargo'\n[CI/WASM                                      ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/WASM                                      ]   | info: downloading component 'cargo'\n[CI/feature checks                            ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/feature checks                            ]   | info: downloading component 'cargo'\n[CI/Examples                                  ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/Examples                                  ]   | info: downloading component 'cargo'\n[CI/WASM                                      ]   | info: downloading component 'rust-std' for 'wasm32-unknown-unknown'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: downloading component 'rust-std'\n[CI/Examples                                  ]   | info: downloading component 'rust-std'\n[CI/feature checks                            ]   | info: downloading component 'rust-std'\n[CI/WASM                                      ]   | info: downloading component 'rust-std'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: downloading component 'rustc'\n[CI/Examples                                  ]   | info: downloading component 'rustc'\n[CI/feature checks                            ]   | info: downloading component 'rustc'\n[CI/WASM                                      ]   | info: downloading component 'rustc'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: installing component 'cargo'\n[CI/Examples                                  ]   | info: installing component 'cargo'\n[CI/WASM                                      ]   | info: installing component 'cargo'\n[CI/Examples                                  ]   | info: installing component 'rust-std'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: installing component 'rust-std'\n[CI/feature checks                            ]   | info: installing component 'cargo'\n[CI/WASM                                      ]   | info: installing component 'rust-std' for 'wasm32-unknown-unknown'\n[CI/feature checks                            ]   | info: installing component 'rust-std'\n[CI/WASM                                      ]   | info: installing component 'rust-std'\n[CI/Examples                                  ]   | info: installing component 'rustc'\n[CI/test celo feature (ubuntu-latest)-2       ]   | info: installing component 'rustc'\n[CI/feature checks                            ]   | info: installing component 'rustc'\n[CI/WASM                                      ]   | info: installing component 'rustc'\n[CI/test celo feature (ubuntu-latest)-2       ]   | \n[CI/test celo feature (ubuntu-latest)-2       ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/test celo feature (ubuntu-latest)-2       ]   | \n[CI/test celo feature (ubuntu-latest)-2       ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Main rustup toolchain install stable\n[CI/Examples                                  ]   | \n[CI/Examples                                  ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/Examples                                  ]   | \n[CI/Examples                                  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/Examples                                  ]   \u2705  Success - Main rustup toolchain install stable\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Main rustup default stable\n[CI/feature checks                            ]   | \n[CI/feature checks                            ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/feature checks                            ]   | \n[CI/feature checks                            ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/feature checks                            ]   \u2705  Success - Main rustup toolchain install stable\n[CI/Examples                                  ] \u2b50 Run Main rustup default stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/feature checks                            ] \u2b50 Run Main rustup default stable\n[CI/WASM                                      ]   | \n[CI/WASM                                      ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/WASM                                      ]   | \n[CI/WASM                                      ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/WASM                                      ]   \u2705  Success - Main rustup toolchain install stable\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/WASM                                      ] \u2b50 Run Main rustup default stable\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u274c  Failure - Main rustup default stable\n[CI/feature checks                            ]   \u274c  Failure - Main rustup default stable\n[CI/WASM                                      ]   \u274c  Failure - Main rustup default stable\n[CI/Examples                                  ]   \u274c  Failure - Main rustup default stable\n[CI/test celo feature (ubuntu-latest)-2       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/fb9ba5b57fb95a6ffd8f8d59651ed13538917ae0752a10c368a0ad52031ff731/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/feature checks                            ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/5358edd077584e69bc2e20b2f045c9065df9e00b05d0bf9bdf16d72961c84031/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/WASM                                      ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/192ab30fd058a7d2da2d5742aa322597a49ff4aa6212bebe542e7ccb2487b4ef/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Examples                                  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/d767b223be7aaa813ace6cfd5f7a9908c21204a24a2552c36e4dbb42582b7996/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::set-output:: cachekey=\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2699  ::set-output:: name=stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[CI/feature checks                            ]   \u2699  ::set-output:: cachekey=\n[CI/test celo feature (ubuntu-latest)-2       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/fb9ba5b57fb95a6ffd8f8d59651ed13538917ae0752a10c368a0ad52031ff731/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/Examples                                  ]   \u2699  ::set-output:: cachekey=\n[CI/feature checks                            ]   \u2699  ::set-output:: name=stable\n[CI/feature checks                            ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[CI/Examples                                  ]   \u2699  ::set-output:: name=stable\n[CI/Examples                                  ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[CI/WASM                                      ]   \u2699  ::set-output:: cachekey=\n[CI/Examples                                  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/d767b223be7aaa813ace6cfd5f7a9908c21204a24a2552c36e4dbb42582b7996/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/feature checks                            ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/5358edd077584e69bc2e20b2f045c9065df9e00b05d0bf9bdf16d72961c84031/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/WASM                                      ]   \u2699  ::set-output:: name=stable\n[CI/WASM                                      ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[CI/WASM                                      ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/192ab30fd058a7d2da2d5742aa322597a49ff4aa6212bebe542e7ccb2487b4ef/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/feature checks                            ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[CI/test celo feature (ubuntu-latest)-2       ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[CI/Examples                                  ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[CI/WASM                                      ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[CI/feature checks                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/WASM                                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/Examples                                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/WASM                                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/feature checks                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/Examples                                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/test celo feature (ubuntu-latest)-2       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/WASM                                      ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[CI/feature checks                            ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[CI/Examples                                  ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[CI/test celo feature (ubuntu-latest)-2       ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[CI/Examples                                  ] \ud83c\udfc1  Job succeeded\n[CI/WASM                                      ] \ud83c\udfc1  Job succeeded\n[CI/test celo feature (ubuntu-latest)-2       ] \ud83c\udfc1  Job failed\n[CI/feature checks                            ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}