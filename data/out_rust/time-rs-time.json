{
    "repository": "time-rs/time",
    "clone_url": "https://github.com/time-rs/time.git",
    "timestamp": "2023-05-30T08:30:37.200218Z",
    "clone_success": true,
    "number of actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Build/Type-check benchmarks       ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Type checking (MSRV, no_std)] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Formatting                  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Cross-build                 ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Test (miri)                 ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Documentation               ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Test (Ubuntu, MSRV)         ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Coverage                    ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Clippy                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Coverage                    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Documentation               ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Formatting                  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Test (miri)                 ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Cross-build                 ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Clippy                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Formatting                  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Coverage                    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Test (miri)                 ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Documentation               ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Clippy                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Cross-build                 ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Cross-build                 ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Test (miri)                 ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Clippy                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Formatting                  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Documentation               ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Coverage                    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Documentation               ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Build/Test (Ubuntu, MSRV)         ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Build/Formatting                  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Build/Type-check benchmarks       ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Build/Coverage                    ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Build/Cross-build                 ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Test (miri)                 ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Build/Type checking (MSRV, no_std)]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Build/Documentation               ] \u2b50 Run Pre Install toolchain\n[Build/Documentation               ]   \u2705  Success - Pre Install toolchain\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Pre Install toolchain\n[Build/Type-check benchmarks       ] \u2b50 Run Pre Install toolchain\n[Build/Formatting                  ] \u2b50 Run Pre Install toolchain\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/time-rs-time] user=0 workdir=\n[Build/Coverage                    ] \u2b50 Run Pre Install toolchain\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Pre Install toolchain\n[Build/Cross-build                 ] \u2b50 Run Pre Install toolchain\n[Build/Test (miri)                 ] \u2b50 Run Pre Install toolchain\n[Build/Type-check benchmarks       ]   \u2705  Success - Pre Install toolchain\n[Build/Formatting                  ]   \u2705  Success - Pre Install toolchain\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Pre Install toolchain\n[Build/Documentation               ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[Build/Documentation               ]   \u2601  git clone 'https://github.com/JamesIves/github-pages-deploy-action' # ref=releases/v4\n[Build/Coverage                    ]   \u2705  Success - Pre Install toolchain\n[Build/Test (miri)                 ]   \u2705  Success - Pre Install toolchain\n[Build/Cross-build                 ]   \u2705  Success - Pre Install toolchain\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Pre Install toolchain\n[Build/Test (Ubuntu, MSRV)         ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[Build/Type-check benchmarks       ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[Build/Coverage                    ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[Build/Formatting                  ] \u2b50 Run Main Checkout sources\n[Build/Type checking (MSRV, no_std)]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[Build/Cross-build                 ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[Build/Formatting                  ]   \u2705  Success - Main Checkout sources\n[Build/Test (miri)                 ] \u2b50 Run Main Checkout sources\n[Build/Test (miri)                 ]   \u2705  Success - Main Checkout sources\n[Build/Formatting                  ] \u2b50 Run Main Install toolchain\n[Build/Test (miri)                 ] \u2b50 Run Main Install toolchain\n[Build/Formatting                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Test (miri)                 ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Documentation               ]   \u2601  git clone 'https://github.com/JamesIves/github-pages-deploy-action' # ref=releases/v4\n[Build/Test (Ubuntu, MSRV)         ] \ud83e\uddea  Matrix: map[os:map[name:Ubuntu value:ubuntu-latest] rust:map[name:MSRV version:1.65.0]]\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main Checkout sources\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Main Checkout sources\n[Build/Type-check benchmarks       ] \u2b50 Run Main Checkout sources\n[Build/Type-check benchmarks       ]   \u2705  Success - Main Checkout sources\n[Build/Coverage                    ] \u2b50 Run Main Checkout\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main Install toolchain\n[Build/Type checking (MSRV, no_std)] \ud83e\uddea  Matrix: map[kind:map[exclude-features:[std formatting serde-human-readable serde-well-known local-offset quickcheck] group-features:[ubuntu-latest] name:no_std query:.no_std + .std_no_offset + .std_with_offset] rust:map[name:MSRV version:1.65.0]]\n[Build/Coverage                    ]   \u2705  Success - Main Checkout\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main Checkout sources\n[Build/Type-check benchmarks       ] \u2b50 Run Main Install toolchain\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Main Checkout sources\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Build/Cross-build                 ] \u2b50 Run Main Checkout sources\n[Build/Cross-build                 ]   \u2705  Success - Main Checkout sources\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Build/Coverage                    ] \u2b50 Run Main Install toolchain\n[Build/Coverage                    ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main Generate target list\n[Build/Cross-build                 ] \u2b50 Run Main Install toolchain\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1.sh] user= workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Build/Documentation               ] \u2b50 Run Main Checkout\n[Build/Documentation               ]   \u2705  Success - Main Checkout\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Build/Documentation               ] \u2b50 Run Main Install toolchain\n[Build/Documentation               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Clippy                      ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Main Generate target list\n[Build/Documentation               ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Test (miri)                 ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Type-check benchmarks       ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Clippy                      ] \u2b50 Run Pre Install toolchain\n[Build/Formatting                  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Cross-build                 ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Coverage                    ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-env:: TARGETS=thumbv7em-none-eabihf,x86_64-unknown-netbsd,x86_64-unknown-illumos,wasm32-wasi,x86_64-unknown-linux-gnu,x86_64-apple-darwin,x86_64-pc-windows-gnu\n[Build/Clippy                      ]   \u2705  Success - Pre Install toolchain\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main Install toolchain\n[Build/Clippy                      ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Build/Clippy                      ] \u2b50 Run Main Checkout sources\n[Build/Clippy                      ]   \u2705  Success - Main Checkout sources\n[Build/Clippy                      ] \u2b50 Run Main Install toolchain\n[Build/Clippy                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Formatting                  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Documentation               ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Type-check benchmarks       ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Coverage                    ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Test (miri)                 ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Cross-build                 ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Clippy                      ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Formatting                  ]   \u2699  ::set-output:: toolchain=nightly\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::set-output:: toolchain=1.65.0\n[Build/Coverage                    ]   \u2699  ::set-output:: toolchain=nightly\n[Build/Type-check benchmarks       ]   \u2699  ::set-output:: toolchain=stable\n[Build/Documentation               ]   \u2699  ::set-output:: toolchain=nightly\n[Build/Test (miri)                 ]   \u2699  ::set-output:: toolchain=nightly\n[Build/Cross-build                 ]   \u2699  ::set-output:: toolchain=stable\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-parse.sh] user= workdir=\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Documentation               ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Type-check benchmarks       ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Coverage                    ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Formatting                  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[Build/Cross-build                 ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Test (miri)                 ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Documentation               ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Formatting                  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[Build/Clippy                      ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Coverage                    ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Type-check benchmarks       ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Test (miri)                 ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[Build/Cross-build                 ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-output:: toolchain=1.65.0\n[Build/Clippy                      ]   \u2699  ::set-output:: toolchain=stable\n[Build/Documentation               ]   \u2699  ::set-output:: targets=\n[Build/Documentation               ]   \u2699  ::set-output:: components=\n[Build/Documentation               ]   \u2699  ::set-output:: downgrade=\n[Build/Test (miri)                 ]   \u2699  ::set-output:: targets=\n[Build/Test (miri)                 ]   \u2699  ::set-output:: components= --component miri\n[Build/Test (miri)                 ]   \u2699  ::set-output:: downgrade= --allow-downgrade\n[Build/Coverage                    ]   \u2699  ::set-output:: targets=\n[Build/Coverage                    ]   \u2699  ::set-output:: components=\n[Build/Coverage                    ]   \u2699  ::set-output:: downgrade=\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::set-output:: targets=\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::set-output:: components=\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::set-output:: downgrade=\n[Build/Formatting                  ]   \u2699  ::set-output:: targets=\n[Build/Formatting                  ]   \u2699  ::set-output:: components= --component rustfmt\n[Build/Formatting                  ]   \u2699  ::set-output:: downgrade= --allow-downgrade\n[Build/Type-check benchmarks       ]   \u2699  ::set-output:: targets=\n[Build/Type-check benchmarks       ]   \u2699  ::set-output:: components=\n[Build/Type-check benchmarks       ]   \u2699  ::set-output:: downgrade=\n[Build/Cross-build                 ]   \u2699  ::set-output:: targets= --target x86_64-pc-windows-gnu\n[Build/Cross-build                 ]   \u2699  ::set-output:: components=\n[Build/Cross-build                 ]   \u2699  ::set-output:: downgrade=\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Documentation               ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Type-check benchmarks       ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Clippy                      ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Cross-build                 ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Formatting                  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Test (miri)                 ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Coverage                    ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-flags.sh] user= workdir=\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Clippy                      ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Build/Cross-build                 ]   | info: downloading installer\n[Build/Test (Ubuntu, MSRV)         ]   | info: downloading installer\n[Build/Documentation               ]   | info: downloading installer\n[Build/Coverage                    ]   | info: downloading installer\n[Build/Type-check benchmarks       ]   | info: downloading installer\n[Build/Formatting                  ]   | info: downloading installer\n[Build/Test (miri)                 ]   | info: downloading installer\n[Build/Test (Ubuntu, MSRV)         ]   | info: profile set to 'default'\n[Build/Test (Ubuntu, MSRV)         ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Test (Ubuntu, MSRV)         ]   | info: skipping toolchain installation\n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | Rust is installed now. Great!\n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | To get started you may need to restart your current shell.\n[Build/Test (Ubuntu, MSRV)         ]   | This would reload your PATH environment variable to include\n[Build/Test (Ubuntu, MSRV)         ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | To configure your current shell, run:\n[Build/Test (Ubuntu, MSRV)         ]   | source \"$HOME/.cargo/env\"\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Cross-build                 ]   | info: profile set to 'default'\n[Build/Cross-build                 ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Cross-build                 ]   | info: skipping toolchain installation\n[Build/Cross-build                 ]   | \n[Build/Cross-build                 ]   | \n[Build/Cross-build                 ]   | Rust is installed now. Great!\n[Build/Cross-build                 ]   | \n[Build/Cross-build                 ]   | To get started you may need to restart your current shell.\n[Build/Cross-build                 ]   | This would reload your PATH environment variable to include\n[Build/Cross-build                 ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Cross-build                 ]   | \n[Build/Cross-build                 ]   | To configure your current shell, run:\n[Build/Cross-build                 ]   | source \"$HOME/.cargo/env\"\n[Build/Cross-build                 ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Test (miri)                 ]   | info: profile set to 'default'\n[Build/Test (miri)                 ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Test (miri)                 ]   | info: skipping toolchain installation\n[Build/Test (miri)                 ]   | \n[Build/Test (miri)                 ]   | \n[Build/Test (miri)                 ]   | Rust is installed now. Great!\n[Build/Test (miri)                 ]   | \n[Build/Test (miri)                 ]   | To get started you may need to restart your current shell.\n[Build/Test (miri)                 ]   | This would reload your PATH environment variable to include\n[Build/Test (miri)                 ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Test (miri)                 ]   | \n[Build/Test (miri)                 ]   | To configure your current shell, run:\n[Build/Test (miri)                 ]   | source \"$HOME/.cargo/env\"\n[Build/Documentation               ]   | \n[Build/Coverage                    ]   | info: profile set to 'default'\n[Build/Documentation               ]   | \n[Build/Coverage                    ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Documentation               ]   | Rust is installed now. Great!\n[Build/Coverage                    ]   | info: skipping toolchain installation\n[Build/Coverage                    ]   | \n[Build/Documentation               ]   | \n[Build/Coverage                    ]   | \n[Build/Coverage                    ]   | Rust is installed now. Great!\n[Build/Coverage                    ]   | \n[Build/Coverage                    ]   | To get started you may need to restart your current shell.\n[Build/Documentation               ]   | To get started you may need to restart your current shell.\n[Build/Coverage                    ]   | This would reload your PATH environment variable to include\n[Build/Coverage                    ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Documentation               ]   | This would reload your PATH environment variable to include\n[Build/Documentation               ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Documentation               ]   | \n[Build/Documentation               ]   | To configure your current shell, run:\n[Build/Documentation               ]   | source \"$HOME/.cargo/env\"\n[Build/Type-check benchmarks       ]   | info: profile set to 'default'\n[Build/Documentation               ]   | info: profile set to 'default'\n[Build/Documentation               ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Type-check benchmarks       ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Documentation               ]   | info: skipping toolchain installation\n[Build/Type-check benchmarks       ]   | info: skipping toolchain installation\n[Build/Coverage                    ]   | \n[Build/Type-check benchmarks       ]   | \n[Build/Coverage                    ]   | To configure your current shell, run:\n[Build/Type-check benchmarks       ]   | \n[Build/Coverage                    ]   | source \"$HOME/.cargo/env\"\n[Build/Type-check benchmarks       ]   | Rust is installed now. Great!\n[Build/Type-check benchmarks       ]   | \n[Build/Type-check benchmarks       ]   | To get started you may need to restart your current shell.\n[Build/Type-check benchmarks       ]   | This would reload your PATH environment variable to include\n[Build/Type-check benchmarks       ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Type-check benchmarks       ]   | \n[Build/Type-check benchmarks       ]   | To configure your current shell, run:\n[Build/Type-check benchmarks       ]   | source \"$HOME/.cargo/env\"\n[Build/Coverage                    ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Type-check benchmarks       ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Documentation               ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Test (miri)                 ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Formatting                  ]   | info: profile set to 'default'\n[Build/Formatting                  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Formatting                  ]   | info: skipping toolchain installation\n[Build/Formatting                  ]   | \n[Build/Formatting                  ]   | \n[Build/Formatting                  ]   | Rust is installed now. Great!\n[Build/Formatting                  ]   | \n[Build/Formatting                  ]   | To get started you may need to restart your current shell.\n[Build/Formatting                  ]   | This would reload your PATH environment variable to include\n[Build/Formatting                  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Formatting                  ]   | \n[Build/Formatting                  ]   | To configure your current shell, run:\n[Build/Formatting                  ]   | source \"$HOME/.cargo/env\"\n[Build/Formatting                  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-output:: components=\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-output:: downgrade=\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-output:: targets= --target thumbv7em-none-eabihf --target x86_64-unknown-netbsd --target x86_64-unknown-illumos --target wasm32-wasi --target x86_64-unknown-linux-gnu --target x86_64-apple-darwin --target x86_64-pc-windows-gnu\n[Build/Clippy                      ]   \u2699  ::set-output:: targets=\n[Build/Clippy                      ]   \u2699  ::set-output:: components=\n[Build/Clippy                      ]   \u2699  ::set-output:: downgrade=\n[Build/Documentation               ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Cross-build                 ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Type-check benchmarks       ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Coverage                    ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Test (miri)                 ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Cross-build                 ] \u2b50 Run Main rustup toolchain install stable\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Coverage                    ] \u2b50 Run Main rustup toolchain install nightly\n[Build/Type-check benchmarks       ] \u2b50 Run Main rustup toolchain install stable\n[Build/Test (miri)                 ] \u2b50 Run Main rustup toolchain install nightly\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main rustup toolchain install 1.65.0\n[Build/Documentation               ] \u2b50 Run Main rustup toolchain install nightly\n[Build/Clippy                      ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Formatting                  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Formatting                  ] \u2b50 Run Main rustup toolchain install nightly\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-2.sh] user= workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Cross-build                 ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build/Documentation               ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Test (Ubuntu, MSRV)         ]   | info: syncing channel updates for '1.65.0-x86_64-unknown-linux-gnu'\n[Build/Coverage                    ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Test (miri)                 ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Type-check benchmarks       ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build/Type checking (MSRV, no_std)]   | info: downloading installer\n[Build/Cross-build                 ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build/Cross-build                 ]   | info: downloading component 'cargo'\n[Build/Type-check benchmarks       ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build/Type-check benchmarks       ]   | info: downloading component 'cargo'\n[Build/Test (Ubuntu, MSRV)         ]   | info: latest update on 2022-11-03, rust version 1.65.0 (897e37553 2022-11-02)\n[Build/Test (Ubuntu, MSRV)         ]   | info: downloading component 'cargo'\n[Build/Test (miri)                 ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Test (miri)                 ]   | info: downloading component 'cargo'\n[Build/Documentation               ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Documentation               ]   | info: downloading component 'cargo'\n[Build/Coverage                    ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Coverage                    ]   | info: downloading component 'cargo'\n[Build/Test (miri)                 ]   | info: downloading component 'miri'\n[Build/Documentation               ]   | info: downloading component 'rust-std'\n[Build/Test (miri)                 ]   | info: downloading component 'rust-std'\n[Build/Clippy                      ]   | info: downloading installer\n[Build/Cross-build                 ]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-gnu'\n[Build/Type-check benchmarks       ]   | info: downloading component 'rust-std'\n[Build/Test (Ubuntu, MSRV)         ]   | info: downloading component 'rust-std'\n[Build/Coverage                    ]   | info: downloading component 'rust-std'\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Test (miri)                 ]   | info: downloading component 'rustc'\n[Build/Clippy                      ]   | info: profile set to 'default'\n[Build/Clippy                      ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Clippy                      ]   | info: skipping toolchain installation\n[Build/Clippy                      ]   | \n[Build/Clippy                      ]   | \n[Build/Clippy                      ]   | Rust is installed now. Great!\n[Build/Clippy                      ]   | \n[Build/Clippy                      ]   | To get started you may need to restart your current shell.\n[Build/Clippy                      ]   | This would reload your PATH environment variable to include\n[Build/Clippy                      ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Clippy                      ]   | \n[Build/Clippy                      ]   | To configure your current shell, run:\n[Build/Clippy                      ]   | source \"$HOME/.cargo/env\"\n[Build/Type-check benchmarks       ]   | info: downloading component 'rustc'\n[Build/Clippy                      ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Cross-build                 ]   | info: downloading component 'rust-std'\n[Build/Test (Ubuntu, MSRV)         ]   | info: downloading component 'rustc'\n[Build/Documentation               ]   | info: downloading component 'rustc'\n[Build/Test (miri)                 ]   | info: installing component 'cargo'\n[Build/Formatting                  ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Cross-build                 ]   | info: downloading component 'rustc'\n[Build/Type-check benchmarks       ]   | info: installing component 'cargo'\n[Build/Test (miri)                 ]   | info: installing component 'miri'\n[Build/Coverage                    ]   | info: downloading component 'rustc'\n[Build/Type-check benchmarks       ]   | info: installing component 'rust-std'\n[Build/Documentation               ]   | info: installing component 'cargo'\n[Build/Test (Ubuntu, MSRV)         ]   | info: installing component 'cargo'\n[Build/Test (miri)                 ]   | info: installing component 'rust-std'\n[Build/Cross-build                 ]   | info: installing component 'cargo'\n[Build/Documentation               ]   | info: installing component 'rust-std'\n[Build/Clippy                      ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Clippy                      ] \u2b50 Run Main rustup toolchain install stable\n[Build/Test (Ubuntu, MSRV)         ]   | info: installing component 'rust-std'\n[Build/Coverage                    ]   | info: installing component 'cargo'\n[Build/Cross-build                 ]   | info: installing component 'rust-std' for 'x86_64-pc-windows-gnu'\n[Build/Type-check benchmarks       ]   | info: installing component 'rustc'\n[Build/Coverage                    ]   | info: installing component 'rust-std'\n[Build/Test (miri)                 ]   | info: installing component 'rustc'\n[Build/Formatting                  ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Formatting                  ]   | info: downloading component 'cargo'\n[Build/Formatting                  ]   | info: downloading component 'rust-std'\n[Build/Formatting                  ]   | info: downloading component 'rustc'\n[Build/Documentation               ]   | info: installing component 'rustc'\n[Build/Test (Ubuntu, MSRV)         ]   | info: installing component 'rustc'\n[Build/Type checking (MSRV, no_std)]   | \n[Build/Type checking (MSRV, no_std)]   | \n[Build/Type checking (MSRV, no_std)]   | Rust is installed now. Great!\n[Build/Type checking (MSRV, no_std)]   | \n[Build/Type checking (MSRV, no_std)]   | To get started you may need to restart your current shell.\n[Build/Type checking (MSRV, no_std)]   | This would reload your PATH environment variable to include\n[Build/Type checking (MSRV, no_std)]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Build/Type checking (MSRV, no_std)]   | \n[Build/Type checking (MSRV, no_std)]   | To configure your current shell, run:\n[Build/Type checking (MSRV, no_std)]   | source \"$HOME/.cargo/env\"\n[Build/Type checking (MSRV, no_std)]   | info: profile set to 'default'\n[Build/Type checking (MSRV, no_std)]   | info: default host triple is x86_64-unknown-linux-gnu\n[Build/Type checking (MSRV, no_std)]   | info: skipping toolchain installation\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Build/Formatting                  ]   | info: downloading component 'rustfmt'\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Build/Formatting                  ]   | info: installing component 'cargo'\n[Build/Cross-build                 ]   | info: installing component 'rust-std'\n[Build/Coverage                    ]   | info: installing component 'rustc'\n[Build/Formatting                  ]   | info: installing component 'rust-std'\n[Build/Type checking (MSRV, no_std)]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Build/Type-check benchmarks       ]   | \n[Build/Type-check benchmarks       ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build/Type-check benchmarks       ]   | \n[Build/Type-check benchmarks       ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build/Type-check benchmarks       ]   \u2705  Success - Main rustup toolchain install stable\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main rustup toolchain install 1.65.0\n[Build/Cross-build                 ]   | info: installing component 'rustc'\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-3.sh] user= workdir=\n[Build/Type-check benchmarks       ] \u2b50 Run Main rustup default stable\n[Build/Test (miri)                 ]   | \n[Build/Test (miri)                 ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Test (miri)                 ]   | \n[Build/Test (miri)                 ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Test (miri)                 ]   \u2705  Success - Main rustup toolchain install nightly\n[Build/Formatting                  ]   | info: installing component 'rustc'\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (miri)                 ] \u2b50 Run Main rustup default nightly\n[Build/Test (Ubuntu, MSRV)         ]   |   1.65.0-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | info: default toolchain set to '1.65.0-x86_64-unknown-linux-gnu'\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Main rustup toolchain install 1.65.0\n[Build/Documentation               ]   | \n[Build/Documentation               ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Documentation               ]   | \n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Documentation               ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Documentation               ]   \u2705  Success - Main rustup toolchain install nightly\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main rustup default 1.65.0\n[Build/Documentation               ] \u2b50 Run Main rustup default nightly\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Coverage                    ]   | \n[Build/Coverage                    ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Coverage                    ]   | \n[Build/Coverage                    ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Coverage                    ]   \u2705  Success - Main rustup toolchain install nightly\n[Build/Coverage                    ] \u2b50 Run Main rustup default nightly\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Cross-build                 ]   | \n[Build/Cross-build                 ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build/Cross-build                 ]   | \n[Build/Cross-build                 ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build/Cross-build                 ]   \u2705  Success - Main rustup toolchain install stable\n[Build/Cross-build                 ] \u2b50 Run Main rustup default stable\n[Build/Formatting                  ]   | info: installing component 'rustfmt'\n[Build/Formatting                  ]   | \n[Build/Formatting                  ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Formatting                  ]   | \n[Build/Formatting                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Formatting                  ]   \u2705  Success - Main rustup toolchain install nightly\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Formatting                  ] \u2b50 Run Main rustup default nightly\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Clippy                      ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Build/Type checking (MSRV, no_std)]   | info: syncing channel updates for '1.65.0-x86_64-unknown-linux-gnu'\n[Build/Type-check benchmarks       ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build/Type-check benchmarks       ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build/Type-check benchmarks       ]   | \n[Build/Type-check benchmarks       ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build/Type-check benchmarks       ]   | \n[Build/Type-check benchmarks       ]   \u2705  Success - Main rustup default stable\n[Build/Clippy                      ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Build/Clippy                      ]   | info: downloading component 'cargo'\n[Build/Test (miri)                 ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Type checking (MSRV, no_std)]   | info: latest update on 2022-11-03, rust version 1.65.0 (897e37553 2022-11-02)\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'cargo'\n[Build/Test (miri)                 ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Test (miri)                 ]   | \n[Build/Coverage                    ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Formatting                  ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Cross-build                 ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build/Test (Ubuntu, MSRV)         ]   | info: using existing install for '1.65.0-x86_64-unknown-linux-gnu'\n[Build/Coverage                    ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Coverage                    ]   | \n[Build/Formatting                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Formatting                  ]   | \n[Build/Cross-build                 ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build/Cross-build                 ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Test (Ubuntu, MSRV)         ]   | info: default toolchain set to '1.65.0-x86_64-unknown-linux-gnu'\n[Build/Documentation               ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Build/Documentation               ]   | \n[Build/Documentation               ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Build/Formatting                  ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Formatting                  ]   | \n[Build/Cross-build                 ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build/Cross-build                 ]   | \n[Build/Coverage                    ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Coverage                    ]   | \n[Build/Test (miri)                 ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Test (miri)                 ]   | \n[Build/Test (Ubuntu, MSRV)         ]   |   1.65.0-x86_64-unknown-linux-gnu unchanged - rustc 1.65.0 (897e37553 2022-11-02)\n[Build/Test (Ubuntu, MSRV)         ]   | \n[Build/Formatting                  ]   \u2705  Success - Main rustup default nightly\n[Build/Test (miri)                 ]   \u2705  Success - Main rustup default nightly\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Main rustup default 1.65.0\n[Build/Coverage                    ]   \u2705  Success - Main rustup default nightly\n[Build/Cross-build                 ]   \u2705  Success - Main rustup default stable\n[Build/Documentation               ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Build/Documentation               ]   | \n[Build/Documentation               ]   \u2705  Success - Main rustup default nightly\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std' for 'thumbv7em-none-eabihf'\n[Build/Clippy                      ]   | info: downloading component 'rust-std'\n[Build/Clippy                      ]   | info: downloading component 'rustc'\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std' for 'wasm32-wasi'\n[Build/Clippy                      ]   | info: installing component 'cargo'\n[Build/Clippy                      ]   | info: installing component 'rust-std'\n[Build/Test (miri)                 ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +1.65.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.65.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Coverage                    ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Documentation               ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Cross-build                 ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Formatting                  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Type-check benchmarks       ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std' for 'x86_64-apple-darwin'\n[Build/Clippy                      ]   | info: installing component 'rustc'\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-gnu'\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std' for 'x86_64-unknown-illumos'\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std'\n[Build/Clippy                      ]   | \n[Build/Clippy                      ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Build/Clippy                      ]   | \n[Build/Clippy                      ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build/Clippy                      ]   \u2705  Success - Main rustup toolchain install stable\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rust-std' for 'x86_64-unknown-netbsd'\n[Build/Clippy                      ] \u2b50 Run Main rustup default stable\n[Build/Type checking (MSRV, no_std)]   | info: downloading component 'rustc'\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'cargo'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std' for 'thumbv7em-none-eabihf'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std' for 'wasm32-wasi'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std' for 'x86_64-apple-darwin'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std' for 'x86_64-pc-windows-gnu'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std' for 'x86_64-unknown-illumos'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rust-std' for 'x86_64-unknown-netbsd'\n[Build/Type checking (MSRV, no_std)]   | info: installing component 'rustc'\n[Build/Type checking (MSRV, no_std)]   | \n[Build/Type checking (MSRV, no_std)]   |   1.65.0-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n[Build/Type checking (MSRV, no_std)]   | \n[Build/Type checking (MSRV, no_std)]   | info: default toolchain set to '1.65.0-x86_64-unknown-linux-gnu'\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Main rustup toolchain install 1.65.0\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Main rustup default 1.65.0\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-4.sh] user= workdir=\n[Build/Clippy                      ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Build/Clippy                      ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Build/Clippy                      ]   | \n[Build/Coverage                    ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Coverage                    ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7ddadf0744fc09bdd5cc122cd9dc4af0f48e4f919b95965a082073b8cf6d47fa/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Coverage                    ]   \u2699  ::set-output:: cachekey=\n[Build/Coverage                    ]   \u2699  ::set-output:: name=nightly\n[Build/Coverage                    ]   \u274c  Failure - Main Install toolchain\n[Build/Coverage                    ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7ddadf0744fc09bdd5cc122cd9dc4af0f48e4f919b95965a082073b8cf6d47fa/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Test (miri)                 ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Test (miri)                 ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a839157324eaeb152798e884a53cc8454c40ee56dcfd12bb9b50c57194d039b7/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Test (miri)                 ]   \u2699  ::set-output:: cachekey=\n[Build/Test (miri)                 ]   \u2699  ::set-output:: name=nightly\n[Build/Test (miri)                 ]   \u274c  Failure - Main Install toolchain\n[Build/Test (miri)                 ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a839157324eaeb152798e884a53cc8454c40ee56dcfd12bb9b50c57194d039b7/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Clippy                      ]   \u274c  Failure - Main rustup default stable\n[Build/Clippy                      ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/265193fbcd3c163063bc27c8f105ff0d8660b1d65ca7e56df1cfe1589b4ee5a2/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Type checking (MSRV, no_std)]   \u274c  Failure - Main rustup default 1.65.0\n[Build/Type checking (MSRV, no_std)] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/f08d363c84fc73f6a9302b326169b328435c57d7bbcb8db2ad1f39fce72c8ac5/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Cross-build                 ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Cross-build                 ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/c2439d457c873cecba2bd87330b2f21279c29d92ee5ffd33d6be03299c2a2ef5/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Clippy                      ]   \u2699  ::set-output:: cachekey=\n[Build/Clippy                      ]   \u2699  ::set-output:: name=stable\n[Build/Clippy                      ]   \u274c  Failure - Main Install toolchain\n[Build/Clippy                      ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/265193fbcd3c163063bc27c8f105ff0d8660b1d65ca7e56df1cfe1589b4ee5a2/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Cross-build                 ]   \u2699  ::set-output:: name=stable\n[Build/Cross-build                 ]   \u2699  ::set-output:: cachekey=\n[Build/Cross-build                 ]   \u274c  Failure - Main Install toolchain\n[Build/Cross-build                 ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/c2439d457c873cecba2bd87330b2f21279c29d92ee5ffd33d6be03299c2a2ef5/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-output:: cachekey=\n[Build/Type checking (MSRV, no_std)]   \u2699  ::set-output:: name=1.65.0\n[Build/Type checking (MSRV, no_std)]   \u274c  Failure - Main Install toolchain\n[Build/Type checking (MSRV, no_std)] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/f08d363c84fc73f6a9302b326169b328435c57d7bbcb8db2ad1f39fce72c8ac5/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Formatting                  ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Formatting                  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7b8532a6ad955ef49df50087568e3f68da5ad6c4330bb34964560da81fd3a221/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Documentation               ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Documentation               ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/2f5a0b0a7f2ab819e7b23249263982991a455a15708da2e62421f3837e4352ab/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Documentation               ]   \u2699  ::set-output:: cachekey=\n[Build/Documentation               ]   \u2699  ::set-output:: name=nightly\n[Build/Documentation               ]   \u274c  Failure - Main Install toolchain\n[Build/Documentation               ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/2f5a0b0a7f2ab819e7b23249263982991a455a15708da2e62421f3837e4352ab/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Test (Ubuntu, MSRV)         ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +1.65.0 --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +1.65.0 --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Test (Ubuntu, MSRV)         ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7a3ea2e49b77f534383bcf7e9c39a883bf2abf44af3e665e03e46e2f10db965f/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Formatting                  ]   \u2699  ::set-output:: cachekey=\n[Build/Formatting                  ]   \u2699  ::set-output:: name=nightly\n[Build/Formatting                  ]   \u274c  Failure - Main Install toolchain\n[Build/Formatting                  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7b8532a6ad955ef49df50087568e3f68da5ad6c4330bb34964560da81fd3a221/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Type-check benchmarks       ]   \u274c  Failure - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Build/Type-check benchmarks       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/6b84f1cdae7e4b3a76974a96f7adc0d7c99d8a73689ab6b5da5e6768205160f0/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::set-output:: cachekey=\n[Build/Test (Ubuntu, MSRV)         ]   \u2699  ::set-output:: name=1.65.0\n[Build/Test (Ubuntu, MSRV)         ]   \u274c  Failure - Main Install toolchain\n[Build/Test (Ubuntu, MSRV)         ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7a3ea2e49b77f534383bcf7e9c39a883bf2abf44af3e665e03e46e2f10db965f/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Type-check benchmarks       ]   \u2699  ::set-output:: cachekey=\n[Build/Type-check benchmarks       ]   \u2699  ::set-output:: name=stable\n[Build/Type-check benchmarks       ]   \u274c  Failure - Main Install toolchain\n[Build/Type-check benchmarks       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/6b84f1cdae7e4b3a76974a96f7adc0d7c99d8a73689ab6b5da5e6768205160f0/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Build/Clippy                      ] \u2b50 Run Post Install toolchain\n[Build/Coverage                    ] \u2b50 Run Post Install toolchain\n[Build/Type checking (MSRV, no_std)] \u2b50 Run Post Install toolchain\n[Build/Test (miri)                 ] \u2b50 Run Post Install toolchain\n[Build/Formatting                  ] \u2b50 Run Post Install toolchain\n[Build/Cross-build                 ] \u2b50 Run Post Install toolchain\n[Build/Type-check benchmarks       ] \u2b50 Run Post Install toolchain\n[Build/Documentation               ] \u2b50 Run Post Install toolchain\n[Build/Test (Ubuntu, MSRV)         ] \u2b50 Run Post Install toolchain\n[Build/Cross-build                 ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Build/Coverage                    ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Formatting                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Clippy                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Build/Test (miri)                 ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Documentation               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Build/Type checking (MSRV, no_std)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Build/Formatting                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Test (Ubuntu, MSRV)         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Build/Test (miri)                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Coverage                    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Documentation               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Build/Clippy                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Build/Cross-build                 ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Build/Type-check benchmarks       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Build/Coverage                    ]   \u2705  Success - Post Install toolchain\n[Build/Documentation               ]   \u2705  Success - Post Install toolchain\n[Build/Clippy                      ]   \u2705  Success - Post Install toolchain\n[Build/Test (miri)                 ]   \u2705  Success - Post Install toolchain\n[Build/Formatting                  ]   \u2705  Success - Post Install toolchain\n[Build/Type-check benchmarks       ]   \u2705  Success - Post Install toolchain\n[Build/Test (Ubuntu, MSRV)         ]   \u2705  Success - Post Install toolchain\n[Build/Type checking (MSRV, no_std)]   \u2705  Success - Post Install toolchain\n[Build/Cross-build                 ]   \u2705  Success - Post Install toolchain\n[Build/Documentation               ] \ud83c\udfc1  Job succeeded\n[Build/Cross-build                 ] \ud83c\udfc1  Job succeeded\n[Build/Formatting                  ] \ud83c\udfc1  Job succeeded\n[Build/Type-check benchmarks       ] \ud83c\udfc1  Job succeeded\n[Build/Coverage                    ] \ud83c\udfc1  Job succeeded\n[Build/Test (Ubuntu, MSRV)         ] \ud83c\udfc1  Job succeeded\n[Build/Test (miri)                 ] \ud83c\udfc1  Job succeeded\n[Build/Type checking (MSRV, no_std)] \ud83c\udfc1  Job succeeded\n[Build/Clippy                      ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}