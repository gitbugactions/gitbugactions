{
    "repository": "dalek-cryptography/curve25519-dalek",
    "clone_url": "https://github.com/dalek-cryptography/curve25519-dalek.git",
    "timestamp": "2023-05-30T09:15:58.558847Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Rust/test                                        ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Check that benchmarks compile               ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Check that clippy is happy                  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Check formatting                            ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Test nightly compiler                       ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Build simd backend (nightly)                ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Build docs                                  ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Current MSRV is 1.60.0                      ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Test simd backend (avx2)                    ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/cross                                       ] \ud83d\ude80  Start image=crawlergpt:latest\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Build docs                                  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/test                                        ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Check formatting                            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/cross                                       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build docs                                  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/cross                                       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/test                                        ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Check formatting                            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/cross                                       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build docs                                  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Check formatting                            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/test                                        ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/test                                        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/test                                        ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/Build docs                                  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/Check that benchmarks compile               ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/Test nightly compiler                       ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/test                                        ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[Rust/Build simd backend (nightly)                ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Rust/Check that clippy is happy                  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/test                                        ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[Rust/Build docs                                  ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[Rust/Check that benchmarks compile               ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[Rust/Test nightly compiler                       ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Pre dtolnay/rust-toolchain@master\n[Rust/Check that clippy is happy                  ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Check formatting                            ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/Current MSRV is 1.60.0                      ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=nightly\n[Rust/Test nightly compiler                       ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Pre dtolnay/rust-toolchain@master\n[Rust/Build docs                                  ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[Rust/test                                        ] \ud83e\uddea  Matrix: map[deps:sudo apt update && sudo apt install gcc-multilib target:i686-unknown-linux-gnu]\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/Check formatting                            ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Pre dtolnay/rust-toolchain@nightly\n[Rust/test                                        ] \u2b50 Run Main actions/checkout@v3\n[Rust/test                                        ]   \u2705  Success - Main actions/checkout@v3\n[Rust/cross                                       ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Rust/Check formatting                            ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Pre dtolnay/rust-toolchain@nightly\n[Rust/cross                                       ] \u2b50 Run Pre dtolnay/rust-toolchain@master\n[Rust/cross                                       ]   \u2705  Success - Pre dtolnay/rust-toolchain@master\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main actions/checkout@v3\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main actions/checkout@v3\n[Rust/Build docs                                  ] \u2b50 Run Main actions/checkout@v3\n[Rust/Test nightly compiler                       ] \u2b50 Run Main actions/checkout@v3\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main actions/checkout@v3\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main actions/checkout@v3\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Build docs                                  ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main actions/checkout@v3\n[Rust/Current MSRV is 1.60.0                      ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=1.60.0\n[Rust/cross                                       ]   \u2601  git clone 'https://github.com/RustCrypto/actions' # ref=master\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Pre dtolnay/rust-toolchain@1.60.0\n[Rust/Check formatting                            ] \u2b50 Run Main actions/checkout@v3\n[Rust/test                                        ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[Rust/cross                                       ] \u2b50 Run Pre RustCrypto/actions/cross-install@master\n[Rust/Test nightly compiler                       ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[Rust/Build docs                                  ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main dtolnay/rust-toolchain@master\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[Rust/Check formatting                            ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Build docs                                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/test                                        ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Pre dtolnay/rust-toolchain@1.60.0\n[Rust/cross                                       ]   \u2705  Success - Pre RustCrypto/actions/cross-install@master\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/test                                        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Check formatting                            ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[Rust/cross                                       ] \ud83e\uddea  Matrix: map[rust:stable target:armv7-unknown-linux-gnueabihf]\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main actions/checkout@v3\n[Rust/cross                                       ] \u2b50 Run Main actions/checkout@v3\n[Rust/Check formatting                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main actions/checkout@v3\n[Rust/cross                                       ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main dtolnay/rust-toolchain@nightly\n[Rust/cross                                       ] \u2b50 Run Main \n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/dalek-cryptography-curve25519-dalek] user=0 workdir=\n[Rust/cross                                       ]   \u2705  Success - Main \n[Rust/test                                        ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Check formatting                            ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build docs                                  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Test simd backend (avx2)                    ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Pre dtolnay/rust-toolchain@stable\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/test                                        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Pre dtolnay/rust-toolchain@stable\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/test                                        ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Check formatting                            ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build docs                                  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/cross                                       ] \u2b50 Run Main dtolnay/rust-toolchain@master\n[Rust/cross                                       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: toolchain=nightly\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: toolchain=nightly\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: toolchain=nightly\n[Rust/test                                        ]   \u2699  ::set-output:: toolchain=stable\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: toolchain=nightly\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: toolchain=stable\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: toolchain=stable\n[Rust/Build docs                                  ]   \u2699  ::set-output:: toolchain=nightly\n[Rust/Check formatting                            ]   \u2699  ::set-output:: toolchain=stable\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main actions/checkout@v3\n[Rust/cross                                       ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main actions/checkout@v3\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/test                                        ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build docs                                  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Check formatting                            ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-parse.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main dtolnay/rust-toolchain@stable\n[Rust/test                                        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/cross                                       ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build docs                                  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade= --allow-downgrade\" >> $GITHUB_OUTPUT\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Check formatting                            ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/test                                        ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/cross                                       ]   \u2699  ::set-output:: toolchain=stable\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: downgrade=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: targets= --target thumbv7em-none-eabi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: components=\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: components=\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: downgrade=\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: targets=\n[Rust/test                                        ]   \u2699  ::set-output:: components=\n[Rust/test                                        ]   \u2699  ::set-output:: downgrade=\n[Rust/test                                        ]   \u2699  ::set-output:: targets=\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: targets=\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: components=\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: downgrade=\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: targets=\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: components=\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: downgrade=\n[Rust/Check formatting                            ]   \u2699  ::set-output:: targets=\n[Rust/Check formatting                            ]   \u2699  ::set-output:: components= --component rustfmt\n[Rust/Check formatting                            ]   \u2699  ::set-output:: downgrade=\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: targets=\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: components=\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: downgrade=\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: targets=\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: components= --component clippy\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: downgrade= --allow-downgrade\n[Rust/Build docs                                  ]   \u2699  ::set-output:: targets=\n[Rust/Build docs                                  ]   \u2699  ::set-output:: components=\n[Rust/Build docs                                  ]   \u2699  ::set-output:: downgrade=\n[Rust/cross                                       ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Check formatting                            ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/test                                        ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build docs                                  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-flags.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/test                                        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/cross                                       ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/Current MSRV is 1.60.0                      ]   | info: downloading installer\n[Rust/Check that benchmarks compile               ]   | info: downloading installer\n[Rust/Test nightly compiler                       ]   | info: downloading installer\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: downloading installer\n[Rust/Build simd backend (nightly)                ]   | info: downloading installer\n[Rust/Check formatting                            ]   | info: downloading installer\n[Rust/test                                        ]   | info: downloading installer\n[Rust/Check that clippy is happy                  ]   | info: downloading installer\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Check that benchmarks compile               ]   | info: profile set to 'default'\n[Rust/Check that benchmarks compile               ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Check that benchmarks compile               ]   | info: skipping toolchain installation\n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   | Rust is installed now. Great!\n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   | To get started you may need to restart your current shell.\n[Rust/Check that benchmarks compile               ]   | This would reload your PATH environment variable to include\n[Rust/Check that benchmarks compile               ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   | To configure your current shell, run:\n[Rust/Check that benchmarks compile               ]   | source \"$HOME/.cargo/env\"\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build docs                                  ]   | info: downloading installer\n[Rust/cross                                       ]   \u2699  ::set-output:: downgrade=\n[Rust/cross                                       ]   \u2699  ::set-output:: targets= --target armv7-unknown-linux-gnueabihf\n[Rust/cross                                       ]   \u2699  ::set-output:: components=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: profile set to 'default'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: skipping toolchain installation\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | Rust is installed now. Great!\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | To get started you may need to restart your current shell.\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | This would reload your PATH environment variable to include\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | To configure your current shell, run:\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | source \"$HOME/.cargo/env\"\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Test nightly compiler                       ]   | info: profile set to 'default'\n[Rust/Test nightly compiler                       ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Test nightly compiler                       ]   | info: skipping toolchain installation\n[Rust/Test nightly compiler                       ]   | \n[Rust/Test nightly compiler                       ]   | \n[Rust/Test nightly compiler                       ]   | Rust is installed now. Great!\n[Rust/Test nightly compiler                       ]   | \n[Rust/Test nightly compiler                       ]   | To get started you may need to restart your current shell.\n[Rust/Test nightly compiler                       ]   | This would reload your PATH environment variable to include\n[Rust/Test nightly compiler                       ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Test nightly compiler                       ]   | \n[Rust/Test nightly compiler                       ]   | To configure your current shell, run:\n[Rust/Test nightly compiler                       ]   | source \"$HOME/.cargo/env\"\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/test                                        ]   | info: profile set to 'default'\n[Rust/test                                        ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/test                                        ]   | info: skipping toolchain installation\n[Rust/test                                        ]   | \n[Rust/test                                        ]   | \n[Rust/test                                        ]   | Rust is installed now. Great!\n[Rust/test                                        ]   | \n[Rust/test                                        ]   | To get started you may need to restart your current shell.\n[Rust/test                                        ]   | This would reload your PATH environment variable to include\n[Rust/test                                        ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/test                                        ]   | \n[Rust/test                                        ]   | To configure your current shell, run:\n[Rust/test                                        ]   | source \"$HOME/.cargo/env\"\n[Rust/test                                        ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Current MSRV is 1.60.0                      ]   | info: profile set to 'default'\n[Rust/Current MSRV is 1.60.0                      ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Current MSRV is 1.60.0                      ]   | info: skipping toolchain installation\n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | Rust is installed now. Great!\n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | To get started you may need to restart your current shell.\n[Rust/Current MSRV is 1.60.0                      ]   | This would reload your PATH environment variable to include\n[Rust/Current MSRV is 1.60.0                      ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | To configure your current shell, run:\n[Rust/Current MSRV is 1.60.0                      ]   | source \"$HOME/.cargo/env\"\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/cross                                       ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build simd backend (nightly)                ]   | info: profile set to 'default'\n[Rust/Build simd backend (nightly)                ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Build simd backend (nightly)                ]   | info: skipping toolchain installation\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   | Rust is installed now. Great!\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   | To get started you may need to restart your current shell.\n[Rust/Build simd backend (nightly)                ]   | This would reload your PATH environment variable to include\n[Rust/Build simd backend (nightly)                ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   | To configure your current shell, run:\n[Rust/Build simd backend (nightly)                ]   | source \"$HOME/.cargo/env\"\n[Rust/Check formatting                            ]   | info: profile set to 'default'\n[Rust/Check formatting                            ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Check formatting                            ]   | info: skipping toolchain installation\n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   | Rust is installed now. Great!\n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   | To get started you may need to restart your current shell.\n[Rust/Check formatting                            ]   | This would reload your PATH environment variable to include\n[Rust/Check formatting                            ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   | To configure your current shell, run:\n[Rust/Check formatting                            ]   | source \"$HOME/.cargo/env\"\n[Rust/Check formatting                            ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Check that clippy is happy                  ]   | info: profile set to 'default'\n[Rust/Check that clippy is happy                  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Check that clippy is happy                  ]   | info: skipping toolchain installation\n[Rust/Check that clippy is happy                  ]   | \n[Rust/Check that clippy is happy                  ]   | \n[Rust/Check that clippy is happy                  ]   | Rust is installed now. Great!\n[Rust/Check that clippy is happy                  ]   | \n[Rust/Check that clippy is happy                  ]   | To get started you may need to restart your current shell.\n[Rust/Check that clippy is happy                  ]   | This would reload your PATH environment variable to include\n[Rust/Check that clippy is happy                  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Check that clippy is happy                  ]   | \n[Rust/Check that clippy is happy                  ]   | To configure your current shell, run:\n[Rust/Check that clippy is happy                  ]   | source \"$HOME/.cargo/env\"\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build docs                                  ]   | info: profile set to 'default'\n[Rust/Build docs                                  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Build docs                                  ]   | info: skipping toolchain installation\n[Rust/Build docs                                  ]   | \n[Rust/Build docs                                  ]   | \n[Rust/Build docs                                  ]   | Rust is installed now. Great!\n[Rust/Build docs                                  ]   | \n[Rust/Build docs                                  ]   | To get started you may need to restart your current shell.\n[Rust/Build docs                                  ]   | This would reload your PATH environment variable to include\n[Rust/Build docs                                  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Build docs                                  ]   | \n[Rust/Build docs                                  ]   | To configure your current shell, run:\n[Rust/Build docs                                  ]   | source \"$HOME/.cargo/env\"\n[Rust/Build docs                                  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Check that benchmarks compile               ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main rustup toolchain install stable\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Test nightly compiler                       ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/test                                        ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/test                                        ] \u2b50 Run Main rustup toolchain install stable\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main rustup toolchain install nightly\n[Rust/Test nightly compiler                       ] \u2b50 Run Main rustup toolchain install nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main rustup toolchain install stable\n[Rust/Check that clippy is happy                  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Check formatting                            ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Build simd backend (nightly)                ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-2.sh] user= workdir=\n[Rust/Build docs                                  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main rustup toolchain install nightly\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main rustup toolchain install nightly\n[Rust/Check formatting                            ] \u2b50 Run Main rustup toolchain install stable\n[Rust/Build docs                                  ] \u2b50 Run Main rustup toolchain install nightly\n[Rust/test                                        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build docs                                  ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build docs                                  ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build docs                                  ]   | info: downloading component 'cargo'\n[Rust/Build simd backend (nightly)                ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build simd backend (nightly)                ]   | info: downloading component 'cargo'\n[Rust/Build simd backend (nightly)                ]   | info: downloading component 'rust-std'\n[Rust/Current MSRV is 1.60.0                      ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: downloading component 'cargo'\n[Rust/cross                                       ]   | info: downloading installer\n[Rust/Build docs                                  ]   | info: downloading component 'rust-std'\n[Rust/Check that clippy is happy                  ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test nightly compiler                       ]   | info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/test                                        ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check formatting                            ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check that clippy is happy                  ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Check that clippy is happy                  ]   | info: downloading component 'cargo'\n[Rust/Check that benchmarks compile               ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/test                                        ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/test                                        ]   | info: downloading component 'cargo'\n[Rust/Current MSRV is 1.60.0                      ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Current MSRV is 1.60.0                      ]   | info: downloading component 'cargo'\n[Rust/Test nightly compiler                       ]   | info: latest update on 2023-05-30, rust version 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Test nightly compiler                       ]   | info: downloading component 'cargo'\n[Rust/Check formatting                            ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check formatting                            ]   | info: downloading component 'cargo'\n[Rust/Check that benchmarks compile               ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check that benchmarks compile               ]   | info: downloading component 'cargo'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: downloading component 'rust-std' for 'thumbv7em-none-eabi'\n[Rust/test                                        ]   | info: downloading component 'rust-std'\n[Rust/Current MSRV is 1.60.0                      ]   | info: downloading component 'rust-std'\n[Rust/Check that clippy is happy                  ]   | info: downloading component 'clippy'\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: toolchain=stable\n[Rust/Check formatting                            ]   | info: downloading component 'rust-std'\n[Rust/Test nightly compiler                       ]   | info: downloading component 'rust-std'\n[Rust/Check that clippy is happy                  ]   | info: downloading component 'rust-std'\n[Rust/Check that benchmarks compile               ]   | info: downloading component 'rust-std'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: downloading component 'rust-std'\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/cross                                       ]   | info: profile set to 'default'\n[Rust/cross                                       ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/cross                                       ]   | info: skipping toolchain installation\n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   | Rust is installed now. Great!\n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   | To get started you may need to restart your current shell.\n[Rust/cross                                       ]   | This would reload your PATH environment variable to include\n[Rust/cross                                       ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   | To configure your current shell, run:\n[Rust/cross                                       ]   | source \"$HOME/.cargo/env\"\n[Rust/cross                                       ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build docs                                  ]   | info: downloading component 'rustc'\n[Rust/test                                        ]   \u274c  Failure - Main rustup toolchain install stable\n[Rust/Build simd backend (nightly)                ]   | info: downloading component 'rustc'\n[Rust/cross                                       ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[Rust/cross                                       ] \u2b50 Run Main rustup toolchain install stable\n[Rust/Test nightly compiler                       ]   | info: downloading component 'rustc'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: downloading component 'rustc'\n[Rust/Check formatting                            ]   | info: downloading component 'rustc'\n[Rust/Check that clippy is happy                  ]   | info: downloading component 'rustc'\n[Rust/Current MSRV is 1.60.0                      ]   | info: downloading component 'rustc'\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-3.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   | info: downloading component 'rustc'\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Rust/cross                                       ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/cross                                       ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/cross                                       ]   | info: downloading component 'cargo'\n[Rust/test                                        ] Error response from daemon: Could not find the file /var/run/act/workflow/pathcmd.txt in container bbf46fca69c91ae50636aeef9621ab7f84b6acace0d24d66bdc8abc611f5593d\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: downgrade=\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: targets=\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: components=\n[Rust/cross                                       ]   | info: downloading component 'rust-std' for 'armv7-unknown-linux-gnueabihf'\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/Build simd backend (nightly)                ]   | info: installing component 'cargo'\n[Rust/Check formatting                            ]   | info: downloading component 'rustfmt'\n[Rust/test                                        ]   \u2699  ::set-output:: cachekey=\n[Rust/test                                        ]   \u2699  ::set-output:: name=stable\n[Rust/test                                        ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[Rust/test                                        ] Error response from daemon: No such container: bbf46fca69c91ae50636aeef9621ab7f84b6acace0d24d66bdc8abc611f5593d\n[Rust/Build simd backend (nightly)                ]   | info: installing component 'rust-std'\n[Rust/Build docs                                  ]   | info: installing component 'cargo'\n[Rust/Check formatting                            ]   | info: installing component 'cargo'\n[Rust/Test nightly compiler                       ]   | info: installing component 'cargo'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: installing component 'cargo'\n[Rust/Check that clippy is happy                  ]   | info: installing component 'cargo'\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[Rust/Build docs                                  ]   | info: installing component 'rust-std'\n[Rust/Current MSRV is 1.60.0                      ]   | info: installing component 'cargo'\n[Rust/Test nightly compiler                       ]   | info: installing component 'rust-std'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: installing component 'rust-std' for 'thumbv7em-none-eabi'\n[Rust/Check formatting                            ]   | info: installing component 'rust-std'\n[Rust/Check that clippy is happy                  ]   | info: installing component 'clippy'\n[Rust/cross                                       ]   | info: downloading component 'rust-std'\n[Rust/Current MSRV is 1.60.0                      ]   | info: installing component 'rust-std'\n[Rust/Check that benchmarks compile               ]   | info: installing component 'cargo'\n[Rust/Check that clippy is happy                  ]   | info: installing component 'rust-std'\n[Rust/Build simd backend (nightly)                ]   | info: installing component 'rustc'\n[Rust/Check that benchmarks compile               ]   | info: installing component 'rust-std'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: installing component 'rust-std'\n[Rust/Build docs                                  ]   | info: installing component 'rustc'\n[Rust/Test nightly compiler                       ]   | info: installing component 'rustc'\n[Rust/cross                                       ]   | info: downloading component 'rustc'\n[Rust/Check formatting                            ]   | info: installing component 'rustc'\n[Rust/Current MSRV is 1.60.0                      ]   | info: installing component 'rustc'\n[Rust/Check that clippy is happy                  ]   | info: installing component 'rustc'\n[Rust/Test simd backend (avx2)                    ]   | info: downloading installer\n[Rust/Check that benchmarks compile               ]   | info: installing component 'rustc'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: installing component 'rustc'\n[Rust/cross                                       ]   | info: installing component 'cargo'\n[Rust/test                                        ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[Rust/test                                        ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/test                                        ]   \u274c  Failure - Post dtolnay/rust-toolchain@stable\n[Rust/test                                        ] failed to remove container: Error response from daemon: No such container: bbf46fca69c91ae50636aeef9621ab7f84b6acace0d24d66bdc8abc611f5593d\n[Rust/test                                        ] \ud83c\udfc1  Job failed\n[Rust/Test simd backend (avx2)                    ]   | info: profile set to 'default'\n[Rust/Test simd backend (avx2)                    ]   | info: default host triple is x86_64-unknown-linux-gnu\n[Rust/Test simd backend (avx2)                    ]   | info: skipping toolchain installation\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   | Rust is installed now. Great!\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   | To get started you may need to restart your current shell.\n[Rust/Test simd backend (avx2)                    ]   | This would reload your PATH environment variable to include\n[Rust/Test simd backend (avx2)                    ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   | To configure your current shell, run:\n[Rust/Test simd backend (avx2)                    ]   | source \"$HOME/.cargo/env\"\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Rust/cross                                       ]   | info: installing component 'rust-std' for 'armv7-unknown-linux-gnueabihf'\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Rust/Build docs                                  ]   | \n[Rust/Check formatting                            ]   | info: installing component 'rustfmt'\n[Rust/Build docs                                  ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build docs                                  ]   | \n[Rust/Build docs                                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main rustup toolchain install stable\n[Rust/Build docs                                  ]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/Test nightly compiler                       ]   | \n[Rust/Test nightly compiler                       ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Test nightly compiler                       ]   | \n[Rust/Test nightly compiler                       ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/cross                                       ]   | info: installing component 'rust-std'\n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check formatting                            ]   \u2705  Success - Main rustup toolchain install stable\n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Check that clippy is happy                  ]   | \n[Rust/Current MSRV is 1.60.0                      ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Check that clippy is happy                  ]   |   nightly-x86_64-unknown-linux-gnu installed - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Check that clippy is happy                  ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Check that clippy is happy                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main rustup toolchain install nightly\n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main rustup toolchain install stable\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main rustup toolchain install stable\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main rustup default nightly\n[Rust/Build docs                                  ] \u2b50 Run Main rustup default nightly\n[Rust/Test nightly compiler                       ] \u2b50 Run Main rustup default nightly\n[Rust/cross                                       ]   | info: installing component 'rustc'\n[Rust/Check formatting                            ] \u2b50 Run Main rustup default stable\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main rustup default nightly\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main rustup default nightly\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main rustup default stable\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main rustup default stable\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/cross                                       ]   \u2705  Success - Main rustup toolchain install stable\n[Rust/cross                                       ] \u2b50 Run Main rustup default stable\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-4.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build simd backend (nightly)                ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build simd backend (nightly)                ]   | \n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main rustup default nightly\n[Rust/Test nightly compiler                       ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test nightly compiler                       ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test nightly compiler                       ]   | \n[Rust/cross                                       ]   | \n[Rust/cross                                       ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Rust/cross                                       ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check formatting                            ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check formatting                            ]   | \n[Rust/Check formatting                            ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Current MSRV is 1.60.0                      ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Test nightly compiler                       ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Test nightly compiler                       ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Current MSRV is 1.60.0                      ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/cross                                       ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/cross                                       ]   | \n[Rust/Test nightly compiler                       ]   \u2705  Success - Main rustup default nightly\n[Rust/Check formatting                            ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check formatting                            ]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Check formatting                            ]   \u2705  Success - Main rustup default stable\n[Rust/cross                                       ]   \u2705  Success - Main rustup default stable\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Current MSRV is 1.60.0                      ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Current MSRV is 1.60.0                      ]   | \n[Rust/Check that benchmarks compile               ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build docs                                  ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main rustup default nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | \n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build docs                                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Build docs                                  ]   | \n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main rustup default stable\n[Rust/Test simd backend (avx2)                    ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Build docs                                  ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build docs                                  ]   | \n[Rust/Check that benchmarks compile               ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check that benchmarks compile               ]   | \n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main rustup default stable\n[Rust/Build docs                                  ]   \u2705  Success - Main rustup default nightly\n[Rust/Check that clippy is happy                  ]   | info: using existing install for 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Check that clippy is happy                  ]   | \n[Rust/Check that clippy is happy                  ]   | info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'\n[Rust/Check that clippy is happy                  ]   |   nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Check that clippy is happy                  ]   | \n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main rustup default nightly\n[Rust/Test simd backend (avx2)                    ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Rust/Test simd backend (avx2)                    ]   | info: downloading component 'cargo'\n[Rust/Test simd backend (avx2)                    ]   | info: downloading component 'rust-std'\n[Rust/Test simd backend (avx2)                    ]   | info: downloading component 'rustc'\n[Rust/Test simd backend (avx2)                    ]   | info: installing component 'cargo'\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Test simd backend (avx2)                    ]   | info: installing component 'rust-std'\n[Rust/cross                                       ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build docs                                  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check formatting                            ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Test simd backend (avx2)                    ]   | info: installing component 'rustc'\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-rustc-version.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main rustup toolchain install stable\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main rustup default stable\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[Rust/Build docs                                  ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Test simd backend (avx2)                    ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Rust/Test simd backend (avx2)                    ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Test simd backend (avx2)                    ]   | \n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main rustup default stable\n[Rust/Check formatting                            ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/cross                                       ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +nightly --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +nightly --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check formatting                            ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/cross                                       ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Build docs                                  ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build docs                                  ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/cross                                       ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check formatting                            ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-6.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check formatting                            ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/cross                                       ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build docs                                  ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check formatting                            ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Test nightly compiler                       ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/cross                                       ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Build docs                                  ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/cross                                       ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Check formatting                            ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build docs                                  ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-7.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Build docs                                  ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Check formatting                            ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/cross                                       ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build docs                                  ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check formatting                            ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/cross                                       ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-8.sh] user= workdir=\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/Test nightly compiler                       ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/cross                                       ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check formatting                            ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build docs                                  ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Check formatting                            ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Build docs                                  ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/cross                                       ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main rustc +stable --version --verbose\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main rustc +stable --version --verbose\n[Rust/cross                                       ] \u2b50 Run Main rustc +stable --version --verbose\n[Rust/Check formatting                            ] \u2b50 Run Main rustc +stable --version --verbose\n[Rust/Build docs                                  ] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-9.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Current MSRV is 1.60.0                      ]   | binary: rustc\n[Rust/Current MSRV is 1.60.0                      ]   | commit-hash: 498553fc04f6a3fdc53412320f4e913bc53bc267\n[Rust/Current MSRV is 1.60.0                      ]   | commit-date: 2023-05-29\n[Rust/Current MSRV is 1.60.0                      ]   | host: x86_64-unknown-linux-gnu\n[Rust/Current MSRV is 1.60.0                      ]   | release: 1.72.0-nightly\n[Rust/Current MSRV is 1.60.0                      ]   | LLVM version: 16.0.4\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main rustc +nightly --version --verbose\n[Rust/Test nightly compiler                       ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +nightly --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Test nightly compiler                       ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Current MSRV is 1.60.0                      ]   \u2699  ::set-output:: name=nightly\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Main dtolnay/rust-toolchain@nightly\n[Rust/Test nightly compiler                       ] \u2b50 Run Main rustc +nightly --version --verbose\n[Rust/Check that clippy is happy                  ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Check that clippy is happy                  ]   | binary: rustc\n[Rust/Check that clippy is happy                  ]   | commit-hash: 498553fc04f6a3fdc53412320f4e913bc53bc267\n[Rust/Check that clippy is happy                  ]   | commit-date: 2023-05-29\n[Rust/Check that clippy is happy                  ]   | host: x86_64-unknown-linux-gnu\n[Rust/Check that clippy is happy                  ]   | release: 1.72.0-nightly\n[Rust/Check that clippy is happy                  ]   | LLVM version: 16.0.4\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main rustc +nightly --version --verbose\n[Rust/Check formatting                            ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Check formatting                            ]   | binary: rustc\n[Rust/Check formatting                            ]   | commit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\n[Rust/Check formatting                            ]   | commit-date: 2023-04-16\n[Rust/Check formatting                            ]   | host: x86_64-unknown-linux-gnu\n[Rust/Check formatting                            ]   | release: 1.69.0\n[Rust/Check formatting                            ]   | LLVM version: 15.0.7\n[Rust/Build docs                                  ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Check that benchmarks compile               ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Build docs                                  ]   | binary: rustc\n[Rust/Build docs                                  ]   | commit-hash: 498553fc04f6a3fdc53412320f4e913bc53bc267\n[Rust/Check that benchmarks compile               ]   | binary: rustc\n[Rust/Build docs                                  ]   | commit-date: 2023-05-29\n[Rust/Check that benchmarks compile               ]   | commit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\n[Rust/Build docs                                  ]   | host: x86_64-unknown-linux-gnu\n[Rust/Check that benchmarks compile               ]   | commit-date: 2023-04-16\n[Rust/Build docs                                  ]   | release: 1.72.0-nightly\n[Rust/Check that benchmarks compile               ]   | host: x86_64-unknown-linux-gnu\n[Rust/Build docs                                  ]   | LLVM version: 16.0.4\n[Rust/Check that benchmarks compile               ]   | release: 1.69.0\n[Rust/Check that benchmarks compile               ]   | LLVM version: 15.0.7\n[Rust/Build docs                                  ]   \u2705  Success - Main rustc +nightly --version --verbose\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main rustc +stable --version --verbose\n[Rust/Check formatting                            ]   \u2705  Success - Main rustc +stable --version --verbose\n[Rust/Build simd backend (nightly)                ]   | rustc 1.72.0-nightly (498553fc0 2023-05-29)\n[Rust/Build simd backend (nightly)                ]   | binary: rustc\n[Rust/Build simd backend (nightly)                ]   | commit-hash: 498553fc04f6a3fdc53412320f4e913bc53bc267\n[Rust/Build simd backend (nightly)                ]   | commit-date: 2023-05-29\n[Rust/Build simd backend (nightly)                ]   | host: x86_64-unknown-linux-gnu\n[Rust/Build simd backend (nightly)                ]   | release: 1.72.0-nightly\n[Rust/Build simd backend (nightly)                ]   | LLVM version: 16.0.4\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | binary: rustc\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | commit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | commit-date: 2023-04-16\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | host: x86_64-unknown-linux-gnu\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | release: 1.69.0\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   | LLVM version: 15.0.7\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main rustc +stable --version --verbose\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main rustc +nightly --version --verbose\n[Rust/cross                                       ]   | rustc 1.69.0 (84c898d65 2023-04-16)\n[Rust/cross                                       ]   | binary: rustc\n[Rust/cross                                       ]   | commit-hash: 84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc\n[Rust/cross                                       ]   | commit-date: 2023-04-16\n[Rust/cross                                       ]   | host: x86_64-unknown-linux-gnu\n[Rust/cross                                       ]   | release: 1.69.0\n[Rust/cross                                       ]   | LLVM version: 15.0.7\n[Rust/cross                                       ]   \u2705  Success - Main rustc +stable --version --verbose\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Main cargo -Z minimal-versions check --no-default-features --features serde\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2699  ::set-output:: name=stable\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Main dtolnay/rust-toolchain@master\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Check that clippy is happy                  ]   \u2699  ::set-output:: name=nightly\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Main dtolnay/rust-toolchain@nightly\n[Rust/Check formatting                            ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Check formatting                            ]   \u2699  ::set-output:: name=stable\n[Rust/Check formatting                            ]   \u2705  Success - Main dtolnay/rust-toolchain@stable\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: name=stable\n[Rust/Check that benchmarks compile               ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Main dtolnay/rust-toolchain@stable\n[Rust/cross                                       ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/cross                                       ]   \u2699  ::set-output:: name=stable\n[Rust/cross                                       ]   \u2705  Success - Main dtolnay/rust-toolchain@master\n[Rust/Build docs                                  ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Build docs                                  ]   \u2699  ::set-output:: name=nightly\n[Rust/Build docs                                  ]   \u2705  Success - Main dtolnay/rust-toolchain@nightly\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Build simd backend (nightly)                ]   \u2699  ::set-output:: name=nightly\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Main dtolnay/rust-toolchain@nightly\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Main rustc +stable --version --verbose\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-9.sh] user= workdir=\n[Rust/Check that benchmarks compile               ] \u2b50 Run Main Build u32 bench\n[Rust/Check formatting                            ] \u2b50 Run Main cargo fmt --all -- --check\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Main cargo build --target x86_64-unknown-linux-gnu\n[Rust/Build docs                                  ] \u2b50 Run Main make doc\n[Rust/Check that clippy is happy                  ] \u2b50 Run Main cargo clippy --target x86_64-unknown-linux-gnu\n[Rust/cross                                       ] \u2b50 Run Main RustCrypto/actions/cross-install@master\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Main cargo build --target thumbv7em-none-eabi --release --no-default-features\n[Rust/cross                                       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/RustCrypto-actions-cross-install@master/ dst=/var/run/act/actions/RustCrypto-actions-cross-install@master/\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/RustCrypto-actions-cross-install@master/] user=0 workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \u274c  Failure - Main cargo -Z minimal-versions check --no-default-features --features serde\n[Rust/Check that benchmarks compile               ]   \u274c  Failure - Main Build u32 bench\n[Rust/Test nightly compiler                       ]   \u274c  Failure - Main rustc +nightly --version --verbose\n[Rust/Build docs                                  ]   \u274c  Failure - Main make doc\n[Rust/Check formatting                            ]   \u274c  Failure - Main cargo fmt --all -- --check\n[Rust/Test simd backend (avx2)                    ]   \u274c  Failure - Main rustc +stable --version --verbose\n[Rust/Check that clippy is happy                  ]   \u274c  Failure - Main cargo clippy --target x86_64-unknown-linux-gnu\n[Rust/Current MSRV is 1.60.0                      ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/65addf7aa51c6205908b02cb177e2e481d9cbee4f05a47651658db1d647c543c/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Build docs                                  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/f045acdb1d554a4f011d1396738085c83746e041056d583535727208014224b6/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Test nightly compiler                       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7453ae33c5365c634b1b7b06c6811ecd8db0c9bfece8ad1a43d755d6dfa69094/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Build simd backend (nightly)                ]   \u274c  Failure - Main cargo build --target x86_64-unknown-linux-gnu\n[Rust/Check that benchmarks compile               ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/ea4848135ee689df2645d5618ca7bcbb8155548afcdd7363249115e6de4550cb/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Check formatting                            ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/4297d3a73b119e47a8dbe473051e046dcfb3b08895facddaaf627f67cdcfc470/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Test simd backend (avx2)                    ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/93f82dc42ce39533a8f95e9161069acf9accc6cab877061d4ee9c4ac9eb5deae/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Build simd backend (nightly)                ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/6619da46d3c7586e064acd33ffc6b4e7276d91e9975c467cb4bec354146eed87/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Check that clippy is happy                  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/4111f70c58a8d313b96cb0c3b6df9ad9b134c928d953562480efd8ab27a39873/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u274c  Failure - Main cargo build --target thumbv7em-none-eabi --release --no-default-features\n[Rust/Build on no_std target (thumbv7em-none-eabi)] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/19887bf4e2ad5ed4d8896182b9f3e7eb60ed5a30f74dfe543d8828a8e98e4c49/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: cachekey=202305294985\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: cachekey=2023041684c8\n[Rust/Test simd backend (avx2)                    ]   \u2699  ::set-output:: name=stable\n[Rust/Test nightly compiler                       ]   \u2699  ::set-output:: name=nightly\n[Rust/Test simd backend (avx2)                    ]   \u274c  Failure - Main dtolnay/rust-toolchain@stable\n[Rust/Test nightly compiler                       ]   \u274c  Failure - Main dtolnay/rust-toolchain@nightly\n[Rust/Test simd backend (avx2)                    ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/93f82dc42ce39533a8f95e9161069acf9accc6cab877061d4ee9c4ac9eb5deae/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Test nightly compiler                       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/7453ae33c5365c634b1b7b06c6811ecd8db0c9bfece8ad1a43d755d6dfa69094/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/cross                                       ] context canceled\n[Rust/cross                                       ]   \u274c  Failure - Main RustCrypto/actions/cross-install@master\n[Rust/cross                                       ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/3119cff7e3c6ce328a60a2527f58b969f2cc7ea8e1a9b25caacaf55e8f1cf2d0/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Rust/Current MSRV is 1.60.0                      ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[Rust/Check formatting                            ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[Rust/Build simd backend (nightly)                ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[Rust/Check that clippy is happy                  ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[Rust/Check that benchmarks compile               ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[Rust/cross                                       ] \u2b50 Run Post RustCrypto/actions/cross-install@master\n[Rust/Test simd backend (avx2)                    ] \u2b50 Run Post dtolnay/rust-toolchain@stable\n[Rust/Build docs                                  ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[Rust/Test nightly compiler                       ] \u2b50 Run Post dtolnay/rust-toolchain@nightly\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \u2b50 Run Post dtolnay/rust-toolchain@master\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Check formatting                            ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/cross                                       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/RustCrypto-actions-cross-install@master/ dst=/var/run/act/actions/RustCrypto-actions-cross-install@master/\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/Build docs                                  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@nightly/ dst=/var/run/act/actions/dtolnay-rust-toolchain@nightly/\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/RustCrypto-actions-cross-install@master/] user=0 workdir=\n[Rust/Current MSRV is 1.60.0                      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Test simd backend (avx2)                    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Build simd backend (nightly)                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Check that benchmarks compile               ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Check formatting                            ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Check that clippy is happy                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Build docs                                  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Test nightly compiler                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@nightly/] user=0 workdir=\n[Rust/Test nightly compiler                       ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[Rust/Check that clippy is happy                  ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[Rust/Check that benchmarks compile               ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[Rust/Test simd backend (avx2)                    ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[Rust/Build simd backend (nightly)                ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[Rust/Current MSRV is 1.60.0                      ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[Rust/Check formatting                            ]   \u2705  Success - Post dtolnay/rust-toolchain@stable\n[Rust/Build on no_std target (thumbv7em-none-eabi)]   \u2705  Success - Post dtolnay/rust-toolchain@master\n[Rust/cross                                       ]   \u2705  Success - Post RustCrypto/actions/cross-install@master\n[Rust/Build docs                                  ]   \u2705  Success - Post dtolnay/rust-toolchain@nightly\n[Rust/cross                                       ] \u2b50 Run Post dtolnay/rust-toolchain@master\n[Rust/cross                                       ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Rust/cross                                       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Rust/Test nightly compiler                       ] \ud83c\udfc1  Job succeeded\n[Rust/Check that clippy is happy                  ] \ud83c\udfc1  Job succeeded\n[Rust/Test simd backend (avx2)                    ] \ud83c\udfc1  Job succeeded\n[Rust/Check that benchmarks compile               ] \ud83c\udfc1  Job succeeded\n[Rust/Check formatting                            ] \ud83c\udfc1  Job succeeded\n[Rust/Build on no_std target (thumbv7em-none-eabi)] \ud83c\udfc1  Job succeeded\n[Rust/Build simd backend (nightly)                ] \ud83c\udfc1  Job succeeded\n[Rust/Current MSRV is 1.60.0                      ] \ud83c\udfc1  Job succeeded\n[Rust/Build docs                                  ] \ud83c\udfc1  Job succeeded\n[Rust/cross                                       ]   \u2705  Success - Post dtolnay/rust-toolchain@master\n[Rust/cross                                       ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}