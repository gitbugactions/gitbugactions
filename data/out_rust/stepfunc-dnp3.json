{
    "repository": "stepfunc/dnp3",
    "clone_url": "https://github.com/stepfunc/dnp3.git",
    "timestamp": "2023-05-30T09:27:58.898492Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[CI/bindings-linux  ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/documentation   ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/features        ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/conformance     ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/guide           ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/bindings-windows] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/bindings-macos  ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/linting         ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/test            ] \ud83d\ude80  Start image=crawlergpt:latest\n[CI/linting         ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/conformance     ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/bindings-macos  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/documentation   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/bindings-windows]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/guide           ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/bindings-linux  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/features        ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/test            ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[CI/conformance     ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/linting         ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-macos  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/documentation   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-windows]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-linux  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/features        ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/guide           ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/documentation   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-windows]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/conformance     ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/linting         ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/features        ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/guide           ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-linux  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-macos  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test            ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/test            ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/features        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/guide           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/features        ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[CI/bindings-macos  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/linting         ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[CI/bindings-linux  ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/conformance     ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/guide           ]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[CI/bindings-windows]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/stepfunc-dnp3] user=0 workdir=\n[CI/documentation   ]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=stable\n[CI/features        ] \u2b50 Run Pre Install Rust\n[CI/features        ]   \u2705  Success - Pre Install Rust\n[CI/bindings-macos  ] \u2b50 Run Pre Install Rust\n[CI/features        ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/bindings-macos  ]   \u2705  Success - Pre Install Rust\n[CI/linting         ] \u2b50 Run Pre Install Rust stable\n[CI/linting         ]   \u2705  Success - Pre Install Rust stable\n[CI/bindings-linux  ] \u2b50 Run Pre Install Rust\n[CI/bindings-macos  ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/bindings-linux  ]   \u2705  Success - Pre Install Rust\n[CI/conformance     ] \u2b50 Run Pre Install Rust\n[CI/linting         ] \ud83e\uddea  Matrix: map[rust:stable]\n[CI/linting         ] \u2b50 Run Main Checkout\n[CI/bindings-linux  ]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[CI/conformance     ]   \u2705  Success - Pre Install Rust\n[CI/guide           ] \u2b50 Run Main Checkout\n[CI/linting         ]   \u2705  Success - Main Checkout\n[CI/guide           ]   \u2705  Success - Main Checkout\n[CI/conformance     ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/guide           ] \u2b50 Run Main Install dependencies\n[CI/linting         ] \u2b50 Run Main Install Rust stable\n[CI/linting         ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[CI/bindings-windows] \u2b50 Run Pre Install Rust\n[CI/guide           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=guide\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[CI/bindings-windows]   \u2705  Success - Pre Install Rust\n[CI/documentation   ] \u2b50 Run Pre Install Rust \n[CI/features        ] \ud83e\uddea  Matrix: map[feature-args:--no-default-features]\n[CI/documentation   ]   \u2705  Success - Pre Install Rust \n[CI/features        ] \u2b50 Run Main Checkout\n[CI/features        ]   \u2705  Success - Main Checkout\n[CI/bindings-macos  ]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[CI/bindings-windows]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/bindings-linux  ] \ud83e\uddea  Matrix: map[target:x86_64-unknown-linux-gnu]\n[CI/bindings-linux  ] \u2b50 Run Main Checkout\n[CI/conformance     ]   \u2601  git clone 'https://github.com/actions/checkout' # ref=v3\n[CI/documentation   ]   \u2601  git clone 'https://github.com/Swatinem/rust-cache' # ref=v2\n[CI/bindings-linux  ]   \u2705  Success - Main Checkout\n[CI/features        ] \u2b50 Run Main Install Rust\n[CI/bindings-macos  ] \ud83e\uddea  Matrix: map[target:x86_64-apple-darwin]\n[CI/bindings-macos  ] \u2b50 Run Main Checkout\n[CI/features        ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[CI/bindings-macos  ]   \u2705  Success - Main Checkout\n[CI/bindings-windows]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[CI/features        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[CI/bindings-linux  ] \u2b50 Run Main Install Rust\n[CI/bindings-linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/conformance     ]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[CI/bindings-macos  ] \u2b50 Run Main Install Rust\n[CI/bindings-macos  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/documentation   ]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/bindings-windows] \ud83e\uddea  Matrix: map[target:x86_64-pc-windows-msvc test:true]\n[CI/bindings-windows] \u2b50 Run Main Checkout\n[CI/bindings-windows]   \u2705  Success - Main Checkout\n[CI/conformance     ] \u2b50 Run Main Checkout\n[CI/conformance     ]   \u2705  Success - Main Checkout\n[CI/documentation   ] \u2b50 Run Main Checkout\n[CI/documentation   ]   \u2705  Success - Main Checkout\n[CI/bindings-windows] \u2b50 Run Main Install Rust\n[CI/bindings-windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[CI/conformance     ] \u2b50 Run Main Install Rust\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[CI/conformance     ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/documentation   ] \u2b50 Run Main Install Rust \n[CI/documentation   ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/guide           ]   | yarn install v1.22.11\n[CI/guide           ]   | [1/4] Resolving packages...\n[CI/guide           ]   | [2/4] Fetching packages...\n[CI/features        ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-linux  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/linting         ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-macos  ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/documentation   ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-windows] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/conformance     ] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/features        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-parse.sh] user= workdir=\n[CI/bindings-macos  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/conformance     ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/linting         ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/features        ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-linux  ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/documentation   ]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-windows]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[CI/bindings-macos  ]   \u2699  ::set-output:: toolchain=stable\n[CI/linting         ]   \u2699  ::set-output:: toolchain=stable\n[CI/features        ]   \u2699  ::set-output:: toolchain=stable\n[CI/bindings-linux  ]   \u2699  ::set-output:: toolchain=stable\n[CI/bindings-windows]   \u2699  ::set-output:: toolchain=stable\n[CI/documentation   ]   \u2699  ::set-output:: toolchain=stable\n[CI/conformance     ]   \u2699  ::set-output:: toolchain=stable\n[CI/documentation   ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-macos  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-windows] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/conformance     ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/features        ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-linux  ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/linting         ] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-flags.sh] user= workdir=\n[CI/guide           ]   | error @docusaurus/core@2.4.0: The engine \"node\" is incompatible with this module. Expected version \">=16.14\". Got \"14.17.6\"\n[CI/guide           ]   | error Found incompatible module.\n[CI/guide           ]   | info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n[CI/guide           ]   \u274c  Failure - Main Install dependencies\n[CI/guide           ] exitcode '1': failure\n[CI/guide           ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/b475df4a85dea23d5fa0bf4d437dca1766ffb2e307f894f95fdb38c380886d73?force=1&v=1\": context deadline exceeded\n[CI/guide           ] \ud83c\udfc1  Job failed\n[CI/conformance     ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-windows]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/linting         ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-linux  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/bindings-macos  ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/documentation   ]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/conformance     ]   \u2699  ::set-output:: targets=\n[CI/conformance     ]   \u2699  ::set-output:: components=\n[CI/conformance     ]   \u2699  ::set-output:: downgrade=\n[CI/bindings-linux  ]   \u2699  ::set-output:: targets= --target x86_64-unknown-linux-gnu\n[CI/bindings-linux  ]   \u2699  ::set-output:: components=\n[CI/bindings-linux  ]   \u2699  ::set-output:: downgrade=\n[CI/documentation   ]   \u2699  ::set-output:: downgrade=\n[CI/documentation   ]   \u2699  ::set-output:: targets=\n[CI/documentation   ]   \u2699  ::set-output:: components=\n[CI/bindings-macos  ]   \u2699  ::set-output:: targets=\n[CI/bindings-macos  ]   \u2699  ::set-output:: components=\n[CI/bindings-macos  ]   \u2699  ::set-output:: downgrade=\n[CI/linting         ]   \u2699  ::set-output:: targets=\n[CI/linting         ]   \u2699  ::set-output:: components= --component rustfmt --component clippy\n[CI/linting         ]   \u2699  ::set-output:: downgrade=\n[CI/bindings-windows]   \u2699  ::set-output:: downgrade=\n[CI/bindings-windows]   \u2699  ::set-output:: targets= --target x86_64-pc-windows-msvc\n[CI/bindings-windows]   \u2699  ::set-output:: components=\n[CI/conformance     ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/bindings-linux  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/documentation   ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/bindings-macos  ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/linting         ] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/bindings-windows] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-2.sh] user= workdir=\n[CI/conformance     ]   | info: downloading installer\n[CI/bindings-linux  ]   | info: downloading installer\n[CI/linting         ]   | info: downloading installer\n[CI/bindings-macos  ]   | info: downloading installer\n[CI/bindings-windows]   | info: downloading installer\n[CI/documentation   ]   | info: downloading installer\n[CI/bindings-macos  ]   | info: profile set to 'default'\n[CI/bindings-macos  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/bindings-macos  ]   | info: skipping toolchain installation\n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   | Rust is installed now. Great!\n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   | To get started you may need to restart your current shell.\n[CI/bindings-macos  ]   | This would reload your PATH environment variable to include\n[CI/bindings-macos  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   | To configure your current shell, run:\n[CI/bindings-macos  ]   | source \"$HOME/.cargo/env\"\n[CI/bindings-macos  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/linting         ]   | info: profile set to 'default'\n[CI/linting         ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/linting         ]   | info: skipping toolchain installation\n[CI/linting         ]   | \n[CI/linting         ]   | \n[CI/linting         ]   | Rust is installed now. Great!\n[CI/linting         ]   | \n[CI/linting         ]   | To get started you may need to restart your current shell.\n[CI/linting         ]   | This would reload your PATH environment variable to include\n[CI/linting         ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/linting         ]   | \n[CI/linting         ]   | To configure your current shell, run:\n[CI/linting         ]   | source \"$HOME/.cargo/env\"\n[CI/bindings-macos  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/linting         ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/bindings-macos  ] \u2b50 Run Main rustup toolchain install stable\n[CI/documentation   ]   | info: profile set to 'default'\n[CI/documentation   ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/documentation   ]   | info: skipping toolchain installation\n[CI/documentation   ]   | \n[CI/documentation   ]   | \n[CI/documentation   ]   | Rust is installed now. Great!\n[CI/documentation   ]   | \n[CI/documentation   ]   | To get started you may need to restart your current shell.\n[CI/documentation   ]   | This would reload your PATH environment variable to include\n[CI/documentation   ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/documentation   ]   | \n[CI/documentation   ]   | To configure your current shell, run:\n[CI/documentation   ]   | source \"$HOME/.cargo/env\"\n[CI/documentation   ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/linting         ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/linting         ] \u2b50 Run Main rustup toolchain install stable\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/documentation   ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/documentation   ] \u2b50 Run Main rustup toolchain install stable\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/conformance     ]   | info: profile set to 'default'\n[CI/conformance     ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/conformance     ]   | info: skipping toolchain installation\n[CI/conformance     ]   | \n[CI/conformance     ]   | \n[CI/conformance     ]   | Rust is installed now. Great!\n[CI/conformance     ]   | \n[CI/conformance     ]   | To get started you may need to restart your current shell.\n[CI/conformance     ]   | This would reload your PATH environment variable to include\n[CI/conformance     ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/conformance     ]   | \n[CI/conformance     ]   | To configure your current shell, run:\n[CI/conformance     ]   | source \"$HOME/.cargo/env\"\n[CI/conformance     ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/bindings-linux  ]   | info: profile set to 'default'\n[CI/bindings-linux  ]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/bindings-linux  ]   | info: skipping toolchain installation\n[CI/bindings-linux  ]   | \n[CI/bindings-linux  ]   | \n[CI/bindings-linux  ]   | Rust is installed now. Great!\n[CI/bindings-linux  ]   | \n[CI/bindings-linux  ]   | To get started you may need to restart your current shell.\n[CI/bindings-linux  ]   | This would reload your PATH environment variable to include\n[CI/bindings-linux  ]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/bindings-linux  ]   | \n[CI/bindings-linux  ]   | To configure your current shell, run:\n[CI/bindings-linux  ]   | source \"$HOME/.cargo/env\"\n[CI/bindings-linux  ]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/conformance     ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/conformance     ] \u2b50 Run Main rustup toolchain install stable\n[CI/bindings-linux  ]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/bindings-linux  ] \u2b50 Run Main rustup toolchain install stable\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/bindings-windows]   | \n[CI/bindings-windows]   | \n[CI/bindings-windows]   | Rust is installed now. Great!\n[CI/bindings-windows]   | \n[CI/bindings-windows]   | To get started you may need to restart your current shell.\n[CI/bindings-windows]   | This would reload your PATH environment variable to include\n[CI/bindings-windows]   | Cargo's bin directory ($HOME/.cargo/bin).\n[CI/bindings-windows]   | \n[CI/bindings-windows]   | To configure your current shell, run:\n[CI/bindings-windows]   | source \"$HOME/.cargo/env\"\n[CI/bindings-windows]   | info: profile set to 'default'\n[CI/bindings-windows]   | info: default host triple is x86_64-unknown-linux-gnu\n[CI/bindings-windows]   | info: skipping toolchain installation\n[CI/bindings-windows]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[CI/bindings-windows]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[CI/bindings-windows] \u2b50 Run Main rustup toolchain install stable\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[CI/bindings-macos  ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-macos  ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-macos  ]   | info: downloading component 'cargo'\n[CI/linting         ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/documentation   ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-macos  ]   | info: downloading component 'rust-std'\n[CI/bindings-linux  ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/conformance     ]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-windows]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-macos  ]   | info: downloading component 'rustc'\n[CI/bindings-linux  ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-linux  ]   | info: downloading component 'cargo'\n[CI/documentation   ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/documentation   ]   | info: downloading component 'cargo'\n[CI/linting         ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/linting         ]   | info: downloading component 'cargo'\n[CI/bindings-linux  ]   | info: downloading component 'rust-std'\n[CI/linting         ]   | info: downloading component 'clippy'\n[CI/conformance     ]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/conformance     ]   | info: downloading component 'cargo'\n[CI/bindings-windows]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-windows]   | info: downloading component 'cargo'\n[CI/documentation   ]   | info: downloading component 'rust-std'\n[CI/linting         ]   | info: downloading component 'rust-std'\n[CI/conformance     ]   | info: downloading component 'rust-std'\n[CI/bindings-linux  ]   | info: downloading component 'rustc'\n[CI/bindings-macos  ]   | info: installing component 'cargo'\n[CI/documentation   ]   | info: downloading component 'rustc'\n[CI/linting         ]   | info: downloading component 'rustc'\n[CI/bindings-windows]   | info: downloading component 'rust-std' for 'x86_64-pc-windows-msvc'\n[CI/bindings-macos  ]   | info: installing component 'rust-std'\n[CI/conformance     ]   | info: downloading component 'rustc'\n[CI/bindings-linux  ]   | info: installing component 'cargo'\n[CI/documentation   ]   | info: installing component 'cargo'\n[CI/bindings-windows]   | info: downloading component 'rust-std'\n[CI/linting         ]   | info: downloading component 'rustfmt'\n[CI/linting         ]   | info: installing component 'cargo'\n[CI/bindings-windows]   | info: downloading component 'rustc'\n[CI/bindings-linux  ]   | info: installing component 'rust-std'\n[CI/documentation   ]   | info: installing component 'rust-std'\n[CI/bindings-macos  ]   | info: installing component 'rustc'\n[CI/linting         ]   | info: installing component 'clippy'\n[CI/bindings-windows]   | info: installing component 'cargo'\n[CI/linting         ]   | info: installing component 'rust-std'\n[CI/conformance     ]   | info: installing component 'cargo'\n[CI/bindings-windows]   | info: installing component 'rust-std' for 'x86_64-pc-windows-msvc'\n[CI/conformance     ]   | info: installing component 'rust-std'\n[CI/bindings-linux  ]   | info: installing component 'rustc'\n[CI/documentation   ]   | info: installing component 'rustc'\n[CI/linting         ]   | info: installing component 'rustc'\n[CI/bindings-windows]   | info: installing component 'rust-std'\n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-macos  ]   \u2705  Success - Main rustup toolchain install stable\n[CI/conformance     ]   | info: installing component 'rustc'\n[CI/bindings-macos  ] \u2b50 Run Main rustup default stable\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/bindings-windows]   | info: installing component 'rustc'\n[CI/bindings-linux  ]   | \n[CI/bindings-linux  ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-linux  ]   | \n[CI/bindings-linux  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-linux  ]   \u2705  Success - Main rustup toolchain install stable\n[CI/documentation   ]   | \n[CI/documentation   ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/documentation   ]   | \n[CI/documentation   ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/documentation   ]   \u2705  Success - Main rustup toolchain install stable\n[CI/bindings-linux  ] \u2b50 Run Main rustup default stable\n[CI/linting         ]   | info: installing component 'rustfmt'\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/documentation   ] \u2b50 Run Main rustup default stable\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/linting         ]   | \n[CI/linting         ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/linting         ]   | \n[CI/linting         ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/linting         ]   \u2705  Success - Main rustup toolchain install stable\n[CI/conformance     ]   | \n[CI/conformance     ]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/conformance     ]   | \n[CI/conformance     ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/conformance     ]   \u2705  Success - Main rustup toolchain install stable\n[CI/linting         ] \u2b50 Run Main rustup default stable\n[CI/conformance     ] \u2b50 Run Main rustup default stable\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/bindings-windows]   | \n[CI/bindings-windows]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-windows]   | \n[CI/bindings-windows]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-windows]   \u2705  Success - Main rustup toolchain install stable\n[CI/bindings-windows] \u2b50 Run Main rustup default stable\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-4.sh] user= workdir=\n[CI/bindings-windows]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/linting         ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/documentation   ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-linux  ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-macos  ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/documentation   ]   | \n[CI/documentation   ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/linting         ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/linting         ]   | \n[CI/bindings-windows]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/conformance     ]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-windows]   | \n[CI/bindings-windows]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-windows]   | \n[CI/documentation   ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/documentation   ]   | \n[CI/linting         ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/linting         ]   | \n[CI/bindings-windows]   \u2705  Success - Main rustup default stable\n[CI/documentation   ]   \u2705  Success - Main rustup default stable\n[CI/linting         ]   \u2705  Success - Main rustup default stable\n[CI/bindings-linux  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-linux  ]   | \n[CI/bindings-macos  ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-macos  ]   | \n[CI/bindings-macos  ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-macos  ]   | \n[CI/bindings-linux  ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/bindings-linux  ]   | \n[CI/conformance     ]   | \n[CI/conformance     ]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[CI/bindings-linux  ]   \u2705  Success - Main rustup default stable\n[CI/bindings-macos  ]   \u2705  Success - Main rustup default stable\n[CI/conformance     ]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[CI/conformance     ]   | \n[CI/conformance     ]   \u2705  Success - Main rustup default stable\n[CI/documentation   ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/conformance     ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-macos  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-linux  ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-windows] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/linting         ] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-rustc-version.sh] user= workdir=\n[CI/bindings-windows]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-macos  ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-linux  ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/conformance     ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/linting         ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/documentation   ]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[CI/bindings-windows]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/documentation   ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/linting         ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/bindings-macos  ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/bindings-linux  ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/conformance     ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/bindings-macos  ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/linting         ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/conformance     ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/bindings-linux  ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/bindings-windows] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/documentation   ] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-6.sh] user= workdir=\n[CI/bindings-macos  ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/conformance     ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/documentation   ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/bindings-linux  ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/bindings-windows]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/linting         ]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[CI/bindings-windows]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[CI/bindings-macos  ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[CI/bindings-linux  ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[CI/conformance     ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[CI/linting         ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[CI/documentation   ]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[CI/bindings-linux  ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/linting         ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/bindings-windows] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/bindings-macos  ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/documentation   ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/conformance     ] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-7.sh] user= workdir=\n[CI/documentation   ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/conformance     ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/linting         ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/bindings-macos  ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/bindings-linux  ]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/bindings-windows]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[CI/documentation   ]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[CI/linting         ]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[CI/bindings-windows]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[CI/bindings-linux  ]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[CI/bindings-macos  ]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[CI/conformance     ]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[CI/bindings-macos  ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/conformance     ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/bindings-linux  ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/linting         ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/bindings-windows] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/documentation   ] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-8.sh] user= workdir=\n[CI/bindings-linux  ]   \u274c  Failure - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/bindings-linux  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a2e9529a863b09a9e8848a6e5fd989d01059e27ec31ef74522ec43b7302f386e/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/documentation   ]   \u274c  Failure - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/documentation   ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/44c17d3ba3972e98197929a4ce5440eeb3d22472ea2127434899f94aedf106c0/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/bindings-linux  ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/bindings-linux  ]   \u2699  ::set-output:: name=stable\n[CI/bindings-linux  ]   \u274c  Failure - Main Install Rust\n[CI/bindings-linux  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a2e9529a863b09a9e8848a6e5fd989d01059e27ec31ef74522ec43b7302f386e/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/documentation   ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/documentation   ]   \u2699  ::set-output:: name=stable\n[CI/documentation   ]   \u274c  Failure - Main Install Rust \n[CI/documentation   ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/44c17d3ba3972e98197929a4ce5440eeb3d22472ea2127434899f94aedf106c0/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/conformance     ]   \u274c  Failure - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/bindings-windows]   \u274c  Failure - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/conformance     ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/dab6055d0b29b6cad10b394edb55cf9bba1102d1ddae584d6bc147f522090c67/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/bindings-windows] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/3959ed93bf2b389519249fc1d809dc50fbfd1d59d9386a622819e7a796e8182f/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/linting         ]   \u274c  Failure - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/linting         ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/658f53e16656bff353bface051c369962ae80b8e67f1cff83ef24404c586fcd7/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/conformance     ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/conformance     ]   \u2699  ::set-output:: name=stable\n[CI/conformance     ]   \u274c  Failure - Main Install Rust\n[CI/bindings-windows]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/bindings-windows]   \u2699  ::set-output:: name=stable\n[CI/bindings-windows]   \u274c  Failure - Main Install Rust\n[CI/conformance     ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/dab6055d0b29b6cad10b394edb55cf9bba1102d1ddae584d6bc147f522090c67/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/bindings-windows] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/3959ed93bf2b389519249fc1d809dc50fbfd1d59d9386a622819e7a796e8182f/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/linting         ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/linting         ]   \u2699  ::set-output:: name=stable\n[CI/linting         ]   \u274c  Failure - Main Install Rust stable\n[CI/linting         ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/658f53e16656bff353bface051c369962ae80b8e67f1cff83ef24404c586fcd7/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/bindings-macos  ]   \u274c  Failure - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[CI/bindings-macos  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a6e7fc18b4d396a19fe5139bda8127fb388ae3d14139a85b9e2d17e4d6464069/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/features        ]   \u274c  Failure - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[CI/features        ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/b898db19af025b8a0c6a783b508f6505254d083691442b33ef3d58cddde0b804/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/features        ]   \u2699  ::set-output:: cachekey=\n[CI/features        ]   \u2699  ::set-output:: name=stable\n[CI/features        ]   \u274c  Failure - Main Install Rust\n[CI/features        ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/b898db19af025b8a0c6a783b508f6505254d083691442b33ef3d58cddde0b804/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/bindings-macos  ]   \u2699  ::set-output:: name=stable\n[CI/bindings-macos  ]   \u2699  ::set-output:: cachekey=2023041684c8\n[CI/bindings-macos  ]   \u274c  Failure - Main Install Rust\n[CI/bindings-macos  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/a6e7fc18b4d396a19fe5139bda8127fb388ae3d14139a85b9e2d17e4d6464069/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[CI/documentation   ] \u2b50 Run Post Install Rust \n[CI/conformance     ] \u2b50 Run Post Install Rust\n[CI/linting         ] \u2b50 Run Post Install Rust stable\n[CI/features        ] \u2b50 Run Post Install Rust\n[CI/bindings-macos  ] \u2b50 Run Post Install Rust\n[CI/bindings-linux  ] \u2b50 Run Post Install Rust\n[CI/bindings-windows] \u2b50 Run Post Install Rust\n[CI/bindings-windows]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[CI/documentation   ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/bindings-linux  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/linting         ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[CI/bindings-macos  ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/conformance     ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@stable/ dst=/var/run/act/actions/dtolnay-rust-toolchain@stable/\n[CI/bindings-windows]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[CI/bindings-macos  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/linting         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[CI/bindings-linux  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/documentation   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/conformance     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@stable/] user=0 workdir=\n[CI/conformance     ]   \u2705  Success - Post Install Rust\n[CI/bindings-linux  ]   \u2705  Success - Post Install Rust\n[CI/documentation   ]   \u2705  Success - Post Install Rust \n[CI/linting         ]   \u2705  Success - Post Install Rust stable\n[CI/bindings-macos  ]   \u2705  Success - Post Install Rust\n[CI/bindings-windows]   \u2705  Success - Post Install Rust\n[CI/conformance     ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[CI/bindings-linux  ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[CI/linting         ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[CI/bindings-windows]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[CI/bindings-macos  ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[CI/documentation   ]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[CI/conformance     ] \ud83c\udfc1  Job succeeded\n[CI/documentation   ] \ud83c\udfc1  Job succeeded\n[CI/bindings-windows] \ud83c\udfc1  Job succeeded\n[CI/bindings-macos  ] \ud83c\udfc1  Job succeeded\n[CI/bindings-linux  ] \ud83c\udfc1  Job succeeded\n[CI/linting         ] \ud83c\udfc1  Job succeeded\n[CI/features        ]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[CI/features        ]   \u274c  Failure - Post Install Rust\n[CI/features        ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/b898db19af025b8a0c6a783b508f6505254d083691442b33ef3d58cddde0b804?force=1&v=1\": context deadline exceeded\n[CI/features        ] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}