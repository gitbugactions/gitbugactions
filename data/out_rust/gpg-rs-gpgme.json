{
    "repository": "gpg-rs/gpgme",
    "clone_url": "https://github.com/gpg-rs/gpgme.git",
    "timestamp": "2023-05-30T08:43:28.595293Z",
    "clone_success": true,
    "number of actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_stdout": "[Continuous Integration/Test Suite (linux, docker, musl)       ] \ud83d\ude80  Start image=crawlergpt:latest\n[Continuous Integration/Test Suite (windows, docker)           ] \ud83d\ude80  Start image=crawlergpt:latest\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \ud83d\ude80  Start image=crawlergpt:latest\n[Continuous Integration/Test Suite (windows, docker)           ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[Continuous Integration/Test Suite (windows, docker)           ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous Integration/Test Suite (windows, docker)           ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gpg-rs-gpgme] user=0 workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gpg-rs-gpgme] user=0 workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2601  git clone 'https://github.com/dtolnay/rust-toolchain' # ref=master\n[Continuous Integration/Test Suite (linux, docker, musl)       ] \u2b50 Run Main Checkout repository\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Pre Install rust\n[Continuous Integration/Test Suite (windows, docker)           ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /tmp/c1e8dd3a-fec2-11ed-a890-af2cc187fc11/gpg-rs-gpgme] user=0 workdir=\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \u2705  Success - Main Checkout repository\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Pre Install rust\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \ud83e\uddea  Matrix: map[os:ubuntu-latest rust:stable]\n[Continuous Integration/Test Suite (linux, docker, musl)       ] \u2b50 Run Main Build docker container\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main Checkout repository\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main Checkout repository\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main Install dependencies (Linux)\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=docker%2FDockerfile.static&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&shmsize=0&t=test-build&target=&ulimits=null&version=1\": dial unix /var/run/docker.sock: connect: permission denied\n[Continuous Integration/Test Suite (linux, docker, musl)       ]   \u274c  Failure - Main Build docker container\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Reading package lists...\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Building dependency tree...\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Reading state information...\n[Continuous Integration/Test Suite (windows, docker)           ] \u2b50 Run Main Checkout repository\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | The following additional packages will be installed:\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   |   libassuan-dev libgpg-error-dev\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | The following NEW packages will be installed:\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   |   libassuan-dev libgpg-error-dev libgpgme-dev\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | 0 upgraded, 3 newly installed, 0 to remove and 20 not upgraded.\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Need to get 530 kB of archives.\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | After this operation, 1874 kB of additional disk space will be used.\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 libgpg-error-dev amd64 1.37-1 [109 kB]\n[Continuous Integration/Test Suite (windows, docker)           ]   \u2705  Success - Main Checkout repository\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 libassuan-dev amd64 2.5.3-7ubuntu2 [92.8 kB]\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Get:3 http://archive.ubuntu.com/ubuntu focal/main amd64 libgpgme-dev amd64 1.13.1-7ubuntu2 [328 kB]\n[Continuous Integration/Test Suite (linux, docker, musl)       ] exitcode '1': failure\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Fetched 530 kB in 1s (401 kB/s)\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Selecting previously unselected package libgpg-error-dev.\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Preparing to unpack .../libgpg-error-dev_1.37-1_amd64.deb ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Unpacking libgpg-error-dev (1.37-1) ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Selecting previously unselected package libassuan-dev.\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Preparing to unpack .../libassuan-dev_2.5.3-7ubuntu2_amd64.deb ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Unpacking libassuan-dev (2.5.3-7ubuntu2) ...\r\n[Continuous Integration/Test Suite (windows, docker)           ] \u2b50 Run Main Build docker container\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Selecting previously unselected package libgpgme-dev.\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Preparing to unpack .../libgpgme-dev_1.13.1-7ubuntu2_amd64.deb ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Unpacking libgpgme-dev (1.13.1-7ubuntu2) ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Setting up libgpg-error-dev (1.37-1) ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Setting up libassuan-dev (2.5.3-7ubuntu2) ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Setting up libgpgme-dev (1.13.1-7ubuntu2) ...\r\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main Install dependencies (Linux)\n[Continuous Integration/Test Suite (windows, docker)           ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[Continuous Integration/Test Suite (linux, docker, musl)       ] \ud83c\udfc1  Job failed\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main Install rust\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Continuous Integration/Test Suite (windows, docker)           ]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%22WIN_VARIANT%22%3A%22ltsc2022%22%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=docker%2FDockerfile.windows&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&shmsize=0&t=test-build&target=&ulimits=null&version=1\": dial unix /var/run/docker.sock: connect: permission denied\n[Continuous Integration/Test Suite (windows, docker)           ]   \u274c  Failure - Main Build docker container\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-parse.sh] user= workdir=\n[Continuous Integration/Test Suite (windows, docker)           ] exitcode '1': failure\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : parse toolchain version\nif [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n  if [[ Linux == macOS ]]; then\n    echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  else\n    echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n  fi\nelif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n  echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\nelse\n  echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: toolchain=stable\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-flags.sh] user= workdir=\n[Continuous Integration/Test Suite (windows, docker)           ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/755aebbfc421549143ab16de71817503e25c6586f6858d327b96662496e2695c?force=1&v=1\": context deadline exceeded\n[Continuous Integration/Test Suite (windows, docker)           ] \ud83c\udfc1  Job failed\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : construct rustup command line\necho \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\necho \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\necho \"downgrade=\" >> $GITHUB_OUTPUT\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: downgrade=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: targets=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: components=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-2.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: downloading installer\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Rust is installed now. Great!\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | To get started you may need to restart your current shell.\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | This would reload your PATH environment variable to include\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | Cargo's bin directory ($HOME/.cargo/bin).\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | To configure your current shell, run:\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | source \"$HOME/.cargo/env\"\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: profile set to 'default'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: default host triple is x86_64-unknown-linux-gnu\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: skipping toolchain installation\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : install rustup if needed\nif ! command -v rustup &>/dev/null; then\n  curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n  echo \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::add-path:: /home/runneradmin/.cargo/bin\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main rustup toolchain install stable\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-3.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: latest update on 2023-04-20, rust version 1.69.0 (84c898d65 2023-04-16)\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: downloading component 'cargo'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: downloading component 'rust-std'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: downloading component 'rustc'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: installing component 'cargo'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: installing component 'rust-std'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: installing component 'rustc'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   |   stable-x86_64-unknown-linux-gnu installed - rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main rustup toolchain install stable\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main rustup default stable\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-4.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: using existing install for 'stable-x86_64-unknown-linux-gnu'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   |   stable-x86_64-unknown-linux-gnu unchanged - rustc 1.69.0 (84c898d65 2023-04-16)\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   | \n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main rustup default stable\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-rustc-version.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : create cachekey\nDATE=$(rustc +stable --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\nHASH=$(rustc +stable --version --verbose | sed -ne 's/^commit-hash: //p')\necho \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: cachekey=2023041684c8\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-6.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : disable incremental compilation\nif [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n  echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-env:: CARGO_INCREMENTAL=0\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-7.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : enable colors in Cargo output\nif [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n  echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-env:: CARGO_TERM_COLOR=always\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-8.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Main : enable Cargo sparse registry\n# except on 1.66 and 1.67, on which it is unstable\nif [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"/tmp\"/.implicit_cargo_registries_crates_io_protocol ]; then\n  touch \"/tmp\"/.implicit_cargo_registries_crates_io_protocol || true\n  if rustc +stable --version --verbose | (! grep -q '^release: 1\\.6[67]\\.'); then\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n  else\n    echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n  fi\nfi\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-env:: CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Main rustc +stable --version --verbose\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-9.sh] user= workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u274c  Failure - Main rustc +stable --version --verbose\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/ae4675cc1a454638f77cbabf2c06d22ad0eac80a0c02b3275139eebdb0b1a5bb/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: cachekey=2023041684c8\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2699  ::set-output:: name=stable\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u274c  Failure - Main Install rust\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/ae4675cc1a454638f77cbabf2c06d22ad0eac80a0c02b3275139eebdb0b1a5bb/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \u2b50 Run Post Install rust\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker cp src=/home/andre-silva/.cache/act/dtolnay-rust-toolchain@master/ dst=/var/run/act/actions/dtolnay-rust-toolchain@master/\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1000 /var/run/act/actions/dtolnay-rust-toolchain@master/] user=0 workdir=\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)]   \u2705  Success - Post Install rust\n[Continuous Integration/Test Suite (ubuntu-latest, rust-stable)] \ud83c\udfc1  Job succeeded\n",
    "actions_stderr": "Error: context canceled\n"
}