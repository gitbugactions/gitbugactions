{
    "repository": "allegro/opel",
    "stars": 63,
    "language": "java",
    "size": 536,
    "clone_url": "https://github.com/allegro/opel.git",
    "timestamp": "2023-06-29T12:34:49.962899Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "gradle",
        "gradle"
    ],
    "actions_test_build_tools": [
        "gradle"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "pl.allegro.tech.opel.FutureUtilSpec",
                "name": "should convert list of futures to futures list",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return true when evaluating: false || true",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return true when evaluating: true || false",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return true when evaluating: true || true",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return false when evaluating: false || false",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return false when evaluating: false && true",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return false when evaluating: true && false",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return true when evaluating: true && true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should return false when evaluating: false && false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should convert operator argument to boolean if implicit conversion exists",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should throw an exception if implicit conversion for condition argument not exist",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should treat nulls as false using or [left: null, right: true, result: true, #0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should treat nulls as false using or [left: true, right: null, result: true, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should treat nulls as false using or [left: null, right: null, result: false, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should treat nulls as false using and [left: null, right: true, result: false, #0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should treat nulls as false using and [left: true, right: null, result: false, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "should treat nulls as false using and [left: null, right: null, result: false, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec",
                "name": "logical operators should be lazy",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MethodCallExpressionNodeSpec",
                "name": "should call a zero arguments method",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MethodCallExpressionNodeSpec",
                "name": "should call a method with one argument",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MethodCallExpressionNodeSpec",
                "name": "should call a method with two arguments",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MethodCallExpressionNodeSpec",
                "name": "should not allow to call any method when using DENY_ALL method execution filter",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MethodCallExpressionNodeSpec",
                "name": "should not call any method not passing custom method execution filter",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MethodCallExpressionNodeSpec",
                "name": "should throw when calling method on null receiver",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression 1-'5')",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression '5'-2)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression '5'-'2')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression null-'2')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression 2-null)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression null-null)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to number for subtracting operator using implicit conversion (expression 1-'-5')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (4*'5')",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('4'*5)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('4'*'5')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (null*4)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (4*null)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (null*null)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (10/'5')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('10'/5)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('10'/'5')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (null/4)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert string to number in comparison when one way conversion from string to number is registered [input:  '55' <  7  , expResult: false, #0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should convert string to number in comparison when one way conversion from string to number is registered [input:   55  > '7' , expResult: true, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should register conversions in multithreaded environment [input: 'opel'.rev(), expResult: lepo, #0]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should register conversions in multithreaded environment [input: 'abc'.rev(), expResult: cba, #1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should use left site as primary type for sum operator and throw exception when conversion failed [input: 123+'abc', #0]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should firstly convert right argument when comparing objects in  '55' <  7  ",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec",
                "name": "should firstly convert right argument when comparing objects in   55  > '7' ",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'Guns N\\' Roses'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'AC\\\\DC'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'abc'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'abc'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression '\u0142\u0105\u0107'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'abc'+'xyz'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression '\\'abc'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'abc\\''",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression 'abc\\'xyz'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate string expression ''",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression ending with ; [input: 'Guns N\\' Roses';, expResult: Guns N' Roses, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression ending with ; [input: 1+2 ;, expResult: 3, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression ending with ; [input: 1+2  ;   , expResult: 3, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should return parsing result with errors for redundant ; [input: 123+'abc';;, #0]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should return parsing result with errors for redundant ; [input: ;123+'abc';, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should return parsing result with errors for multi line string",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"2 +3\"",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"2- 3\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"2 * 3\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"4 /   2\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"-2 +3\"",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"-2 +3  \"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"-2 +3 \t\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"-2 +3 \t\n\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"-1 * \t \n2 +5\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"-4* ( 2+ 5 )/ 2\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc' \"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc '\"",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc ' \"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc' + 'xyz'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc ' + ' xyz'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc'+ 123\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"123 == '123'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'123' != 124\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression with whitespaces \"'abc' . length() \"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \" -2 +3\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \"\t  -1 * \t \n2 +5\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \"\t\n-4* ( 2+ 5 )/ 2\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \" 'abc'\"",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \"\t 'abc' \"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \" 123 == '123'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate expression which starts with whitespace(s): \"\t'123' != 124\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should throw an exception when comparing invalid objects in 'abc' < 5 expression",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should throw an exception when comparing invalid objects in o >= o expression",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should throw an exception when comparing invalid objects in o > 5 expression",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: zero() == 'zero'",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: zero () == 'zero'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: zero(   ) == 'zero'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: zero ( ) == 'zero'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: one('x') == 'one'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: twoArgsFunc('x', 'y') == 'xAndY'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: twoArgsFunc('x', 'y')=='otherThanXAndY'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: twoArgsFunc('a', 'b')=='otherThanXAndY'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: oneTwoThree('m', 'n', 'o')=='one two three'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: fourArgsFunc('m', 'n', 'o', 'p')=='mnop'",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: (5 == 5) != (5 == 6)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: identity((5 == 5) != (5 == 6))",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: identity(5 == 5)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should evaluate comparison with function: identity(5 != 5)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"'abc\"",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"1 ,= 5\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"1 * 5 , 9\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"5 ; 9\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"ds('x').items[0.name + 'abc'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"ds('x').items[0[.name\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"'abc\\'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"function('a', 'b', 'c').items[0[.name\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"function('a', 'b', 'c').items[0).name\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"function('a', 'b', 'c').items[0,].name\"",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"true false\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"true null false\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to false for expression: \"true && || false\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"variable.item[0]\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"function(10) == true\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"3\"",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"1 + 1\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"1 + 1 * 4\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"'abc' + 'xyz'\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"function(10) + 10\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"function('a', 'b')\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"1 == 10\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"1 != 10\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"function(10).items[0].name\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"function().items[0].name\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"function(10).items[0].prices[0].x\"",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"fun1('x').items[0].name\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"fun1(1==1)\"",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"identity(1==1)\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"identity(1==0)\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validationSucceed should be equal to true for expression: \"false || true && false || (true && false)\"",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "validation should return proper message for invalid expression",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'true '",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'true'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in '(true) '",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'false'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'true==true '",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'true == true'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'false == false'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'false == true'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in 'false != false'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should access true and false native variables without registration in '(5 == 5) == true'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (true) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (6 > 3) 'a' else 'b')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if ('x' == 'x') 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (false) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (false) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (null) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (true) 1 == 2 else 2 == 2)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (true) null else 'not null')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (true) true else false)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (true) (null) else 'not null')",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (1 == 2 || 2 == 2) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (1 == 1 && 2 == 2) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (1 == 1 && 2 == 3) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (1 == 1 && 2 == 3) 1 == 2 && 2 == 2 else 1 == 1 && 2 == 2)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression (if (false || false || false || true) 'a' else 'b')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate if expression ((if (true) 'a' else 'b').length())",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineIntegrationSpec",
                "name": "should calculate only left value when condition result result is true",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MapAccessExpressionNodeSpec",
                "name": "should access map field",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MapAccessExpressionNodeSpec",
                "name": "should access list element",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MapAccessExpressionNodeSpec",
                "name": "should handle null value",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MapAccessExpressionNodeSpec",
                "name": "should handle null field",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec",
                "name": "should return negation of boolean [booleanValue: true, #0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec",
                "name": "should return negation of boolean [booleanValue: false, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec",
                "name": "should return negation of converted value [convertion: <pl.allegro.tech.opel.ImplicitConversionUnit@3e7f9522 from=class pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$Foo to=class java.lang.Boolean convert=pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$__spock_feature_0_1prov0_closure1@6b909973>, expectedValue: false, #0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec",
                "name": "should return negation of converted value [convertion: <pl.allegro.tech.opel.ImplicitConversionUnit@3e7f9522 from=class pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$Foo to=class java.lang.Boolean convert=pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$__spock_feature_0_1prov0_closure2@f4cfc61>, expectedValue: true, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec",
                "name": "should thrown exception on negation of nulls",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec",
                "name": "should throw exception on negation of not boolean type",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EvalContextBuilderSpec",
                "name": "should create merged context using elements from secondary context",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EvalContextBuilderSpec",
                "name": "should create merged context using elements from primary context",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EvalContextBuilderSpec",
                "name": "adding new values should not change built context",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should divide BigDecimals [left: 10, right: 2, result: 5, #0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should divide BigDecimals [left: 0, right: 5, result: 0, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should divide BigDecimals [left: -10, right: 5, result: -2, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should divide BigDecimals [left: 10, right: -5, result: -2, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should divide BigDecimals [left: -10, right: -5, result: 2, #4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception on dividing by zero or null [left: 10, right: 0, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception on dividing by zero or null [left: 0, right: 0, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception on dividing by zero or null [left: 10, right: null, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception on dividing by zero or null [left: 0, right: null, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception on dividing by zero or null [left: null, right: null, #4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should convert left and right side and divide them [left: 6, right: 3, result: 2, #0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should convert left and right side and divide them [left: 6, right: 3, result: 2, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should convert left and right side and divide them [left: 6, right: 3, result: 2, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should convert left and right side and divide them [left: 6, right: 3, result: 2, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: null, right: 3, result: 0, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception when divide object with no BigDecimal conversion [left: 3, right: 3, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception when divide object with no BigDecimal conversion [left: 3, right: 3, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.DivideOperatorExpressionNodeSpec",
                "name": "should throw exception when divide object with no BigDecimal conversion [left: 3, right: 3, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input fun().length()",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input fun().contains('ello')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input fun().charAt(1)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input fun().substring(5).length()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input 'Hello, World!'.length()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input var.contains('a')",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call object methods for input var.contains(arg)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call method with null value as argument",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call methods on wrapped object for input 'opel'.rev()",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec",
                "name": "should call methods on wrapped object for input 'abc'.rev()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.String)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.Double)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.String)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.Double)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.Integer)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.String)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (123 to class java.lang.Integer)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should find registered converter if conversion is needed (1.1 to class java.lang.Float)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert object to expected type (123 to class java.lang.String)",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert object to expected type (123 to class java.lang.Double)",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert object to expected type (123 to class java.lang.String)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert object to expected type (123 to class java.lang.Integer)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert object to expected type (1.1 to class java.lang.Float)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert 123 to all possible types",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert 124 to all possible types",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should convert 125.0 to all possible types",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should skip failed conversion when convert to all possible types [object: notIntValue, result: [notIntValue], #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should skip failed conversion when convert to all possible types [object: 111.22, result: [111.22], #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should skip failed conversion when convert to all possible types [object: 111.22, result: [111.22], #2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionSpec",
                "name": "should prevent to override registered conversion when new one has the same from and to types",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: zero()",
                "time": 0.46,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: one('x')",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: one(1 == 1)",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: twoArgsFunc('x', 'y')",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: twoArgsFunc('x', 'z')",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: oneTwoThree('m', 'n', 'o')",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should return context function value: fourArgsFunc('m', 'n', 'o', 'p')",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(7)",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(6).name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(6)['name']",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(6)",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(5).l1.item.name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(5).l1['item'].name",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(4).items[0].name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(4).items[(4-2)*3-6].name",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(1+2*3-3).items[0].name",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(4).items[ 0].name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(4).items[0 ] .name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(4).items[ 0 ]. name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(4) .items[ 0 ]. name",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression 'abc'+ds(4).items[0].name+'xyz'",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression 'chc\u0119 kupi\u0107 '+ds(4).items[0].name+' bu\u0142ek'",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression 'abc'+5+5",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression 'abc'+(5+5)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(44).someField.anotherOne",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate context function call expression ds(44).someField[0].anotherOne",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "0-arg function should receive empty list of arguments [input: zero(), expResult: Empty list, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should access registered variables in var",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should access registered variables in var.a",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should access registered variables in var.a[1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should access registered future variables in var",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should access registered future variables in var.a",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should access registered future variables in var.a[1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should eval value using provided eval context [input: 2+myVar, #0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should eval value using provided eval context [input: 2+myFunc, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should be able to use variables and functions from external context [input: 2+myVar, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should be able to use variables and functions from external context [input: 2+myFunc, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should be able to override variables and functions from external context [input: 2+myVar, #0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should be able to override variables and functions from external context [input: 2+myFunc, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate expression with variable and function registered in engine [expression: 2 + myVar, expected: 204, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate expression with variable and function registered in engine [expression: 3 + myFunc(), expected: 106, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate expression with variable and function registered in engine with empty context given [expression: 2 + myVar, expected: 204, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate expression with variable and function registered in engine with empty context given [expression: 3 + myFunc(), expected: 106, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should prefere variables and functions from eval context [expression: 2 + myVar, expected: 2002, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should prefere variables and functions from eval context [expression: 3 + myFunc(), expected: 1003, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate parsed expression with variable and function registered in engine [expression: 2 + myVar, expected: 204, #0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate parsed expression with variable and function registered in engine [expression: 3 + myFunc(), expected: 106, #1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate parsed expression with variable and function registered in engine with empty context given [expression: 2 + myVar, expected: 204, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should evaluate parsed expression with variable and function registered in engine with empty context given [expression: 3 + myFunc(), expected: 106, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should prefere variables and functions from eval context when evaluating parsed expression [expression: 2 + myVar, expected: 2002, #0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should prefere variables and functions from eval context when evaluating parsed expression [expression: 3 + myFunc(), expected: 1003, #1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should not allow to override built in value (true)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should not allow to override built in value (false)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec",
                "name": "should not allow to override built in value (null)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.LiteralExpressionNodeSpec",
                "name": "should evaluate to value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.FunctionCallExpressionNodeSpec",
                "name": "should call function from context",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.IdentifierExpressionNodeSpec",
                "name": "should evaluate to identifier string",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should return zero when add null to null [left: null, right: null, result: 0, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat null as zero when adding a number [left: 5, right: null, result: 5, #0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat null as zero when adding a number [left: null, right: 5, result: 5, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat null as empty string when adding a string [left: abc, right: null, result: abc, #0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat null as empty string when adding a string [left: null, right: abc, result: abc, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should prefere converting to BigDecimal over String when null is adding [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@55fd0b81>, right: null, result: 5, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should prefere converting to BigDecimal over String when null is adding [left: null, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@2d2e2f3d>, result: 5, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should converting to String when null is adding and no conversion to BigDecimal registered [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@10b2881a>, right: null, result: 10, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should converting to String when null is adding and no conversion to BigDecimal registered [left: null, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@6664554f>, result: 10, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should sum BigDecimal's without conversion",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should concat Strings's without conversion",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to BigDecimal if conversion to BigDecimal exist [left: 5, right: 10, result: 15, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to BigDecimal if conversion to BigDecimal exist [left: 10, right: 5, result: 15, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to BigDecimal if conversion to BigDecimal exist [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7cbb796e>, right: 5, result: 125, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to BigDecimal if conversion to BigDecimal exist [left: 5, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@38b1859b>, result: 125, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to BigDecimal if conversion to BigDecimal exist [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@152a5364>, right: 10, result: 130, #4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to BigDecimal if conversion to BigDecimal exist [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1c1ddede>, result: 130, #5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 5, right: 10, result: 510, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 10, right: 5, result: 105, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1bbbaf1e>, right: 10, result: foo10, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@18a9626c>, result: 10foo, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@134bf69e>, right: 5, result: foo5, #4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 5, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@69addf9a>, result: 5foo, #5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert argument to String if conversion to String exist and BigDecimal conversion missing [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@2f284eee>, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7cc1f365>, result: foofoo, #6]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert right argument to BigDecimal if left is BigDecimal type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should convert right argument to String if left is String type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should prefer conversion to BigDecimal over conversion to String",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should use right argument type when left conversion can't be determined clearly [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1c2a6efa>, right: 10, result: foo10, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should use right argument type when left conversion can't be determined clearly [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@ba5d8ad>, right: 10, result: 130, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should throw exception on adding String to BigDecimal when no conversion was registered",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat Int type as common type (like Foo) [left: 5, right: 10, result: 510, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat Int type as common type (like Foo) [left: 5, right: 10, result: 510, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat Int type as common type (like Foo) [left: 5, right: 10, result: 15, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should treat Int type as common type (like Foo) [left: 5, right: 10, result: 15, #3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should throw exception on adding type which can't be converted to String or BigDecimal [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1afd4b64>, right: 10, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should throw exception on adding type which can't be converted to String or BigDecimal [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@763f8cc9>, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should throw exception on adding type which can't be converted to String or BigDecimal [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7bc0abb2>, right: 10, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should throw exception on adding type which can't be converted to String or BigDecimal [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@e71438>, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.SumOperatorExpressionNodeSpec",
                "name": "should throw exception on adding type which can't be converted to String or BigDecimal [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7031c92b>, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7ae24a20>, #4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for nulls [left: null, right: null, result: true, #0]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for nulls [left: null, right: <java.lang.Object@54980154>, result: false, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for nulls [left: <java.lang.Object@25874884>, right: null, result: false, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for the same types [left: , right: , result: true, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for the same types [left: abc, right: abc, result: true, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for the same types [left: abc, right: cba, result: false, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for the same types [left: 5, right: 5, result: true, #3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should calculate equality for the same types [left: 5, right: 6, result: false, #4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should prefer conversion to left type when types are different [left: foo, right: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@75f3c0c9>, result: true, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should prefer conversion to left type when types are different [left: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@52268f73>, right: foo, result: false, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should convert left argument to right argument type if there is no conversion from right arg type to left arg type [left: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@3938e876>, right: foo, result: true, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should not be equal if types are different and there is no required conversion [left: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@65dac812>, right: foo, result: false, #0]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec",
                "name": "should not be equal if types are different and there is no required conversion [left: foo, right: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@3619ecd>, result: false, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ValueExpressionNodeSpec",
                "name": "should evaluate to variable from context",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.FieldAccessExpressionNodeSpec",
                "name": "should access field",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.FieldAccessExpressionNodeSpec",
                "name": "should handle null value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.FieldAccessExpressionNodeSpec",
                "name": "should handle null field",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionUnitSpec",
                "name": "should convert using convert function",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.ImplicitConversionUnitSpec",
                "name": "should throw an exception when required conversion is not found",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should negate null to 0 [value: null, result: 0, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should negate BigDecimal [value: 7, result: -7, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should negate BigDecimal [value: -7, result: 7, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should negate BigDecimal [value: 0, result: 0, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should convert to BigDecimal and negate result [value: 7, result: -7, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should convert to BigDecimal and negate result [value: -7, result: 7, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should convert to BigDecimal and negate result [value: 0, result: 0, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should throw exception when conversion to BigDecimal not found",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.NegationOperatorExpressionNodeSpec",
                "name": "should throw exception when conversion to BigDecimal failed",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map defined in {:}",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map defined in {'x':2}",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map defined in ({'x': 2 })",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map defined in {'x': 2, 'y':3 }",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map defined in {'x': 2, 'y':null }",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map defined in {'x': 2, 'null':2 }",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with variable as key defined in {x: (6+7), 'y':3 }",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with variable as key defined in {x: 6+7, 'y':3 }",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with variable as key defined in {x: 6+7, 'y':3 }",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with expression key defined in {(1+1.5): 2, 'y':3 }",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with expression key defined in {('x' + 'x'):2}",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with expression key defined in {[].size():2}",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with expression key defined in {([].size()):2}",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should instantiate map with expression key defined in {(['1'].size()):['1'].size()}",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should assign map to a value in val x = {('x' + 'x'):2}; x.xx and access an element ",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should assign map to a value in val x = {('x' + 'x'):2}; x.get('xx') and access an element ",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should assign map to a value in val x = {('x' + 'x'):2}; x.xx and access an element ",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should assign map to a value in val x = {('x' + 'x'):2}; x['xx'] and access an element ",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should access map with [] notation [input: {'x':2, 'y':3}['x'], expResult: 2, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should access map with [] notation [input: aMap['b'], expResult: y, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should access map with [] notation [input: aMap[true == false], expResult: xyz, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should access map with dot (.) notation [input: {'x':2, 'y':5}.x, expResult: 2, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should access map with dot (.) notation [input: aMap.b, expResult: y, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should prefer method call over field access with function as a value (aMap.get('get'))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should prefer method call over field access with function as a value ((aMap.get)('get'))",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should prefer method call over field access with function as a value (({'get': x->x+x}.get('get'))('g'))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should prefer method call over field access with function as a value (({'get': x->x+x}.get)('get'))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should not parse {}",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should not parse { }",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should not parse {, }",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMapIntegrationSpec",
                "name": "should not parse {  , }",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: 5.0, right: 5.0, result: 0.0, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: 0.0, right: 5.0, result: -5.0, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: 5.0, right: 0.0, result: 5.0, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: 5.0, right: 3.0, result: 2.0, #3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: 5.0, right: 8.0, result: -3.0, #4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: -5.0, right: 8.0, result: -13.0, #5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: 5.0, right: -8.0, result: 13.0, #6]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should subtract BigDecimals [left: -5.0, right: -8.0, result: 3.0, #7]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: null, right: null, result: 0, #0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: 2.0, right: null, result: 2.0, #1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: null, right: 2.0, result: -2.0, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should throw exception when subtracting object with no BigDecimal conversion [left: 1.0, right: 3, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should throw exception when subtracting object with no BigDecimal conversion [left: 3, right: 1.0, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should throw exception when subtracting object with no BigDecimal conversion [left: 3, right: 3, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should throw exception when subtracting object with no BigDecimal conversion [left: 3, right: null, #3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MinusOperatorExpressionNodeSpec",
                "name": "should throw exception when subtracting object with no BigDecimal conversion [left: null, right: 3, #4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 7",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 2+3",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 2-3",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 2*3",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 4/2",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression -2+3",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression -1*2+5",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression -4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression --4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression -4*(2+5)/2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 1.2+2.3",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 1.2+4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 4+1.2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 5/2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 5/3",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression 7+null",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression null+7",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate math expression null+null",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should throw an exception on subtracting with string (expression 1-'5')",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should throw an exception on subtracting with string (expression '5'-2)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should throw an exception on subtracting with string (expression o-2)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator ('abc'+123)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (null+'abc')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (5+null)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (null+5)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (null+5+6)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (5+6+null)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (5+'5')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator ('5'+5)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator (5.2+'5')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should use left side as primary type for sum operator ('123'+'123')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression '123'=='123'",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression '123'!='123'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 123=='123'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression '123'==123",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 123==123",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 100+23==123",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 200==(123-23)*2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression fun('x')=='abc'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression fun('x')!='cba'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 7=='\u015b'",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression '\u0142\u0105\u0107'=='\u0142\u0105\u0107'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 5 < 6",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 5 <= 6",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 5 <= 5",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 5 > 3",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 5 >= 6",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 5 >= 5",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 'b' > 'abc'",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression true > false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression '5' > 7",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression '5' > 2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression null",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression (2 == 2) == true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression true && true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression false && true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression false || true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression true || false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression false || false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 1 == 1 || false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 1 == 1 && 2 == 2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression 1 > 2 || 2 > 1",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression identity(false || true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression identity(false && true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate logical expression identity(if (false || (true && true)) true else false)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !true",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression ! true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression ! !true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !!true",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !false",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !(true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !(value)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !fun('')",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !(fun(''))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !true || true",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !(true || true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !(true || true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !(false || !false)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression identity(!true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression !identity(!true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "! should negate boolean expression true && !false",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "AND operator should have higher priority than OR [input: true || true && false, expResult: true, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "AND operator should have higher priority than OR [input: (true || true) && false, expResult: false, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate relational operators with higher priority then equality operator (8 > 5 == true)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate relational operators with higher priority then equality operator (true == 8 > 5)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate relational operators with higher priority then equality operator (true != 8 >= 5)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineMathIntegrationSpec",
                "name": "should evaluate relational operators with higher priority then equality operator (2 != 3 <= 5 == 5)",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in []",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ([])",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in [null]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ['a']",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ['a', 'b']",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ['a', 'b', 'c']",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ['a', 2, 'c']",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ['a', 2, 'c'].size()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in ['a', 2, ['1', '2']].size()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in (['a', 2, 'c']).size()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in val x = ['a', 'b']; x.get(0)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in val x = ['a', 'b']; (x).get(0)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should instantiate list in val x = 1; [x, x, 2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should access list element by [] notation (aList[1])",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineListIntegrationSpec",
                "name": "should access list element by [] notation (['a', 'b'][0])",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate function in val f = () -> 3; f()",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate function in val square = x -> x * x; square(2)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate function in val square = (x) -> x * x; square(2)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate function in val a = 3; val f = x -> a*x*x; f(2)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate function in val f = (x, y) -> x*x + y*y; f(2, 3)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate function in (x, y) -> {x*x + y*y}(1, 2)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate multiline function in \n                    val f = (a, b) -> {\n                        val x = 2;\n                        a*x*x + b*x\n                    };\n                    f(1,3)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate multiline function in \n                    val x = 3;\n                    val f = (a, b) -> {\n                        val x = 2;\n                        a*x*x + b*x\n                    };\n                    f(1,3)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should instantiate multiline function in \n                    val x = 3;\n                    val f = (a, b) -> {\n                        val y = a*x*x;\n                        y + b*x\n                    };\n                    f(1,3)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should create higher-order function and call it [input: \n                    val f = a -> {\n                        b -> {a*2+b}\n                    };\n                    f(2)(3)\n                , expResult: 7, #0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should create higher-order function and call it [input: \n                    val f = a -> {\n                        b -> {\n                            c -> a*a*a + b*b + c\n                        }\n                    };\n                    f(1)(2)(3)\n                , expResult: 8, #1]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in () -> 3",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in val a = 2; x -> a * x",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in x -> x * 3",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in (x) -> x * 3",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in val f = x -> x * 3; f",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in val f = (x, y) -> x*x + y*y*y; f",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should return function in val f = (x, y) -> x*x + y*y*y; val g = x -> f(x, 2); g",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should create higher-order function and return inner function",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should failed when missing arguments (val fun = x -> x*x; fun())",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should failed when missing arguments (val fun = (x, y) -> x*y; fun(3))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should ignore useless arguments (val fun = () -> 1; fun(2, 3))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should ignore useless arguments (val fun = x -> x*x; fun(2, 3))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should ignore useless arguments (val fun = (x, y) -> x*y; fun(2, 3, 4, 5))",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should avoid access to val defined in function outside its [input: \n                    val fun = (a) -> {\n                        val x = 3;\n                        a * 3\n                    };\n                    x\n                    , #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should call function on expression which return function [x: 0, expResult: 0, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should call function on expression which return function [x: -2, expResult: 2, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should call function on expression which return function [x: 2, expResult: 4, #2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should isolate val declaration scope [input: \n                    val b = 5;\n                    val f = a -> {\n                        val b = 10;\n                        a*b\n                    };\n                    f(2)\n                , expResult: 20, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec",
                "name": "should isolate val declaration scope [input: \n                    val b = 5;\n                    val f = a -> {\n                        val b = 10;\n                        a*b\n                    };\n                    f(b)\n                , expResult: 50, #1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.IfExpressionNodeSpec",
                "name": "should return left value when condition result is positive",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.IfExpressionNodeSpec",
                "name": "should return right value when condition result is negative",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.IfExpressionNodeSpec",
                "name": "should convert condition argument to boolean if implicit conversion exist",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.IfExpressionNodeSpec",
                "name": "should throw exception if implicit conversion for condition argument not exist",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.IfExpressionNodeSpec",
                "name": "should treat nulls as false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should multiply BigDecimals [left: 5, right: 3, result: 15, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should multiply BigDecimals [left: 0, right: 5, result: 0, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should multiply BigDecimals [left: 5, right: 0, result: 0, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should multiply BigDecimals [left: -5, right: 3, result: -15, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should multiply BigDecimals [left: 5, right: -3, result: -15, #4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should multiply BigDecimals [left: -5, right: -3, result: 15, #5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should convert left and right side and multiply them [left: 6, right: 3, result: 18, #0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should convert left and right side and multiply them [left: 6, right: 3, result: 18, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should convert left and right side and multiply them [left: 6, right: 3, result: 18, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should convert left and right side and multiply them [left: 6, right: 3, result: 18, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: null, right: 3, result: 0, #0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: 3, right: null, result: 0, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should treat nulls as zero [left: null, right: null, result: 0, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should throw exception when multiply object with no BigDecimal conversion [left: 3, right: 3, #0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should throw exception when multiply object with no BigDecimal conversion [left: 3, right: 3, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec",
                "name": "should throw exception when multiply object with no BigDecimal conversion [left: 3, right: 3, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare nulls with lower weight than other objects [left: null, right: null, result: 0, #0]",
                "time": 0.14,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare nulls with lower weight than other objects [left: null, right: <java.lang.Object@6fa98e98>, result: -1, #1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare nulls with lower weight than other objects [left: <java.lang.Object@7a273fd7>, right: null, result: 1, #2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare objects of the same type implementing comparable [left: a, right: a, result: 0, #0]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare objects of the same type implementing comparable [left: a, right: b, result: -1, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare objects of the same type implementing comparable [left: b, right: a, result: 1, #2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare objects of the same type implementing comparable [left: 1, right: 1, result: 0, #3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare objects of the same type implementing comparable [left: 1, right: 2, result: -1, #4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should compare objects of the same type implementing comparable [left: PT1H, right: PT10H, result: -1, #5]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should prefer conversion to left type when types are different [left: 11, right: 11, result: 0, #0]",
                "time": 0.174,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should prefer conversion to left type when types are different [left: 11, right: 5, result: 1, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should prefer conversion to left type when types are different [left: 11, right: 5, result: -1, #2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should convert left argument to right type if no conversion for right to left [left: <pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec$Foo@47d7792e>, right: 11, result: 0, #0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should convert left argument to right type if no conversion for right to left [left: <pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec$Foo@534f4a65>, right: 5, result: -1, #1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@13453610 greater=true equal=true implicitConversion=pl.allegro.tech.opel.ImplicitConversion@15d41953 left=pl.allegro.tech.opel.LiteralExpressionNode@6e1e9a10 right=pl.allegro.tech.opel.LiteralExpressionNode@248e31a1>, #0]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@13088030 greater=true equal=false implicitConversion=pl.allegro.tech.opel.ImplicitConversion@71e6bac0 left=pl.allegro.tech.opel.LiteralExpressionNode@4c33bf70 right=pl.allegro.tech.opel.LiteralExpressionNode@5698a866>, #1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@1c6ab85 greater=false equal=true implicitConversion=pl.allegro.tech.opel.ImplicitConversion@45b221c7 left=pl.allegro.tech.opel.LiteralExpressionNode@14abde3e right=pl.allegro.tech.opel.LiteralExpressionNode@7e38f55>, #2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec",
                "name": "should throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@334d96af greater=false equal=false implicitConversion=pl.allegro.tech.opel.ImplicitConversion@67253518 left=pl.allegro.tech.opel.LiteralExpressionNode@2db55dec right=pl.allegro.tech.opel.LiteralExpressionNode@3637e628>, #3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should parse and evaluate expression with definitions (val one=1;one)",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should parse and evaluate expression with definitions (val two=1+1;two + 1)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should parse and evaluate expression with definitions (val two=1+1; val three = two +1; three + 1)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should parse and evaluate expression with definitions (val condition=1==1; if(condition) 5 else 6)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should allow declare values in separate lines",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should avoid use value before it is declared",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should avoid override declared local value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should avoid declare local value which definition use itself",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should end with error when circular definitions are found in #input",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "should override values from context by declared local value",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec",
                "name": "context values should be accessible in val declaration",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \ud83d\ude80  Start image=crawlergpt:latest\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel] user=0 workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2601  git clone 'https://github.com/gradle/wrapper-validation-action' # ref=v1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v2\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \ud83e\uddea  Matrix: map[java:11]\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Main actions/checkout@v2\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Main actions/checkout@v2\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Main gradle/wrapper-validation-action@v1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/28b1cb09-e3c5-4430-b205-c1cbb907feeb/act/gradle-wrapper-validation-action@v1/ dst=/var/run/act/actions/gradle-wrapper-validation-action@v1/\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/gradle-wrapper-validation-action@v1/] user=0 workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/gradle-wrapper-validation-action@v1/dist/index.js] user= workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u2713 Found known Gradle Wrapper JAR files:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |   33ad4583fd7ee156f533778736fa1b4940bd83b433934d1cc4e9f608e99a6a89 gradle/wrapper/gradle-wrapper.jar\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Main gradle/wrapper-validation-action@v1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Main Setup Java 11\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/28b1cb09-e3c5-4430-b205-c1cbb907feeb/act/actions-setup-java@v2/ dst=/var/run/act/actions/actions-setup-java@v2/\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-java@v2/] user=0 workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v2/dist/setup/index.js] user= workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Trying to resolve the latest version from remote\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Resolved latest version as 11.0.19+7\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Trying to download...\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Downloading Java 11.0.19+7 (Temurin-Hotspot) from https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.19%2B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.19_7.tar.gz ...\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Downloading https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.19%252B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.19_7.tar.gz\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Destination /tmp/abec43ad-3a64-4c23-a593-869be9559b99\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::download complete\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Extracting Java archive...\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Checking tar --version\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/e7cfa138-d243-4d20-83b5-df1eae689c20 -f /tmp/abec43ad-3a64-4c23-a593-869be9559b99\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Caching tool Java_Temurin-Hotspot_jdk 11.0.19-7 x64\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::source dir: /tmp/e7cfa138-d243-4d20-83b5-df1eae689c20/jdk-11.0.19+7\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.19-7/x64\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::finished caching tool\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Java 11.0.19+7 was downloaded\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Setting Java 11.0.19+7 as the default\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Java configuration:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |   Distribution: temurin\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |   Version: 11.0.19+7\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |   Path: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.19-7/x64\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2753 add-matcher /run/act/actions/actions-setup-java@v2/.github/java.json\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Creating settings.xml with server-id: github\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Writing to /home/runneradmin/.m2/settings.xml\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::implicitDescendants 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::matchDirectories 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Search path '/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/build.gradle.kts\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/gradle/wrapper/gradle-wrapper.properties\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/settings.gradle.kts\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Found 3 files to hash.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::primary key is setup-java-Linux-gradle-13581307a1b7bb70f5bba682a0be2fd4038c1cf5d2a001d15d44c87f5d10834a\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Resolved Keys:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::[\"setup-java-Linux-gradle-13581307a1b7bb70f5bba682a0be2fd4038c1cf5d2a001d15d44c87f5d10834a\",\"setup-java-Linux-gradle\"]\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Checking zstd --version\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46005/_apis/artifactcache/cache?keys=setup-java-Linux-gradle-13581307a1b7bb70f5bba682a0be2fd4038c1cf5d2a001d15d44c87f5d10834a%252Csetup-java-Linux-gradle&version=09ba73ab57fcd4582177c49695fd068c4719cc0cab32d2335af27897fd9c08a0\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | gradle cache is not found\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Main Setup Java 11\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.19-7/x64\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2699  ::set-output:: version=11.0.19+7\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2699  ::set-output:: distribution=Temurin-Hotspot\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2699  ::set-output:: path=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.19-7/x64\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.19-7/x64/bin\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Main Test with Gradle\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Downloading https://services.gradle.org/distributions/gradle-7.3.3-bin.zip\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | ...........10%...........20%...........30%...........40%...........50%...........60%...........70%...........80%...........90%...........100%\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Welcome to Gradle 7.3.3!\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Here are the highlights of this release:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |  - Easily declare new test suites in Java projects\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |  - Support for Java 17\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |  - Support for Scala 3\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | For more details see https://docs.gradle.org/7.3.3/release-notes.html\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | To honour the JVM settings for this build a single-use Daemon process will be forked. See https://docs.gradle.org/7.3.3/userguide/gradle_daemon.html#sec:disabling_the_daemon.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Daemon will be stopped at the end of the build \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :compileJava\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Note: Some input files use unchecked or unsafe operations.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Note: Recompile with -Xlint:unchecked for details.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :compileGroovy NO-SOURCE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :processResources NO-SOURCE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :classes\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :jar\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :javadoc\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/EvalContextBuilder.java:45: warning: no @param for functionName\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public EvalContextBuilder withFunction(String functionName, OpelAsyncFunction<?> function) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                               ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/EvalContextBuilder.java:45: warning: no @param for function\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public EvalContextBuilder withFunction(String functionName, OpelAsyncFunction<?> function) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                               ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/EvalContextBuilder.java:45: warning: no @return\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public EvalContextBuilder withFunction(String functionName, OpelAsyncFunction<?> function) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                               ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/EvalContextBuilder.java:53: warning: no @param for functions\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public EvalContextBuilder withFunctions(Map<String, OpelAsyncFunction<?>> functions) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                               ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/EvalContextBuilder.java:53: warning: no @return\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public EvalContextBuilder withFunctions(Map<String, OpelAsyncFunction<?>> functions) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                               ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/OpelEngineBuilder.java:26: warning: no @param for functionName\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public OpelEngineBuilder withFunction(String functionName, OpelAsyncFunction<?> function) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                              ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/OpelEngineBuilder.java:26: warning: no @param for function\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public OpelEngineBuilder withFunction(String functionName, OpelAsyncFunction<?> function) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                              ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/OpelEngineBuilder.java:26: warning: no @return\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public OpelEngineBuilder withFunction(String functionName, OpelAsyncFunction<?> function) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                              ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/OpelEngineBuilder.java:34: warning: no @param for functions\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public OpelEngineBuilder withFunctions(Map<String, OpelAsyncFunction<?>> functions) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                              ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/src/main/java/pl/allegro/tech/opel/OpelEngineBuilder.java:34: warning: no @return\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     public OpelEngineBuilder withFunctions(Map<String, OpelAsyncFunction<?>> functions) {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                              ^\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | 10 warnings\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :javadocJar\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :sourcesJar\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :assemble\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :compileTestJava NO-SOURCE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :compileTestGroovy\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :processTestResources NO-SOURCE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :testClasses\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :test\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.CompareOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare nulls with lower weight than other objects [left: null, right: null, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare nulls with lower weight than other objects [left: null, right: <java.lang.Object@6fa98e98>, result: -1, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare nulls with lower weight than other objects [left: <java.lang.Object@7a273fd7>, right: null, result: 1, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare objects of the same type implementing comparable [left: a, right: a, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare objects of the same type implementing comparable [left: a, right: b, result: -1, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare objects of the same type implementing comparable [left: b, right: a, result: 1, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare objects of the same type implementing comparable [left: 1, right: 1, result: 0, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare objects of the same type implementing comparable [left: 1, right: 2, result: -1, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould compare objects of the same type implementing comparable [left: PT1H, right: PT10H, result: -1, #5]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer conversion to left type when types are different [left: 11, right: 11, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer conversion to left type when types are different [left: 11, right: 5, result: 1, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer conversion to left type when types are different [left: 11, right: 5, result: -1, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left argument to right type if no conversion for right to left [left: <pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec$Foo@47d7792e>, right: 11, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left argument to right type if no conversion for right to left [left: <pl.allegro.tech.opel.CompareOperatorExpressionNodeSpec$Foo@534f4a65>, right: 5, result: -1, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@13453610 greater=true equal=true implicitConversion=pl.allegro.tech.opel.ImplicitConversion@15d41953 left=pl.allegro.tech.opel.LiteralExpressionNode@6e1e9a10 right=pl.allegro.tech.opel.LiteralExpressionNode@248e31a1>, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@13088030 greater=true equal=false implicitConversion=pl.allegro.tech.opel.ImplicitConversion@71e6bac0 left=pl.allegro.tech.opel.LiteralExpressionNode@4c33bf70 right=pl.allegro.tech.opel.LiteralExpressionNode@5698a866>, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@1c6ab85 greater=false equal=true implicitConversion=pl.allegro.tech.opel.ImplicitConversion@45b221c7 left=pl.allegro.tech.opel.LiteralExpressionNode@14abde3e right=pl.allegro.tech.opel.LiteralExpressionNode@7e38f55>, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when none of arguments implements Comparable (even if converter to Comparable exist) [expressionNode: <pl.allegro.tech.opel.CompareOperatorExpressionNode@334d96af greater=false equal=false implicitConversion=pl.allegro.tech.opel.ImplicitConversion@67253518 left=pl.allegro.tech.opel.LiteralExpressionNode@2db55dec right=pl.allegro.tech.opel.LiteralExpressionNode@3637e628>, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.DivideOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould divide BigDecimals [left: 10, right: 2, result: 5, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould divide BigDecimals [left: 0, right: 5, result: 0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould divide BigDecimals [left: -10, right: 5, result: -2, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould divide BigDecimals [left: 10, right: -5, result: -2, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould divide BigDecimals [left: -10, right: -5, result: 2, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on dividing by zero or null [left: 10, right: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on dividing by zero or null [left: 0, right: 0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on dividing by zero or null [left: 10, right: null, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on dividing by zero or null [left: 0, right: null, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on dividing by zero or null [left: null, right: null, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and divide them [left: 6, right: 3, result: 2, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and divide them [left: 6, right: 3, result: 2, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and divide them [left: 6, right: 3, result: 2, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and divide them [left: 6, right: 3, result: 2, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: null, right: 3, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when divide object with no BigDecimal conversion [left: 3, right: 3, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when divide object with no BigDecimal conversion [left: 3, right: 3, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when divide object with no BigDecimal conversion [left: 3, right: 3, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.EqualOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for nulls [left: null, right: null, result: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for nulls [left: null, right: <java.lang.Object@54980154>, result: false, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for nulls [left: <java.lang.Object@25874884>, right: null, result: false, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for the same types [left: , right: , result: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for the same types [left: abc, right: abc, result: true, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for the same types [left: abc, right: cba, result: false, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for the same types [left: 5, right: 5, result: true, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate equality for the same types [left: 5, right: 6, result: false, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer conversion to left type when types are different [left: foo, right: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@75f3c0c9>, result: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer conversion to left type when types are different [left: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@52268f73>, right: foo, result: false, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left argument to right argument type if there is no conversion from right arg type to left arg type [left: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@3938e876>, right: foo, result: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not be equal if types are different and there is no required conversion [left: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@65dac812>, right: foo, result: false, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not be equal if types are different and there is no required conversion [left: foo, right: <pl.allegro.tech.opel.EqualOperatorExpressionNodeSpec$Foo@3619ecd>, result: false, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.EvalContextBuilderSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould create merged context using elements from secondary context\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould create merged context using elements from primary context\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22madding new values should not change built context\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.FieldAccessExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access field\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould handle null value\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould handle null field\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.FunctionCallExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call function from context\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.FutureUtilSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert list of futures to futures list\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.IdentifierExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate to identifier string\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.IfExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return left value when condition result is positive\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return right value when condition result is negative\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert condition argument to boolean if implicit conversion exist\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception if implicit conversion for condition argument not exist\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.ImplicitConversionSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.String)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.Double)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.String)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.Double)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.Integer)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.String)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (123 to class java.lang.Integer)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould find registered converter if conversion is needed (1.1 to class java.lang.Float)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert object to expected type (123 to class java.lang.String)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert object to expected type (123 to class java.lang.Double)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert object to expected type (123 to class java.lang.String)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert object to expected type (123 to class java.lang.Integer)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert object to expected type (1.1 to class java.lang.Float)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert 123 to all possible types\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert 124 to all possible types\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert 125.0 to all possible types\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould skip failed conversion when convert to all possible types [object: notIntValue, result: [notIntValue], #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould skip failed conversion when convert to all possible types [object: 111.22, result: [111.22], #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould skip failed conversion when convert to all possible types [object: 111.22, result: [111.22], #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prevent to override registered conversion when new one has the same from and to types\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.ImplicitConversionUnitSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert using convert function\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception when required conversion is not found\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.LiteralExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate to value\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return negation of boolean [booleanValue: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return negation of boolean [booleanValue: false, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return negation of converted value [convertion: <pl.allegro.tech.opel.ImplicitConversionUnit@3e7f9522 from=class pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$Foo to=class java.lang.Boolean convert=pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$__spock_feature_0_1prov0_closure1@6b909973>, expectedValue: false, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return negation of converted value [convertion: <pl.allegro.tech.opel.ImplicitConversionUnit@3e7f9522 from=class pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$Foo to=class java.lang.Boolean convert=pl.allegro.tech.opel.LogicalNegationOperatorExpressionNodeSpec$__spock_feature_0_1prov0_closure2@f4cfc61>, expectedValue: true, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould thrown exception on negation of nulls\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on negation of not boolean type\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.LogicalOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return true when evaluating: false || true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return true when evaluating: true || false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return true when evaluating: true || true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return false when evaluating: false || false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return false when evaluating: false && true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return false when evaluating: true && false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return true when evaluating: true && true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return false when evaluating: false && false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert operator argument to boolean if implicit conversion exists\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception if implicit conversion for condition argument not exist\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false using or [left: null, right: true, result: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false using or [left: true, right: null, result: true, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false using or [left: null, right: null, result: false, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false using and [left: null, right: true, result: false, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false using and [left: true, right: null, result: false, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as false using and [left: null, right: null, result: false, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mlogical operators should be lazy\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.MapAccessExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access map field\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access list element\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould handle null value\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould handle null field\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.MethodCallExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call a zero arguments method\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call a method with one argument\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call a method with two arguments\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not allow to call any method when using DENY_ALL method execution filter\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not call any method not passing custom method execution filter\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw when calling method on null receiver\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.MinusOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: 5.0, right: 5.0, result: 0.0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: 0.0, right: 5.0, result: -5.0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: 5.0, right: 0.0, result: 5.0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: 5.0, right: 3.0, result: 2.0, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: 5.0, right: 8.0, result: -3.0, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: -5.0, right: 8.0, result: -13.0, #5]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: 5.0, right: -8.0, result: 13.0, #6]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould subtract BigDecimals [left: -5.0, right: -8.0, result: 3.0, #7]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: null, right: null, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: 2.0, right: null, result: 2.0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: null, right: 2.0, result: -2.0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and subtract them [left: 6, right: 3, result: 3.0, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when subtracting object with no BigDecimal conversion [left: 1.0, right: 3, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when subtracting object with no BigDecimal conversion [left: 3, right: 1.0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when subtracting object with no BigDecimal conversion [left: 3, right: 3, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when subtracting object with no BigDecimal conversion [left: 3, right: null, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when subtracting object with no BigDecimal conversion [left: null, right: 3, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.MultiplyOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould multiply BigDecimals [left: 5, right: 3, result: 15, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould multiply BigDecimals [left: 0, right: 5, result: 0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould multiply BigDecimals [left: 5, right: 0, result: 0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould multiply BigDecimals [left: -5, right: 3, result: -15, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould multiply BigDecimals [left: 5, right: -3, result: -15, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould multiply BigDecimals [left: -5, right: -3, result: 15, #5]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and multiply them [left: 6, right: 3, result: 18, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and multiply them [left: 6, right: 3, result: 18, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and multiply them [left: 6, right: 3, result: 18, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert left and right side and multiply them [left: 6, right: 3, result: 18, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: null, right: 3, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: 3, right: null, result: 0, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat nulls as zero [left: null, right: null, result: 0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when multiply object with no BigDecimal conversion [left: 3, right: 3, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when multiply object with no BigDecimal conversion [left: 3, right: 3, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when multiply object with no BigDecimal conversion [left: 3, right: 3, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.NegationOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould negate null to 0 [value: null, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould negate BigDecimal [value: 7, result: -7, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould negate BigDecimal [value: -7, result: 7, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould negate BigDecimal [value: 0, result: 0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal and negate result [value: 7, result: -7, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal and negate result [value: -7, result: 7, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal and negate result [value: 0, result: 0, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when conversion to BigDecimal not found\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception when conversion to BigDecimal failed\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineContextFunctionsAndVariablesIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: zero()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: one('x')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: one(1 == 1)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: twoArgsFunc('x', 'y')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: twoArgsFunc('x', 'z')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: oneTwoThree('m', 'n', 'o')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return context function value: fourArgsFunc('m', 'n', 'o', 'p')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(7)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(6).name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(6)['name']\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(6)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(5).l1.item.name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(5).l1['item'].name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(4).items[0].name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(4).items[(4-2)*3-6].name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(1+2*3-3).items[0].name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(4).items[ 0].name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(4).items[0 ] .name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(4).items[ 0 ]. name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(4) .items[ 0 ]. name\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression 'abc'+ds(4).items[0].name+'xyz'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression 'chc\u0119 kupi\u0107 '+ds(4).items[0].name+' bu\u0142ek'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression 'abc'+5+5\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression 'abc'+(5+5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(44).someField.anotherOne\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate context function call expression ds(44).someField[0].anotherOne\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m0-arg function should receive empty list of arguments [input: zero(), expResult: Empty list, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access registered variables in var\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access registered variables in var.a\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access registered variables in var.a[1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access registered future variables in var\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access registered future variables in var.a\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access registered future variables in var.a[1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould eval value using provided eval context [input: 2+myVar, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould eval value using provided eval context [input: 2+myFunc, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould be able to use variables and functions from external context [input: 2+myVar, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould be able to use variables and functions from external context [input: 2+myFunc, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould be able to override variables and functions from external context [input: 2+myVar, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould be able to override variables and functions from external context [input: 2+myFunc, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with variable and function registered in engine [expression: 2 + myVar, expected: 204, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with variable and function registered in engine [expression: 3 + myFunc(), expected: 106, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with variable and function registered in engine with empty context given [expression: 2 + myVar, expected: 204, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with variable and function registered in engine with empty context given [expression: 3 + myFunc(), expected: 106, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefere variables and functions from eval context [expression: 2 + myVar, expected: 2002, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefere variables and functions from eval context [expression: 3 + myFunc(), expected: 1003, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate parsed expression with variable and function registered in engine [expression: 2 + myVar, expected: 204, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate parsed expression with variable and function registered in engine [expression: 3 + myFunc(), expected: 106, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate parsed expression with variable and function registered in engine with empty context given [expression: 2 + myVar, expected: 204, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate parsed expression with variable and function registered in engine with empty context given [expression: 3 + myFunc(), expected: 106, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefere variables and functions from eval context when evaluating parsed expression [expression: 2 + myVar, expected: 2002, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefere variables and functions from eval context when evaluating parsed expression [expression: 3 + myFunc(), expected: 1003, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not allow to override built in value (true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not allow to override built in value (false)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not allow to override built in value (null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineConversionsIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression 1-'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression '5'-2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression '5'-'2')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression null-'2')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression 2-null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression null-null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to number for subtracting operator using implicit conversion (expression 1-'-5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (4*'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('4'*5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('4'*'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (null*4)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (4*null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (null*null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (10/'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('10'/5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator ('10'/'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert to BigDecimal regardless of whether the left type form  multiplying & dividing operator (null/4)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert string to number in comparison when one way conversion from string to number is registered [input:  '55' <  7  , expResult: false, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert string to number in comparison when one way conversion from string to number is registered [input:   55  > '7' , expResult: true, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould register conversions in multithreaded environment [input: 'opel'.rev(), expResult: lepo, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould register conversions in multithreaded environment [input: 'abc'.rev(), expResult: cba, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left site as primary type for sum operator and throw exception when conversion failed [input: 123+'abc', #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould firstly convert right argument when comparing objects in  '55' <  7  \u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould firstly convert right argument when comparing objects in   55  > '7' \u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineFunctionIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate function in val f = () -> 3; f()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate function in val square = x -> x * x; square(2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate function in val square = (x) -> x * x; square(2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate function in val a = 3; val f = x -> a*x*x; f(2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate function in val f = (x, y) -> x*x + y*y; f(2, 3)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate function in (x, y) -> {x*x + y*y}(1, 2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate multiline function in \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = (a, b) -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         val x = 2;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         a*x*x + b*x\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(1,3)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate multiline function in \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val x = 3;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = (a, b) -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         val x = 2;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         a*x*x + b*x\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(1,3)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate multiline function in \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val x = 3;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = (a, b) -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         val y = a*x*x;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         y + b*x\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(1,3)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould create higher-order function and call it [input: \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = a -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         b -> {a*2+b}\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(2)(3)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                 , expResult: 7, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould create higher-order function and call it [input: \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = a -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         b -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                             c -> a*a*a + b*b + c\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         }\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(1)(2)(3)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                 , expResult: 8, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in () -> 3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in val a = 2; x -> a * x\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in x -> x * 3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in (x) -> x * 3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in val f = x -> x * 3; f\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in val f = (x, y) -> x*x + y*y*y; f\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return function in val f = (x, y) -> x*x + y*y*y; val g = x -> f(x, 2); g\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould create higher-order function and return inner function\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould failed when missing arguments (val fun = x -> x*x; fun())\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould failed when missing arguments (val fun = (x, y) -> x*y; fun(3))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould ignore useless arguments (val fun = () -> 1; fun(2, 3))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould ignore useless arguments (val fun = x -> x*x; fun(2, 3))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould ignore useless arguments (val fun = (x, y) -> x*y; fun(2, 3, 4, 5))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould avoid access to val defined in function outside its [input: \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val fun = (a) -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         val x = 3;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         a * 3\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     x\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     , #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call function on expression which return function [x: 0, expResult: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call function on expression which return function [x: -2, expResult: 2, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call function on expression which return function [x: 2, expResult: 4, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould isolate val declaration scope [input: \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val b = 5;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = a -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         val b = 10;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         a*b\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(2)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                 , expResult: 20, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould isolate val declaration scope [input: \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val b = 5;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     val f = a -> {\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         val b = 10;\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                         a*b\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     };\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                     f(b)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                 , expResult: 50, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'Guns N' Roses'[green[] PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'ACDC'[green[] PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'abc'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'abc'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression '\u0142\u0105\u0107'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'abc'+'xyz'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression ''abc'[green[] PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'abc''[green[] PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression 'abc'xyz'[green[] PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate string expression ''\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression ending with ; [input: 'Guns N' Roses';, expResult: Guns N' Roses, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression ending with ; [input: 1+2 ;, expResult: 3, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression ending with ; [input: 1+2  ;   , expResult: 3, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return parsing result with errors for redundant ; [input: 123+'abc';;, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return parsing result with errors for redundant ; [input: ;123+'abc';, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return parsing result with errors for multi line string\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"2 +3\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"2- 3\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"2 * 3\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"4 /   2\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"-2 +3\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"-2 +3  \"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"-2 +3 \t\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"-2 +3 \t\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"-1 * \t \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | 2 +5\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"-4* ( 2+ 5 )/ 2\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc' \"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc '\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc ' \"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc' + 'xyz'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc ' + ' xyz'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc'+ 123\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"123 == '123'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'123' != 124\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression with whitespaces \"'abc' . length() \"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \" -2 +3\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \"\t  -1 * \t \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | 2 +5\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \"\t\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | -4* ( 2+ 5 )/ 2\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \" 'abc'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \"\t 'abc' \"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \" 123 == '123'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate expression which starts with whitespace(s): \"\t'123' != 124\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception when comparing invalid objects in 'abc' < 5 expression\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception when comparing invalid objects in o >= o expression\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception when comparing invalid objects in o > 5 expression\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: zero() == 'zero'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: zero () == 'zero'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: zero(   ) == 'zero'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: zero ( ) == 'zero'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: one('x') == 'one'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: twoArgsFunc('x', 'y') == 'xAndY'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: twoArgsFunc('x', 'y')=='otherThanXAndY'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: twoArgsFunc('a', 'b')=='otherThanXAndY'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: oneTwoThree('m', 'n', 'o')=='one two three'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: fourArgsFunc('m', 'n', 'o', 'p')=='mnop'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: (5 == 5) != (5 == 6)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: identity((5 == 5) != (5 == 6))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: identity(5 == 5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate comparison with function: identity(5 != 5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"'abc\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"1 ,= 5\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"1 * 5 , 9\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"5 ; 9\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"ds('x').items[0.name + 'abc'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"ds('x').items[0[.name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"'abc'\"[green[] PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"function('a', 'b', 'c').items[0[.name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"function('a', 'b', 'c').items[0).name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"function('a', 'b', 'c').items[0,].name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"true false\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"true null false\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to false for expression: \"true && || false\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"variable.item[0]\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"function(10) == true\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"3\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"1 + 1\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"1 + 1 * 4\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"'abc' + 'xyz'\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"function(10) + 10\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"function('a', 'b')\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"1 == 10\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"1 != 10\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"function(10).items[0].name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"function().items[0].name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"function(10).items[0].prices[0].x\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"fun1('x').items[0].name\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"fun1(1==1)\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"identity(1==1)\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"identity(1==0)\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidationSucceed should be equal to true for expression: \"false || true && false || (true && false)\"\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mvalidation should return proper message for invalid expression\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'true '\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'true'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in '(true) '\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'false'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'true==true '\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'true == true'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'false == false'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'false == true'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in 'false != false'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access true and false native variables without registration in '(5 == 5) == true'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (true) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (6 > 3) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if ('x' == 'x') 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (false) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (false) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (null) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (true) 1 == 2 else 2 == 2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (true) null else 'not null')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (true) true else false)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (true) (null) else 'not null')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (1 == 2 || 2 == 2) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (1 == 1 && 2 == 2) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (1 == 1 && 2 == 3) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (1 == 1 && 2 == 3) 1 == 2 && 2 == 2 else 1 == 1 && 2 == 2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression (if (false || false || false || true) 'a' else 'b')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate if expression ((if (true) 'a' else 'b').length())\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould calculate only left value when condition result result is true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineListIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in []\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ([])\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in [null]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ['a']\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ['a', 'b']\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ['a', 'b', 'c']\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ['a', 2, 'c']\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ['a', 2, 'c'].size()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in ['a', 2, ['1', '2']].size()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in (['a', 2, 'c']).size()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in val x = ['a', 'b']; x.get(0)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in val x = ['a', 'b']; (x).get(0)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate list in val x = 1; [x, x, 2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access list element by [] notation (aList[1])\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access list element by [] notation (['a', 'b'][0])\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineMapIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map defined in {:}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map defined in {'x':2}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map defined in ({'x': 2 })\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map defined in {'x': 2, 'y':3 }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map defined in {'x': 2, 'y':null }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map defined in {'x': 2, 'null':2 }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with variable as key defined in {x: (6+7), 'y':3 }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with variable as key defined in {x: 6+7, 'y':3 }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with variable as key defined in {x: 6+7, 'y':3 }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with expression key defined in {(1+1.5): 2, 'y':3 }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with expression key defined in {('x' + 'x'):2}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with expression key defined in {[].size():2}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with expression key defined in {([].size()):2}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould instantiate map with expression key defined in {(['1'].size()):['1'].size()}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould assign map to a value in val x = {('x' + 'x'):2}; x.xx and access an element \u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould assign map to a value in val x = {('x' + 'x'):2}; x.get('xx') and access an element \u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould assign map to a value in val x = {('x' + 'x'):2}; x.xx and access an element \u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould assign map to a value in val x = {('x' + 'x'):2}; x['xx'] and access an element \u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access map with [] notation [input: {'x':2, 'y':3}['x'], expResult: 2, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access map with [] notation [input: aMap['b'], expResult: y, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access map with [] notation [input: aMap[true == false], expResult: xyz, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access map with dot (.) notation [input: {'x':2, 'y':5}.x, expResult: 2, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould access map with dot (.) notation [input: aMap.b, expResult: y, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer method call over field access with function as a value (aMap.get('get'))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer method call over field access with function as a value ((aMap.get)('get'))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer method call over field access with function as a value (({'get': x->x+x}.get('get'))('g'))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer method call over field access with function as a value (({'get': x->x+x}.get)('get'))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not parse {}\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not parse { }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not parse {, }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould not parse {  , }\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineMathIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 7\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 2+3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 2-3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 2*3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 4/2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression -2+3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression -1*2+5\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression -4\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression --4\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression -4*(2+5)/2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 1.2+2.3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 1.2+4\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 4+1.2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 5/2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 5/3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression 7+null\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression null+7\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate math expression null+null\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception on subtracting with string (expression 1-'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception on subtracting with string (expression '5'-2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw an exception on subtracting with string (expression o-2)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator ('abc'+123)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (null+'abc')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (5+null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (null+5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (null+5+6)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (5+6+null)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (5+'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator ('5'+5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator (5.2+'5')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use left side as primary type for sum operator ('123'+'123')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression '123'=='123'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression '123'!='123'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 123=='123'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression '123'==123\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 123==123\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 100+23==123\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 200==(123-23)*2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression fun('x')=='abc'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression fun('x')!='cba'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 7=='\u015b'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression '\u0142\u0105\u0107'=='\u0142\u0105\u0107'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 5 < 6\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 5 <= 6\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 5 <= 5\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 5 > 3\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 5 >= 6\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 5 >= 5\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 'b' > 'abc'\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression true > false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression '5' > 7\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression '5' > 2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression null\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression (2 == 2) == true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression true && true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression false && true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression false || true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression true || false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression false || false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 1 == 1 || false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 1 == 1 && 2 == 2\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression 1 > 2 || 2 > 1\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression identity(false || true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression identity(false && true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate logical expression identity(if (false || (true && true)) true else false)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression ! true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression ! !true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !!true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !(true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !value\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !(value)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !fun('')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !(fun(''))\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !true || true\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !(true || true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !(true || true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !(false || !false)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression identity(!true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression !identity(!true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22m! should negate boolean expression true && !false\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mAND operator should have higher priority than OR [input: true || true && false, expResult: true, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mAND operator should have higher priority than OR [input: (true || true) && false, expResult: false, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate relational operators with higher priority then equality operator (8 > 5 == true)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate relational operators with higher priority then equality operator (true == 8 > 5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate relational operators with higher priority then equality operator (true != 8 >= 5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate relational operators with higher priority then equality operator (2 != 3 <= 5 == 5)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineMethodCallIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input fun().length()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input fun().contains('ello')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input fun().charAt(1)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input fun().substring(5).length()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input 'Hello, World!'.length()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input var.contains('a')\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call object methods for input var.contains(arg)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call method with null value as argument\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call methods on wrapped object for input 'opel'.rev()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould call methods on wrapped object for input 'abc'.rev()\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.OpelEngineValDeclarationIntegrationSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould parse and evaluate expression with definitions (val one=1;one)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould parse and evaluate expression with definitions (val two=1+1;two + 1)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould parse and evaluate expression with definitions (val two=1+1; val three = two +1; three + 1)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould parse and evaluate expression with definitions (val condition=1==1; if(condition) 5 else 6)\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould allow declare values in separate lines\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould avoid use value before it is declared\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould avoid override declared local value\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould avoid declare local value which definition use itself\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould end with error when circular definitions are found in #input\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould override values from context by declared local value\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mcontext values should be accessible in val declaration\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.SumOperatorExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould return zero when add null to null [left: null, right: null, result: 0, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat null as zero when adding a number [left: 5, right: null, result: 5, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat null as zero when adding a number [left: null, right: 5, result: 5, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat null as empty string when adding a string [left: abc, right: null, result: abc, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat null as empty string when adding a string [left: null, right: abc, result: abc, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefere converting to BigDecimal over String when null is adding [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@55fd0b81>, right: null, result: 5, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefere converting to BigDecimal over String when null is adding [left: null, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@2d2e2f3d>, result: 5, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould converting to String when null is adding and no conversion to BigDecimal registered [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@10b2881a>, right: null, result: 10, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould converting to String when null is adding and no conversion to BigDecimal registered [left: null, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@6664554f>, result: 10, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould sum BigDecimal's without conversion\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould concat Strings's without conversion\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to BigDecimal if conversion to BigDecimal exist [left: 5, right: 10, result: 15, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to BigDecimal if conversion to BigDecimal exist [left: 10, right: 5, result: 15, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to BigDecimal if conversion to BigDecimal exist [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7cbb796e>, right: 5, result: 125, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to BigDecimal if conversion to BigDecimal exist [left: 5, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@38b1859b>, result: 125, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to BigDecimal if conversion to BigDecimal exist [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@152a5364>, right: 10, result: 130, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to BigDecimal if conversion to BigDecimal exist [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1c1ddede>, result: 130, #5]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 5, right: 10, result: 510, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 10, right: 5, result: 105, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1bbbaf1e>, right: 10, result: foo10, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@18a9626c>, result: 10foo, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@134bf69e>, right: 5, result: foo5, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: 5, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@69addf9a>, result: 5foo, #5]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert argument to String if conversion to String exist and BigDecimal conversion missing [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@2f284eee>, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7cc1f365>, result: foofoo, #6]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert right argument to BigDecimal if left is BigDecimal type\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould convert right argument to String if left is String type\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould prefer conversion to BigDecimal over conversion to String\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use right argument type when left conversion can't be determined clearly [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1c2a6efa>, right: 10, result: foo10, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould use right argument type when left conversion can't be determined clearly [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@ba5d8ad>, right: 10, result: 130, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on adding String to BigDecimal when no conversion was registered\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat Int type as common type (like Foo) [left: 5, right: 10, result: 510, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat Int type as common type (like Foo) [left: 5, right: 10, result: 510, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat Int type as common type (like Foo) [left: 5, right: 10, result: 15, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould treat Int type as common type (like Foo) [left: 5, right: 10, result: 15, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on adding type which can't be converted to String or BigDecimal [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@1afd4b64>, right: 10, #0]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on adding type which can't be converted to String or BigDecimal [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@763f8cc9>, #1]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on adding type which can't be converted to String or BigDecimal [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7bc0abb2>, right: 10, #2]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on adding type which can't be converted to String or BigDecimal [left: 10, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@e71438>, #3]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould throw exception on adding type which can't be converted to String or BigDecimal [left: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7031c92b>, right: <pl.allegro.tech.opel.SumOperatorExpressionNodeSpec$Foo@7ae24a20>, #4]\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1mpl.allegro.tech.opel.ValueExpressionNodeSpec\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1m  Test \u001b[22mshould evaluate to variable from context\u001b[32m PASSED\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0K\u001b[1;32mSUCCESS: \u001b[39mExecuted 586 tests in 5.5s\u001b[m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :check\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :build\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | BUILD SUCCESSFUL in 1m 26s\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | 7 actionable tasks: 7 executed\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Main Test with Gradle\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Main Jacoco\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :compileJava UP-TO-DATE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :compileGroovy NO-SOURCE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :processResources NO-SOURCE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :classes UP-TO-DATE\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | > Task :jacocoTestReport\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | BUILD SUCCESSFUL in 12s\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | 2 actionable tasks: 1 executed, 1 up-to-date\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Main Jacoco\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Main Upload coverage to Codecov\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/28b1cb09-e3c5-4430-b205-c1cbb907feeb/act/codecov-codecov-action@v1/ dst=/var/run/act/actions/codecov-codecov-action@v1/\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v1/] user=0 workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v1/dist/index.js] user= workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | [command]/usr/bin/bash codecov.sh -n  -F  -Q github-action-v1.5.2\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |   _____          _\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |  / ____|        | |\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | | |     ___   __| | ___  ___ _____   __\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | | |    / _ \\ / _` |/ _ \\/ __/ _ \\ \\ / /\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | | |___| (_) | (_| |  __/ (_| (_) \\ V /\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |  \\_____\\___/ \\__,_|\\___|\\___\\___/ \\_/\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |                               Bash-1.0.3\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;36m==>\u001b[0m git version 2.33.0 found\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;36m==>\u001b[0m curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Release-Date: 2020-01-08\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;90m==>\u001b[0m GitHub Actions detected.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     Env vars used:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_ACTIONS:    true\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_HEAD_REF:   \n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_REF:        refs/heads/main\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_REPOSITORY: allegro/opel\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_RUN_ID:     1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_SHA:        bee44e3be82e19f00c3cd1a7e25e59d3149b22c6\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |       -> GITHUB_WORKFLOW:   1be5d7cc-4b31-4499-891e-c4819e5bee55\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     \u001b[0;90mproject root:\u001b[0m .\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     \u001b[0;32mYaml not found, that's ok! Learn more at\u001b[0m \u001b[0;36mhttp://docs.codecov.io/docs/codecov-yaml\u001b[0m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;90m==>\u001b[0m Running gcov in . \u001b[0;90m(disable via -X gcov)\u001b[0m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;90m==>\u001b[0m Python coveragepy not found\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;90m==>\u001b[0m Searching for coverage reports in:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     \u001b[0;32m+\u001b[0m .\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | \u001b[0;31m-->\u001b[0m No coverage report found.\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   |     Please visit \u001b[0;36mhttp://docs.codecov.io/docs/supported-languages\u001b[0m\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Main Upload coverage to Codecov\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \u2b50 Run Post Setup Java 11\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v2/dist/cleanup/index.js] user= workdir=\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Checking zstd --version\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Reserving Cache\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46005/_apis/artifactcache/caches\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Cache ID: 1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.gradle/caches'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.gradle/wrapper'\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.gradle/caches\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.gradle/wrapper\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Cache Paths:\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/.gradle/caches\",\"../../../home/runneradmin/.gradle/wrapper\"]\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Archive Path: /tmp/676cc869-5ced-40bd-acf5-b9be425abb27/cache.tzst\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | [command]/usr/bin/tar --posix --use-compress-program zstd -T0 -cf cache.tzst -P -C /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel --files-from manifest.txt\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::File Size: 323394726\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Upload cache\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46005/_apis/artifactcache/caches/1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Awaiting all uploads\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 0 with content range: bytes 0-33554431/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 33554432 with content range: bytes 33554432-67108863/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 67108864 with content range: bytes 67108864-100663295/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 100663296 with content range: bytes 100663296-134217727/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 134217728 with content range: bytes 134217728-167772159/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 167772160 with content range: bytes 167772160-201326591/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 201326592 with content range: bytes 201326592-234881023/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 234881024 with content range: bytes 234881024-268435455/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 268435456 with content range: bytes 268435456-301989887/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Uploading chunk of size 21404838 bytes at offset 301989888 with content range: bytes 301989888-323394725/*\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Commiting cache\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   | Cache Size: ~308 MB (323394726 B)\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46005/_apis/artifactcache/caches/1\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::commitCache - Attempt 1 of 2 failed with error: Cache service responded with 500\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udcac  ::debug::commitCache - Error is not retryable\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \ud83d\udea7  ::warning::Error: commitCache failed: Cache service responded with 500\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build]   \u2705  Success - Post Setup Java 11\n[1be5d7cc-4b31-4499-891e-c4819e5bee55/build] \ud83c\udfc1  Job succeeded\n",
        "stderr": "time=\"2023-06-29T14:39:11+02:00\" level=error msg=\"POST /_apis/artifactcache/caches/1: broken file: 323394726 != 0\" module=artifactcache\n",
        "workflow": "/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/allegro-opel/.github/workflows/ci-crawler.yml",
        "build_tool": "gradle",
        "elapsed_time": 263.96367478370667
    }
}