{
    "repository": "kousen/java_upgrade",
    "stars": 139,
    "language": "java",
    "size": 1748,
    "clone_url": "https://github.com/kousen/java_upgrade.git",
    "timestamp": "2023-06-29T12:30:34.673444Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "gradle"
    ],
    "actions_test_build_tools": [
        "gradle"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "lambdas.BinaryOperatorTest",
                "name": "concatAsBinaryOperator()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "implementConsumerUsingMethodReference()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "implementSupplierUsingAnonInnerClass()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "implementConsumerUsingAnonInnerClass()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "filterWithPredicate()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "implementSupplierUsingLambda()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "constructorReference()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "implementConsumerUsingLambda()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.FunctionalInterfacesTest",
                "name": "implementSupplierUsingMethodReference()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "startWithS_sortByAlpha()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "numberOfMembersByHouse()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "menVsWomen()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "salaryLessThan_sortByHouseName()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "starks_alphaByName()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "averageSalary()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "highestSalary()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "starksByDob()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "namesSorted()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "greyjoys()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "sortByHouseName_sortByNameDesc()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "membersByHouse()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "howManyLannisters()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "kingsByNameDesc()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "threeLannisters()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "salariesGT100k()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "houseStats()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "got.MemberDAOTests",
                "name": "lannisterNames()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testException()",
                "time": 0.149,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "getProductAsync()",
                "time": 0.107,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testLocal()",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testExceptionWithCause()",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testRemote()",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.SumBigDecimalsTest",
                "name": "sumFirstNDoubledValues()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.SumBigDecimalsTest",
                "name": "sumFirstN_usingReduce()",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.SumBigDecimalsTest",
                "name": "sumFirstNDoubledValuesInitialized()",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.AwaitQuiesenceTest",
                "name": "awaitQuiesence()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.AwaitQuiesenceTest",
                "name": "get()",
                "time": 0.143,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.AwaitQuiesenceTest",
                "name": "join()",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.SumEvens",
                "name": "addEvenElementsUsingStreams()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.SumEvens",
                "name": "addEvenElements()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.SumEvens",
                "name": "addOddElementsUsingStreams()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StringExercises",
                "name": "stringLengthSort_lambda()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StringExercises",
                "name": "stringLengthSort_methodRef()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StringExercises",
                "name": "stringLengthSort_comparingInt()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StringExercises",
                "name": "demoCollectors()",
                "time": 0.23,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StringExercises",
                "name": "stringLengthSort_InnerClass()",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StringExercises",
                "name": "stringLengthSort_methodCall()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "interfaces.CompanyEmployeeTest",
                "name": "getName()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.ProductDAOTest",
                "name": "findById_doesNotExist()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.ProductDAOTest",
                "name": "getProductById_exists()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.ProductDAOTest",
                "name": "getProductById_doesNotExist()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.ProductDAOTest",
                "name": "findById_exists()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.LazyErrorMessageTest",
                "name": "assertArgIsTrue_lazyErrorMessage()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.LazyErrorMessageTest",
                "name": "assertArgIsTrue()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "handleWithException()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "joinAfterCancel()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeWithGet()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeWithJoin()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "handleWithoutException()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeExceptionallyWithCause()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "supplyThenAccept()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeLong()",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeExceptionally()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "combine()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "compose()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "supplyThenAcceptAsyncWithExecutor()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.CompanyTest",
                "name": "getDepartmentWithoutManager()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.CompanyTest",
                "name": "getDepartmentWithManager()",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.CompanyTest",
                "name": "getOptionalDepartmentWithManager()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optional.CompanyTest",
                "name": "getOptionalDepartment()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build] \ud83d\ude80  Start image=crawlergpt:latest\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/kousen-java_upgrade] user=0 workdir=\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build] \u2b50 Run Main actions/checkout@v1\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2705  Success - Main actions/checkout@v1\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build] \u2b50 Run Main Set up JDK 11\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/f7a56105-d80c-4c73-ad0a-c54ebe0d3c82/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::isExplicit: \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::explicit? false\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::evaluating 0 versions\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::match not found\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu11.64.19-ca-jdk11.0.19-linux_x64.tar.gz\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::Downloading /tmp/98be3f60-3997-42b0-ae21-7a879971eab5\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::download complete\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | [command]/usr/bin/tar --version\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | tar (GNU tar) 1.30\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | This is free software: you are free to change and redistribute it.\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | There is NO WARRANTY, to the extent permitted by law.\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | Written by John Gilmore and Jay Fenlason.\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_505871923 -f /tmp/98be3f60-3997-42b0-ae21-7a879971eab5\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_505871923/zulu11.64.19-ca-jdk11.0.19-linux_x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::Caching tool jdk 11.0.19 x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::source dir: /tmp/temp_505871923/zulu11.64.19-ca-jdk11.0.19-linux_x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/11.0.19/x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::finished caching tool\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | writing /home/runneradmin/.m2/settings.xml\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2705  Success - Main Set up JDK 11\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2699  ::set-env:: JAVA_HOME_11_0_19_X64=/opt/hostedtoolcache/jdk/11.0.19/x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2699  ::set-env:: JAVA_HOME_11.0.19_x64=/opt/hostedtoolcache/jdk/11.0.19/x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/11.0.19/x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/11.0.19/x64\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2699  ::set-output:: version=11.0.19\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/11.0.19/x64/bin\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build] \u2b50 Run Main Build with Gradle\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | Downloading https://services.gradle.org/distributions/gradle-7.5.1-all.zip\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | ...............10%................20%................30%................40%................50%................60%...............70%................80%................90%................100%\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | Welcome to Gradle 7.5.1!\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | Here are the highlights of this release:\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   |  - Support for Java 18\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   |  - Support for building with Groovy 4\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   |  - Much more responsive continuous builds\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   |  - Improved diagnostics for dependency resolution\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | For more details see https://docs.gradle.org/7.5.1/release-notes.html\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :compileJava\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :processResources NO-SOURCE\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :classes\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :jar\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :assemble\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :compileTestJava\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :processTestResources NO-SOURCE\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :testClasses\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :test\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :check\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | > Task :build\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | \n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | BUILD SUCCESSFUL in 23s\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   | 4 actionable tasks: 4 executed\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2705  Success - Main Build with Gradle\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build] \u2b50 Run Post Set up JDK 11\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build]   \u2705  Success - Post Set up JDK 11\n[69f171a0-5e7f-4928-a8c1-7e8479d77f01/build] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/kousen-java_upgrade/.github/workflows/gradle-crawler.yml",
        "build_tool": "gradle",
        "elapsed_time": 92.47187995910645
    }
}