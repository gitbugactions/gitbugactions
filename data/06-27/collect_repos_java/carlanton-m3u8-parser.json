{
    "repository": "carlanton/m3u8-parser",
    "stars": 147,
    "language": "java",
    "size": 299,
    "clone_url": "https://github.com/carlanton/m3u8-parser.git",
    "timestamp": "2023-06-29T13:11:41.200463Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "gradle"
    ],
    "actions_test_build_tools": [
        "gradle"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "simpleMediaPlaylist",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "liveMediaPlaylist",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "masterPlaylistWithAlternativeAudio",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "masterPlaylistWithAlternativeVideo",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "withDiscontinuity",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "twoMediaPlaylists",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "negativeDurationMediaPlaylist",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "masterPlaylist",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "playlistWithEncryptedMediaSegments",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.PlaylistParserTests",
                "name": "masterPlaylistWithIFrames",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.examples.ParserModeTest",
                "name": "lenientParsingMediaPlaylist",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.examples.ParserModeTest",
                "name": "strictParsingMediaPlaylist",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.examples.ParserModeTest",
                "name": "strictParsingMasterPlaylist",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.examples.ParserModeTest",
                "name": "lenientParsingMasterPlaylist",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistParserTest",
                "name": "custom",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistParserTest",
                "name": "masterParser",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistParserTest",
                "name": "masterParser2",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.examples.ParsePlaylists",
                "name": "writePlaylist",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.examples.ParsePlaylists",
                "name": "readPlaylist",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[0]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[1]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[1]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[3]",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[3]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[5]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[7]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[8]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[8]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[10]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[11]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[11]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[12]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[12]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[13]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistReadAndWrite",
                "name": "readAndWrite[13]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[0]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[1]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[6]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[6]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "streamInfoUriTest[7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWriteAttributeQuoting[7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistReadAndWrite",
                "name": "readAndWrite[7]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "programDateTimeFormat",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "parseCueOut",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "parse1",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "parse2",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "parse3",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "parse4",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "parse5",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistParserTest",
                "name": "extInfDurationFormat",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.VariantParserTest",
                "name": "parseAttributesClosedCaptionsNone",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.VariantParserTest",
                "name": "readResolution",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.VariantParserTest",
                "name": "parseAttributes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.VariantParserTest",
                "name": "invalidResolution",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.VariantParserTest",
                "name": "invalidResolution2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.VariantParserTest",
                "name": "writeResolution",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.SegmentKeyParserTest",
                "name": "parseMethods",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.SegmentKeyParserTest",
                "name": "writeMethods",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.SegmentKeyParserTest",
                "name": "parseAttributes",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.SegmentKeyParserTest",
                "name": "writeAttributes",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistCommentsTest",
                "name": "shouldAddCommentsToMasterPlaylist",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistCommentsTest",
                "name": "shouldHaveCommentBetweenInitAndVersion",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistCommentsTest",
                "name": "shouldOmitCommentsThatBeginWithExt",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MasterPlaylistCommentsTest",
                "name": "shouldAddCommentToMasterPlaylist",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistCommentsTest",
                "name": "shouldAddCommentsToMasterPlaylist",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistCommentsTest",
                "name": "shouldHaveCommentBetweenInitAndVersion",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistCommentsTest",
                "name": "shouldOmitCommentsThatBeginWithExt",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "io.lindstrom.m3u8.parser.MediaPlaylistCommentsTest",
                "name": "shouldAddCommentToMasterPlaylist",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[12d9734b-1b66-496f-8535-3df7aa9b8750/build] \ud83d\ude80  Start image=crawlergpt:latest\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/carlanton-m3u8-parser] user=0 workdir=\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build] \u2b50 Run Main actions/checkout@v2\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2705  Success - Main actions/checkout@v2\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build] \u2b50 Run Main Set up JDK 1.8\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/54b7b92d-ac9d-4026-9e57-fff9cf998d13/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::isExplicit: \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::explicit? false\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::evaluating 0 versions\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::match not found\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu8.70.0.23-ca-jdk8.0.372-linux_x64.tar.gz\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::Downloading /tmp/a93b2574-c41e-4617-bb84-f6ba43f46f40\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::download complete\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | [command]/usr/bin/tar --version\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | tar (GNU tar) 1.30\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | This is free software: you are free to change and redistribute it.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | There is NO WARRANTY, to the extent permitted by law.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Written by John Gilmore and Jay Fenlason.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_1754117024 -f /tmp/a93b2574-c41e-4617-bb84-f6ba43f46f40\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_1754117024/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::Caching tool jdk 8.0.372 x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::source dir: /tmp/temp_1754117024/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/8.0.372/x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::finished caching tool\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | writing /home/runneradmin/.m2/settings.xml\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2705  Success - Main Set up JDK 1.8\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2699  ::set-env:: JAVA_HOME_8_0_372_X64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2699  ::set-env:: JAVA_HOME_8.0.372_x64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/8.0.372/x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2699  ::set-output:: version=8.0.372\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/8.0.372/x64\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/8.0.372/x64/bin\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build] \u2b50 Run Main Build with Gradle\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Downloading https://services.gradle.org/distributions/gradle-6.7.1-bin.zip\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | ..................................................................................................\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Unzipping /home/runneradmin/.gradle/wrapper/dists/gradle-6.7.1-bin/bwlcbys1h7rz3272sye1xwiv6/gradle-6.7.1-bin.zip to /home/runneradmin/.gradle/wrapper/dists/gradle-6.7.1-bin/bwlcbys1h7rz3272sye1xwiv6\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Set executable permissions for: /home/runneradmin/.gradle/wrapper/dists/gradle-6.7.1-bin/bwlcbys1h7rz3272sye1xwiv6/gradle-6.7.1/bin/gradle\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Welcome to Gradle 6.7.1!\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Here are the highlights of this release:\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   |  - File system watching is ready for production use\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   |  - Declare the version of Java your build requires\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   |  - Java 15 support\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | For more details see https://docs.gradle.org/6.7.1/release-notes.html\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :compileJava\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :processResources NO-SOURCE\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :classes\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :jar\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :javadoc\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :javadocJar\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :sourcesJar\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :assemble\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :compileTestJava\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :processTestResources\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :testClasses\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :test\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :check\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | > Task :build\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | Use '--warning-mode all' to show the individual deprecation warnings.\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | See https://docs.gradle.org/6.7.1/userguide/command_line_interface.html#sec:command_line_warnings\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | \n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | BUILD SUCCESSFUL in 29s\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   | 8 actionable tasks: 8 executed\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2705  Success - Main Build with Gradle\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build] \u2b50 Run Post Set up JDK 1.8\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build]   \u2705  Success - Post Set up JDK 1.8\n[12d9734b-1b66-496f-8535-3df7aa9b8750/build] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/carlanton-m3u8-parser/.github/workflows/gradle-crawler.yml",
        "build_tool": "gradle",
        "elapsed_time": 75.01376962661743
    }
}