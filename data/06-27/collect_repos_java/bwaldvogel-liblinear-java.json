{
    "repository": "bwaldvogel/liblinear-java",
    "stars": 308,
    "language": "java",
    "size": 3243,
    "clone_url": "https://github.com/bwaldvogel/liblinear-java.git",
    "timestamp": "2023-06-29T09:45:21.186919Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "gradle"
    ],
    "actions_test_build_tools": [
        "gradle"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "de.bwaldvogel.liblinear.ModelTest",
                "name": "testEqualsAndHashCodeContract()",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ModelTest",
                "name": "testEqualsAndHashCode_NegativeZeroesInWeightArray()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ModelTest",
                "name": "testEqualsAndHashCode_EmptyModel()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.SparseOperatorTest",
                "name": "testDot()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.SparseOperatorTest",
                "name": "testAxpy()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.SparseOperatorTest",
                "name": "testSparseDot()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.SparseOperatorTest",
                "name": "testNrm2Sq()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testCrossValidation()",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParametersOnSpliceDataSet()",
                "time": 1.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParametersOnDnaScaleDataSet_L2R_L2LOSS_SVR()",
                "time": 12.41,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParametersOnSpliceDataSet_L2R_LR()",
                "time": 0.681,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrain_IllegalParameters_BiasWithOneClassSvm()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testLoadEmptyModel(Path)",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testAtof()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testAtoi()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testLoadSaveModel(Path)",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParameterC_IllegalSolver()",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testLoadIllegalModel(Path)",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParametersOnIrisDataSet()",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testSaveModelWithIOException()",
                "time": 0.528,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrainTooLargeProblem()",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testAtofInvalidData()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrain_IllegalParameters_RegularizeBias()",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testAtoiInvalidData()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrain_IllegalParameters_InitialSol()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParametersOnSpliceDataSet_L2R_L2LOSS_SVR()",
                "time": 13.36,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testGetVersion()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrain_IllegalParameters_P()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testLoadSimpleModel(Path)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testPredictProbabilityWrongSolver()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrainPredict()",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testFindBestParametersOnDnaScaleDataSet()",
                "time": 2.704,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTranspose()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTranspose2()",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTranspose3()",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.LinearTest",
                "name": "testTrainUnsortedProblem()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testDoCrossValidationOnIrisDataSet()",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadProblemWithZeroIndex(Path)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadProblem(Path)",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testParseCommandLine_FindC_SolverAndNumFoldsSpecified()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testFindBestCOnIrisDataSet()",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadProblemEmptyLine(Path)",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadProblemWithInvalidIndex(Path)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadProblemFromStream()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testParseCommandLine_regularizeBias()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadWrongProblem(Path)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testParseWeights()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testFindBestCOnIrisDataSet_L2R_L2LOSS_SVR_DUAL()",
                "time": 0.331,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testReadUnsortedProblem(Path)",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testFindBestCOnSpliceDataSet_L2R_L2LOSS_SVR_DUAL()",
                "time": 16.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testParseCommandLine()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.TrainTest",
                "name": "testParseCommandLine_FindC_NoSolverSpecified()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ArraySorterTest",
                "name": "testReversedMergesort()",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ArraySorterTest",
                "name": "testReversedMergesortWithMeanValues()",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testConstructorHappy()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testToString()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testEqualsAndHashCodeContract()",
                "time": 0.75,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testConstructorIndexZero()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testConstructorIndexNegative()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testEqualsWithPositiveAndNegativeZeroValue()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.FeatureNodeTest",
                "name": "testEqualsAndHashCodeNaNValue()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testGetInitSol()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetNu()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetC()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetP()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetWeights()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testClone_Simple()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetInitSol()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetWeights_IllegalArgument()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testDefaults()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testClone_Full()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testGetWeights()",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetEps()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ParameterTest",
                "name": "testSetSolverType()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ArrayPointerTest",
                "name": "testSetDoubleArrayPointer()",
                "time": 0.272,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ArrayPointerTest",
                "name": "testGetIntArrayPointer()",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ArrayPointerTest",
                "name": "testSetIntArrayPointer()",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.ArrayPointerTest",
                "name": "testGetDoubleArrayPointer()",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.PredictTest",
                "name": "testDoPredictCorruptLine2()",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.PredictTest",
                "name": "testDoPredictCorruptLine()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.PredictTest",
                "name": "testTrainAndPredict(Path)",
                "time": 0.246,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.PredictTest",
                "name": "testDoPredict()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.SolverTypeTest",
                "name": "testIsSupportVectorRegression()",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "testOneClass(Path)",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[1] dataset: splice, solver: L2R_LR, bias: -1",
                "time": 0.131,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[2] dataset: splice, solver: L2R_LR, bias: 1 (not regularized)",
                "time": 0.08,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[3] dataset: splice, solver: L2R_LR, bias: 1",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[4] dataset: splice, solver: L2R_L2LOSS_SVC_DUAL, bias: -1",
                "time": 0.347,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[5] dataset: splice, solver: L2R_L2LOSS_SVC_DUAL, bias: 1",
                "time": 0.277,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[6] dataset: splice, solver: L2R_L2LOSS_SVC, bias: -1",
                "time": 0.123,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[7] dataset: splice, solver: L2R_L2LOSS_SVC, bias: 1 (not regularized)",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[8] dataset: splice, solver: L2R_L2LOSS_SVC, bias: 1",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[9] dataset: splice, solver: L2R_L1LOSS_SVC_DUAL, bias: -1",
                "time": 0.275,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[10] dataset: splice, solver: L2R_L1LOSS_SVC_DUAL, bias: 1",
                "time": 0.295,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[11] dataset: splice, solver: MCSVM_CS, bias: -1",
                "time": 7.337,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[12] dataset: splice, solver: MCSVM_CS, bias: 1",
                "time": 4.866,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[13] dataset: splice, solver: L1R_L2LOSS_SVC, bias: -1",
                "time": 0.357,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[14] dataset: splice, solver: L1R_L2LOSS_SVC, bias: 1 (not regularized)",
                "time": 0.307,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[15] dataset: splice, solver: L1R_L2LOSS_SVC, bias: 1",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[16] dataset: splice, solver: L1R_LR, bias: -1",
                "time": 0.367,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[17] dataset: splice, solver: L1R_LR, bias: 1 (not regularized)",
                "time": 0.346,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[18] dataset: splice, solver: L1R_LR, bias: 1",
                "time": 0.13,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[19] dataset: splice, solver: L2R_LR_DUAL, bias: -1",
                "time": 0.657,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[20] dataset: splice, solver: L2R_LR_DUAL, bias: 1",
                "time": 0.471,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[21] dataset: splice, solver: L2R_L2LOSS_SVR, bias: -1",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[22] dataset: splice, solver: L2R_L2LOSS_SVR, bias: 1 (not regularized)",
                "time": 0.129,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[23] dataset: splice, solver: L2R_L2LOSS_SVR, bias: 1",
                "time": 0.122,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[24] dataset: splice, solver: L2R_L2LOSS_SVR_DUAL, bias: -1",
                "time": 0.477,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[25] dataset: splice, solver: L2R_L2LOSS_SVR_DUAL, bias: 1",
                "time": 0.418,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[26] dataset: splice, solver: L2R_L1LOSS_SVR_DUAL, bias: -1",
                "time": 0.378,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[27] dataset: splice, solver: L2R_L1LOSS_SVR_DUAL, bias: 1",
                "time": 0.325,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[28] dataset: dna.scale, solver: L2R_LR, bias: -1",
                "time": 0.15,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[29] dataset: dna.scale, solver: L2R_LR, bias: 1 (not regularized)",
                "time": 0.132,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[30] dataset: dna.scale, solver: L2R_LR, bias: 1",
                "time": 0.128,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[31] dataset: dna.scale, solver: L2R_L2LOSS_SVC_DUAL, bias: -1",
                "time": 0.174,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[32] dataset: dna.scale, solver: L2R_L2LOSS_SVC_DUAL, bias: 1",
                "time": 0.164,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[33] dataset: dna.scale, solver: L2R_L2LOSS_SVC, bias: -1",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[34] dataset: dna.scale, solver: L2R_L2LOSS_SVC, bias: 1 (not regularized)",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[35] dataset: dna.scale, solver: L2R_L2LOSS_SVC, bias: 1",
                "time": 0.099,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[36] dataset: dna.scale, solver: L2R_L1LOSS_SVC_DUAL, bias: -1",
                "time": 0.149,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[37] dataset: dna.scale, solver: L2R_L1LOSS_SVC_DUAL, bias: 1",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[38] dataset: dna.scale, solver: MCSVM_CS, bias: -1",
                "time": 0.513,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[39] dataset: dna.scale, solver: MCSVM_CS, bias: 1",
                "time": 0.398,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[40] dataset: dna.scale, solver: L1R_L2LOSS_SVC, bias: -1",
                "time": 0.161,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[41] dataset: dna.scale, solver: L1R_L2LOSS_SVC, bias: 1 (not regularized)",
                "time": 0.194,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[42] dataset: dna.scale, solver: L1R_L2LOSS_SVC, bias: 1",
                "time": 0.195,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[43] dataset: dna.scale, solver: L1R_LR, bias: -1",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[44] dataset: dna.scale, solver: L1R_LR, bias: 1 (not regularized)",
                "time": 0.135,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[45] dataset: dna.scale, solver: L1R_LR, bias: 1",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[46] dataset: dna.scale, solver: L2R_LR_DUAL, bias: -1",
                "time": 0.157,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[47] dataset: dna.scale, solver: L2R_LR_DUAL, bias: 1",
                "time": 0.143,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[48] dataset: dna.scale, solver: L2R_L2LOSS_SVR, bias: -1",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[49] dataset: dna.scale, solver: L2R_L2LOSS_SVR, bias: 1 (not regularized)",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[50] dataset: dna.scale, solver: L2R_L2LOSS_SVR, bias: 1",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[51] dataset: dna.scale, solver: L2R_L2LOSS_SVR_DUAL, bias: -1",
                "time": 0.187,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[52] dataset: dna.scale, solver: L2R_L2LOSS_SVR_DUAL, bias: 1",
                "time": 0.181,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[53] dataset: dna.scale, solver: L2R_L1LOSS_SVR_DUAL, bias: -1",
                "time": 0.199,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "de.bwaldvogel.liblinear.RegressionTest",
                "name": "[54] dataset: dna.scale, solver: L2R_L1LOSS_SVR_DUAL, bias: 1",
                "time": 0.203,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper] \ud83d\ude80  Start image=crawlergpt:latest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \ud83d\ude80  Start image=crawlergpt:latest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \ud83d\ude80  Start image=crawlergpt:latest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \u2601  git clone 'https://github.com/gradle/wrapper-validation-action' # ref=v1.0.4\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper] \u2b50 Run Main actions/checkout@v2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \u2705  Success - Main actions/checkout@v2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper] \u2b50 Run Main gradle/wrapper-validation-action@v1.0.4\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \ud83e\uddea  Matrix: map[java:8]\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker cp src=/tmp/act-cache/c9d7f577-0b8b-4645-9306-c703235a2f8c/act/gradle-wrapper-validation-action@v1.0.4/ dst=/var/run/act/actions/gradle-wrapper-validation-action@v1.0.4/\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \u2b50 Run Main actions/checkout@v2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2705  Success - Main actions/checkout@v2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/gradle-wrapper-validation-action@v1.0.4/] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/gradle-wrapper-validation-action@v1.0.4/dist/index.js] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \u2b50 Run Main Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker cp src=/tmp/act-cache/c9d7f577-0b8b-4645-9306-c703235a2f8c/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::isExplicit: \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::explicit? false\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::evaluating 0 versions\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::match not found\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu8.70.0.23-ca-jdk8.0.372-linux_x64.tar.gz\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::Downloading /tmp/d1f6f149-01d1-4953-b266-82660e422d80\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   | \u2713 Found known Gradle Wrapper JAR files:\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   |   575098db54a998ff1c6770b352c3b16766c09848bee7555dab09afc34e8cf590 gradle/wrapper/gradle-wrapper.jar\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper]   \u2705  Success - Main gradle/wrapper-validation-action@v1.0.4\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::download complete\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | [command]/usr/bin/tar --version\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | tar (GNU tar) 1.30\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | This is free software: you are free to change and redistribute it.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | There is NO WARRANTY, to the extent permitted by law.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Written by John Gilmore and Jay Fenlason.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_1220785904 -f /tmp/d1f6f149-01d1-4953-b266-82660e422d80\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/validateGradleWrapper] \ud83c\udfc1  Job succeeded\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_1220785904/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::Caching tool jdk 8.0.372 x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::source dir: /tmp/temp_1220785904/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::finished caching tool\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | writing /home/runneradmin/.m2/settings.xml\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2705  Success - Main Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2699  ::set-env:: JAVA_HOME_8.0.372_x64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2699  ::set-env:: JAVA_HOME_8_0_372_X64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2699  ::set-output:: version=8.0.372\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/8.0.372/x64/bin\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \u2b50 Run Main Build with Gradle\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Downloading https://services.gradle.org/distributions/gradle-7.4.1-all.zip\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | ...............10%...............20%...............30%...............40%...............50%................60%...............70%...............80%...............90%...............100%\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Welcome to Gradle 7.4.1!\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Here are the highlights of this release:\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |  - Aggregated test and JaCoCo reports\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |  - Marking additional test source directories as tests in IntelliJ\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |  - Support for Adoptium JDKs in Java toolchains\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | For more details see https://docs.gradle.org/7.4.1/release-notes.html\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \u2b50 Run Main actions/checkout@v2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2705  Success - Main actions/checkout@v2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \u2b50 Run Main Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker cp src=/tmp/act-cache/c9d7f577-0b8b-4645-9306-c703235a2f8c/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::isExplicit: \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::explicit? false\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::evaluating 0 versions\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::match not found\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu8.70.0.23-ca-jdk8.0.372-linux_x64.tar.gz\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::Downloading /tmp/79ceae8a-c232-4a11-9130-5f36292dabcf\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::download complete\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | [command]/usr/bin/tar --version\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | tar (GNU tar) 1.30\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | This is free software: you are free to change and redistribute it.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | There is NO WARRANTY, to the extent permitted by law.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Written by John Gilmore and Jay Fenlason.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_2497851 -f /tmp/79ceae8a-c232-4a11-9130-5f36292dabcf\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_2497851/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::Caching tool jdk 8.0.372 x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::source dir: /tmp/temp_2497851/zulu8.70.0.23-ca-jdk8.0.372-linux_x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::finished caching tool\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | writing /home/runneradmin/.m2/settings.xml\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2705  Success - Main Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2699  ::set-env:: JAVA_HOME_8.0.372_x64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2699  ::set-env:: JAVA_HOME_8_0_372_X64=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/8.0.372/x64\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2699  ::set-output:: version=8.0.372\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/8.0.372/x64/bin\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \u2b50 Run Main Build with Gradle\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Downloading https://services.gradle.org/distributions/gradle-7.4.1-all.zip\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :compileJava\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :processResources NO-SOURCE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :classes\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :jar\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :assemble\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | ...............10%...............20%...............30%...............40%...............50%................60%...............70%...............80%...............90%...............100%\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :downloadDatasetDna\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/dna.scale\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/dna.scale.t\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :downloadDatasetSplice\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/splice\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/splice.t\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :compileTestJava\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :verifyDatasetDnaTest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :verifyDatasetDnaTrain\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :processTestResources\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :verifyDatasetSpliceTest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :verifyDatasetSpliceTrain\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :downloadAndVerifyDatasets\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :testClasses\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Welcome to Gradle 7.4.1!\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Here are the highlights of this release:\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |  - Aggregated test and JaCoCo reports\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |  - Marking additional test source directories as tests in IntelliJ\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |  - Support for Adoptium JDKs in Java toolchains\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | For more details see https://docs.gradle.org/7.4.1/release-notes.html\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :compileJava UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :processResources NO-SOURCE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :classes UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :downloadDatasetDna UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/dna.scale\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/dna.scale.t\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :downloadDatasetSplice UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/splice\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Download https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/splice.t\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :compileTestJava UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :verifyDatasetDnaTest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :verifyDatasetDnaTrain\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :verifyDatasetSpliceTest\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :verifyDatasetSpliceTrain\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :downloadAndVerifyDatasets\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :processTestResources UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :testClasses UP-TO-DATE\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :test\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :test\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Task :test FAILED\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | FAILURE: Build failed with an exception.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | * What went wrong:\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | Execution failed for task ':test'.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Multiple build operations failed.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |       Could not write XML test results for de.bwaldvogel.liblinear.TrainTest to file /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java/build/test-results/test/TEST-de.bwaldvogel.liblinear.TrainTest.xml.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |       Could not write XML test results for de.bwaldvogel.liblinear.RegressionTest to file /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java/build/test-results/test/TEST-de.bwaldvogel.liblinear.RegressionTest.xml.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |    > Could not write XML test results for de.bwaldvogel.liblinear.TrainTest to file /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java/build/test-results/test/TEST-de.bwaldvogel.liblinear.TrainTest.xml.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   |    > Could not write XML test results for de.bwaldvogel.liblinear.RegressionTest to file /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java/build/test-results/test/TEST-de.bwaldvogel.liblinear.RegressionTest.xml.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | * Try:\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Run with --stacktrace option to get the stack trace.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Run with --info or --debug option to get more log output.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | > Run with --scan to get full insights.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | * Get more help at https://help.gradle.org\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | BUILD FAILED in 1m 41s\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   | 11 actionable tasks: 11 executed\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u274c  Failure - Main Build with Gradle\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] exitcode '1': failure\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \u2b50 Run Post Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ]   \u2705  Success - Post Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/build                ] \ud83c\udfc1  Job failed\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | > Task :jacocoTestReport\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | BUILD SUCCESSFUL in 1m 38s\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | 11 actionable tasks: 6 executed, 5 up-to-date\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2705  Success - Main Build with Gradle\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \u2b50 Run Main Upload coverage to Codecov\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker cp src=/tmp/act-cache/c9d7f577-0b8b-4645-9306-c703235a2f8c/act/codecov-codecov-action@v1/ dst=/var/run/act/actions/codecov-codecov-action@v1/\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v1/] user=0 workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v1/dist/index.js] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | [command]/usr/bin/bash codecov.sh -n codecov -F  -Q github-action-v1.5.2 -f ./build/reports/jacoco/test/jacocoTestReport.xml\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |   _____          _\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |  / ____|        | |\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | | |     ___   __| | ___  ___ _____   __\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | | |    / _ \\ / _` |/ _ \\/ __/ _ \\ \\ / /\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | | |___| (_) | (_| |  __/ (_| (_) \\ V /\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |  \\_____\\___/ \\__,_|\\___|\\___\\___/ \\_/\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |                               Bash-1.0.3\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;36m==>\u001b[0m git version 2.33.0 found\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;36m==>\u001b[0m curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Release-Date: 2020-01-08\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m GitHub Actions detected.\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     Env vars used:\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_ACTIONS:    true\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_HEAD_REF:   \n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_REF:        refs/heads/main\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_REPOSITORY: bwaldvogel/liblinear-java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_RUN_ID:     1\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_SHA:        d52c06d5f56e1608142ad741f1b13116820127c7\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |       -> GITHUB_WORKFLOW:   e4b1811b-a06b-49b4-92aa-7d9e4bf5b533\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;90mproject root:\u001b[0m .\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;32mYaml not found, that's ok! Learn more at\u001b[0m \u001b[0;36mhttp://docs.codecov.io/docs/codecov-yaml\u001b[0m\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;90m->\u001b[0m Found 1 reports\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m Detecting git/mercurial file structure\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m Reading reports\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;32m+\u001b[0m ./build/reports/jacoco/test/jacocoTestReport.xml \u001b[0;90mbytes=214700\u001b[0m\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m Appending adjustments\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;36mhttps://docs.codecov.io/docs/fixing-reports\u001b[0m\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;90m->\u001b[0m No adjustments found\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m Gzipping contents\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |         20K\t/tmp/codecov.ej1AOr.gz\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m Uploading reports\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;90murl:\u001b[0m https://codecov.io\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;90mquery:\u001b[0m branch=main&commit=d52c06d5f56e1608142ad741f1b13116820127c7&build=1&build_url=http%3A%2F%2Fgithub.com%2Fbwaldvogel%2Fliblinear-java%2Factions%2Fruns%2F1&name=codecov&tag=&slug=bwaldvogel%2Fliblinear-java&service=github-actions&flags=&pr=&job=e4b1811b-a06b-49b4-92aa-7d9e4bf5b533&cmd_args=n,F,Q,f\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m->\u001b[0m  Pinging Codecov\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | https://codecov.io/upload/v4?package=github-action-v1.5.2-1.0.3&token=secret&branch=main&commit=d52c06d5f56e1608142ad741f1b13116820127c7&build=1&build_url=http%3A%2F%2Fgithub.com%2Fbwaldvogel%2Fliblinear-java%2Factions%2Fruns%2F1&name=codecov&tag=&slug=bwaldvogel%2Fliblinear-java&service=github-actions&flags=&pr=&job=e4b1811b-a06b-49b4-92aa-7d9e4bf5b533&cmd_args=n,F,Q,f\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;31m{'detail': ErrorDetail(string='Unable to locate build via Github Actions API. Please upload with the Codecov repository upload token to resolve issue.', code='not_found')}\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | 404\u001b[0m\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \u001b[0;90m==>\u001b[0m Uploading to Codecov\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |                                  Dload  Upload   Total   Spent    Left  Speed\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   | \r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100 17571    0     0  100 17571      0  52139 --:--:-- --:--:-- --:--:-- 51985\r100 17742  100   171  100 17571    370  38032 --:--:-- --:--:-- --:--:-- 38402\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   |     \u001b[0;32m{'detail': ErrorDetail(string='Unable to locate build via Github Actions API. Please upload with the Codecov repository upload token to resolve issue.', code='not_found')}\u001b[0m\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2705  Success - Main Upload coverage to Codecov\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \u2b50 Run Post Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ]   \u2705  Success - Post Setup Java\n[e4b1811b-a06b-49b4-92aa-7d9e4bf5b533/publishCoverage      ] \ud83c\udfc1  Job succeeded\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": "/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/bwaldvogel-liblinear-java/.github/workflows/gradle-crawler.yml",
        "build_tool": "gradle",
        "elapsed_time": 163.31327605247498
    }
}