{
    "repository": "kousen/java_8_recipes",
    "stars": 354,
    "language": "java",
    "size": 1784,
    "clone_url": "https://github.com/kousen/java_8_recipes.git",
    "timestamp": "2023-06-29T12:15:25.055447Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "gradle"
    ],
    "actions_test_build_tools": [
        "gradle"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "testFactorial()",
                "time": 1.502,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "[1] 0, 1",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "[2] 1, 1",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "[3] 2, 2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "[4] 3, 6",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "[5] 4, 24",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.AlgorithmsTest",
                "name": "[6] 5, 120",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PalindromeCheckerTest",
                "name": "isPalidromeUsingMethodRef()",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PalindromeCheckerTest",
                "name": "isPalidromeUsingLambda()",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PalindromeCheckerTest",
                "name": "Madam, in Eden, I'm Adam is a palindrome",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PalindromeCheckerTest",
                "name": "Flee to me, remote elf! is a palindrome",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PalindromeCheckerTest",
                "name": "Go hang a salami; I'm a lasagna hog is a palindrome",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testSumFirstNBigDecimalsWithPrecision()",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "demoReduceWithAccumulator()",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testSumRandoms1()",
                "time": 0.243,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testSumRandoms2()",
                "time": 0.129,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testSumRandoms3()",
                "time": 0.266,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testJoinUpperCase()",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testJoinStream()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testSumFirstNBigDecimals()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.StreamsDemoTest",
                "name": "testGetTotalLength()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortThenAlphaSortUsingSorted",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortWithLambda",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortUsingSorted",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortThenAlphaSort",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortVerbose",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortComparator",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testAlphaSort",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthSortUsingCompare",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingDemoTest",
                "name": "testLengthReverseSortWithComparator",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.TemporalAdjusterTests",
                "name": "adjusters",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "objects.ObjectsDemoTest",
                "name": "getStrings",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "objects.ObjectsDemoTest",
                "name": "getNonNullElements",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "objects.ObjectsDemoTest",
                "name": "getNonNullStrings",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "generics.ProcessColorsTest",
                "name": "makeDarker",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "generics.ProcessColorsTest",
                "name": "makeBrighterThenDarker",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "generics.ProcessColorsTest",
                "name": "makeBrighter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "generics.ProcessColorsTest",
                "name": "noProcessing",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.PalindromeEvaluatorTest",
                "name": "isPalindrome",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstEven_orElseThrow",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstEven_orElse",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirst_ifPresent",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstOdd",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "testCreateOptional_fromNull",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstOdd_orElse",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstOdd_throwsException",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstEven",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "testCreateOptional_fromNotNull",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstEven_orElseWithMethodDefault",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.OptionalDemoTest",
                "name": "findFirstEven_orElseGetWithMethodDefault",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testException",
                "time": 0.169,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "getProductAsync",
                "time": 0.133,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testLocal",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testExceptionWithCause",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureDemosTest",
                "name": "testRemote",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "fileio.ProcessDictionaryTest",
                "name": "maxLength()",
                "time": 0.23,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.PeekDemoTest",
                "name": "sumUpTo",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.PeekDemoTest",
                "name": "sumDoublesDivisibleBy3",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.PeekDemoTest",
                "name": "sumEachDoubleUpTo",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.HRTest",
                "name": "hireNotNull",
                "time": 0.07,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.HRTest",
                "name": "findEmployeeById",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.HRTest",
                "name": "hireNull",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.HRTest",
                "name": "findEmployeesByIds1",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "optionals.HRTest",
                "name": "findEmployeesByIds2",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.AwaitQuiesenceTest",
                "name": "awaitQuiesence",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.AwaitQuiesenceTest",
                "name": "get",
                "time": 0.142,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.AwaitQuiesenceTest",
                "name": "join",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.CollectorsDemoTest",
                "name": "evenLengthStrings()",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.CollectorsDemoTest",
                "name": "createArray()",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.CollectorsDemoTest",
                "name": "createDeque()",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.CollectorsDemoTest",
                "name": "evenLengthStringSet()",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.CollectorsDemoTest",
                "name": "createSet()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.CollectorsDemoTest",
                "name": "createList()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "sequentialIterateStream",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "parallelMethodOnStream",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "parallelStreamThenSequential",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "sequentialCollectionStream",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "sequentialGenerateStream",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "switchingParallelToSequentialInSameStream",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "parallelStreamMethodOnCollection",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.SequentialToParallelTest",
                "name": "sequentialStreamOf",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.TemporalQueriesTests",
                "name": "pirateDay",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.TemporalQueriesTests",
                "name": "queries",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.ImmutableCollectionsTest",
                "name": "createImmutableSet",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.ImmutableCollectionsTest",
                "name": "createImmutableListJava7",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.ImmutableCollectionsTest",
                "name": "createImmutableList",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.ImmutableCollectionsTest",
                "name": "immutableMap",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "collectors.ImmutableCollectionsTest",
                "name": "createImmutableSetJava7",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.SupplierTest",
                "name": "showError()",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "fileio.JumbleTest",
                "name": "checkSolver()",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "fileio.JumbleTest",
                "name": "checkParallelSolve()",
                "time": 0.182,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingMapsTest",
                "name": "getMapSortedByKey",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingMapsTest",
                "name": "getMapSortedByValue",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingMapsTest",
                "name": "getMapSortedByValueDesc",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "sorting.SortingMapsTest",
                "name": "getMapSortedByKeyDesc",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.PaydayAdjusterTest",
                "name": "payDay",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.PaydayAdjusterTest",
                "name": "payDayWithMethodRef",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "flatMapFindFirst",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "concatParallel",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "concat",
                "time": 0.093,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "reduce",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "flatMap",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "flatMapNotParallel",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "reduceParallel",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "concatThree",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "flatMapFindAny",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "streams.ConcatStreamsTest",
                "name": "flatMapParallel",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonList()",
                "time": 0.245,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonLinkedList()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "varargsConstructor()",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "copyConstructor()",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonListJava7()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonList_2ArgCtrRef()",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonArray()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonListUsingNew()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonList_CtorRef()",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.UsePersonTest",
                "name": "createPersonListUsingNewWithLambdas()",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.RegionIdsByOffsetTest",
                "name": "getRegionNamesForSystemDefault",
                "time": 0.16,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.RegionIdsByOffsetTest",
                "name": "getRegionNamesForNepal",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.RegionIdsByOffsetTest",
                "name": "getRegionNamesForChicago",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.RegionIdsByOffsetTest",
                "name": "getRegionNamesForNewYork",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.RegionIdsByOffsetTest",
                "name": "getRegionNamesForGMT",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PrimesTest",
                "name": "testIsPrimeWithComposites()",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PrimesTest",
                "name": "testNextPrimeUsingMap()",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PrimesTest",
                "name": "emptyStreamsDanger()",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PrimesTest",
                "name": "testIsPrimeWithStreams()",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PrimesTest",
                "name": "testIsPrime()",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "PrimesTest",
                "name": "testNextPrime()",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.ConvertDateTest",
                "name": "convertFromDateToLDUsingString",
                "time": 0.124,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.ConvertDateTest",
                "name": "convertFromDateToLD",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "handleWithException",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "joinAfterCancel",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeWithGet",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeWithJoin",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "handleWithoutException",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeExceptionallyWithCause",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "supplyThenAccept",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeLong",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "completeExceptionally",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "combine",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "compose",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "concurrency.CompletableFutureTests",
                "name": "supplyThenAcceptAsyncWithExecutor",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": null,
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.PersonConstructorTest",
                "name": "personConstructors",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "localDateMinus",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "localTimeMinus",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "temporalField",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "withInvalidDate",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "with",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "localDatePlus",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "localTimePlus",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "datetime.AddingAndSubtractingTest",
                "name": "plus_minus",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "mapvsflatmap.WordMapTest",
                "name": "checkSampleFile",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "functionpackage.ImplementPredicateTest",
                "name": "getNamesOfLength5",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "functionpackage.ImplementPredicateTest",
                "name": "getNamesSatisfyingCondition",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "functionpackage.ImplementPredicateTest",
                "name": "composedPredicate",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "functionpackage.ImplementPredicateTest",
                "name": "getNamesStartingWithS",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "functionpackage.ImplementPredicateTest",
                "name": "getNames",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "defaults.CompanyEmployeeTest",
                "name": "getName()",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.CompositionDemoTest",
                "name": "prime",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.CompositionDemoTest",
                "name": "triangular",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.CompositionDemoTest",
                "name": "perfectSquares",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "lambdas.CompositionDemoTest",
                "name": "triangularAndPerfect",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build] \ud83d\ude80  Start image=crawlergpt:latest\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/3d783ea4-1661-11ee-8a50-bb14de238602/kousen-java_8_recipes] user=0 workdir=\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2601  git clone 'https://github.com/actions/setup-java' # ref=v1\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build] \u2b50 Run Main actions/checkout@v1\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2705  Success - Main actions/checkout@v1\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build] \u2b50 Run Main Set up JDK 11\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/f32118cc-cf7e-4306-b80d-39e1a74e1539/act/actions-setup-java@v1/ dst=/var/run/act/actions/actions-setup-java@v1/\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-java@v1/] user=0 workdir=\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/setup/index.js] user= workdir=\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::isExplicit: \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::explicit? false\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::evaluating 0 versions\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::match not found\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::Downloading JDK from Azul\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::Searching for files with extension: -linux_x64.tar.gz\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::Downloading https://static.azul.com/zulu/bin/zulu11.64.19-ca-jdk11.0.19-linux_x64.tar.gz\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::Downloading /tmp/bcd3e422-2d3c-4b84-b176-8f4fb548ed70\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::download complete\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | [command]/usr/bin/tar --version\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | tar (GNU tar) 1.30\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | Copyright (C) 2017 Free Software Foundation, Inc.\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | This is free software: you are free to change and redistribute it.\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | There is NO WARRANTY, to the extent permitted by law.\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | Written by John Gilmore and Jay Fenlason.\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/temp_1283238864 -f /tmp/bcd3e422-2d3c-4b84-b176-8f4fb548ed70\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::jdk extracted to /tmp/temp_1283238864/zulu11.64.19-ca-jdk11.0.19-linux_x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::Caching tool jdk 11.0.19 x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::source dir: /tmp/temp_1283238864/zulu11.64.19-ca-jdk11.0.19-linux_x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/jdk/11.0.19/x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::finished caching tool\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2753 add-matcher /run/act/actions/actions-setup-java@v1/.github/java.json\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | creating settings.xml with server-id: github; environment variables: username=$GITHUB_ACTOR, password=$GITHUB_TOKEN, and gpg-passphrase=null\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udcac  ::debug::created directory /home/runneradmin/.m2\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | writing /home/runneradmin/.m2/settings.xml\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2705  Success - Main Set up JDK 11\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2699  ::set-env:: JAVA_HOME_11.0.19_x64=/opt/hostedtoolcache/jdk/11.0.19/x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2699  ::set-env:: JAVA_HOME=/opt/hostedtoolcache/jdk/11.0.19/x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2699  ::set-env:: JAVA_HOME_11_0_19_X64=/opt/hostedtoolcache/jdk/11.0.19/x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2699  ::set-output:: path=/opt/hostedtoolcache/jdk/11.0.19/x64\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2699  ::set-output:: version=11.0.19\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2699  ::add-path:: /opt/hostedtoolcache/jdk/11.0.19/x64/bin\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build] \u2b50 Run Main Build with Gradle\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | Downloading https://services.gradle.org/distributions/gradle-7.5.1-all.zip\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | ...............10%................20%................30%................40%................50%................60%...............70%................80%................90%................100%\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | Welcome to Gradle 7.5.1!\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | Here are the highlights of this release:\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   |  - Support for Java 18\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   |  - Support for building with Groovy 4\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   |  - Much more responsive continuous builds\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   |  - Improved diagnostics for dependency resolution\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | For more details see https://docs.gradle.org/7.5.1/release-notes.html\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | Starting a Gradle Daemon (subsequent builds will be faster)\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :compileJava\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :processResources\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :classes\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :jar\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :assemble\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :compileTestJava\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :processTestResources NO-SOURCE\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :testClasses\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :test\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :check\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | > Task :build\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | \n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | BUILD SUCCESSFUL in 39s\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   | 5 actionable tasks: 5 executed\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2705  Success - Main Build with Gradle\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build] \u2b50 Run Post Set up JDK 11\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-java@v1/dist/cleanup/index.js] user= workdir=\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build]   \u2705  Success - Post Set up JDK 11\n[4fa44867-cbbe-46d3-8627-71ffcc6382f5/build] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/3d783ea4-1661-11ee-8a50-bb14de238602/kousen-java_8_recipes/.github/workflows/gradle-crawler.yml",
        "build_tool": "gradle",
        "elapsed_time": 88.86286878585815
    }
}