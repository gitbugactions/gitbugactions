{
    "repository": "nosarthur/gita",
    "stars": 1327,
    "language": "python",
    "size": 2305,
    "clone_url": "https://github.com/nosarthur/gita.git",
    "timestamp": "2023-07-01T12:07:16.203271Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_info",
                "name": "test_run_quiet_diff",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_group_name",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestAdd",
                "name": "test_add[input0-]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'gita'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_flags[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/mock_path_file-]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_flags[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/clash_path_file-repo2: ['--haha', '--pp']\\n]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestLsLl",
                "name": "test_ll",
                "time": 0.054,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 'gita\\n' == 'nosarthur-gita\\n'\n  - nosarthur-gita\n  + gita",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestLsLl",
                "name": "test_ls",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestLsLl",
                "name": "test_with_path_files[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/mock_path_file-repo1 cmaster dsu\\x1b[0m msg \\nrepo2 cmaster dsu\\x1b[0m msg \\nxxx   cmaster dsu\\x1b[0m msg \\n]",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestLsLl",
                "name": "test_with_path_files[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/empty_path_file-]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestLsLl",
                "name": "test_with_path_files[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/clash_path_file-repo1 cmaster dsu\\x1b[0m msg \\nrepo2 cmaster dsu\\x1b[0m msg \\n]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_freeze[input0-]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_clone_with_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_clone_with_config_file",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_clone_with_preserve_path",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_rm",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_not_add",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_fetch",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_async_fetch",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_superman[diff --name-only --staged]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_superman[commit -am 'lala kaka']",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_shell[diff --name-only --staged]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_shell[commit -am 'lala kaka']",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestContext",
                "name": "test_display_no_context",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestContext",
                "name": "test_display_context",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestContext",
                "name": "test_reset",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestContext",
                "name": "test_set_first_time",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestContext",
                "name": "test_set_second_time",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_ls",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_ll",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_ll_with_group",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_rename",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_rename_error",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_rm[xx-expected0]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_rm[xx yy-expected1]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_add",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_add_to_existing",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_rm_repo",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestGroupCmd",
                "name": "test_integration",
                "time": 0.063,
                "results": [
                    {
                        "result": "Failure",
                        "message": "SystemExit: 2",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_rename",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestInfo",
                "name": "test_ll",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestInfo",
                "name": "test_add",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main.TestInfo",
                "name": "test_rm",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_set_color",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_main",
                "name": "test_clear[input0-]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_relative_path[/a/b/repo-/a/b-expected0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_relative_path[/a/b/repo-/a-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_relative_path[/a/b/repo-/a/-expected2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_relative_path[/a/b/repo--None]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_relative_path[/a/b/repo-/a/b/repo-expected4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_parse_repos_and_rest[input0-expected0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_parse_repos_and_rest[input1-expected1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_parse_repos_and_rest[input2-expected2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_parse_repos_and_rest[input3-expected3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_generate_dir_hash[/a/b/c/repo-paths0-expected0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_auto_group[repos0-paths0-expected0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_auto_group[repos1-paths1-expected1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_auto_group[repos2-paths2-expected2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_describe[test_input0-True-abc \\x1b[31mrepo *+_  \\x1b[0m msg xx]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_describe[test_input1-True-abc repo *+_   msg xx]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_describe[test_input2-False-repo \\x1b[32mrepo _    \\x1b[0m msg xx]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_repos[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/mock_path_file-expected0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_repos[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/empty_path_file-expected1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_repos[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/clash_path_file-expected2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_context",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_groups[/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/tests/mock_group_file-expected0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_custom_push_cmd",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_add_repos[path_input0-/home/some/repo,some/repo,,\\r\\n]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_add_repos[path_input1-expected1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_add_repos[path_input2-/home/some/repo1,repo1,,\\r\\n]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_rename_repo",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_async_output",
                "time": 3.293,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_git",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \ud83d\ude80  Start image=crawlergpt:latest\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita] user=0 workdir=\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.6]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \u2b50 Run Main actions/checkout@v3\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2705  Success - Main actions/checkout@v3\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \u2b50 Run Main Set up Python 3.6\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/2b8de2e0-db11-441c-8d6e-8e1f5bbafa69/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2753  ::group::Installed versions\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.6 is 3.6\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? false\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? true\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? true\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? true\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? true\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? true\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::explicit? true\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::matched: 3.6.14\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.6.14/x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.6.14 x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Successfully set up CPython (3.6.14)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2753  ::endgroup::\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2705  Success - Main Set up Python 3.6\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.6.14/x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.6.14/x64/lib/pkgconfig\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.6.14/x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.6.14/x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.6.14/x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.6.14/x64/lib\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-output:: python-version=3.6.14\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.6.14/x64/bin/python\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64/bin\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \u2b50 Run Main Install dependences\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (21.2.4)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pip\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pip-21.3.1-py3-none-any.whl (1.7 MB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting wheel\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading wheel-0.37.1-py2.py3-none-any.whl (35 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Installing collected packages: wheel, pip\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Attempting uninstall: pip\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     Found existing installation: pip 21.2.4\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     Uninstalling pip-21.2.4:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |       Successfully uninstalled pip-21.2.4\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Successfully installed pip-21.3.1 wheel-0.37.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pytest>=6.1.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pytest-7.0.1-py3-none-any.whl (296 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pytest-cov>=2.6.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pytest_cov-4.0.0-py3-none-any.whl (21 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pytest-xdist>=2.1.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pytest_xdist-3.0.2-py3-none-any.whl (36 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting setuptools>=40.6.3\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading setuptools-59.6.0-py3-none-any.whl (952 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting twine>=1.12.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading twine-3.8.0-py3-none-any.whl (36 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting importlib-metadata>=0.12\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading importlib_metadata-4.8.3-py3-none-any.whl (17 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting packaging\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading packaging-21.3-py3-none-any.whl (40 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting tomli>=1.0.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading tomli-1.2.3-py3-none-any.whl (12 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting attrs>=19.2.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading attrs-22.2.0-py3-none-any.whl (60 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting iniconfig\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pluggy<2.0,>=0.12\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting py>=1.8.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting coverage[toml]>=5.2.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading coverage-6.2-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (212 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting execnet>=1.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading execnet-1.9.0-py2.py3-none-any.whl (39 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting requests>=2.20\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting requests-toolbelt!=0.9.0,>=0.8.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting tqdm>=4.14\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading tqdm-4.64.1-py2.py3-none-any.whl (78 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting readme-renderer>=21.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading readme_renderer-34.0-py3-none-any.whl (16 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pkginfo>=1.8.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting keyring>=15.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading keyring-23.4.1-py3-none-any.whl (33 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting colorama>=0.4.3\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading colorama-0.4.5-py2.py3-none-any.whl (16 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting urllib3>=1.26.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting rfc3986>=1.4.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading rfc3986-1.5.0-py2.py3-none-any.whl (31 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting zipp>=0.5\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting typing-extensions>=3.6.4\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading typing_extensions-4.1.1-py3-none-any.whl (26 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting jeepney>=0.4.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading jeepney-0.7.1-py3-none-any.whl (54 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting SecretStorage>=3.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting Pygments>=2.5.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading Pygments-2.14.0-py3-none-any.whl (1.1 MB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting bleach>=2.1.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading bleach-4.1.0-py2.py3-none-any.whl (157 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting docutils>=0.13.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading docutils-0.18.1-py2.py3-none-any.whl (570 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting idna<4,>=2.5\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting certifi>=2017.4.17\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting charset-normalizer~=2.0.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting importlib-resources\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading importlib_resources-5.4.0-py3-none-any.whl (28 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pyparsing!=3.0.5,>=2.0.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pyparsing-3.1.0-py3-none-any.whl (102 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting webencodings\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting six>=1.9.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting cryptography>=2.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading cryptography-40.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (3.7 MB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting cffi>=1.12\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading cffi-1.15.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (402 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Collecting pycparser\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Installing collected packages: pycparser, zipp, typing-extensions, pyparsing, cffi, webencodings, urllib3, six, packaging, jeepney, importlib-metadata, idna, cryptography, charset-normalizer, certifi, tomli, SecretStorage, requests, Pygments, py, pluggy, iniconfig, importlib-resources, docutils, coverage, bleach, attrs, tqdm, rfc3986, requests-toolbelt, readme-renderer, pytest, pkginfo, keyring, execnet, colorama, twine, setuptools, pytest-xdist, pytest-cov\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Attempting uninstall: setuptools\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     Found existing installation: setuptools 40.6.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     Uninstalling setuptools-40.6.2:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |       Successfully uninstalled setuptools-40.6.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Successfully installed Pygments-2.14.0 SecretStorage-3.3.3 attrs-22.2.0 bleach-4.1.0 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-2.0.12 colorama-0.4.5 coverage-6.2 cryptography-40.0.2 docutils-0.18.1 execnet-1.9.0 idna-3.4 importlib-metadata-4.8.3 importlib-resources-5.4.0 iniconfig-1.1.1 jeepney-0.7.1 keyring-23.4.1 packaging-21.3 pkginfo-1.9.6 pluggy-1.0.0 py-1.11.0 pycparser-2.21 pyparsing-3.1.0 pytest-7.0.1 pytest-cov-4.0.0 pytest-xdist-3.0.2 readme-renderer-34.0 requests-2.27.1 requests-toolbelt-1.0.0 rfc3986-1.5.0 setuptools-59.6.0 six-1.16.0 tomli-1.2.3 tqdm-4.64.1 twine-3.8.0 typing-extensions-4.1.1 urllib3-1.26.16 webencodings-0.5.1 zipp-3.6.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Obtaining file:///tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Preparing metadata (setup.py): started\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Preparing metadata (setup.py): finished with status 'done'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Installing collected packages: gita\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |   Running setup.py develop for gita\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Successfully installed gita-0.16.3.1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u2705  Success - Main Install dependences\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \u2b50 Run Main Pytest\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ============================= test session starts ==============================\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | platform linux -- Python 3.6.14, pytest-7.0.1, pluggy-1.0.0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | plugins: cov-4.0.0, xdist-3.0.2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | collected 72 items\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tests/test_info.py .                                                     [  1%]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tests/test_main.py .F..F...............................F......           [ 61%]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tests/test_utils.py ............................                         [100%]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | =================================== FAILURES ===================================\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | __________________________ TestAdd.test_add[input0-] ___________________________\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = <test_main.TestAdd object at 0x7fe1d31b08d0>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | mock_path_fname = <MagicMock name='get_config_fname' id='140607907059808'>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_add_input0__0')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | input = ['add', '.'], expected = ''\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     @pytest.mark.parametrize(\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         \"input, expected\",\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         [\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             ([\"add\", \".\"], \"\"),\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         ],\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     )\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     @patch(\"gita.common.get_config_fname\")\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def test_add(self, mock_path_fname, tmp_path, input, expected):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         def side_effect(input, _=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             return tmp_path / f\"{input}.txt\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         mock_path_fname.side_effect = side_effect\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         utils.get_repos.cache_clear()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         __main__.main(input)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         utils.get_repos.cache_clear()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         got = utils.get_repos()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         assert len(got) == 1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >       assert got[\"gita\"][\"type\"] == expected\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | E       KeyError: 'gita'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tests/test_main.py:46: KeyError\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ----------------------------- Captured stdout call -----------------------------\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Found 1 new repo(s).\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _______________________________ TestLsLl.test_ll _______________________________\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = <test_main.TestLsLl object at 0x7fe1d31b0a58>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | mock_path_fname = <MagicMock name='get_config_fname' id='140607886481784'>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | capfd = <_pytest.capture.CaptureFixture object at 0x7fe1d31eb358>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_ll0')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     @patch(\"gita.common.get_config_fname\")\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def test_ll(self, mock_path_fname, capfd, tmp_path):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         \"\"\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         functional test\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         \"\"\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # avoid modifying the local configuration\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         def side_effect(input, _=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             return tmp_path / f\"{input}.txt\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         mock_path_fname.side_effect = side_effect\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         utils.get_repos.cache_clear()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         __main__.main([\"add\", \".\"])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         out, err = capfd.readouterr()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         assert err == \"\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         assert \"Found 1 new repo(s).\\n\" == out\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # in production this is not needed\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         utils.get_repos.cache_clear()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         __main__.main([\"ls\"])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         out, err = capfd.readouterr()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         assert err == \"\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >       assert \"gita\\n\" == out\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | E       AssertionError: assert 'gita\\n' == 'nosarthur-gita\\n'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | E         - nosarthur-gita\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | E         + gita\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tests/test_main.py:92: AssertionError\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ________________________ TestGroupCmd.test_integration _________________________\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = ArgumentParser(prog='gita group add', usage=None, description='Add repo(s) to a group.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | args = ['gita', '-n', 'test']\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | namespace = Namespace(gname=None, gpath=None, to_group=None)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def parse_known_args(self, args=None, namespace=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if args is None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # args default to the system args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             args = _sys.argv[1:]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # make sure that args are mutable\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             args = list(args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # default Namespace built from parser defaults\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if namespace is None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             namespace = Namespace()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # add any action defaults that aren't present\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         for action in self._actions:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if action.dest is not SUPPRESS:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 if not hasattr(namespace, action.dest):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     if action.default is not SUPPRESS:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         setattr(namespace, action.dest, action.default)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # add any parser defaults that aren't present\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         for dest in self._defaults:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if not hasattr(namespace, dest):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 setattr(namespace, dest, self._defaults[dest])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # parse the arguments and exit if there are any errors\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         try:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >           namespace, args = self._parse_known_args(args, namespace)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1766: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = ArgumentParser(prog='gita group add', usage=None, description='Add repo(s) to a group.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | arg_strings = ['gita', '-n', 'test']\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | namespace = Namespace(gname=None, gpath=None, to_group=None)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def _parse_known_args(self, arg_strings, namespace):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # replace arg strings that are file references\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if self.fromfile_prefix_chars is not None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             arg_strings = self._read_args_from_files(arg_strings)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # map all mutually exclusive arguments to the other arguments\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # they can't occur with\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         action_conflicts = {}\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         for mutex_group in self._mutually_exclusive_groups:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             group_actions = mutex_group._group_actions\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             for i, mutex_action in enumerate(mutex_group._group_actions):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 conflicts = action_conflicts.setdefault(mutex_action, [])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 conflicts.extend(group_actions[:i])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 conflicts.extend(group_actions[i + 1:])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # find all option indices, and determine the arg_string_pattern\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # which has an 'O' if there is an option at an index,\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # an 'A' if there is an argument, or a '-' if there is a '--'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         option_string_indices = {}\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         arg_string_pattern_parts = []\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         arg_strings_iter = iter(arg_strings)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         for i, arg_string in enumerate(arg_strings_iter):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # all args after -- are non-options\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if arg_string == '--':\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 arg_string_pattern_parts.append('-')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 for arg_string in arg_strings_iter:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     arg_string_pattern_parts.append('A')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # otherwise, add the arg to the arg strings\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # and note the index if it was an option\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 option_tuple = self._parse_optional(arg_string)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 if option_tuple is None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     pattern = 'A'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     option_string_indices[i] = option_tuple\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     pattern = 'O'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 arg_string_pattern_parts.append(pattern)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # join the pieces together to form the pattern\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         arg_strings_pattern = ''.join(arg_string_pattern_parts)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # converts arg strings to the appropriate and then takes the action\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         seen_actions = set()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         seen_non_default_actions = set()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         def take_action(action, argument_strings, option_string=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             seen_actions.add(action)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             argument_values = self._get_values(action, argument_strings)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # error if this argument is not allowed with other previously\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # seen arguments, assuming that actions that use the default\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # value don't really count as \"present\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if argument_values is not action.default:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 seen_non_default_actions.add(action)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 for conflict_action in action_conflicts.get(action, []):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     if conflict_action in seen_non_default_actions:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         msg = _('not allowed with argument %s')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         action_name = _get_action_name(conflict_action)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         raise ArgumentError(action, msg % action_name)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # take the action if we didn't receive a SUPPRESS value\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # (e.g. from a default)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if argument_values is not SUPPRESS:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 action(self, namespace, argument_values, option_string)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # function to convert arg_strings into an optional action\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         def consume_optional(start_index):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # get the optional identified at this index\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             option_tuple = option_string_indices[start_index]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             action, option_string, explicit_arg = option_tuple\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # identify additional optionals in the same arg string\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # (e.g. -xyz is the same as -x -y -z if no args are required)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             match_argument = self._match_argument\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             action_tuples = []\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             while True:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 # if we found no optional action, skip it\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 if action is None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     extras.append(arg_strings[start_index])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     return start_index + 1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 # if there is an explicit argument, try to match the\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 # optional's string arguments to only this\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 if explicit_arg is not None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     arg_count = match_argument(action, 'A')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # if the action is a single-dash option and takes no\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # arguments, try to parse more single-dash options out\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # of the tail of the option string\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     chars = self.prefix_chars\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     if arg_count == 0 and option_string[1] not in chars:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         action_tuples.append((action, [], option_string))\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         char = option_string[0]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         option_string = char + explicit_arg[0]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         new_explicit_arg = explicit_arg[1:] or None\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         optionals_map = self._option_string_actions\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         if option_string in optionals_map:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                             action = optionals_map[option_string]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                             explicit_arg = new_explicit_arg\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                             msg = _('ignored explicit argument %r')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                             raise ArgumentError(action, msg % explicit_arg)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # if the action expect exactly one argument, we've\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # successfully matched the option; exit the loop\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     elif arg_count == 1:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         stop = start_index + 1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         args = [explicit_arg]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         action_tuples.append((action, args, option_string))\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         break\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # error if a double-dash option did not use the\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     # explicit argument\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         msg = _('ignored explicit argument %r')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                         raise ArgumentError(action, msg % explicit_arg)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 # if there is no explicit argument, try to match the\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 # optional's string arguments with the following strings\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 # if successful, exit the loop\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     start = start_index + 1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     selected_patterns = arg_strings_pattern[start:]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     arg_count = match_argument(action, selected_patterns)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     stop = start + arg_count\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     args = arg_strings[start:stop]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     action_tuples.append((action, args, option_string))\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     break\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # add the Optional to the list and return the index at which\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # the Optional's string args stopped\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             assert action_tuples\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             for action, args, option_string in action_tuples:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 take_action(action, args, option_string)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             return stop\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # the list of Positionals left to be parsed; this is modified\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # by consume_positionals()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         positionals = self._get_positional_actions()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # function to convert arg_strings into positional actions\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         def consume_positionals(start_index):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # match as many Positionals as possible\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             match_partial = self._match_arguments_partial\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             selected_pattern = arg_strings_pattern[start_index:]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             arg_counts = match_partial(positionals, selected_pattern)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # slice off the appropriate arg strings for each Positional\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # and add the Positional and its args to the list\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             for action, arg_count in zip(positionals, arg_counts):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 args = arg_strings[start_index: start_index + arg_count]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 start_index += arg_count\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 take_action(action, args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # slice off the Positionals that we just parsed and return the\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # index at which the Positionals' string args stopped\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             positionals[:] = positionals[len(arg_counts):]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             return start_index\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # consume Positionals and Optionals alternately, until we have\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # passed the last option string\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         extras = []\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         start_index = 0\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if option_string_indices:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             max_option_string_index = max(option_string_indices)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             max_option_string_index = -1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         while start_index <= max_option_string_index:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             # consume any Positionals preceding the next option\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             next_option_string_index = min([\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 index\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 for index in option_string_indices\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 if index >= start_index])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if start_index != next_option_string_index:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >               positionals_end_index = consume_positionals(start_index)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1954: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | start_index = 1\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def consume_positionals(start_index):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # match as many Positionals as possible\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         match_partial = self._match_arguments_partial\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         selected_pattern = arg_strings_pattern[start_index:]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         arg_counts = match_partial(positionals, selected_pattern)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # slice off the appropriate arg strings for each Positional\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # and add the Positional and its args to the list\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         for action, arg_count in zip(positionals, arg_counts):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             args = arg_strings[start_index: start_index + arg_count]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             start_index += arg_count\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >           take_action(action, args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1931: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | action = _StoreAction(option_strings=[], dest='to_group', nargs='+', const=None, default=None, type=None, choices={'nosarthur-g...8-17ed-11ee-8a50-bb14de238602/nosarthur-gita', 'type': '', 'flags': []}}, help='repo(s) to be grouped', metavar='repo')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | argument_strings = ['gita'], option_string = None\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def take_action(action, argument_strings, option_string=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         seen_actions.add(action)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >       argument_values = self._get_values(action, argument_strings)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1824: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = ArgumentParser(prog='gita group add', usage=None, description='Add repo(s) to a group.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | action = _StoreAction(option_strings=[], dest='to_group', nargs='+', const=None, default=None, type=None, choices={'nosarthur-g...8-17ed-11ee-8a50-bb14de238602/nosarthur-gita', 'type': '', 'flags': []}}, help='repo(s) to be grouped', metavar='repo')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | arg_strings = ['gita']\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def _get_values(self, action, arg_strings):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # for everything but PARSER, REMAINDER args, strip out first '--'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if action.nargs not in [PARSER, REMAINDER]:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             try:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 arg_strings.remove('--')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             except ValueError:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 pass\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # optional argument produces a default when not present\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if not arg_strings and action.nargs == OPTIONAL:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if action.option_strings:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 value = action.const\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 value = action.default\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if isinstance(value, str):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 value = self._get_value(action, value)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 self._check_value(action, value)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # when nargs='*' on a positional, if there were no command-line\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # args, use the default if it is anything other than None\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         elif (not arg_strings and action.nargs == ZERO_OR_MORE and\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |               not action.option_strings):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             if action.default is not None:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 value = action.default\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                 value = arg_strings\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             self._check_value(action, value)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # single argument or optional argument produces a single value\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         elif len(arg_strings) == 1 and action.nargs in [None, OPTIONAL]:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             arg_string, = arg_strings\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             value = self._get_value(action, arg_string)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             self._check_value(action, value)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # REMAINDER arguments convert all values, checking none\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         elif action.nargs == REMAINDER:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             value = [self._get_value(action, v) for v in arg_strings]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # PARSER arguments convert all values, but check only the first\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         elif action.nargs == PARSER:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             value = [self._get_value(action, v) for v in arg_strings]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             self._check_value(action, value[0])\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # all other types of nargs produce a list\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         else:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             value = [self._get_value(action, v) for v in arg_strings]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             for v in value:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >               self._check_value(action, v)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:2281: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = ArgumentParser(prog='gita group add', usage=None, description='Add repo(s) to a group.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | action = _StoreAction(option_strings=[], dest='to_group', nargs='+', const=None, default=None, type=None, choices={'nosarthur-g...8-17ed-11ee-8a50-bb14de238602/nosarthur-gita', 'type': '', 'flags': []}}, help='repo(s) to be grouped', metavar='repo')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | value = 'gita'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def _check_value(self, action, value):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         # converted value must be one of the choices (if specified)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if action.choices is not None and value not in action.choices:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             args = {'value': value,\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |                     'choices': ', '.join(map(repr, action.choices))}\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             msg = _('invalid choice: %(value)r (choose from %(choices)s)')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >           raise ArgumentError(action, msg % args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | E           argparse.ArgumentError: argument repo: invalid choice: 'gita' (choose from 'nosarthur-gita')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:2318: ArgumentError\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | During handling of the above exception, another exception occurred:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = <test_main.TestGroupCmd object at 0x7fe1d31c2b00>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | mock_path_fname = <MagicMock name='get_config_fname' id='140607907053920'>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_integration0')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | capfd = <_pytest.capture.CaptureFixture object at 0x7fe1d325b400>\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     @patch(\"gita.common.get_config_fname\")\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def test_integration(self, mock_path_fname, tmp_path, capfd):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         def side_effect(input, _=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             return tmp_path / f\"{input}.csv\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         mock_path_fname.side_effect = side_effect\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         __main__.main(\"add .\".split())\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         utils.get_repos.cache_clear()\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >       __main__.main(\"group add gita -n test\".split())\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | tests/test_main.py:498: \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | gita/__main__.py:768: in main\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     args = p.parse_args(argv)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1734: in parse_args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     args, argv = self.parse_known_args(args, namespace)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1766: in parse_known_args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     namespace, args = self._parse_known_args(args, namespace)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1954: in _parse_known_args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     positionals_end_index = consume_positionals(start_index)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1931: in consume_positionals\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     take_action(action, args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1840: in take_action\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     action(self, namespace, argument_values, option_string)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1137: in __call__\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1766: in parse_known_args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     namespace, args = self._parse_known_args(args, namespace)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1954: in _parse_known_args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     positionals_end_index = consume_positionals(start_index)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1931: in consume_positionals\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     take_action(action, args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1840: in take_action\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     action(self, namespace, argument_values, option_string)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1137: in __call__\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:1773: in parse_known_args\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     self.error(str(err))\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:2393: in error\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | self = ArgumentParser(prog='gita group add', usage=None, description='Add repo(s) to a group.', formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | status = 2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | message = \"gita group add: error: argument repo: invalid choice: 'gita' (choose from 'nosarthur-gita')\\n\"\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |     def exit(self, status=0, message=None):\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |         if message:\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   |             self._print_message(message, _sys.stderr)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | >       _sys.exit(status)\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | E       SystemExit: 2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/argparse.py:2380: SystemExit\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ----------------------------- Captured stdout call -----------------------------\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Found 1 new repo(s).\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ----------------------------- Captured stderr call -----------------------------\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | usage: gita group add [-h] -n group-name [-p group-path] repo [repo ...]\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | gita group add: error: argument repo: invalid choice: 'gita' (choose from 'nosarthur-gita')\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/report.xml -\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ---------- coverage: platform linux, python 3.6.14-final-0 -----------\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | Coverage XML written to file coverage.xml\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | \n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | =========================== short test summary info ============================\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | FAILED tests/test_main.py::TestAdd::test_add[input0-] - KeyError: 'gita'\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | FAILED tests/test_main.py::TestLsLl::test_ll - AssertionError: assert 'gita\\n...\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | FAILED tests/test_main.py::TestGroupCmd::test_integration - SystemExit: 2\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   | ========================= 3 failed, 69 passed in 6.29s =========================\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build]   \u274c  Failure - Main Pytest\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] exitcode '1': failure\n[ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nosarthur-gita/.github/workflows/nos-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "ed7aff7b-e5d4-41a9-9d8b-0bbb7d86880d",
        "build_tool": "pytest",
        "elapsed_time": 163.30008387565613
    }
}