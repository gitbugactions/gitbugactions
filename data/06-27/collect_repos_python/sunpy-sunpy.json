{
    "repository": "sunpy/sunpy",
    "stars": 790,
    "language": "python",
    "size": 63019,
    "clone_url": "https://github.com/sunpy/sunpy.git",
    "timestamp": "2023-07-01T09:16:23.508256Z",
    "clone_success": true,
    "number_of_actions": 5,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[eab7fcf5-3763-4063-97b5-93f0d5ea832f/core ]   \u2601  git clone 'https://github.com/OpenAstronomy/github-actions-workflows' # ref=main\n[core/Test Python package/Load tox environments] \ud83d\ude80  Start image=crawlergpt:latest\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/sunpy-sunpy] user=0 workdir=\n[core/Test Python package/Load tox environments]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[core/Test Python package/Load tox environments] \u2b50 Run Main actions/setup-python@v4\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker cp src=/tmp/act-cache/22cea5fd-9c69-492b-99a8-bbc22da52ce8/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[core/Test Python package/Load tox environments]   \u2753  ::group::Installed versions\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: \n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? false\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? true\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? true\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? true\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? true\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? true\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::explicit? true\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::evaluating 6 versions\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::matched: 3.9.6\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[core/Test Python package/Load tox environments]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[core/Test Python package/Load tox environments]   | Successfully set up CPython (3.9.6)\n[core/Test Python package/Load tox environments]   \u2753  ::endgroup::\n[core/Test Python package/Load tox environments]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[core/Test Python package/Load tox environments]   \u2705  Success - Main actions/setup-python@v4\n[core/Test Python package/Load tox environments]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[core/Test Python package/Load tox environments]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[core/Test Python package/Load tox environments]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[core/Test Python package/Load tox environments]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[core/Test Python package/Load tox environments]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[core/Test Python package/Load tox environments]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[core/Test Python package/Load tox environments]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[core/Test Python package/Load tox environments]   \u2699  ::set-output:: python-version=3.9.6\n[core/Test Python package/Load tox environments]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[core/Test Python package/Load tox environments]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[core/Test Python package/Load tox environments] \u2b50 Run Main python -m pip install PyYAML click\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[core/Test Python package/Load tox environments]   | Collecting PyYAML\n[core/Test Python package/Load tox environments]   |   Downloading PyYAML-6.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (661 kB)\n[core/Test Python package/Load tox environments]   | Collecting click\n[core/Test Python package/Load tox environments]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[core/Test Python package/Load tox environments]   | Installing collected packages: PyYAML, click\n[core/Test Python package/Load tox environments]   | Successfully installed PyYAML-6.0 click-8.1.3\n[core/Test Python package/Load tox environments]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[core/Test Python package/Load tox environments]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[core/Test Python package/Load tox environments]   \u2705  Success - Main python -m pip install PyYAML click\n[core/Test Python package/Load tox environments] \u2b50 Run Main echo $TOX_MATRIX_SCRIPT | base64 --decode > tox_matrix.py\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[core/Test Python package/Load tox environments]   \u2705  Success - Main echo $TOX_MATRIX_SCRIPT | base64 --decode > tox_matrix.py\n[core/Test Python package/Load tox environments] \u2b50 Run Main cat tox_matrix.py\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[core/Test Python package/Load tox environments]   | import json\n[core/Test Python package/Load tox environments]   | import os\n[core/Test Python package/Load tox environments]   | import re\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | import click\n[core/Test Python package/Load tox environments]   | import yaml\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | @click.command()\n[core/Test Python package/Load tox environments]   | @click.option(\"--envs\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--libraries\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--posargs\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--toxdeps\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--toxargs\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--pytest\", default=\"true\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--pytest-results-summary\", default=\"false\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--coverage\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--conda\", default=\"auto\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--setenv\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--display\", default=\"false\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--cache-path\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--cache-key\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--cache-restore-keys\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--runs-on\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--default-python\", default=\"\")\n[core/Test Python package/Load tox environments]   | @click.option(\"--timeout-minutes\", default=\"360\")\n[core/Test Python package/Load tox environments]   | def load_tox_targets(envs, libraries, posargs, toxdeps, toxargs, pytest, pytest_results_summary,\n[core/Test Python package/Load tox environments]   |                      coverage, conda, setenv, display, cache_path, cache_key,\n[core/Test Python package/Load tox environments]   |                      cache_restore_keys, runs_on, default_python, timeout_minutes):\n[core/Test Python package/Load tox environments]   |     \"\"\"Script to load tox targets for GitHub Actions workflow.\"\"\"\n[core/Test Python package/Load tox environments]   |     # Load envs config\n[core/Test Python package/Load tox environments]   |     envs = yaml.load(envs, Loader=yaml.BaseLoader)\n[core/Test Python package/Load tox environments]   |     print(json.dumps(envs, indent=2))\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # Load global libraries config\n[core/Test Python package/Load tox environments]   |     global_libraries = {\n[core/Test Python package/Load tox environments]   |         \"brew\": [],\n[core/Test Python package/Load tox environments]   |         \"brew-cask\": [],\n[core/Test Python package/Load tox environments]   |         \"apt\": [],\n[core/Test Python package/Load tox environments]   |         \"choco\": [],\n[core/Test Python package/Load tox environments]   |     }\n[core/Test Python package/Load tox environments]   |     libraries = yaml.load(libraries, Loader=yaml.BaseLoader)\n[core/Test Python package/Load tox environments]   |     if libraries is not None:\n[core/Test Python package/Load tox environments]   |         global_libraries.update(libraries)\n[core/Test Python package/Load tox environments]   |     print(json.dumps(global_libraries, indent=2))\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # Default images to use for runners\n[core/Test Python package/Load tox environments]   |     default_runs_on = {\n[core/Test Python package/Load tox environments]   |         \"linux\": \"ubuntu-latest\",\n[core/Test Python package/Load tox environments]   |         \"macos\": \"macos-latest\",\n[core/Test Python package/Load tox environments]   |         \"windows\": \"windows-latest\",\n[core/Test Python package/Load tox environments]   |     }\n[core/Test Python package/Load tox environments]   |     custom_runs_on = yaml.load(runs_on, Loader=yaml.BaseLoader)\n[core/Test Python package/Load tox environments]   |     if isinstance(custom_runs_on, dict):\n[core/Test Python package/Load tox environments]   |         default_runs_on.update(custom_runs_on)\n[core/Test Python package/Load tox environments]   |     print(json.dumps(default_runs_on, indent=2))\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # Default string parameters which can be overwritten by each env\n[core/Test Python package/Load tox environments]   |     string_parameters = {\n[core/Test Python package/Load tox environments]   |         \"posargs\": posargs,\n[core/Test Python package/Load tox environments]   |         \"toxdeps\": toxdeps,\n[core/Test Python package/Load tox environments]   |         \"toxargs\": toxargs,\n[core/Test Python package/Load tox environments]   |         \"pytest\": pytest,\n[core/Test Python package/Load tox environments]   |         \"pytest-results-summary\": pytest_results_summary,\n[core/Test Python package/Load tox environments]   |         \"coverage\": coverage,\n[core/Test Python package/Load tox environments]   |         \"conda\": conda,\n[core/Test Python package/Load tox environments]   |         \"setenv\": setenv,\n[core/Test Python package/Load tox environments]   |         \"display\": display,\n[core/Test Python package/Load tox environments]   |         \"cache-path\": cache_path,\n[core/Test Python package/Load tox environments]   |         \"cache-key\": cache_key,\n[core/Test Python package/Load tox environments]   |         \"cache-restore-keys\": cache_restore_keys,\n[core/Test Python package/Load tox environments]   |         \"timeout-minutes\": timeout_minutes,\n[core/Test Python package/Load tox environments]   |     }\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # Create matrix\n[core/Test Python package/Load tox environments]   |     matrix = {\"include\": []}\n[core/Test Python package/Load tox environments]   |     for env in envs:\n[core/Test Python package/Load tox environments]   |         matrix[\"include\"].append(get_matrix_item(\n[core/Test Python package/Load tox environments]   |             env,\n[core/Test Python package/Load tox environments]   |             global_libraries=global_libraries,\n[core/Test Python package/Load tox environments]   |             global_string_parameters=string_parameters,\n[core/Test Python package/Load tox environments]   |             runs_on=default_runs_on,\n[core/Test Python package/Load tox environments]   |             default_python=default_python,\n[core/Test Python package/Load tox environments]   |         ))\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # Output matrix\n[core/Test Python package/Load tox environments]   |     print(json.dumps(matrix, indent=2))\n[core/Test Python package/Load tox environments]   |     with open(os.environ[\"GITHUB_OUTPUT\"], \"a\") as f:\n[core/Test Python package/Load tox environments]   |         f.write(f\"matrix={json.dumps(matrix)}\\n\")\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | def get_matrix_item(env, global_libraries, global_string_parameters,\n[core/Test Python package/Load tox environments]   |                     runs_on, default_python):\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # define spec for each matrix include (+ global_string_parameters)\n[core/Test Python package/Load tox environments]   |     item = {\n[core/Test Python package/Load tox environments]   |         \"os\": None,\n[core/Test Python package/Load tox environments]   |         \"toxenv\": None,\n[core/Test Python package/Load tox environments]   |         \"python_version\": None,\n[core/Test Python package/Load tox environments]   |         \"name\": None,\n[core/Test Python package/Load tox environments]   |         \"pytest_flag\": None,\n[core/Test Python package/Load tox environments]   |         \"libraries_brew\": None,\n[core/Test Python package/Load tox environments]   |         \"libraries_brew_cask\": None,\n[core/Test Python package/Load tox environments]   |         \"libraries_apt\": None,\n[core/Test Python package/Load tox environments]   |         \"libraries_choco\": None,\n[core/Test Python package/Load tox environments]   |         \"cache-path\": None,\n[core/Test Python package/Load tox environments]   |         \"cache-key\": None,\n[core/Test Python package/Load tox environments]   |         \"cache-restore-keys\": None,\n[core/Test Python package/Load tox environments]   |         \"timeout-minutes\": None,\n[core/Test Python package/Load tox environments]   |     }\n[core/Test Python package/Load tox environments]   |     for string_param, default in global_string_parameters.items():\n[core/Test Python package/Load tox environments]   |         env_value = env.get(string_param)\n[core/Test Python package/Load tox environments]   |         item[string_param] = default if env_value is None else env_value\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # set os and toxenv\n[core/Test Python package/Load tox environments]   |     for k, v in runs_on.items():\n[core/Test Python package/Load tox environments]   |         if k in env:\n[core/Test Python package/Load tox environments]   |             platform = k\n[core/Test Python package/Load tox environments]   |             item[\"os\"] = env.get(\"runs-on\", v)\n[core/Test Python package/Load tox environments]   |             item[\"toxenv\"] = env[k]\n[core/Test Python package/Load tox environments]   |     assert item[\"os\"] is not None and item[\"toxenv\"] is not None\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # set python_version\n[core/Test Python package/Load tox environments]   |     python_version = env.get(\"python-version\")\n[core/Test Python package/Load tox environments]   |     m = re.search(\"^py(2|3)([0-9]+)\", item[\"toxenv\"])\n[core/Test Python package/Load tox environments]   |     if python_version is not None:\n[core/Test Python package/Load tox environments]   |         item[\"python_version\"] = python_version\n[core/Test Python package/Load tox environments]   |     elif m is not None:\n[core/Test Python package/Load tox environments]   |         major, minor = m.groups()\n[core/Test Python package/Load tox environments]   |         item[\"python_version\"] = f\"{major}.{minor}\"\n[core/Test Python package/Load tox environments]   |     else:\n[core/Test Python package/Load tox environments]   |         item[\"python_version\"] = env.get(\"default_python\") or default_python\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # set name\n[core/Test Python package/Load tox environments]   |     item[\"name\"] = env.get(\"name\") or f'{item[\"toxenv\"]} ({item[\"os\"]})'\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # set pytest_flag\n[core/Test Python package/Load tox environments]   |     item[\"pytest_flag\"] = \"\"\n[core/Test Python package/Load tox environments]   |     sep = r\"\\\\\" if platform == \"windows\" else \"/\"\n[core/Test Python package/Load tox environments]   |     if item[\"pytest\"] == \"true\" and \"codecov\" in item.get(\"coverage\", \"\"):\n[core/Test Python package/Load tox environments]   |         item[\"pytest_flag\"] += (\n[core/Test Python package/Load tox environments]   |             rf\"--cov-report=xml:${{GITHUB_WORKSPACE}}{sep}coverage.xml \")\n[core/Test Python package/Load tox environments]   |     if item[\"pytest\"] == \"true\" and item[\"pytest-results-summary\"] == \"true\":\n[core/Test Python package/Load tox environments]   |         item[\"pytest_flag\"] += rf\"--junitxml ${{GITHUB_WORKSPACE}}{sep}results.xml \"\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # set libraries\n[core/Test Python package/Load tox environments]   |     env_libraries = env.get(\"libraries\")\n[core/Test Python package/Load tox environments]   |     if isinstance(env_libraries, str) and len(env_libraries.strip()) == 0:\n[core/Test Python package/Load tox environments]   |         env_libraries = {}  # no libraries requested for environment\n[core/Test Python package/Load tox environments]   |     libraries = global_libraries if env_libraries is None else env_libraries\n[core/Test Python package/Load tox environments]   |     for manager in [\"brew\", \"brew_cask\", \"apt\", \"choco\"]:\n[core/Test Python package/Load tox environments]   |         item[f\"libraries_{manager}\"] = \" \".join(libraries.get(manager, []))\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # set \"auto\" conda value\n[core/Test Python package/Load tox environments]   |     if item[\"conda\"] == \"auto\":\n[core/Test Python package/Load tox environments]   |         item[\"conda\"] = \"true\" if \"conda\" in item[\"toxenv\"] else \"false\"\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # inject toxdeps for conda\n[core/Test Python package/Load tox environments]   |     if item[\"conda\"] == \"true\" and \"tox-conda\" not in item[\"toxdeps\"].lower():\n[core/Test Python package/Load tox environments]   |         item[\"toxdeps\"] = (\"tox-conda \" + item[\"toxdeps\"]).strip()\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # make timeout-minutes a number\n[core/Test Python package/Load tox environments]   |     item[\"timeout-minutes\"] = int(item[\"timeout-minutes\"])\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     # verify values\n[core/Test Python package/Load tox environments]   |     assert item[\"pytest\"] in {\"true\", \"false\"}\n[core/Test Python package/Load tox environments]   |     assert item[\"conda\"] in {\"true\", \"false\"}\n[core/Test Python package/Load tox environments]   |     assert item[\"display\"] in {\"true\", \"false\"}\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   |     return item\n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | \n[core/Test Python package/Load tox environments]   | if __name__ == \"__main__\":\n[core/Test Python package/Load tox environments]   |     load_tox_targets()\n[core/Test Python package/Load tox environments]   \u2705  Success - Main cat tox_matrix.py\n[core/Test Python package/Load tox environments] \u2b50 Run Main python tox_matrix.py --envs \"- linux: py311\n\" --libraries \"apt:\n  - libopenjp2-7\n\" \\\n--posargs \"-n auto\" --toxdeps \"tox-pypi-filter\" \\\n--toxargs \"\" --pytest \"true\" \\\n--pytest-results-summary \"false\" \\\n--coverage \"codecov\" --conda \"auto\" \\\n--setenv \"\" \\\n--display \"false\" --cache-path \"\" \\\n--cache-key \"\" --cache-restore-keys \"\" \\\n--runs-on \"\" --default-python \"3.x\" \\\n--timeout-minutes \"360\"\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[sh -e /var/run/act/workflow/set-outputs.sh] user= workdir=\n[core/Test Python package/Load tox environments]   | [\n[core/Test Python package/Load tox environments]   |   {\n[core/Test Python package/Load tox environments]   |     \"linux\": \"py311\"\n[core/Test Python package/Load tox environments]   |   }\n[core/Test Python package/Load tox environments]   | ]\n[core/Test Python package/Load tox environments]   | {\n[core/Test Python package/Load tox environments]   |   \"brew\": [],\n[core/Test Python package/Load tox environments]   |   \"brew-cask\": [],\n[core/Test Python package/Load tox environments]   |   \"apt\": [\n[core/Test Python package/Load tox environments]   |     \"libopenjp2-7\"\n[core/Test Python package/Load tox environments]   |   ],\n[core/Test Python package/Load tox environments]   |   \"choco\": []\n[core/Test Python package/Load tox environments]   | }\n[core/Test Python package/Load tox environments]   | {\n[core/Test Python package/Load tox environments]   |   \"linux\": \"ubuntu-latest\",\n[core/Test Python package/Load tox environments]   |   \"macos\": \"macos-latest\",\n[core/Test Python package/Load tox environments]   |   \"windows\": \"windows-latest\"\n[core/Test Python package/Load tox environments]   | }\n[core/Test Python package/Load tox environments]   | {\n[core/Test Python package/Load tox environments]   |   \"include\": [\n[core/Test Python package/Load tox environments]   |     {\n[core/Test Python package/Load tox environments]   |       \"os\": \"ubuntu-latest\",\n[core/Test Python package/Load tox environments]   |       \"toxenv\": \"py311\",\n[core/Test Python package/Load tox environments]   |       \"python_version\": \"3.11\",\n[core/Test Python package/Load tox environments]   |       \"name\": \"py311 (ubuntu-latest)\",\n[core/Test Python package/Load tox environments]   |       \"pytest_flag\": \"--cov-report=xml:${GITHUB_WORKSPACE}/coverage.xml \",\n[core/Test Python package/Load tox environments]   |       \"libraries_brew\": \"\",\n[core/Test Python package/Load tox environments]   |       \"libraries_brew_cask\": \"\",\n[core/Test Python package/Load tox environments]   |       \"libraries_apt\": \"libopenjp2-7\",\n[core/Test Python package/Load tox environments]   |       \"libraries_choco\": \"\",\n[core/Test Python package/Load tox environments]   |       \"cache-path\": \"\",\n[core/Test Python package/Load tox environments]   |       \"cache-key\": \"\",\n[core/Test Python package/Load tox environments]   |       \"cache-restore-keys\": \"\",\n[core/Test Python package/Load tox environments]   |       \"timeout-minutes\": 360,\n[core/Test Python package/Load tox environments]   |       \"posargs\": \"-n auto\",\n[core/Test Python package/Load tox environments]   |       \"toxdeps\": \"tox-pypi-filter\",\n[core/Test Python package/Load tox environments]   |       \"toxargs\": \"\",\n[core/Test Python package/Load tox environments]   |       \"pytest\": \"true\",\n[core/Test Python package/Load tox environments]   |       \"pytest-results-summary\": \"false\",\n[core/Test Python package/Load tox environments]   |       \"coverage\": \"codecov\",\n[core/Test Python package/Load tox environments]   |       \"conda\": \"false\",\n[core/Test Python package/Load tox environments]   |       \"setenv\": \"\",\n[core/Test Python package/Load tox environments]   |       \"display\": \"false\"\n[core/Test Python package/Load tox environments]   |     }\n[core/Test Python package/Load tox environments]   |   ]\n[core/Test Python package/Load tox environments]   | }\n[core/Test Python package/Load tox environments]   \u2705  Success - Main python tox_matrix.py --envs \"- linux: py311\n\" --libraries \"apt:\n  - libopenjp2-7\n\" \\\n--posargs \"-n auto\" --toxdeps \"tox-pypi-filter\" \\\n--toxargs \"\" --pytest \"true\" \\\n--pytest-results-summary \"false\" \\\n--coverage \"codecov\" --conda \"auto\" \\\n--setenv \"\" \\\n--display \"false\" --cache-path \"\" \\\n--cache-key \"\" --cache-restore-keys \"\" \\\n--runs-on \"\" --default-python \"3.x\" \\\n--timeout-minutes \"360\"\n[core/Test Python package/Load tox environments]   \u2699  ::set-output:: matrix={\"include\": [{\"os\": \"ubuntu-latest\", \"toxenv\": \"py311\", \"python_version\": \"3.11\", \"name\": \"py311 (ubuntu-latest)\", \"pytest_flag\": \"--cov-report=xml:${GITHUB_WORKSPACE}/coverage.xml \", \"libraries_brew\": \"\", \"libraries_brew_cask\": \"\", \"libraries_apt\": \"libopenjp2-7\", \"libraries_choco\": \"\", \"cache-path\": \"\", \"cache-key\": \"\", \"cache-restore-keys\": \"\", \"timeout-minutes\": 360, \"posargs\": \"-n auto\", \"toxdeps\": \"tox-pypi-filter\", \"toxargs\": \"\", \"pytest\": \"true\", \"pytest-results-summary\": \"false\", \"coverage\": \"codecov\", \"conda\": \"false\", \"setenv\": \"\", \"display\": \"false\"}]}\n[core/Test Python package/Load tox environments] \u2b50 Run Post actions/setup-python@v4\n[core/Test Python package/Load tox environments]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[core/Test Python package/Load tox environments]   \u2705  Success - Post actions/setup-python@v4\n[core/Test Python package/Load tox environments] \ud83c\udfc1  Job succeeded\n[core/Test Python package/py311 (ubuntu-latest)] \ud83d\ude80  Start image=crawlergpt:latest\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/sunpy-sunpy] user=0 workdir=\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/ConorMacBride/install-package' # ref=main\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Pre Install dependencies\n[core/Test Python package/py311 (ubuntu-latest)]   \u2705  Success - Pre Install dependencies\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/s-weigand/setup-conda' # ref=v1\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/pyvista/setup-headless-display-action' # ref=v2\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Pre Setup headless display\n[core/Test Python package/py311 (ubuntu-latest)]   \u2705  Success - Pre Setup headless display\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/test-summary/action' # ref=v2\n[core/Test Python package/py311 (ubuntu-latest)]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[core/Test Python package/py311 (ubuntu-latest)] \ud83e\uddea  Matrix: map[cache-key: cache-path: cache-restore-keys: conda:false coverage:codecov display:false libraries_apt:libopenjp2-7 libraries_brew: libraries_brew_cask: libraries_choco: name:py311 (ubuntu-latest) os:ubuntu-latest posargs:-n auto pytest:true pytest-results-summary:false pytest_flag:--cov-report=xml:${GITHUB_WORKSPACE}/coverage.xml  python_version:3.11 setenv: timeout-minutes:360 toxargs: toxdeps:tox-pypi-filter toxenv:py311]\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Main actions/checkout@v3\n[core/Test Python package/py311 (ubuntu-latest)]   \u2705  Success - Main actions/checkout@v3\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Main Install dependencies\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker cp src=/tmp/act-cache/22cea5fd-9c69-492b-99a8-bbc22da52ce8/act/ConorMacBride-install-package@main/ dst=/var/run/act/actions/ConorMacBride-install-package@main/\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/ConorMacBride-install-package@main/] user=0 workdir=\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Main Install apt packages\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker exec cmd=[sh -e /var/run/act/workflow/2-composite-2.sh] user= workdir=\n[core/Test Python package/py311 (ubuntu-latest)]   | \n[core/Test Python package/py311 (ubuntu-latest)]   | WARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n[core/Test Python package/py311 (ubuntu-latest)]   | \n[core/Test Python package/py311 (ubuntu-latest)]   | Get:1 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ InRelease [3622 B]\n[core/Test Python package/py311 (ubuntu-latest)]   | Ign:2 https://dl.hhvm.com/ubuntu focal InRelease\n[core/Test Python package/py311 (ubuntu-latest)]   | Hit:3 http://archive.ubuntu.com/ubuntu focal InRelease\n[core/Test Python package/py311 (ubuntu-latest)]   | Hit:4 http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu focal InRelease\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:5 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Err:6 https://dl.hhvm.com/ubuntu focal Release\n[core/Test Python package/py311 (ubuntu-latest)]   |   Certificate verification failed: The certificate is NOT trusted. The certificate issuer is unknown.  Could not handshake: Error in the certificate verification. [IP: 108.157.214.102 443]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:7 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:8 http://dl.google.com/linux/chrome/deb stable InRelease [1825 B]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:9 https://packages.microsoft.com/ubuntu/20.04/prod focal InRelease [3611 B]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:10 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:11 https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/ Packages [81.0 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Hit:12 https://adoptopenjdk.jfrog.io/adoptopenjdk/deb focal InRelease\n[core/Test Python package/py311 (ubuntu-latest)]   | Err:8 http://dl.google.com/linux/chrome/deb stable InRelease\n[core/Test Python package/py311 (ubuntu-latest)]   |   The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:13 http://security.ubuntu.com/ubuntu focal-security/main i386 Packages [764 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:14 http://security.ubuntu.com/ubuntu focal-security/restricted i386 Packages [36.9 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:15 http://security.ubuntu.com/ubuntu focal-security/multiverse i386 Packages [8141 B]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:16 http://security.ubuntu.com/ubuntu focal-security/multiverse amd64 Packages [28.5 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:17 http://security.ubuntu.com/ubuntu focal-security/universe amd64 Packages [1066 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:18 https://packages.microsoft.com/ubuntu/20.04/prod focal/main all Packages [2521 B]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:19 http://security.ubuntu.com/ubuntu focal-security/universe i386 Packages [744 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:20 http://security.ubuntu.com/ubuntu focal-security/restricted amd64 Packages [2479 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:21 https://packages.microsoft.com/ubuntu/20.04/prod focal/main amd64 Packages [211 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:22 http://security.ubuntu.com/ubuntu focal-security/main amd64 Packages [2856 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:23 http://archive.ubuntu.com/ubuntu focal-updates/restricted amd64 Packages [2636 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:24 http://archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [1366 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:25 http://archive.ubuntu.com/ubuntu focal-updates/multiverse amd64 Packages [39.5 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:26 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [3336 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:27 http://archive.ubuntu.com/ubuntu focal-backports/universe amd64 Packages [28.6 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Get:28 http://archive.ubuntu.com/ubuntu focal-backports/main amd64 Packages [55.2 kB]\n[core/Test Python package/py311 (ubuntu-latest)]   | Reading package lists...\n[core/Test Python package/py311 (ubuntu-latest)]   | E: The repository 'https://dl.hhvm.com/ubuntu focal Release' no longer has a Release file.\n[core/Test Python package/py311 (ubuntu-latest)]   | W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://dl.google.com/linux/chrome/deb stable InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 4EB27DB2A3B88B8B\n[core/Test Python package/py311 (ubuntu-latest)]   \u274c  Failure - Main Install apt packages\n[core/Test Python package/py311 (ubuntu-latest)] exitcode '100': failure\n[core/Test Python package/py311 (ubuntu-latest)]   \u274c  Failure - Main Install dependencies\n[core/Test Python package/py311 (ubuntu-latest)] exitcode '100': failure\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Main Upload to Codecov\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker cp src=/tmp/act-cache/22cea5fd-9c69-492b-99a8-bbc22da52ce8/act/codecov-codecov-action@v3/ dst=/var/run/act/actions/codecov-codecov-action@v3/\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v3/] user=0 workdir=\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v3/dist/index.js] user= workdir=\n[core/Test Python package/py311 (ubuntu-latest)]   | Error: Cannot find module 'node:http'\n[core/Test Python package/py311 (ubuntu-latest)]   | Require stack:\n[core/Test Python package/py311 (ubuntu-latest)]   | - /run/act/actions/codecov-codecov-action@v3/dist/index.js\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:889:15)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Function.Module._load (internal/modules/cjs/loader.js:745:27)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Module.require (internal/modules/cjs/loader.js:961:19)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at require (internal/modules/cjs/helpers.js:92:18)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at /run/act/actions/codecov-codecov-action@v3/webpack:/codecov-action/external node-commonjs \"node:http\":1:1\n[core/Test Python package/py311 (ubuntu-latest)]   |     at /run/act/actions/codecov-codecov-action@v3/dist/index.js:24630:3\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Object.<anonymous> (/run/act/actions/codecov-codecov-action@v3/dist/index.js:24633:12)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Module._compile (internal/modules/cjs/loader.js:1072:14)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\n[core/Test Python package/py311 (ubuntu-latest)]   |     at Module.load (internal/modules/cjs/loader.js:937:32)\n[core/Test Python package/py311 (ubuntu-latest)]   \u274c  Failure - Main Upload to Codecov\n[core/Test Python package/py311 (ubuntu-latest)] exitcode '1': failure\n[core/Test Python package/py311 (ubuntu-latest)] \u2b50 Run Post Install dependencies\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker cp src=/tmp/act-cache/22cea5fd-9c69-492b-99a8-bbc22da52ce8/act/ConorMacBride-install-package@main/ dst=/var/run/act/actions/ConorMacBride-install-package@main/\n[core/Test Python package/py311 (ubuntu-latest)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/ConorMacBride-install-package@main/] user=0 workdir=\n[core/Test Python package/py311 (ubuntu-latest)]   \u2705  Success - Post Install dependencies\n[core/Test Python package/py311 (ubuntu-latest)] \ud83c\udfc1  Job failed\n",
        "stderr": "time=\"2023-07-01T11:20:08+02:00\" level=error msg=\"Failed to parse 'fail-fast' option: strconv.ParseBool: parsing \\\"${{ inputs.fail-fast }}\\\": invalid syntax\"\nError: Job '${{ matrix.name }}' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/sunpy-sunpy/.github/workflows/ci-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "eab7fcf5-3763-4063-97b5-93f0d5ea832f",
        "build_tool": "pytest",
        "elapsed_time": 107.75093078613281
    }
}