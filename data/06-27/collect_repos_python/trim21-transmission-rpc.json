{
    "repository": "trim21/transmission-rpc",
    "stars": 111,
    "language": "python",
    "size": 1714,
    "clone_url": "https://github.com/trim21/transmission-rpc.git",
    "timestamp": "2023-07-01T12:21:11.068730Z",
    "clone_success": true,
    "number_of_actions": 5,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_client",
                "name": "test_client_parse_url[https-a+2da/s a?s=d$-a@as +@45/:&*^-127.0.0.1-2333-/transmission/]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_parse_url[http-/-None-127.0.0.1-2333-/transmission/]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_add_kwargs",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_add_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_add_magnet",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_add_pathlib_path",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_add_read_file_in_base64",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_client_add_torrent_bytes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_add_magnet",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_add_torrent_fd",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_add_torrent_http",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_stop",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_torrent_start_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_session_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_free_space",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_session_stats",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_wrong_logger",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_torrent_attr_type",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_real_torrent_get_files",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_raise_unauthorized[401]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_raise_unauthorized[403]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_ensure_location_str_relative",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_client",
                "name": "test_ensure_location_str_absolute",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_id_raise[1.0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_id_raise[non-hash-string]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids[recently-active-recently-active]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids[51ba7d0dd45ab9b9564329c33f4f97493b677924-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids[arg2-expected2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids[3-expected3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids[None-expected4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids_value_error[not-recently-active]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids_value_error[non-hash-string]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids_value_error[-1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids_value_error[1.1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids_value_error[5:10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_parse_id",
                "name": "test_parse_torrent_ids_value_error[5,6,8,9,10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_torrent",
                "name": "test_initial",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_torrent",
                "name": "test_non_active",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_torrent",
                "name": "test_attributes",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_torrent",
                "name": "test_status",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[512-expected0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1024-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1048575-expected2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1048576-expected3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1073741824-expected4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1099511627776-expected5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1125899906842624-expected6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_size[1152921504606846976-expected7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[512-expected0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1024-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1048575-expected2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1048576-expected3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1073741824-expected4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1099511627776-expected5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1125899906842624-expected6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_speed[1152921504606846976-expected7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta0-0 00:00:00]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta1-0 00:00:10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta2-0 00:01:00]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta3-0 00:01:01]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta4-0 01:01:01]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta5-1 01:01:01]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_timedelta[delta6-13 18:14:20]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_from_url[http://a:b@127.0.0.1:9092/transmission/rpc-kwargs0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_from_url[http://127.0.0.1/transmission/rpc-kwargs1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_from_url[https://127.0.0.1/tr/transmission/rpc-kwargs2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_from_url[https://127.0.0.1/-kwargs3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \ud83d\ude80  Start image=crawlergpt:latest\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc] user=0 workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2601  git clone 'https://github.com/trim21/setup-poetry' # ref=dist/v1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2601  git clone 'https://github.com/trim21/install-poetry-project' # ref=dist/v1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \ud83e\uddea  Matrix: map[python:3.7 transmission:version-3.00-r8]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \u2b50 Run Main actions/checkout@v3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2705  Success - Main actions/checkout@v3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \u2b50 Run Main actions/setup-python@v4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/69a8e64f-ee17-4723-bc49-8bb17f4c22fc/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2753  ::group::Installed versions\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? false\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::explicit? true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::matched: 3.7.11\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Successfully set up CPython (3.7.11)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2753  ::endgroup::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2705  Success - Main actions/setup-python@v4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-output:: python-version=3.7.11\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \u2b50 Run Main trim21/setup-poetry@dist/v1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/69a8e64f-ee17-4723-bc49-8bb17f4c22fc/act/trim21-setup-poetry@dist-v1/ dst=/var/run/act/actions/trim21-setup-poetry@dist-v1/\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/trim21-setup-poetry@dist-v1/] user=0 workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/trim21-setup-poetry@dist-v1/dist/index.js] user= workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | poetry version not specified, latest poetry will be installed\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | using python version Python 3.7.11 (default, Jul  5 2021, 20:57:17) \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [GCC 9.3.0]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cache with key trim21-tool-poetry-6-163cc79a4f52680d2769b05fbe75381f\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::[\"trim21-tool-poetry-6-163cc79a4f52680d2769b05fbe75381f\"]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/cache?keys=trim21-tool-poetry-6-163cc79a4f52680d2769b05fbe75381f&version=08f4eea948e95c1a50e3320e0b0349b338417ba7981f54be70aeb3e42575807b\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | expected cache key \"trim21-tool-poetry-6-163cc79a4f52680d2769b05fbe75381f\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | restored cache key undefined\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | hit primary cache key false\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [command]/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m venv .venv\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [command]/home/runneradmin/.poetry/.venv/bin/python -m pip install poetry==1.5.1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting poetry==1.5.1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading poetry-1.5.1-py3-none-any.whl (225 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting keyring<24.0.0,>=23.9.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading keyring-23.13.1-py3-none-any.whl (37 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting lockfile<0.13.0,>=0.12.2\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading lockfile-0.12.2-py2.py3-none-any.whl (13 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting build<0.11.0,>=0.10.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading build-0.10.0-py3-none-any.whl (17 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting pexpect<5.0.0,>=4.7.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting filelock<4.0.0,>=3.8.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting shellingham<2.0,>=1.5\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading shellingham-1.5.0.post1-py2.py3-none-any.whl (9.4 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting cachecontrol[filecache]<0.13.0,>=0.12.9\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading CacheControl-0.12.14-py2.py3-none-any.whl (21 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting installer<0.8.0,>=0.7.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading installer-0.7.0-py3-none-any.whl (453 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting virtualenv<21.0.0,>=20.22.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting html5lib<2.0,>=1.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting cleo<3.0.0,>=2.0.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading cleo-2.0.1-py3-none-any.whl (77 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting requests-toolbelt<2,>=0.9.1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting jsonschema<5.0.0,>=4.10.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading jsonschema-4.17.3-py3-none-any.whl (90 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting platformdirs<4.0.0,>=3.0.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting pyproject-hooks<2.0.0,>=1.0.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting urllib3<2.0.0,>=1.26.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting trove-classifiers>=2022.5.19\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading trove_classifiers-2023.5.24-py3-none-any.whl (13 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting tomli<3.0.0,>=2.0.1; python_version < \"3.11\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting poetry-core==1.6.1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading poetry_core-1.6.1-py3-none-any.whl (450 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting dulwich<0.22.0,>=0.21.2\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading dulwich-0.21.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (508 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting poetry-plugin-export<2.0.0,>=1.4.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading poetry_plugin_export-1.4.0-py3-none-any.whl (10 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting importlib-metadata>=4.4; python_version < \"3.10\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting tomlkit<1.0.0,>=0.11.4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting requests<3.0,>=2.18\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting crashtest<0.5.0,>=0.4.1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading crashtest-0.4.1-py3-none-any.whl (7.6 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting pkginfo<2.0.0,>=1.9.4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting packaging>=20.4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting backports.cached-property<2.0.0,>=1.0.2; python_version < \"3.8\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading backports.cached_property-1.0.2-py3-none-any.whl (6.1 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting jaraco.classes\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting jeepney>=0.4.2; sys_platform == \"linux\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting SecretStorage>=3.2; sys_platform == \"linux\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting importlib-resources; python_version < \"3.9\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting ptyprocess>=0.5\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting msgpack>=0.5.2\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading msgpack-1.0.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (299 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting distlib<1,>=0.3.6\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting six>=1.9\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting webencodings\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting rapidfuzz<3.0.0,>=2.2.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading rapidfuzz-2.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading pyrsistent-0.19.3-py3-none-any.whl (57 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting pkgutil-resolve-name>=1.3.10; python_version < \"3.9\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading pkgutil_resolve_name-1.3.10-py3-none-any.whl (4.7 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting typing-extensions; python_version < \"3.8\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting attrs>=17.4.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting zipp>=0.5\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting charset-normalizer<4,>=2\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting certifi>=2017.4.17\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting idna<4,>=2.5\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting more-itertools\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting cryptography>=2.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.3 MB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting cffi>=1.12\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading cffi-1.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (427 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Collecting pycparser\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Installing collected packages: more-itertools, jaraco.classes, jeepney, pycparser, cffi, cryptography, SecretStorage, zipp, importlib-resources, typing-extensions, importlib-metadata, keyring, lockfile, packaging, tomli, pyproject-hooks, build, ptyprocess, pexpect, filelock, shellingham, charset-normalizer, certifi, urllib3, idna, requests, msgpack, cachecontrol, installer, distlib, platformdirs, virtualenv, six, webencodings, html5lib, rapidfuzz, crashtest, cleo, requests-toolbelt, pyrsistent, pkgutil-resolve-name, attrs, jsonschema, trove-classifiers, poetry-core, dulwich, poetry-plugin-export, tomlkit, pkginfo, backports.cached-property, poetry\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Successfully installed SecretStorage-3.3.3 attrs-23.1.0 backports.cached-property-1.0.2 build-0.10.0 cachecontrol-0.12.14 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 cleo-2.0.1 crashtest-0.4.1 cryptography-41.0.1 distlib-0.3.6 dulwich-0.21.5 filelock-3.12.2 html5lib-1.1 idna-3.4 importlib-metadata-6.7.0 importlib-resources-5.12.0 installer-0.7.0 jaraco.classes-3.2.3 jeepney-0.8.0 jsonschema-4.17.3 keyring-23.13.1 lockfile-0.12.2 more-itertools-9.1.0 msgpack-1.0.5 packaging-23.1 pexpect-4.8.0 pkginfo-1.9.6 pkgutil-resolve-name-1.3.10 platformdirs-3.8.0 poetry-1.5.1 poetry-core-1.6.1 poetry-plugin-export-1.4.0 ptyprocess-0.7.0 pycparser-2.21 pyproject-hooks-1.0.0 pyrsistent-0.19.3 rapidfuzz-2.15.1 requests-2.31.0 requests-toolbelt-1.0.0 shellingham-1.5.0.post1 six-1.16.0 tomli-2.0.1 tomlkit-0.11.8 trove-classifiers-2023.5.24 typing-extensions-4.7.0 urllib3-1.26.16 virtualenv-20.23.1 webencodings-0.5.1 zipp-3.15.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | WARNING: You are using pip version 20.1.1; however, version 23.1.2 is available.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | You should consider upgrading via the '/home/runneradmin/.poetry/.venv/bin/python -m pip install --upgrade pip' command.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cache with key trim21-tool-poetry-6-163cc79a4f52680d2769b05fbe75381f\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.poetry/.venv'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.poetry/.venv\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Cache Paths:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/.poetry/.venv\"]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Archive Path: /tmp/955f115b-e5d7-42ea-907b-0136944e1aeb/cache.tzst\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc --files-from manifest.txt --use-compress-program zstdmt\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::File Size: 19780539\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Reserving Cache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/caches\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Upload cache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/caches/1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Awaiting all uploads\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Uploading chunk of size 19780539 bytes at offset 0 with content range: bytes 0-19780538/*\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Commiting cache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Cache Size: ~19 MB (19780539 B)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/caches/1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Cache saved successfully\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2705  Success - Main trim21/setup-poetry@dist/v1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::add-path:: /home/runneradmin/.poetry/bin\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \u2b50 Run Main trim21/install-poetry-project@dist/v1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/69a8e64f-ee17-4723-bc49-8bb17f4c22fc/act/trim21-install-poetry-project@dist-v1/ dst=/var/run/act/actions/trim21-install-poetry-project@dist-v1/\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/trim21-install-poetry-project@dist-v1/] user=0 workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/trim21-install-poetry-project@dist-v1/dist/index.js] user= workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | trim21/install-poetry-project@1.2.20\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | python version: Python 3.7.11 (default, Jul  5 2021, 20:57:17) \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [GCC 9.3.0]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | poetry version: 1.5.1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | restore cache with key poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f-8f2b15c07af4f340373d7e329229a672\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | fallback to [\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \"poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \"poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::/tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/.venv\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::[\"poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f-8f2b15c07af4f340373d7e329229a672\",\"poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f\",\"poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865\"]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/cache?keys=poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f-8f2b15c07af4f340373d7e329229a672%252Cpoetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f%252Cpoetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865&version=647b9347254d4799106a275582878ce3e85ef3b08ed5573201009f3724c6c5b1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [command]/home/runneradmin/.poetry/bin/poetry config virtualenvs.in-project true\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [command]/home/runneradmin/.poetry/bin/poetry install --sync\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Creating virtualenv transmission-rpc in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/.venv\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Installing dependencies from lock file\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Package operations: 22 installs, 0 updates, 1 removal\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Removing setuptools (68.0.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing typing-extensions (4.7.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing zipp (3.15.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing importlib-metadata (6.7.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing exceptiongroup (1.1.1)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing iniconfig (2.0.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing packaging (23.1)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing pluggy (1.2.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing tomli (2.0.1)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing certifi (2023.5.7)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing charset-normalizer (3.1.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing idna (3.4)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing multidict (6.0.4)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing pytest (7.4.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing types-urllib3 (1.26.25.13)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing urllib3 (2.0.3)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing coverage (7.2.7)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing pytest-github-actions-annotate-failures (0.2.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing pytz (2023.3)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing requests (2.31.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing ruff (0.0.275)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing types-requests (2.31.0.1)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |   \u2022 Installing yarl (1.9.2)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Installing the current project: transmission-rpc (4.3.0)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cache with key poetry-deps-7-39fd489f1de00d6f97ad96b9ef8c9865-5bbcfe7b04de51571359a93f5454d85f-8f2b15c07af4f340373d7e329229a672\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::/tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/.venv\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Search path '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/.venv'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Matched: .venv\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Cache Paths:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::[\".venv\"]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Archive Path: /tmp/db726955-5c56-4afa-a4aa-f0b0fb08189b/cache.tzst\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc --files-from manifest.txt --use-compress-program zstdmt\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::File Size: 9957131\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Reserving Cache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/caches\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Saving Cache (ID: 2)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Upload cache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/caches/2\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Awaiting all uploads\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Uploading chunk of size 9957131 bytes at offset 0 with content range: bytes 0-9957130/*\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Commiting cache\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Cache Size: ~9 MB (9957131 B)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:38477/_apis/artifactcache/caches/2\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | Cache saved successfully\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2705  Success - Main trim21/install-poetry-project@dist/v1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u2699  ::add-path:: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/.venv/bin\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \u2b50 Run Main test\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ============================= test session starts ==============================\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | configfile: pyproject.toml\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | plugins: github-actions-annotate-failures-0.2.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | collected 67 items\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/test_client.py ........EEEEEEEE.EE....                             [ 34%]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/test_parse_id.py .............                                     [ 53%]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/test_torrent.py ....                                               [ 59%]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/test_utils.py ...........................                          [100%]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ==================================== ERRORS ====================================\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ____________________ ERROR at setup of test_real_add_magnet ____________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ef95a10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ecf0cd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ef95a10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ecf06d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ecf0cd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992f173640>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992f2bd1d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ecf06d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992f2bd1d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | __________________ ERROR at setup of test_real_add_torrent_fd __________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ec89250>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ec898d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ec89250>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ec89790>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ec898d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992ec694b0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992eda40d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ec89790>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992eda40d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _________________ ERROR at setup of test_real_add_torrent_http _________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ebe8e10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ebe8950>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ebe8e10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992ed160f0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ebe8750>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ebe8950>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ebe8750>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _______________________ ERROR at setup of test_real_stop _______________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ec63910>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ec7fe90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ec63910>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992efd3990>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ec7fe90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992ec25960>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992efd3c90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992efd3990>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992efd3c90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ________________ ERROR at setup of test_real_torrent_start_all _________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ed004d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ed00ed0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ed004d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992ec21aa0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ed00e50>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ed00ed0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ed00e50>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ___________________ ERROR at setup of test_real_session_get ____________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ec7f590>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ec7fa90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ec7f590>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992edad460>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992efd3690>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ec7fa90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992efd3690>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ____________________ ERROR at setup of test_real_free_space ____________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ece2c10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ece2210>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ece2c10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992f165c80>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ece2790>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ece2210>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ece2790>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | __________________ ERROR at setup of test_real_session_stats ___________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ecf0910>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ed00950>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ecf0910>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992e93be60>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ed003d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ed00950>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ed003d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ________________ ERROR at setup of test_real_torrent_attr_type _________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ed9e710>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ec78610>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ed9e710>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992eb98320>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ec78510>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ec78610>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ec78510>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ________________ ERROR at setup of test_real_torrent_get_files _________________\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:204: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     raise err\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | address = ('127.0.0.1', 8080), timeout = 30.0, source_address = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | socket_options = [(6, 1, 1)]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         address: tuple[str, int],\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         source_address: tuple[str, int] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Connect to *address* and return the socket object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         port)``) and return the socket object.  Passing the optional\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         *timeout* parameter will set the timeout on the socket instance\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for the socket to bind as a source address before making the connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         An host of '' or port 0 tells the OS to use the default.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         host, port = address\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if host.startswith(\"[\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host = host.strip(\"[]\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # The original create_connection function always returns all records.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         family = allowed_gai_family()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             host.encode(\"idna\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except UnicodeError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             af, socktype, proto, canonname, sa = res\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 sock = socket.socket(af, socktype, proto)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # If provided, set socket level options before connecting.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 _set_socket_options(sock, socket_options)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.settimeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if source_address:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     sock.bind(source_address)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               sock.connect(sa)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ed7ad50>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | body = b'{\"tag\": 0, \"method\": \"session-get\", \"arguments\": {}}'\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv... 'Content-Length': '52', 'Content-Type': 'application/json', 'Authorization': 'Basic YWRtaW46bXktc2VjcmV0LXBhc3N3b3Jk'}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | redirect = False, assert_same_host = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), pool_timeout = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | decode_content = False, response_kw = {}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/transmission/rpc', query=None, fragment=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def urlopen(  # type: ignore[override]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body: _TYPE_BODY | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         headers: typing.Mapping[str, str] | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         retries: Retry | bool | int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         assert_same_host: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         pool_timeout: int | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_conn: bool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked: bool = False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         preload_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         decode_content: bool = True,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         **response_kw: typing.Any,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> BaseHTTPResponse:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         lowest level call for making a request, so you'll need to specify all\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         the raw details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            More commonly, it's appropriate to use a convenience method\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            such as :meth:`request`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         .. note::\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `release_conn` will only behave as expected if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` because we want to make\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            `preload_content=False` the default behaviour someday soon without\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |            breaking backwards compatibility.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param method:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param url:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             The URL to perform the request on.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param body:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param headers:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             these headers completely replace any pool-specific headers.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param retries:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Configure the number of retries to allow before raising a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             over different types of retries.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Pass an integer number to retry connection errors that many times,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             but no other types of errors. Pass zero to never retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``False``, then retries are disabled and any exception is raised\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the redirect response will be returned.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param redirect:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             will disable redirect, too.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param assert_same_host:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If ``True``, will make sure that the host of the pool requests is\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If specified, overrides the default timeout for this one\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request. It may be a float (in seconds) or an instance of\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             :class:`urllib3.util.Timeout`.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param pool_timeout:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If set and the pool is set to block=True, then this method will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connection is available within the time period.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool preload_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, the response's body will be preloaded into memory.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool decode_content:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, will attempt to decode the body based on the\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             'content-encoding' header.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param release_conn:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If False, then the urlopen call will not release the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool once a response is received (but will release if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             you read the entire contents of the response such as when\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             `preload_content=True`). This is useful if you're not preloading\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             the response's content immediately. You will need to call\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             back into the pool. If None, it takes the value of ``preload_content``\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             which defaults to ``True``.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param bool chunked:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             If True, urllib3 will send the body using chunked transfer\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             content-length form. Defaults to False.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param int body_pos:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             Position to seek to in file-like body in the event of a retry or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             auto-populate the value when needed.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         parsed_url = parse_url(url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         destination_scheme = parsed_url.scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if headers is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = self.headers\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not isinstance(retries, Retry):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if release_conn is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             release_conn = preload_content\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Check host\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if assert_same_host and not self.is_same_host(url):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise HostChangedError(self, url, retries)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if url.startswith(\"/\"):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(_encode_target(url))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             url = to_str(parsed_url.url)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         conn = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Track whether `conn` needs to be released before\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # the function recurses, the original value of `release_conn` will be\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # passed down into the recursive call, and its value will be respected.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # See issue #651 [1] for details.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         #\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         release_this_conn = release_conn\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.proxy, self.proxy_config, destination_scheme\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # have to copy the headers dict so we can safely change it without those\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # changes being reflected in anyone else's copy.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if not http_tunnel_required:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # complains about UnboundLocalError.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         err = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Keep track of whether we cleanly exited the except block. This\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # ensures we do proper cleanup in finally.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         clean_exit = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # Rewind body position, if needed. Record current position\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         # for future rewinds in the event of a redirect/retry.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         body_pos = set_file_position(body, body_pos)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Request a connection from the queue.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout_obj = self._get_timeout(timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._prepare_proxy(conn)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self._raise_timeout(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # If we're going to release the connection in ``finally:``, then\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # the response doesn't need to know about the connection. Otherwise\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # it will also try to release it and we'll have a double-release\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # mess.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_conn = conn if not release_conn else None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Make the request on the HTTPConnection object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response = self._make_request(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout_obj,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 response_conn=response_conn,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=preload_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=decode_content,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               **response_kw,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     enforce_content_length=enforce_content_length,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.endheaders()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.send(msg)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.connect()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.sock = self._new_conn()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _new_conn(self) -> socket.socket:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: New socket connection.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             sock = connection.create_connection(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 (self._dns_host, self.port),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self.timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 source_address=self.source_address,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 socket_options=self.socket_options,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except socket.gaierror as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NameResolutionError(self.host, self, e) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except SocketTimeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectTimeoutError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except OSError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise NewConnectionError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 self, f\"Failed to establish a new connection: {e}\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           ) from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ed7add0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:497: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | method = 'POST', url = '/transmission/rpc', response = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f992ed7ad50>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _stacktrace = <traceback object at 0x7f992e9ae7d0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def increment(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         method: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url: str | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         response: BaseHTTPResponse | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         error: Exception | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _pool: ConnectionPool | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         _stacktrace: TracebackType | None = None,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ) -> Retry:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param response: A response object, or None, if the server did not\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             return a response.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param Exception error: An error encountered during the request, or\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             None if the response was received successfully.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :return: A new ``Retry`` object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if self.total is False and error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Disabled, indicate to re-raise the error.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         total = self.total\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if total is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         connect = self.connect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         read = self.read\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect = self.redirect\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status_count = self.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         other = self.other\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         cause = \"unknown\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         status = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         redirect_location = None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if error and self._is_connection_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Connect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if connect is False:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif connect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error and self._is_read_error(error):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Read retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if read is False or method is None or not self._is_method_retryable(method):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise reraise(type(error), error, _stacktrace)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             elif read is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 read -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif error:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Other retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if other is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 other -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif response and response.get_redirect_location():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Redirect retry?\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if redirect is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = \"too many redirects\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             response_redirect_location = response.get_redirect_location()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response_redirect_location:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect_location = response_redirect_location\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # Incrementing because of a server error like a 500 in\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             # status_forcelist and the given method is in the allowed_methods\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cause = ResponseError.GENERIC_ERROR\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if response and response.status:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if status_count is not None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     status_count -= 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 status = response.status\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         history = self.history + (\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         new_retry = self.new(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             total=total,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             connect=connect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read=read,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             redirect=redirect,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             status=status_count,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             other=other,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             history=history,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if new_retry.is_exhausted():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             reason = error or ResponseError(cause)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | During handling of the above exception, another exception occurred:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ed7afd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >                   timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:193: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:637: in post\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     resp = self.send(prep, **send_kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     r = adapter.send(request, **kwargs)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f992ed7add0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | request = <PreparedRequest [POST]>, stream = False\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = Timeout(connect=30.0, read=30.0, total=None), verify = True\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | cert = None, proxies = OrderedDict()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def send(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     ):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param stream: (optional) Whether to stream the request content.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param timeout: (optional) How long to wait for the server to send\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             read timeout) <timeouts>` tuple.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             must be a path to a CA bundle to use\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         :rtype: requests.Response\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             conn = self.get_connection(request.url, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except LocationValueError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise InvalidURL(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         url = self.request_url(request, proxies)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         self.add_headers(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             stream=stream,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             verify=verify,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             cert=cert,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             proxies=proxies,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if isinstance(timeout, tuple):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 connect, read = timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except ValueError:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ValueError(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     f\"or a single float to set both timeouts to the same value.\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         elif isinstance(timeout, TimeoutSauce):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             pass\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         else:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             resp = conn.urlopen(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 method=request.method,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 url=url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 body=request.body,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 headers=request.headers,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 redirect=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 assert_same_host=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 preload_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 decode_content=False,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 retries=self.max_retries,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 chunked=chunked,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except (ProtocolError, OSError) as err:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             raise ConnectionError(err, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         except MaxRetryError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     raise ConnectTimeout(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, ResponseError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise RetryError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _ProxyError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise ProxyError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if isinstance(e.reason, _SSLError):\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 # This branch is for urllib3 v1.22 and later.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise SSLError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >           raise ConnectionError(e, request=request)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | .venv/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | The above exception was the direct cause of the following exception:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     @pytest.fixture()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def tr_client():\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         LOGGER.setLevel(\"INFO\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >       with Client(host=HOST, port=PORT, username=USER, password=PASSWORD) as c:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | tests/conftest.py:18: \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:131: in __init__\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self.get_session()\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:842: in get_session\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     self._request(RpcMethod.SessionGet, timeout=timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:236: in _request\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     http_data = self._http_query(query, timeout)\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | self = <transmission_rpc.client.Client object at 0x7f992ed7afd0>\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | query = {'arguments': {}, 'method': <RpcMethod.SessionGet: 'session-get'>, 'tag': 0}\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | timeout = 30.0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |     def _http_query(self, query: dict, timeout: Optional[_Timeout] = None) -> str:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         Query Transmission through HTTP.\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         \"\"\"\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         request_count = 0\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         if timeout is None:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             timeout = self.timeout\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |         while True:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             if request_count >= 10:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionError(\"too much request, try enable logger to see what happened\")\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             self.logger.debug(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 {\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"url\": self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"headers\": self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"data\": query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     \"timeout\": timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 }\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             request_count += 1\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             try:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 r = self._http_session.post(\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     self.url,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     headers=self._http_header,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     json=query,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                     timeout=timeout,\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 )\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.Timeout as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |                 raise TransmissionTimeoutError(\"timeout when connection to transmission daemon\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   |             except requests.exceptions.ConnectionError as e:\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | >               raise TransmissionConnectError(f\"can't connect to transmission daemon: {e!s}\") from e\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | E               transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | \n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | transmission_rpc/client.py:198: TransmissionConnectError\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/report.xml -\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | =========================== short test summary info ============================\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_add_magnet - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ef95a10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_add_torrent_fd - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec89250>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_add_torrent_http - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed4ca10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_stop - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ec63910>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_torrent_start_all - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf0dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_session_get - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992f2b74d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_free_space - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ebe8c90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_session_stats - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ecf06d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_torrent_attr_type - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992ed9ed10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ERROR tests/test_client.py::test_real_torrent_get_files - transmission_rpc.error.TransmissionConnectError: can't connect to transmission daemon: HTTPConnectionPool(host='127.0.0.1', port=8080): Max retries exceeded with url: /transmission/rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f992eb26dd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   | ======================== 57 passed, 10 errors in 3.99s =========================\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test]   \u274c  Failure - Main test\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] exitcode '1': failure\n[398538cc-1774-48f2-92d6-8a5f44e60a15/test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/trim21-transmission-rpc/.github/workflows/ci-crawler.yaml",
            "type": "pytest"
        },
        "workflow_name": "398538cc-1774-48f2-92d6-8a5f44e60a15",
        "build_tool": "pytest",
        "elapsed_time": 304.1725444793701
    }
}