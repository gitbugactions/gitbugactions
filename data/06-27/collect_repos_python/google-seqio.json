{
    "repository": "google/seqio",
    "stars": 425,
    "language": "python",
    "size": 1428,
    "clone_url": "https://github.com/google/seqio.git",
    "timestamp": "2023-07-01T16:22:29.280104Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_count_characters_str_dataset",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_count_characters_str_dataset_in_get_stats",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_count_characters_tokenized_dataset",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_count_characters_tokenized_dataset_with_non_spm_vocab",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_get_info",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_get_stats_task_ids",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_get_stats_tokenized_dataset",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_preprocess_task",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_write_example_tf_record",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.beam_utils_test.BeamUtilsTest",
                "name": "test_write_json",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_cache_exists",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_cached_data_source_shuffle_buffer_default",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_cached_data_source_shuffle_buffer_set",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_datasource_prohibits_caching",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_different_seeds_cached_mismatch",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_different_seeds_random_tp_uncached_mismatch",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_different_seeds_uncached_mismatch",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_disallow_shuffle",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_dtype",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_feature_validation",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_function_task",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_get_cached_stats",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_get_dataset_cached",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_get_dataset_no_truncation",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_get_dataset_onthefly",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_invalid_name",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_list_shards",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_metric_fn_signature",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_metric_obj_arg_for_task",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_no_eos",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_no_shuffle_different_seeds_random_tp_uncached_mismatch",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_no_shuffle_with_seed_cached_match",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_no_shuffle_with_seed_uncached_match",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_num_epochs",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_num_input_examples",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_plaintext_to_pretokenized_rename",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_proto_task",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_repeat_name",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_fails_on_invalid_args",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_metric_fns",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_metric_objs",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_name",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_output_features",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_postprocess_fn",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_preprocessors",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_shuffle_butter_size",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_replace_source",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_requires_caching",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_same_seeds_cached_match",
                "time": 0.022,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_same_seeds_random_tp_uncached_match",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_same_seeds_uncached_match",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_set_global_cache_dirs",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_sharding",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_supports_caching",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_text_line_task",
                "time": 0.032,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_tf_example_task",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_tfds_task",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TasksTest",
                "name": "test_value_errors",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_copy_pretokenized",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_get_dataset",
                "time": 0.018,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_get_dataset_mix",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_get_dataset_passthrough_features",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_get_rate_with_callable",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_mixture_of_mixtures",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_mixture_of_mixtures_dupe",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_mixture_of_tasks_with_different_features",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_mixture_with_no_tasks",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_mixture_with_sample_fn",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_num_examples",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_splits",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_task_objs",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_task_objs_default_rate",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_tasks",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.MixturesTest",
                "name": "test_tasks_with_tunable_rates",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_get_dataset_both_train_and_validation_splits",
                "time": 4.976,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_get_dataset_enc_dec_packed",
                "time": 3.107,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_get_dataset_enc_dec_sharded",
                "time": 0.828,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_get_dataset_enc_dec_sharded_and_packed",
                "time": 2.357,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_get_dataset_enc_dec_unpacked",
                "time": 0.564,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_multidimension_sequence_length0",
                "time": 0.122,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_multidimension_sequence_length1",
                "time": 0.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_multidimension_sequence_length2",
                "time": 0.112,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_multidimension_sequence_length3",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_partial_sequence_length0",
                "time": 0.206,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_partial_sequence_length1",
                "time": 0.161,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_partial_sequence_length2",
                "time": 0.214,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_partial_sequence_length3",
                "time": 0.207,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_partial_sequence_length4",
                "time": 0.152,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.GetDatasetTest",
                "name": "test_session",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TfdsDataSourceTest",
                "name": "test_tfds_source_splits",
                "time": 0.016,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TfdsDataSourceTest",
                "name": "test_tfds_splits",
                "time": 0.021,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.FunctionDataSourceTest",
                "name": "test_function_source_signature",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.FileDataSourceTest",
                "name": "test_file_data_source_shuffle_buffer_full",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.FileDataSourceTest",
                "name": "test_file_data_source_shuffle_buffer_low",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.FileDataSourceTest",
                "name": "test_repr",
                "time": 0.017,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.FileDataSourceTest",
                "name": "test_str",
                "time": 0.034,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.ProtoDataSource",
                "name": "test_repr",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.ProtoDataSource",
                "name": "test_str",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.dataset_providers_test.TFExampleDataSource",
                "name": "test_str",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_aux_scores_sorted_with_tokens",
                "time": 0.207,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_cache_and_measure_examples",
                "time": 0.343,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_cache_and_measure_examples_nondefault_sequence_dim",
                "time": 0.356,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_cache_and_measure_examples_num_examples",
                "time": 0.482,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_caching",
                "time": 0.78,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_duplicate_metric",
                "time": 0.483,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_mixture",
                "time": 0.345,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_non_string",
                "time": 0.196,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_single_task_both",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_single_task_predict",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_single_task_predict_target_field_name",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_single_task_score",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_single_task_with_loggers",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_single_task_with_postprocessor",
                "time": 0.207,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_evaluate_using_aux_score",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_get_valid_eval_tasks",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_initialize_loggers",
                "time": 0.616,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_metric_with_arbitrary_model_input_types",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_no_sequence_length",
                "time": 0.566,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_order_preservation",
                "time": 0.204,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_partial_sequence_length",
                "time": 0.454,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_predict_fn_called_with_cached_model_datasets",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_preprocessor_with_optional_sequence_length",
                "time": 0.32,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_requires_sequence_length",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_session",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_short_inputs_targets",
                "time": 0.338,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_task_with_no_compute_metrics",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_task_with_no_metrics_fn",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.evaluation_test.EvaluationTest",
                "name": "test_task_with_score_fn_with_intermediates",
                "time": 0.188,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FullyCachedTaskTest",
                "name": "test_add_fully_cached_mixture",
                "time": 0.74,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FullyCachedTaskTest",
                "name": "test_add_fully_cached_mixture_disallow_shuffling",
                "time": 0.1,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FullyCachedTaskTest",
                "name": "test_add_fully_cached_task",
                "time": 0.282,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FullyCachedTaskTest",
                "name": "test_add_fully_cached_task_disallow_shuffling",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FullyCachedTaskTest",
                "name": "test_add_fully_cached_task_single_feature",
                "time": 0.294,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FullyCachedTaskTest",
                "name": "test_add_fully_cached_task_unique_prefix",
                "time": 0.33,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FewshotTest",
                "name": "test_fewshot_data_source",
                "time": 0.875,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FewshotTest",
                "name": "test_fewshot_data_source_eval_on_fixed_exemplars",
                "time": 0.223,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.FewshotTest",
                "name": "test_fewshot_preprocessor",
                "time": 1.165,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_fully_cached_mixture",
                "time": 0.388,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_fully_cached_mixture_disallow_shuffling",
                "time": 0.141,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_fully_cached_task",
                "time": 0.349,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_fully_cached_task_disallow_shuffling",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_fully_cached_task_single_feature",
                "time": 0.195,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_fully_cached_task_unique_prefix",
                "time": 0.327,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.SentinelTaskTest",
                "name": "test_add_sentinel_task",
                "time": 0.524,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.DisableRegistryTest",
                "name": "test_enforce_both_registries_empty",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.DisableRegistryTest",
                "name": "test_enforce_task_registry_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.DisableRegistryTest",
                "name": "test_mixture_registry_add_no_op",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.DisableRegistryTest",
                "name": "test_mixture_registry_get_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.DisableRegistryTest",
                "name": "test_task_registry_add_no_op",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.experimental_test.DisableRegistryTest",
                "name": "test_task_registry_get_error",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_exact_match_missing_features",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_exact_match_redundant_features",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_extra_features",
                "time": 0.126,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_nonragged_dim_strict",
                "time": 0.177,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_not_strict_exception",
                "time": 0.277,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_not_strict_no_exception",
                "time": 0.234,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_ragged_not_strict",
                "time": 0.139,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_ragged_not_strict_exception",
                "time": 0.1,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_ragged_strict",
                "time": 0.27,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_ragged_strict_exception",
                "time": 0.27,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_seq_axis_1",
                "time": 0.227,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_strict_exception",
                "time": 0.313,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_check_lengths_strict_no_exception",
                "time": 0.286,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_non_padding_position",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.HelperFunctionsTest",
                "name": "test_session",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_call_missing_input_lengths",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_session",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_incorrect_dtype",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_incorrect_rank",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_missing_feature",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_pretokenized_field",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_rank_0",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_rank_2",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.FeatureConvertersTest",
                "name": "test_validate_dataset_rank_2_with_pack",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_extra_long_inputs",
                "time": 0.449,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_packed",
                "time": 1.243,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_packed_long_sequences",
                "time": 1.204,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_packed_without_default_bos",
                "time": 1.123,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_pretokenized_field",
                "time": 0.648,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_targets_max_length",
                "time": 0.449,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_encoder_decoder_unpacked",
                "time": 0.374,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncDecFeatureConverterTest",
                "name": "test_session",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.LMFeatureConverter",
                "name": "test_lm_only_packed",
                "time": 0.782,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.LMFeatureConverter",
                "name": "test_lm_only_packed_without_default_bos",
                "time": 0.631,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.LMFeatureConverter",
                "name": "test_lm_pack_long_sequences",
                "time": 0.631,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.LMFeatureConverter",
                "name": "test_lm_plaintext_field",
                "time": 0.448,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.LMFeatureConverter",
                "name": "test_lm_unpacked",
                "time": 0.317,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.LMFeatureConverter",
                "name": "test_session",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_convert_example",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_empty_inputs",
                "time": 2.429,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_long_inputs",
                "time": 1.262,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_long_inputs_feature_length",
                "time": 0.531,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_pack_long_sequences",
                "time": 1.431,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_packed",
                "time": 1.835,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_packed_loss_on_inputs_and_targets",
                "time": 1.359,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_packed_without_default_bos",
                "time": 1.922,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_unpacked",
                "time": 0.482,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_unpacked_loss_on_inputs_and_targets",
                "time": 0.539,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_prefix_lm_unpacked_trivial_targets",
                "time": 0.49,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixLMFeatureConverter",
                "name": "test_session",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_call_missing_input_lengths",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_lm",
                "time": 0.712,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_prefixlm",
                "time": 1.305,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_session",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_incorrect_dtype",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_incorrect_rank",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_missing_feature",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_pretokenized_field",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_rank_0",
                "time": 0.137,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_rank_2",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.DecoderFeatureConverterTest",
                "name": "test_validate_dataset_rank_2_with_pack",
                "time": 0.121,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_call_missing_input_lengths",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_encoder_pack_long_sequences",
                "time": 1.151,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_encoder_packed",
                "time": 1.326,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_encoder_plaintext_field",
                "time": 0.552,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_encoder_unpacked",
                "time": 0.437,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_session",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_incorrect_dtype",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_incorrect_rank",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_missing_feature",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_pretokenized_field",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_rank_0",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_rank_2",
                "time": 0.113,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.EncoderFeatureConverterTest",
                "name": "test_validate_dataset_rank_2_with_pack",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PassThroughFeatureConverterTest",
                "name": "test_equivalence",
                "time": 0.197,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PassThroughFeatureConverterTest",
                "name": "test_session",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrePackedEncDecFeatureConverterTest",
                "name": "test_encoder_decoder_packed",
                "time": 1.133,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrePackedEncDecFeatureConverterTest",
                "name": "test_session",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrePackedLMFeatureConverterTest",
                "name": "test_encoder_decoder_packed",
                "time": 0.22,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrePackedLMFeatureConverterTest",
                "name": "test_session",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrePackedPrefixLMFeatureConverterTest",
                "name": "test_decoder_packed",
                "time": 0.262,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrePackedPrefixLMFeatureConverterTest",
                "name": "test_session",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixSuffixLMFeatureConverter",
                "name": "test_prefix_suffix_lm_packed",
                "time": 2.709,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixSuffixLMFeatureConverter",
                "name": "test_prefix_suffix_lm_packed_trivial_suffoxes",
                "time": 1.775,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixSuffixLMFeatureConverter",
                "name": "test_prefix_suffix_lm_unpacked",
                "time": 0.772,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixSuffixLMFeatureConverter",
                "name": "test_prefix_suffix_lm_unpacked_trivial_suffixes",
                "time": 1.093,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixSuffixLMFeatureConverter",
                "name": "test_prefix_suffix_lm_unpacked_trivial_targets",
                "time": 0.877,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.feature_converters_test.PrefixSuffixLMFeatureConverter",
                "name": "test_session",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_mixture_new_output_features",
                "time": 0.034,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_mixture_new_vocab",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_mixture_or_task_with_new_vocab_invalid",
                "time": 0.316,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_mixture_or_task_with_new_vocab_override_valid",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_mixture_without_missing_task_splits",
                "time": 0.016,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_task_new_output_features",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_task_new_vocab",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.helpers_test.HelpersTest",
                "name": "test_task_with_truncated_data",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTestV1",
                "name": "test_logging",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTestV1",
                "name": "test_session",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_log_audio",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_log_generic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_log_histogram",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_log_image",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_log_scalar",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_log_text",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorBoardLoggerTest",
                "name": "test_session",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_2d_ragged_input",
                "time": 0.037,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_logging",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_logging_metrics_only",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_metrics_multiple_steps",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_metrics_non_serializable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_n_prediction_and_scores",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_non_serializable_prediction",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_non_serializable_target",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_numpy_data",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_prediction_bytes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_predictions_and_aux_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_predictions_only",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.JSONLoggerTest",
                "name": "test_session",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorAndNumpyEncoderLoggerTest",
                "name": "test_dataclass",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorAndNumpyEncoderLoggerTest",
                "name": "test_dataclass_with_none_value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorAndNumpyEncoderLoggerTest",
                "name": "test_long_numpy",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorAndNumpyEncoderLoggerTest",
                "name": "test_numpy",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorAndNumpyEncoderLoggerTest",
                "name": "test_session",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.loggers_test.TensorAndNumpyEncoderLoggerTest",
                "name": "test_tensor",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.metrics_test.MetricsTest",
                "name": "test_globally_sort_model_output",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.metrics_test.MetricsTest",
                "name": "test_remove_padding_examples",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_append_eos",
                "time": 1.316,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_append_to_innermost_axis",
                "time": 0.005,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "b/273289576",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_apply_encdec_feature_converter",
                "time": 1.429,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_dont_truncate",
                "time": 0.151,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_preprocess_tensorflow_examples",
                "time": 0.322,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_preprocess_tensorflow_examples_with_special_chars",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_rekey",
                "time": 0.318,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_session",
                "time": 0.036,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_tokenize",
                "time": 1.193,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_tokenize_multiple_ranks",
                "time": 4.346,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.preprocessors_test.PreprocessorsTest",
                "name": "test_truncate_length_two",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.sharded_evaluation_test.MetricManagerTest",
                "name": "test_from_model_output",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.sharded_evaluation_test.MetricManagerTest",
                "name": "test_initialize_metrics",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.sharded_evaluation_test.MetricManagerTest",
                "name": "test_merge",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.task_registry_provenance_tracking_test.TestRegistryProvenanceTrackingTest",
                "name": "test_track_registration_provenance",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.test_utils_test.TestUtilsTest",
                "name": "test_assert_dataset",
                "time": 0.368,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.test_utils_test.TasksTest",
                "name": "test_data_injection",
                "time": 0.017,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_builder_memoization",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_no_tfds_version",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_read_config_override",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_read_config_override_default",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_split_map",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.LazyTfdsLoaderTest",
                "name": "test_str",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.TransformUtilsTest",
                "name": "test_add_kwargs_to_transform_callable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.TransformUtilsTest",
                "name": "test_add_kwargs_to_transform_dataclass",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_map_fn_simple",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_map_fn_with_kwargs",
                "time": 0.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_map_fn_with_special_kwargs",
                "time": 0.149,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_multi_seed_random_map_fn_special_kwargs",
                "time": 0.787,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_random_map_fn_simple",
                "time": 0.395,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_random_map_fn_with_kwargs",
                "time": 0.263,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MapOverDatasetTest",
                "name": "test_random_map_fn_with_special_kwargs",
                "time": 0.245,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_autoregressive_inputs_different_dtypes",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_autoregressive_inputs_packed",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_autoregressive_inputs_packed_2d",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_autoregressive_inputs_packed_non_eos",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_autoregressive_inputs_unpacked",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_autoregressive_inputs_unpacked_2d",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_dict_to_tfexample",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_dict_to_tfexample_legacy",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_flatten_dict",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_decorator0",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_decorator1",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_decorator_with_seeds",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_function0",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_function1",
                "time": 0.095,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_function_with_seeds",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_partial_function",
                "time": 0.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_as_partial_function_with_seeds",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_with_one_seed",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_over_dataset_with_seeds",
                "time": 0.127,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_map_seed_manager",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_parse_dict_to_tfexample",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_session",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not a test.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_shift_right_by_one",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_shift_right_by_one_without_default_bos",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_stateless_shuffle",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_tfexample_to_dict",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_trim_and_pack_dataset0",
                "time": 0.589,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_trim_and_pack_dataset_long_seq0",
                "time": 0.89,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_trim_and_pack_dataset_no_eos0",
                "time": 0.986,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_trim_and_pad_dataset",
                "time": 0.216,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_trim_and_pad_dataset_with_multirank_features",
                "time": 0.237,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.UtilsTest",
                "name": "test_unflatten_dict",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MixtureRateTest",
                "name": "test_mixing_rate_num_characters",
                "time": 0.054,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.utils_test.MixtureRateTest",
                "name": "test_mixing_rate_num_examples",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_decode_eos_only",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_decode_no_unk_or_eos",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_decode_tf_batch",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_decode_unk_and_eos",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_decode_unk_only",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_encode",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.VocabularyTest",
                "name": "test_properties",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PassThroughVocabularyTest",
                "name": "test_eos",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PassThroughVocabularyTest",
                "name": "test_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PassThroughVocabularyTest",
                "name": "test_no_eos",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PassThroughVocabularyTest",
                "name": "test_not_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.UnigramVocabularyTest",
                "name": "test_decode_converts_ints_to_unigrams_correctly",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.UnigramVocabularyTest",
                "name": "test_encode_converts_unigrams_to_ints_correctly",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_cache",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_decode_tf",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_equal",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_extra_ids",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_force_repeated_whitespace_preservation",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_not_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_not_reversing_extra_ids",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.SentencepieceVocabularyTest",
                "name": "test_vocab",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_decode_tf",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_decode_tf_invalid_byte_sequence",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_decode_tf_oov_tokens",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_extra_ids",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_not_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_out_of_vocab",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.ByteVocabularyTest",
                "name": "test_vocab",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.FullCodepointVocabularyTest",
                "name": "test_decode",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.FullCodepointVocabularyTest",
                "name": "test_decode_tf",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.FullCodepointVocabularyTest",
                "name": "test_encode",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.FullCodepointVocabularyTest",
                "name": "test_encode_tf",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.FullCodepointVocabularyTest",
                "name": "test_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.FullCodepointVocabularyTest",
                "name": "test_vocab",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_decode",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_decode_tf",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_encode",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_encode_tf",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_not_equal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_vocab",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.PartialCodepointVocabularyTest",
                "name": "test_vocab_constructor",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.BertWordpieceVocabularyTest",
                "name": "test_equal",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.BertWordpieceVocabularyTest",
                "name": "test_not_equal",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.BertWordpieceVocabularyTest",
                "name": "test_special_ids",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.vocabularies_test.BertWordpieceVocabularyTest",
                "name": "test_vocab",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_cache_before_tokenization_ndfeatures_pipeline",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_cache_before_tokenization_pipeline",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_function_pipeline",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_new_tfds_pipeline",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_overwrite",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_text_line_pipeline",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_tf_example_pipeline",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.cache_tasks_test.ProcessTaskBeamTest",
                "name": "test_tfds_pipeline",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.registration_provenance_test.RegistrationProvenanceTest",
                "name": "test_get_tsv_lines",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.registration_provenance_test.RegistrationProvenanceTest",
                "name": "test_get_tsv_lines_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "seqio.scripts.registration_provenance_test.RegistrationProvenanceTest",
                "name": "test_write_lines",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \ud83d\ude80  Start image=crawlergpt:latest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/google-seqio] user=0 workdir=\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \u2b50 Run Main actions/checkout@v2\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2705  Success - Main actions/checkout@v2\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \u2b50 Run Main Set up Python\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/31b7f5d6-0ce6-485b-9c65-9756b3b2e7f4/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.8.x is 3.8.x\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? false\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? true\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? true\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? true\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? true\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? true\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::explicit? true\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::matched: 3.8.11\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Successfully setup CPython (3.8.11)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2705  Success - Main Set up Python\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2699  ::set-output:: python-version=3.8.11\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \u2b50 Run Main Install dependencies\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Obtaining file:///tmp/558156d8-17ed-11ee-8a50-bb14de238602/google-seqio\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting absl-py\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading absl_py-1.4.0-py3-none-any.whl (126 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting clu\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading clu-0.0.9-py3-none-any.whl (98 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting editdistance\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading editdistance-0.6.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (283 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting jax\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading jax-0.4.13.tar.gz (1.3 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Installing build dependencies: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Installing build dependencies: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Getting requirements to build wheel: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Getting requirements to build wheel: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Preparing wheel metadata: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Preparing wheel metadata: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting jaxlib\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading jaxlib-0.4.13-cp38-cp38-manylinux2014_x86_64.whl (71.6 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting numpy\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting packaging\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pyglove\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pyglove-0.3.0-py3-none-any.whl (505 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting sentencepiece\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading sentencepiece-0.1.99-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorflow-text\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorflow_text-2.12.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.0 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tfds-nightly\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tfds_nightly-4.9.2.dev202307010045-py3-none-any.whl (5.0 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting protobuf<=3.20.3\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading protobuf-3.20.3-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.0 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting apache-beam\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading apache_beam-2.48.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (14.8 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pytest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting python-dateutil<3,>=2.8.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting typing-extensions>=3.7.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting zstandard<1,>=0.18.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading zstandard-0.21.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.7 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting requests<3.0.0,>=2.24.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting proto-plus<2,>=1.7.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading proto_plus-1.22.3-py3-none-any.whl (48 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting dill<0.3.2,>=0.3.1.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading dill-0.3.1.1.tar.gz (151 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting regex>=2020.6.8\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading regex-2023.6.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (772 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pytz>=2018.3\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting objsize<0.7.0,>=0.6.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading objsize-0.6.1-py3-none-any.whl (9.3 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting orjson<4.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading orjson-3.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (136 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting grpcio!=1.48.0,<2,>=1.33.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading grpcio-1.56.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.2 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pyarrow<12.0.0,>=3.0.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pyarrow-11.0.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (35.0 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pymongo<5.0.0,>=3.8.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pymongo-4.4.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (664 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting cloudpickle~=2.2.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading cloudpickle-2.2.1-py3-none-any.whl (25 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pydot<2,>=1.2.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pydot-1.4.2-py2.py3-none-any.whl (21 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting crcmod<2.0,>=1.7\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading crcmod-1.7.tar.gz (89 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting httplib2<0.23.0,>=0.8\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading httplib2-0.22.0-py3-none-any.whl (96 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting fasteners<1.0,>=0.3\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading fasteners-0.18-py3-none-any.whl (18 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting hdfs<3.0.0,>=2.1.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading hdfs-2.7.0-py3-none-any.whl (34 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting fastavro<2,>=0.23.6\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading fastavro-1.7.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.7 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting six>=1.9.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting docopt\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pyparsing-3.1.0-py3-none-any.whl (102 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting dnspython<3.0.0,>=1.16.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading dnspython-2.3.0-py3-none-any.whl (283 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting idna<4,>=2.5\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting charset-normalizer<4,>=2\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting urllib3<3,>=1.21.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting certifi>=2017.4.17\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting etils[epath]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading etils-1.3.0-py3-none-any.whl (126 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting flax\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading flax-0.6.11-py3-none-any.whl (227 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting ml-collections\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading ml_collections-0.1.1.tar.gz (77 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting wrapt\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading wrapt-1.15.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (81 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting zipp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting importlib_resources\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting optax\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading optax-0.1.5-py3-none-any.whl (164 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting msgpack\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading msgpack-1.0.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (322 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting PyYAML>=5.4.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorstore\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorstore-0.1.40-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.9 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting rich>=11.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading rich-13.4.2-py3-none-any.whl (239 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting orbax-checkpoint\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading orbax_checkpoint-0.2.3-py3-none-any.whl (81 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting scipy>=1.7\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.5 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting ml-dtypes>=0.1.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading ml_dtypes-0.2.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting importlib-metadata>=4.6\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting opt-einsum\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading opt_einsum-3.3.0-py3-none-any.whl (65 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pygments<3.0.0,>=2.13.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting markdown-it-py>=2.2.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting mdurl~=0.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting contextlib2\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading contextlib2-21.6.0-py2.py3-none-any.whl (13 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting chex>=0.1.5\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading chex-0.1.7-py3-none-any.whl (89 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting dm-tree>=0.1.5\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading dm_tree-0.1.8-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (152 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting toolz>=0.9.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading toolz-0.12.0-py3-none-any.whl (55 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting nest_asyncio\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading nest_asyncio-1.5.6-py3-none-any.whl (5.2 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting cached_property\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading cached_property-1.5.2-py2.py3-none-any.whl (7.6 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting iniconfig\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pluggy<2.0,>=0.12\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tomli>=1.0.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting exceptiongroup>=1.0.0rc8\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorflow-hub>=0.8.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorflow_hub-0.13.0-py2.py3-none-any.whl (100 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorflow<2.13,>=2.12.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorflow-2.12.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (585.9 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting gast<=0.4.0,>=0.2.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading gast-0.4.0-py3-none-any.whl (9.8 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting libclang>=13.0.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading libclang-16.0.0-py2.py3-none-manylinux2010_x86_64.whl (22.9 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorflow-estimator<2.13,>=2.12.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorflow_estimator-2.12.0-py2.py3-none-any.whl (440 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting termcolor>=1.1.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading termcolor-2.3.0-py3-none-any.whl (6.9 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting flatbuffers>=2.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading flatbuffers-23.5.26-py2.py3-none-any.whl (26 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorflow-io-gcs-filesystem>=0.23.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorflow_io_gcs_filesystem-0.32.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (2.4 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting keras<2.13,>=2.12.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading keras-2.12.0-py2.py3-none-any.whl (1.7 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting numpy\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading numpy-1.23.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from tensorflow<2.13,>=2.12.0->tensorflow-text->seqio==0.0.15) (56.0.0)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting wrapt\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading wrapt-1.14.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (81 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting astunparse>=1.6.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading astunparse-1.6.3-py2.py3-none-any.whl (12 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting google-pasta>=0.1.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading google_pasta-0.2.0-py3-none-any.whl (57 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorboard<2.13,>=2.12\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorboard-2.12.3-py3-none-any.whl (5.6 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting h5py>=2.9.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading h5py-3.9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.8 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting wheel<1.0,>=0.23.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Using cached wheel-0.40.0-py3-none-any.whl (64 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorboard-data-server<0.8.0,>=0.7.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorboard_data_server-0.7.1-py3-none-manylinux2014_x86_64.whl (6.6 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting markdown>=2.6.8\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading Markdown-3.4.3-py3-none-any.whl (93 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting werkzeug>=1.0.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading Werkzeug-2.3.6-py3-none-any.whl (242 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting google-auth-oauthlib<1.1,>=0.5\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading google_auth_oauthlib-1.0.0-py2.py3-none-any.whl (18 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting google-auth<3,>=1.6.3\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading google_auth-2.21.0-py2.py3-none-any.whl (182 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting rsa<5,>=3.1.4\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading rsa-4.9-py3-none-any.whl (34 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pyasn1-modules>=0.2.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pyasn1_modules-0.3.0-py2.py3-none-any.whl (181 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting urllib3<3,>=1.21.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting cachetools<6.0,>=2.0.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading cachetools-5.3.1-py3-none-any.whl (9.3 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting requests-oauthlib>=0.7.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading requests_oauthlib-1.3.1-py2.py3-none-any.whl (23 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting pyasn1<0.6.0,>=0.4.6\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading pyasn1-0.5.0-py2.py3-none-any.whl (83 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting oauthlib>=3.0.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading oauthlib-3.2.2-py3-none-any.whl (151 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting MarkupSafe>=2.1.1\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading MarkupSafe-2.1.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting array-record\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading array_record-0.4.0-py38-none-any.whl (3.0 MB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting psutil\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading psutil-5.9.5-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (282 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tensorflow-metadata\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tensorflow_metadata-1.13.1-py3-none-any.whl (28 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting tqdm\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading tqdm-4.65.0-py3-none-any.whl (77 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting promise\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading promise-2.3.tar.gz (19 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting click\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting toml\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Collecting googleapis-common-protos<2,>=1.52.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Downloading googleapis_common_protos-1.59.1-py2.py3-none-any.whl (224 kB)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Using legacy 'setup.py install' for crcmod, since package 'wheel' is not installed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Using legacy 'setup.py install' for dill, since package 'wheel' is not installed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Using legacy 'setup.py install' for ml-collections, since package 'wheel' is not installed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Using legacy 'setup.py install' for promise, since package 'wheel' is not installed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Building wheels for collected packages: jax\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Building wheel for jax (PEP 517): started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Building wheel for jax (PEP 517): finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Created wheel for jax: filename=jax-0.4.13-py3-none-any.whl size=1518707 sha256=34631e5cac719016a032b4f7870877bd5e1750f65f6719f8831061cf08b2c953\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/46/d9/15/d2800d4089dc4c77299ac7513c6aa1036f5491edbd2bf6ba16\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Successfully built jax\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Installing collected packages: zipp, urllib3, pyasn1, numpy, idna, charset-normalizer, certifi, typing-extensions, six, scipy, rsa, requests, pyasn1-modules, opt-einsum, oauthlib, ml-dtypes, importlib-metadata, etils, cachetools, toolz, requests-oauthlib, mdurl, MarkupSafe, jaxlib, jax, google-auth, dm-tree, absl-py, wheel, werkzeug, tqdm, tensorstore, tensorboard-data-server, PyYAML, pygments, protobuf, nest-asyncio, msgpack, markdown-it-py, markdown, importlib-resources, grpcio, google-auth-oauthlib, chex, cached-property, wrapt, termcolor, tensorflow-io-gcs-filesystem, tensorflow-estimator, tensorboard, rich, packaging, orbax-checkpoint, optax, libclang, keras, h5py, googleapis-common-protos, google-pasta, gast, flatbuffers, contextlib2, astunparse, toml, tensorflow-metadata, tensorflow-hub, tensorflow, pyparsing, psutil, promise, ml-collections, flax, docopt, dnspython, click, array-record, zstandard, tomli, tfds-nightly, tensorflow-text, sentencepiece, regex, pytz, python-dateutil, pymongo, pyglove, pydot, pyarrow, proto-plus, pluggy, orjson, objsize, iniconfig, httplib2, hdfs, fasteners, fastavro, exceptiongroup, editdistance, dill, crcmod, clu, cloudpickle, seqio, pytest, apache-beam\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for promise: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for promise: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for ml-collections: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for ml-collections: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for docopt: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for docopt: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for dill: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for dill: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for crcmod: started\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     Running setup.py install for crcmod: finished with status 'done'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   Running setup.py develop for seqio\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | Successfully installed MarkupSafe-2.1.3 PyYAML-6.0 absl-py-1.4.0 apache-beam-2.48.0 array-record-0.4.0 astunparse-1.6.3 cached-property-1.5.2 cachetools-5.3.1 certifi-2023.5.7 charset-normalizer-3.1.0 chex-0.1.7 click-8.1.3 cloudpickle-2.2.1 clu-0.0.9 contextlib2-21.6.0 crcmod-1.7 dill-0.3.1.1 dm-tree-0.1.8 dnspython-2.3.0 docopt-0.6.2 editdistance-0.6.2 etils-1.3.0 exceptiongroup-1.1.1 fastavro-1.7.4 fasteners-0.18 flatbuffers-23.5.26 flax-0.6.11 gast-0.4.0 google-auth-2.21.0 google-auth-oauthlib-1.0.0 google-pasta-0.2.0 googleapis-common-protos-1.59.1 grpcio-1.56.0 h5py-3.9.0 hdfs-2.7.0 httplib2-0.22.0 idna-3.4 importlib-metadata-6.7.0 importlib-resources-5.12.0 iniconfig-2.0.0 jax-0.4.13 jaxlib-0.4.13 keras-2.12.0 libclang-16.0.0 markdown-3.4.3 markdown-it-py-3.0.0 mdurl-0.1.2 ml-collections-0.1.1 ml-dtypes-0.2.0 msgpack-1.0.5 nest-asyncio-1.5.6 numpy-1.23.5 oauthlib-3.2.2 objsize-0.6.1 opt-einsum-3.3.0 optax-0.1.5 orbax-checkpoint-0.2.3 orjson-3.9.1 packaging-23.1 pluggy-1.2.0 promise-2.3 proto-plus-1.22.3 protobuf-3.20.3 psutil-5.9.5 pyarrow-11.0.0 pyasn1-0.5.0 pyasn1-modules-0.3.0 pydot-1.4.2 pyglove-0.3.0 pygments-2.15.1 pymongo-4.4.0 pyparsing-3.1.0 pytest-7.4.0 python-dateutil-2.8.2 pytz-2023.3 regex-2023.6.3 requests-2.31.0 requests-oauthlib-1.3.1 rich-13.4.2 rsa-4.9 scipy-1.10.1 sentencepiece-0.1.99 seqio six-1.16.0 tensorboard-2.12.3 tensorboard-data-server-0.7.1 tensorflow-2.12.0 tensorflow-estimator-2.12.0 tensorflow-hub-0.13.0 tensorflow-io-gcs-filesystem-0.32.0 tensorflow-metadata-1.13.1 tensorflow-text-2.12.1 tensorstore-0.1.40 termcolor-2.3.0 tfds-nightly-4.9.2.dev202307010045 toml-0.10.2 tomli-2.0.1 toolz-0.12.0 tqdm-4.65.0 typing-extensions-4.7.0 urllib3-1.26.16 werkzeug-2.3.6 wheel-0.40.0 wrapt-1.14.1 zipp-3.15.0 zstandard-0.21.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2705  Success - Main Install dependencies\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \u2b50 Run Main Test with pytest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ============================= test session starts ==============================\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | platform linux -- Python 3.8.11, pytest-7.4.0, pluggy-1.2.0\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/google-seqio\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | configfile: pytest.ini\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | collected 400 items\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/beam_utils_test.py FFFFFFFFFF                                      [  2%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 12%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FFFFFFFFFFFFFFFFFFFFFFFF..............sFFFFFFFFFF                        [ 24%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/evaluation_test.py ........................s....                   [ 32%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/experimental_test.py ......................                        [ 37%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/feature_converters_test.py ..............s.s..............s.....s. [ 47%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ..........s...s............s........s.s.s.s.....s                        [ 59%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/helpers_test.py FFFFFFFF                                           [ 61%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py FsFFFFFFsFFFFFFFFFFFFs....s.                       [ 68%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/metrics_test.py ..                                                 [ 69%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/preprocessors_test.py .s.....s...                                  [ 71%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/sharded_evaluation_test.py ...                                     [ 72%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/task_registry_provenance_tracking_test.py .                        [ 72%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils_test.py .F                                              [ 73%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/utils_test.py .....................................s..........FF   [ 85%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py ...................................FFFFFFF... [ 97%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | .                                                                        [ 97%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/scripts/cache_tasks_test.py FFFFFFFF                               [ 99%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/scripts/registration_provenance_test.py ...                        [100%]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | =================================== FAILURES ===================================\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________ BeamUtilsTest.test_count_characters_str_dataset ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_count_characters_str_dataset>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________ BeamUtilsTest.test_count_characters_str_dataset_in_get_stats _________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_count_characters_str_dataset_in_get_stats>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________ BeamUtilsTest.test_count_characters_tokenized_dataset _____________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_count_characters_tokenized_dataset>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___ BeamUtilsTest.test_count_characters_tokenized_dataset_with_non_spm_vocab ___\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_count_characters_tokenized_dataset_with_non_spm_vocab>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ BeamUtilsTest.test_get_info __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_get_info>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ BeamUtilsTest.test_get_stats_task_ids _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_get_stats_task_ids>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ BeamUtilsTest.test_get_stats_tokenized_dataset ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_get_stats_tokenized_dataset>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ BeamUtilsTest.test_preprocess_task ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_preprocess_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ BeamUtilsTest.test_write_example_tf_record __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_write_example_tf_record>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ BeamUtilsTest.test_write_json _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.beam_utils_test.BeamUtilsTest testMethod=test_write_json>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ TasksTest.test_cache_exists __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_cache_exists>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_cache_exists>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________ TasksTest.test_cached_data_source_shuffle_buffer_default ___________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_cached_data_source_shuffle_buffer_default>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_cached_data_source_shuffle_buffer_default>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________ TasksTest.test_cached_data_source_shuffle_buffer_set _____________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_cached_data_source_shuffle_buffer_set>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_cached_data_source_shuffle_buffer_set>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ TasksTest.test_datasource_prohibits_caching __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_datasource_prohibits_caching>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_datasource_prohibits_caching>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ TasksTest.test_different_seeds_cached_mismatch ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_different_seeds_cached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_different_seeds_cached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________ TasksTest.test_different_seeds_random_tp_uncached_mismatch __________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_different_seeds_random_tp_uncached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_different_seeds_random_tp_uncached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________ TasksTest.test_different_seeds_uncached_mismatch _______________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_different_seeds_uncached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_different_seeds_uncached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________________ TasksTest.test_disallow_shuffle ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_disallow_shuffle>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_disallow_shuffle>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________________ TasksTest.test_dtype _____________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_dtype>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_dtype>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ TasksTest.test_feature_validation _______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_feature_validation>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_feature_validation>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ TasksTest.test_function_task _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_function_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_function_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________________ TasksTest.test_get_cached_stats ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_cached_stats>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_cached_stats>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ TasksTest.test_get_dataset_cached _______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_dataset_cached>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_dataset_cached>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ TasksTest.test_get_dataset_no_truncation ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_dataset_no_truncation>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_dataset_no_truncation>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TasksTest.test_get_dataset_onthefly ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_dataset_onthefly>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_get_dataset_onthefly>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ TasksTest.test_invalid_name __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_invalid_name>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_invalid_name>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________________ TasksTest.test_list_shards __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_list_shards>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_list_shards>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ TasksTest.test_metric_fn_signature ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_metric_fn_signature>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_metric_fn_signature>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ TasksTest.test_metric_obj_arg_for_task ____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_metric_obj_arg_for_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_metric_obj_arg_for_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________________ TasksTest.test_no_eos _____________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_eos>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_eos>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____ TasksTest.test_no_shuffle_different_seeds_random_tp_uncached_mismatch _____\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_shuffle_different_seeds_random_tp_uncached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_shuffle_different_seeds_random_tp_uncached_mismatch>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________ TasksTest.test_no_shuffle_with_seed_cached_match _______________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_shuffle_with_seed_cached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_shuffle_with_seed_cached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________ TasksTest.test_no_shuffle_with_seed_uncached_match ______________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_shuffle_with_seed_uncached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_no_shuffle_with_seed_uncached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________________ TasksTest.test_num_epochs ___________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_num_epochs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_num_epochs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ TasksTest.test_num_input_examples _______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_num_input_examples>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_num_input_examples>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________ TasksTest.test_plaintext_to_pretokenized_rename ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_plaintext_to_pretokenized_rename>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_plaintext_to_pretokenized_rename>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________________ TasksTest.test_proto_task ___________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_proto_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_proto_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________________ TasksTest.test_repeat_name __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_repeat_name>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_repeat_name>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ TasksTest.test_replace_fails_on_invalid_args _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_fails_on_invalid_args>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_fails_on_invalid_args>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ TasksTest.test_replace_metric_fns _______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_metric_fns>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_metric_fns>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ TasksTest.test_replace_metric_objs ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_metric_objs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_metric_objs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ TasksTest.test_replace_name __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_name>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_name>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ TasksTest.test_replace_output_features ____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_output_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_output_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ TasksTest.test_replace_postprocess_fn _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_postprocess_fn>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_postprocess_fn>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TasksTest.test_replace_preprocessors _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_preprocessors>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_preprocessors>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ TasksTest.test_replace_shuffle_butter_size __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_shuffle_butter_size>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_shuffle_butter_size>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ TasksTest.test_replace_source _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_source>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_replace_source>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________________ TasksTest.test_requires_caching ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_requires_caching>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_requires_caching>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ TasksTest.test_same_seeds_cached_match ____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_same_seeds_cached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_same_seeds_cached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________ TasksTest.test_same_seeds_random_tp_uncached_match ______________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_same_seeds_random_tp_uncached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_same_seeds_random_tp_uncached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ TasksTest.test_same_seeds_uncached_match ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_same_seeds_uncached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_same_seeds_uncached_match>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TasksTest.test_set_global_cache_dirs _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_set_global_cache_dirs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_set_global_cache_dirs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________________ TasksTest.test_sharding ____________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_sharding>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_sharding>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________________ TasksTest.test_supports_caching ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_supports_caching>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_supports_caching>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ TasksTest.test_text_line_task _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_text_line_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_text_line_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ TasksTest.test_tf_example_task ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_tf_example_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_tf_example_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________________ TasksTest.test_tfds_task ___________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_tfds_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_tfds_task>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ TasksTest.test_value_errors __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_value_errors>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TasksTest testMethod=test_value_errors>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(TasksTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:49: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ MixturesTest.test_copy_pretokenized ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_copy_pretokenized>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_copy_pretokenized>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ MixturesTest.test_get_dataset _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_dataset>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_dataset>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ MixturesTest.test_get_dataset_mix _______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_dataset_mix>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_dataset_mix>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________ MixturesTest.test_get_dataset_passthrough_features ______________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_dataset_passthrough_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_dataset_passthrough_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ MixturesTest.test_get_rate_with_callable ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_rate_with_callable>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_get_rate_with_callable>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ MixturesTest.test_mixture_of_mixtures _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_of_mixtures>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_of_mixtures>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ MixturesTest.test_mixture_of_mixtures_dupe __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_of_mixtures_dupe>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_of_mixtures_dupe>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________ MixturesTest.test_mixture_of_tasks_with_different_features __________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_of_tasks_with_different_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_of_tasks_with_different_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ MixturesTest.test_mixture_with_no_tasks ____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_with_no_tasks>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_with_no_tasks>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ MixturesTest.test_mixture_with_sample_fn ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_with_sample_fn>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_mixture_with_sample_fn>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ MixturesTest.test_num_examples ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_num_examples>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_num_examples>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________________ MixturesTest.test_splits ___________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_splits>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_splits>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ MixturesTest.test_task_objs __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_task_objs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_task_objs>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ MixturesTest.test_task_objs_default_rate ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_task_objs_default_rate>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_task_objs_default_rate>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________________ MixturesTest.test_tasks ____________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_tasks>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_tasks>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ MixturesTest.test_tasks_with_tunable_rates __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_tasks_with_tunable_rates>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.MixturesTest testMethod=test_tasks_with_tunable_rates>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     super(MixturesTest, self).setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/dataset_providers_test.py:1160: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ TfdsDataSourceTest.test_tfds_source_splits __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TfdsDataSourceTest testMethod=test_tfds_source_splits>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TfdsDataSourceTest.test_tfds_splits ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TfdsDataSourceTest testMethod=test_tfds_splits>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________ FunctionDataSourceTest.test_function_source_signature _____________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.FunctionDataSourceTest testMethod=test_function_source_signature>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________ FileDataSourceTest.test_file_data_source_shuffle_buffer_full _________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.FileDataSourceTest testMethod=test_file_data_source_shuffle_buffer_full>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________ FileDataSourceTest.test_file_data_source_shuffle_buffer_low __________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.FileDataSourceTest testMethod=test_file_data_source_shuffle_buffer_low>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ FileDataSourceTest.test_repr _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.FileDataSourceTest testMethod=test_repr>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ FileDataSourceTest.test_str __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.FileDataSourceTest testMethod=test_str>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________________ ProtoDataSource.test_repr ___________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.ProtoDataSource testMethod=test_repr>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________________ ProtoDataSource.test_str ___________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.ProtoDataSource testMethod=test_str>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ TFExampleDataSource.test_str _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.dataset_providers_test.TFExampleDataSource testMethod=test_str>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ HelpersTest.test_mixture_new_output_features _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_mixture_new_output_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ HelpersTest.test_mixture_new_vocab ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_mixture_new_vocab>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________ HelpersTest.test_mixture_or_task_with_new_vocab_invalid ____________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_mixture_or_task_with_new_vocab_invalid>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________ HelpersTest.test_mixture_or_task_with_new_vocab_override_valid ________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_mixture_or_task_with_new_vocab_override_valid>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________ HelpersTest.test_mixture_without_missing_task_splits _____________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_mixture_without_missing_task_splits>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ HelpersTest.test_task_new_output_features ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_task_new_output_features>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________________ HelpersTest.test_task_new_vocab ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_task_new_vocab>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ HelpersTest.test_task_with_truncated_data ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.helpers_test.HelpersTest testMethod=test_task_with_truncated_data>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TensorBoardLoggerTestV1.test_logging _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTestV1 testMethod=test_logging>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLoggerV1(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:38: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TensorBoardLoggerTest.test_log_audio _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTest testMethod=test_log_audio>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLogger(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:82: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ TensorBoardLoggerTest.test_log_generic ____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTest testMethod=test_log_generic>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLogger(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:82: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ TensorBoardLoggerTest.test_log_histogram ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTest testMethod=test_log_histogram>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLogger(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:82: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TensorBoardLoggerTest.test_log_image _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTest testMethod=test_log_image>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLogger(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:82: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ TensorBoardLoggerTest.test_log_scalar _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTest testMethod=test_log_scalar>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLogger(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:82: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ TensorBoardLoggerTest.test_log_text ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.TensorBoardLoggerTest testMethod=test_log_text>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.logger = loggers.TensorBoardLogger(self.create_tempdir().full_path)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:82: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ JSONLoggerTest.test_2d_ragged_input ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_2d_ragged_input>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_2d_ragged_input(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       x = [\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"inputs\": tf.ragged.constant([[9, 4, 1], [8, 1]]),\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"inputs_pretokenized\": [\"i0_0\", \"i0_1\"],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           },\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"inputs\": tf.ragged.constant([[9, 1], [7, 2, 3, 1]]),\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"inputs_pretokenized\": [\"i1_0\", \"i1_1\"],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           },\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       ]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       task_dataset = tf.data.Dataset.from_generator(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           lambda: x,\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           output_signature={\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"inputs\": tf.RaggedTensorSpec(shape=[None, None], dtype=tf.int32),\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"inputs_pretokenized\": tf.TensorSpec(shape=[None], dtype=tf.string),\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           },\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       )\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\"prediction\": [\"pred0\", \"pred1\"], \"score\": [0.2, 0.3]}\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:612: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________________ JSONLoggerTest.test_logging __________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_logging>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_logging(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\"prediction\": [\"pred0\", \"pred1\"], \"score\": [0.2, 0.3]}\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:236: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ___________________ JSONLoggerTest.test_logging_metrics_only ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_logging_metrics_only>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_logging_metrics_only(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:720: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ JSONLoggerTest.test_metrics_multiple_steps __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_metrics_multiple_steps>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_metrics_multiple_steps(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:655: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ JSONLoggerTest.test_metrics_non_serializable _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_metrics_non_serializable>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_metrics_non_serializable(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:685: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ JSONLoggerTest.test_n_prediction_and_scores __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_n_prediction_and_scores>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_n_prediction_and_scores(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\"prediction\": [\"pred0\", \"pred1\"], \"score\": [0.2, 0.3]}\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:282: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________ JSONLoggerTest.test_non_serializable_prediction ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_non_serializable_prediction>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_non_serializable_prediction(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\"prediction\": [object(), object()], \"score\": [0.2, 0.3]}\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:461: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ JSONLoggerTest.test_non_serializable_target __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_non_serializable_target>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_non_serializable_target(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\"prediction\": [\"pred0\", \"pred1\"], \"score\": [0.2, 0.3]}\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [object(), object()]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:505: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ JSONLoggerTest.test_numpy_data ________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_numpy_data>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_numpy_data(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           \"prediction\": [np.zeros((2, 2)), np.ones((2, 2))],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           \"score\": [0.2, 0.3],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       }\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:415: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ JSONLoggerTest.test_prediction_bytes _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_prediction_bytes>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_prediction_bytes(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           \"prediction\": [b\"\\x99\", b\"\\x88\"],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       }\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:551: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ JSONLoggerTest.test_predictions_and_aux_values ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_predictions_and_aux_values>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_predictions_and_aux_values(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           \"prediction\": [\"pred0\", \"pred1\"],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           \"aux_value\": {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"scores\": [0.2, 0.3],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |               \"other_aux_values\": [10.0, 20.0],\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |           },\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       }\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:364: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _____________________ JSONLoggerTest.test_predictions_only _____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.loggers_test.JSONLoggerTest testMethod=test_predictions_only>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def test_predictions_only(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       inferences = {\"prediction\": [\"pred0\", \"pred1\"]}\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       targets = [\"target0\", \"target1\"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     tmp_dir = self.create_tempdir().full_path\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/loggers_test.py:314: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________________ TasksTest.test_data_injection _________________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.test_utils_test.TasksTest testMethod=test_data_injection>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _______________ MixtureRateTest.test_mixing_rate_num_characters ________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.utils_test.MixtureRateTest testMethod=test_mixing_rate_num_characters>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ MixtureRateTest.test_mixing_rate_num_examples _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.utils_test.MixtureRateTest testMethod=test_mixing_rate_num_examples>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ PartialCodepointVocabularyTest.test_decode __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_decode>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ PartialCodepointVocabularyTest.test_decode_tf _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_decode_tf>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ PartialCodepointVocabularyTest.test_encode __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_encode>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ PartialCodepointVocabularyTest.test_encode_tf _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_encode_tf>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ________________ PartialCodepointVocabularyTest.test_not_equal _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_not_equal>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ PartialCodepointVocabularyTest.test_vocab ___________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_vocab>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________ PartialCodepointVocabularyTest.test_vocab_constructor _____________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.vocabularies_test.PartialCodepointVocabularyTest testMethod=test_vocab_constructor>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def setUp(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       super().setUp()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       self.char_points = [ord(i) for i in \"thisae \"]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       data = \"\\n\".join(str(i) for i in self.char_points)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >     self.char_points_file = self.create_tempfile(content=data)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/vocabularies_test.py:561: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:1376: in value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     val = getattr(self._flagvalues, self._name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____ ProcessTaskBeamTest.test_cache_before_tokenization_ndfeatures_pipeline ____\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_cache_before_tokenization_ndfeatures_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________ ProcessTaskBeamTest.test_cache_before_tokenization_pipeline __________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_cache_before_tokenization_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ ProcessTaskBeamTest.test_function_pipeline __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_function_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | __________________ ProcessTaskBeamTest.test_new_tfds_pipeline __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_new_tfds_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ______________________ ProcessTaskBeamTest.test_overwrite ______________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_overwrite>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ ProcessTaskBeamTest.test_text_line_pipeline __________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_text_line_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _________________ ProcessTaskBeamTest.test_tf_example_pipeline _________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_tf_example_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ____________________ ProcessTaskBeamTest.test_tfds_pipeline ____________________\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <seqio.scripts.cache_tasks_test.ProcessTaskBeamTest testMethod=test_tfds_pipeline>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def get_tempdir(self):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       try:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       flags.FLAGS.test_tmpdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1139: \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | name = 'test_tmpdir'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __getattr__(self, name):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Retrieves the 'value' attribute of the flag --name.\"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       fl = self._flags()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name not in fl:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if name in self.__dict__['__hiddenflags']:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise AttributeError(name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if self.__dict__['__flags_parsed'] or fl[name].present:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         return fl[name].value\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       else:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnparsedFlagAccessError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'Trying to access flag --%s before flags were parsed.' % name)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:481: UnparsedFlagAccessError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | During handling of the above exception, another exception occurred:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1150: in setUp\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     self.test_tmpdir = self.get_tempdir()\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/test_utils.py:1142: in get_tempdir\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     flags.FLAGS(sys.argv)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | self = <absl.flags._flagvalues.FlagValues object at 0x7f564a4c7040>\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | argv = ['/opt/hostedtoolcache/Python/3.8.11/x64/bin/pytest', '--junitxml=report.xml']\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | known_only = False\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     def __call__(self, argv, known_only=False):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"Parses flags from argv; stores parsed flags into this FlagValues object.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       All unparsed arguments are returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Args:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          argv: a tuple/list of strings.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          known_only: bool, if True, parse and remove known flags; return the rest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |            untouched. Unknown flags specified by --undefok are not returned.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Returns:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          The list of arguments not parsed as options, including argv[0].\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       Raises:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          Error: Raised on any parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          TypeError: Raised on passing wrong type of arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |          ValueError: Raised on flag value parsing error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       \"\"\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if isinstance(argv, (str, bytes)):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise TypeError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv should be a tuple/list of strings, not bytes or string.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       if not argv:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         raise ValueError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'argv cannot be an empty list, and must contain the program name as '\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             'the first element.')\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # This pre parses the argv list for --flagfile=<> options.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       program_name = argv[0]\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       args = self.read_flags_from_files(argv[1:], force_gnu=False)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Parse the arguments.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       unknown_flags, unparsed_args = self._parse_args(args, known_only)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Handle unknown flags by raising UnrecognizedFlagError.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       # Note some users depend on us raising this particular error.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |       for name, value in unknown_flags:\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |         suggestions = _helpers.get_flag_suggestions(name, list(self))\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | >       raise _exceptions.UnrecognizedFlagError(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |             name, value, suggestions=suggestions)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | E       absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/absl/flags/_flagvalues.py:652: UnrecognizedFlagError\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | =============================== warnings summary ===============================\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ../../../opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/hdfs/config.py:15\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/hdfs/config.py:15: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     from imp import load_source\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ../../../opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/apache_beam/testing/test_pipeline.py:36\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/apache_beam/testing/test_pipeline.py:36: PytestCollectionWarning: cannot collect test class 'TestPipeline' because it has a __init__ constructor (from: seqio/beam_utils_test.py)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     class TestPipeline(Pipeline):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ../../../opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/apache_beam/testing/test_pipeline.py:36\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/apache_beam/testing/test_pipeline.py:36: PytestCollectionWarning: cannot collect test class 'TestPipeline' because it has a __init__ constructor (from: seqio/scripts/cache_tasks_test.py)\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     class TestPipeline(Pipeline):\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/evaluation_test.py::EvaluationTest::test_caching\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/evaluation_test.py::EvaluationTest::test_no_sequence_length\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/evaluation_test.py::EvaluationTest::test_partial_sequence_length\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/evaluation_test.py::EvaluationTest::test_preprocessor_with_optional_sequence_length\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | seqio/evaluation_test.py::EvaluationTest::test_short_inputs_targets\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/google-seqio/seqio/evaluation.py:522: DeprecationWarning: The 'warn' function is deprecated, use 'warning' instead\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |     logging.warn(\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | \n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/google-seqio/report.xml -\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | =========================== short test summary info ============================\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_count_characters_str_dataset - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_count_characters_str_dataset_in_get_stats - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_count_characters_tokenized_dataset - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_count_characters_tokenized_dataset_with_non_spm_vocab - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_get_info - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_get_stats_task_ids - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_get_stats_tokenized_dataset - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_preprocess_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_write_example_tf_record - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/beam_utils_test.py::BeamUtilsTest::test_write_json - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_cache_exists - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_cached_data_source_shuffle_buffer_default - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_cached_data_source_shuffle_buffer_set - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_datasource_prohibits_caching - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_different_seeds_cached_mismatch - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_different_seeds_random_tp_uncached_mismatch - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_different_seeds_uncached_mismatch - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_disallow_shuffle - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_dtype - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_feature_validation - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_function_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_get_cached_stats - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_get_dataset_cached - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_get_dataset_no_truncation - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_get_dataset_onthefly - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_invalid_name - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_list_shards - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_metric_fn_signature - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_metric_obj_arg_for_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_no_eos - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_no_shuffle_different_seeds_random_tp_uncached_mismatch - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_no_shuffle_with_seed_cached_match - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_no_shuffle_with_seed_uncached_match - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_num_epochs - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_num_input_examples - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_plaintext_to_pretokenized_rename - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_proto_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_repeat_name - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_fails_on_invalid_args - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_metric_fns - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_metric_objs - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_name - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_output_features - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_postprocess_fn - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_preprocessors - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_shuffle_butter_size - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_replace_source - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_requires_caching - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_same_seeds_cached_match - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_same_seeds_random_tp_uncached_match - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_same_seeds_uncached_match - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_set_global_cache_dirs - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_sharding - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_supports_caching - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_text_line_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_tf_example_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_tfds_task - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TasksTest::test_value_errors - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_copy_pretokenized - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_get_dataset - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_get_dataset_mix - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_get_dataset_passthrough_features - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_get_rate_with_callable - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_mixture_of_mixtures - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_mixture_of_mixtures_dupe - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_mixture_of_tasks_with_different_features - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_mixture_with_no_tasks - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_mixture_with_sample_fn - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_num_examples - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_splits - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_task_objs - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_task_objs_default_rate - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_tasks - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::MixturesTest::test_tasks_with_tunable_rates - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TfdsDataSourceTest::test_tfds_source_splits - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TfdsDataSourceTest::test_tfds_splits - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::FunctionDataSourceTest::test_function_source_signature - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::FileDataSourceTest::test_file_data_source_shuffle_buffer_full - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::FileDataSourceTest::test_file_data_source_shuffle_buffer_low - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::FileDataSourceTest::test_repr - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::FileDataSourceTest::test_str - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::ProtoDataSource::test_repr - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::ProtoDataSource::test_str - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/dataset_providers_test.py::TFExampleDataSource::test_str - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_mixture_new_output_features - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_mixture_new_vocab - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_mixture_or_task_with_new_vocab_invalid - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_mixture_or_task_with_new_vocab_override_valid - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_mixture_without_missing_task_splits - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_task_new_output_features - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_task_new_vocab - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/helpers_test.py::HelpersTest::test_task_with_truncated_data - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTestV1::test_logging - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTest::test_log_audio - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTest::test_log_generic - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTest::test_log_histogram - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTest::test_log_image - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTest::test_log_scalar - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::TensorBoardLoggerTest::test_log_text - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_2d_ragged_input - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_logging - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_logging_metrics_only - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_metrics_multiple_steps - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_metrics_non_serializable - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_n_prediction_and_scores - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_non_serializable_prediction - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_non_serializable_target - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_numpy_data - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_prediction_bytes - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_predictions_and_aux_values - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/loggers_test.py::JSONLoggerTest::test_predictions_only - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/test_utils_test.py::TasksTest::test_data_injection - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/utils_test.py::MixtureRateTest::test_mixing_rate_num_characters - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/utils_test.py::MixtureRateTest::test_mixing_rate_num_examples - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_decode - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_decode_tf - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_encode - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_encode_tf - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_not_equal - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_vocab - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/vocabularies_test.py::PartialCodepointVocabularyTest::test_vocab_constructor - absl.flags._exceptions.UnparsedFlagAccessError: Trying to access flag --test_tmpdir before flags were parsed.\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_cache_before_tokenization_ndfeatures_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_cache_before_tokenization_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_function_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_new_tfds_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_overwrite - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_text_line_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_tf_example_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | FAILED seqio/scripts/cache_tasks_test.py::ProcessTaskBeamTest::test_tfds_pipeline - absl.flags._exceptions.UnrecognizedFlagError: Unknown command line flag 'junitxml'\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | ===== 129 failed, 250 passed, 21 skipped, 8 warnings in 112.57s (0:01:52) ======\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u274c  Failure - Main Test with pytest\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] exitcode '1': failure\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \u2b50 Run Main Report success or failure as github status\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4.sh] user= workdir=\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | {\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   \"message\": \"Resource not accessible by personal access token\",\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   |   \"documentation_url\": \"https://docs.github.com/rest/commits/statuses#create-a-commit-status\"\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   | }\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build]   \u2705  Success - Main Report success or failure as github status\n[6ae2030a-6d2d-4bba-b786-dfb692e02aa7/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/google-seqio/.github/workflows/build-crawler.yaml",
            "type": "pytest"
        },
        "workflow_name": "6ae2030a-6d2d-4bba-b786-dfb692e02aa7",
        "build_tool": "pytest",
        "elapsed_time": 484.57466650009155
    }
}