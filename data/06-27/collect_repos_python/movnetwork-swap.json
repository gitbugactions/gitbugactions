{
    "repository": "movnetwork/swap",
    "stars": 70,
    "language": "python",
    "size": 3275,
    "clone_url": "https://github.com/movnetwork/swap.git",
    "timestamp": "2023-06-28T14:45:05.842449Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_exceptions",
                "name": "test_exceptions",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_swap_utils",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.test_cli",
                "name": "test_swap_cli",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_decode",
                "name": "test_bitcoin_cli_decode",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_fund",
                "name": "test_bitcoin_cli_fund",
                "time": 0.214,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_htlc",
                "name": "test_bitcoin_cli_htlc",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_refund",
                "name": "test_bitcoin_cli_refund",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_signature",
                "name": "test_bitcoin_cli_signature",
                "time": 5.701,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_submit",
                "name": "test_bitcoin_cli_submit",
                "time": 0.506,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bitcoin.test_bitcoin_cli_withdraw",
                "name": "test_bitcoin_cli_withdraw",
                "time": 0.473,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_decode",
                "name": "test_bytom_cli_decode",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_fund",
                "name": "test_bytom_cli_fund",
                "time": 5.391,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert \"Error: Insufficient spend UTXO's, you don't have enough amount.\\n\" == 'eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogImJtMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2FldDd6dCIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZDc2Zjk3ZTI1N2E1ZGIwOTdhNDAzOWViZjkwOGU2ZDEwM2Q0MjVjMWVhYWVkZGMzZGRjMzU5ZjJmNjdlZTFjY2JmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzg4ZWQ3NDAwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNDhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMTIyMDAyMGE4NmFkZWE1NWJiYWJmMjc4Mjk1Yzg3NzdhYmRjNjMyMTYwNjNjYzE1ZmI5NTY5YTNjMWE0ODQ3YWMxNzRjMTAwMDAxM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZTBhZGQ5M2IwMTE2MDAxNDI4ZTIxMjhmZGQ2ZmI3MmNmNDYwZTE0OGQ4NmIzZjRmM2YzNGViNGUwMCIsICJoYXNoIjogImFiMDYyMDEwYmMzYjEyZGU4NDhiZGRmZjg2Y2Y5MWQ0M2I5ODJmYjA2YjRhMmNjMDhjNDY2NTgwYzgxNTdiZjIiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiOGRlMzE3YmRkNDlkMmJlYzNjOGU1ODA0MDEwYWVlYmNkYWZiNGE1NjM3ZWYzZGQ5ZmQ0M2FhZTA5ZDA3NGUxYSJdLCAicHVibGljX2tleSI6ICI1ZGU3MzNjZjVlMDg5YWQ2YTBkMThiZGVlNTg2MTFlZDYzZjc3ODk3YWEzNTI5OWM1OWI2ODM3ODg2OGUwNWI1IiwgIm5ldHdvcmsiOiAibWFpbm5ldCIsICJwYXRoIjogIm0vNDQvMTUzLzEvMC8xIn1dLCAic2lnbmF0dXJlcyI6IFtdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInR5cGUiOiAiYnl0b21fZnVuZF91bnNpZ25lZCJ9\\n'\n  - eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogImJtMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2FldDd6dCIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZDc2Zjk3ZTI1N2E1ZGIwOTdhNDAzOWViZjkwOGU2ZDEwM2Q0MjVjMWVhYWVkZGMzZGRjMzU5ZjJmNjdlZTFjY2JmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzg4ZWQ3NDAwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNDhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMTIyMDAyMGE4NmFkZWE1NWJiYWJmMjc4Mjk1Yzg3NzdhYmRjNjMyMTYwNjNjYzE1ZmI5NTY5YTNjMWE0ODQ3YWMxNzRjMTAwMDAxM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZTBhZGQ5M2IwMTE2MDAxNDI4ZTIxMjhmZGQ2ZmI3MmNmNDYwZTE0OGQ4NmIzZjRmM2YzNGViNGUwMCIsICJoYXNoIjogImFiMDYyMDEwYmMzYjEyZGU4NDhiZGRmZjg2Y2Y5MWQ0M2I5ODJmYjA2YjRhMmNjMDhjNDY2NTgwYzgxNTdiZjIiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiOGRlMzE3YmRkNDlkMmJlYzNjOGU1ODA0MDEwYWVlYmNkYWZiNGE1NjM3ZWYzZGQ5ZmQ0M2FhZTA5ZDA3NGUxYSJdLCAicHVibGljX2tleSI6ICI1ZGU3MzNjZjVlMDg5YWQ2YTBkMThiZGVlNTg2MTFlZDYzZjc3ODk3YWEzNTI5OWM1OWI2ODM3ODg2OGUwNWI1IiwgIm5ldHdvcmsiOiAibWFpbm5ldCIsICJwYXRoIjogIm0vNDQvMTUzLzEvMC8xIn1dLCAic2lnbmF0dXJlcyI6IFtdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInR5cGUiOiAiYnl0b21fZnVuZF91bnNpZ25lZCJ9\n  + Error: Insufficient spend UTXO's, you don't have enough amount.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_htlc",
                "name": "test_bytom_cli_htlc",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_refund",
                "name": "test_bytom_cli_refund",
                "time": 13.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_signature",
                "name": "test_bytom_cli_signature",
                "time": 0.13,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_submit",
                "name": "test_bytom_cli_submit",
                "time": 4.851,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.bytom.test_bytom_cli_withdraw",
                "name": "test_bytom_cli_withdraw",
                "time": 11.775,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_decode",
                "name": "test_ethereum_cli_decode",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_fund",
                "name": "test_ethereum_cli_fund",
                "time": 1.067,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_htlc",
                "name": "test_ethereum_cli_htlc",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_refund",
                "name": "test_ethereum_cli_refund",
                "time": 0.619,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_signature",
                "name": "test_ethereum_cli_signature",
                "time": 6.096,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_submit",
                "name": "test_ethereum_cli_submit",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.test_ethereum_cli_withdraw",
                "name": "test_ethereum_cli_withdraw",
                "time": 0.614,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.erc20.test_ethereum_cli_erc20_fund",
                "name": "test_ethereum_cli_erc20_fund",
                "time": 0.16,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.erc20.test_ethereum_cli_erc20_htlc",
                "name": "test_ethereum_cli_erc20_htlc",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.erc20.test_ethereum_cli_erc20_refund",
                "name": "test_ethereum_cli_erc20_refund",
                "time": 0.626,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.ethereum.erc20.test_ethereum_cli_erc20_withdraw",
                "name": "test_ethereum_cli_erc20_withdraw",
                "time": 0.631,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_decode",
                "name": "test_vapor_cli_decode",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_fund",
                "name": "test_vapor_cli_fund",
                "time": 5.162,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogInZwMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2tjbXI4YSIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZGMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzhkM2U3MzMwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNGEwMDQ4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjgwYWRlMjA0MDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDAwMTNlMDAzY2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlMGYyZTkyZTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTAwIiwgImhhc2giOiAiOTQ1NjUyZDJjNGY0ZWI4N2JmZjFkM2E1ZDY4YjgxMmFmOGJlOTdiZDM2NDVlYjBjYTlhYWJkMTQyZmE5YTlmYSIsICJ1bnNpZ25lZF9kYXRhcyI6IFt7ImRhdGFzIjogWyI1NmJkYTQ4MGJiYTQzNTFiYWEwMmU0NTZkZThiMTUyYTI3Y2RhNzM1NWE0OGRjZjVkYjMzMTExNzU4OGQ3M2VkIl0sICJwdWJsaWNfa2V5IjogIjVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUiLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiAibS80NC8xNTMvMS8wLzEifV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9mdW5kX3Vuc2lnbmVkIn0=\\n'\n  - eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogInZwMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2tjbXI4YSIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZGMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzhkM2U3MzMwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNGEwMDQ4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjgwYWRlMjA0MDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDAwMTNlMDAzY2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlMGYyZTkyZTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTAwIiwgImhhc2giOiAiOTQ1NjUyZDJjNGY0ZWI4N2JmZjFkM2E1ZDY4YjgxMmFmOGJlOTdiZDM2NDVlYjBjYTlhYWJkMTQyZmE5YTlmYSIsICJ1bnNpZ25lZF9kYXRhcyI6IFt7ImRhdGFzIjogWyI1NmJkYTQ4MGJiYTQzNTFiYWEwMmU0NTZkZThiMTUyYTI3Y2RhNzM1NWE0OGRjZjVkYjMzMTExNzU4OGQ3M2VkIl0sICJwdWJsaWNfa2V5IjogIjVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUiLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiAibS80NC8xNTMvMS8wLzEifV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9mdW5kX3Vuc2lnbmVkIn0=\n  + Error: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_htlc",
                "name": "test_vapor_cli_htlc",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_refund",
                "name": "test_vapor_cli_refund",
                "time": 2.816,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgImhhc2giOiAiMmFmMTIwOWQ2Yzg0MGI1NjIzY2M2MWE2ODNiYzNlYWYwZTJmMmVjNGY3NjM4YzQ1MmI4ZmM3OWI0N2YzM2YxMyIsICJyYXciOiAiMDcwMTAwMDEwMTZiMDE2OWMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMDAxMjIwMDIwZTVkMWIzNDdmOGVmZWFhNDYxOGFlYzgyMmZhMzU1NTczNmViZTBlNzFlZWJlZTdlODAxNjcwNGM2MjJmYmNhZjAxMDAwMTAxM2UwMDNjZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmI4YTRjMzA0MDExNjAwMTQyOGUyMTI4ZmRkNmZiNzJjZjQ2MGUxNDhkODZiM2Y0ZjNmMzRlYjRlMDAiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiNGMzYzE1YTI5Mzg4MmQ5NWI4OTRkZDFiNDg1MzIwNmIyZTMyMDJkYmE1Njc1YTQxNzUyZDNjZTY5ZWNiZGJlNCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9yZWZ1bmRfdW5zaWduZWQifQ==\\n'\n  - eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgImhhc2giOiAiMmFmMTIwOWQ2Yzg0MGI1NjIzY2M2MWE2ODNiYzNlYWYwZTJmMmVjNGY3NjM4YzQ1MmI4ZmM3OWI0N2YzM2YxMyIsICJyYXciOiAiMDcwMTAwMDEwMTZiMDE2OWMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMDAxMjIwMDIwZTVkMWIzNDdmOGVmZWFhNDYxOGFlYzgyMmZhMzU1NTczNmViZTBlNzFlZWJlZTdlODAxNjcwNGM2MjJmYmNhZjAxMDAwMTAxM2UwMDNjZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmI4YTRjMzA0MDExNjAwMTQyOGUyMTI4ZmRkNmZiNzJjZjQ2MGUxNDhkODZiM2Y0ZjNmMzRlYjRlMDAiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiNGMzYzE1YTI5Mzg4MmQ5NWI4OTRkZDFiNDg1MzIwNmIyZTMyMDJkYmE1Njc1YTQxNzUyZDNjZTY5ZWNiZGJlNCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9yZWZ1bmRfdW5zaWduZWQifQ==\n  + Error: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_signature",
                "name": "test_vapor_cli_signature",
                "time": 0.172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_submit",
                "name": "test_vapor_cli_submit",
                "time": 7.621,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'Error: (600), finalize tx fail\\n'\n  - Error: (600), finalize tx fail\n  + Error: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.vapor.test_vapor_cli_withdraw",
                "name": "test_vapor_cli_withdraw",
                "time": 4.683,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgInJhdyI6ICIwNzAxMDAwMTAxNmIwMTY5YzAwOWEyZGJmMDlmNGU2Mjc0MzcwZmI2MjM4MWNiOWFkNTBkMTQ5N2NlZTdkOWZlMjRlYWE4N2U2ODRkM2NiYWZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY4MGFkZTIwNDAwMDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDEwMDAxMDEzZTAwM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYjhhNGMzMDQwMTE2MDAxNGM5NWUwOTJjYWVhZWNlMzVjNTczZTcxZTExMDU1NTZkOTI5Y2ZjOTAwMCIsICJoYXNoIjogIjdmNDBkNjI2MDVkMjM4NTEyNjgzYTQ3M2M1MmY4NzE3MjQyZDYxZjI4MmQyOTA0NDA2ZWYzYTQ4YzM3NmNhNDMiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiMTI3YjY5YTljNmQ1ZWViZGZkM2JlYjA2NWY5MTExMDdiNzQwZmU0YWZhNWY3ZmIzNDZmYjcyY2I4MjU0YmI4NCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl93aXRoZHJhd191bnNpZ25lZCJ9\\n'\n  - eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgInJhdyI6ICIwNzAxMDAwMTAxNmIwMTY5YzAwOWEyZGJmMDlmNGU2Mjc0MzcwZmI2MjM4MWNiOWFkNTBkMTQ5N2NlZTdkOWZlMjRlYWE4N2U2ODRkM2NiYWZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY4MGFkZTIwNDAwMDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDEwMDAxMDEzZTAwM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYjhhNGMzMDQwMTE2MDAxNGM5NWUwOTJjYWVhZWNlMzVjNTczZTcxZTExMDU1NTZkOTI5Y2ZjOTAwMCIsICJoYXNoIjogIjdmNDBkNjI2MDVkMjM4NTEyNjgzYTQ3M2M1MmY4NzE3MjQyZDYxZjI4MmQyOTA0NDA2ZWYzYTQ4YzM3NmNhNDMiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiMTI3YjY5YTljNmQ1ZWViZGZkM2JlYjA2NWY5MTExMDdiNzQwZmU0YWZhNWY3ZmIzNDZmYjcyY2I4MjU0YmI4NCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl93aXRoZHJhd191bnNpZ25lZCJ9\n  + Error: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_decode",
                "name": "test_xinfin_cli_decode",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_fund",
                "name": "test_xinfin_cli_fund",
                "time": 0.697,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_htlc",
                "name": "test_xinfin_cli_htlc",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_refund",
                "name": "test_xinfin_cli_refund",
                "time": 0.842,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_signature",
                "name": "test_xinfin_cli_signature",
                "time": 4.502,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_submit",
                "name": "test_xinfin_cli_submit",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.test_xinfin_cli_withdraw",
                "name": "test_xinfin_cli_withdraw",
                "time": 0.813,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.xrc20.test_xinfin_cli_xrc20_fund",
                "name": "test_xinfin_cli_xrc20_fund",
                "time": 0.711,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.xrc20.test_xinfin_cli_xrc20_htlc",
                "name": "test_xinfin_cli_xrc20_htlc",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.xrc20.test_xinfin_cli_xrc20_refund",
                "name": "test_xinfin_cli_xrc20_refund",
                "time": 0.658,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.cli.xinfin.xrc20.test_xinfin_cli_xrc20_withdraw",
                "name": "test_xinfin_cli_xrc20_withdraw",
                "time": 0.698,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.test_config",
                "name": "test_config",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_htlc",
                "name": "test_bitcoin_htlc",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_rpc",
                "name": "test_bitcoin_rpc",
                "time": 0.405,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'tx_hex'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_signature",
                "name": "test_bitcoin_normal_signature",
                "time": 4.976,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_signature",
                "name": "test_bitcoin_fund_signature",
                "time": 4.576,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_signature",
                "name": "test_bitcoin_withdraw_signature",
                "time": 3.773,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_signature",
                "name": "test_bitcoin_refund_signature",
                "time": 4.4,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_solver",
                "name": "test_bitcoin_normal_solver",
                "time": 1.394,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_solver",
                "name": "test_bitcoin_fund_solver",
                "time": 1.397,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_solver",
                "name": "test_bitcoin_withdraw_solver",
                "time": 1.391,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_solver",
                "name": "test_bitcoin_refund_solver",
                "time": 1.4,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_transaction",
                "name": "test_bitcoin_normal_transaction",
                "time": 3.255,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_transaction",
                "name": "test_bitcoin_fund_transaction",
                "time": 2.839,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_transaction",
                "name": "test_bitcoin_withdraw_transaction",
                "time": 2.529,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_transaction",
                "name": "test_bitcoin_refund_transaction",
                "time": 2.252,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_utils",
                "name": "test_bitcoin_utils",
                "time": 0.253,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'tx_hex'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_wallet",
                "name": "test_bitcoin_wallet_from_entropy",
                "time": 3.727,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_wallet",
                "name": "test_bitcoin_wallet_from_mnemonic",
                "time": 3.138,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_wallet",
                "name": "test_bitcoin_wallet_from_seed",
                "time": 1.938,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_wallet",
                "name": "test_bitcoin_wallet_from_root_xprivate_key",
                "time": 3.535,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bitcoin.test_bitcoin_wallet",
                "name": "test_bitcoin_wallet_from_private_key",
                "time": 0.527,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_htlc",
                "name": "test_bytom_htlc",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_rpc",
                "name": "test_bytom_rpc",
                "time": 0.827,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_signature",
                "name": "test_bytom_normal_signature",
                "time": 0.096,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_signature",
                "name": "test_bytom_fund_signature",
                "time": 0.11,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_signature",
                "name": "test_bytom_withdraw_signature",
                "time": 0.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_signature",
                "name": "test_bytom_refund_signature",
                "time": 0.124,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_solver",
                "name": "test_bytom_normal_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_solver",
                "name": "test_bytom_fund_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_solver",
                "name": "test_bytom_withdraw_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_solver",
                "name": "test_bytom_refund_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_transaction",
                "name": "test_bytom_normal_transaction",
                "time": 3.701,
                "results": [
                    {
                        "result": "Failure",
                        "message": "swap.exceptions.BalanceError: Insufficient spend UTXO's, you don't have enough amount.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_transaction",
                "name": "test_bytom_fund_transaction",
                "time": 3.206,
                "results": [
                    {
                        "result": "Failure",
                        "message": "swap.exceptions.BalanceError: Insufficient spend UTXO's, you don't have enough amount.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_transaction",
                "name": "test_bytom_withdraw_transaction",
                "time": 5.773,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_transaction",
                "name": "test_bytom_refund_transaction",
                "time": 3.314,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_utils",
                "name": "test_bytom_utils",
                "time": 1.47,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_wallet",
                "name": "test_bytom_wallet_from_entropy",
                "time": 7.89,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_wallet",
                "name": "test_bytom_wallet_from_mnemonic",
                "time": 1.726,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_wallet",
                "name": "test_bytom_wallet_from_seed",
                "time": 0.131,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_wallet",
                "name": "test_bytom_wallet_from_xprivate_key",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.bytom.test_bytom_wallet",
                "name": "test_bytom_wallet_from_private_key",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_htlc",
                "name": "test_ethereum_htlc",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_rpc",
                "name": "test_ethereum_rpc",
                "time": 0.624,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_signature",
                "name": "test_ethereum_normal_signature",
                "time": 4.206,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_signature",
                "name": "test_ethereum_fund_signature",
                "time": 2.965,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_signature",
                "name": "test_ethereum_withdraw_signature",
                "time": 4.287,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_signature",
                "name": "test_ethereum_refund_signature",
                "time": 3.337,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_solver",
                "name": "test_ethereum_normal_solver",
                "time": 1.436,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_solver",
                "name": "test_ethereum_fund_solver",
                "time": 1.429,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_solver",
                "name": "test_ethereum_withdraw_solver",
                "time": 2.206,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_solver",
                "name": "test_ethereum_refund_solver",
                "time": 1.416,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_transaction",
                "name": "test_ethereum_normal_transaction",
                "time": 0.601,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_transaction",
                "name": "test_ethereum_fund_transaction",
                "time": 0.652,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_transaction",
                "name": "test_ethereum_withdraw_transaction",
                "time": 1.052,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_transaction",
                "name": "test_ethereum_refund_transaction",
                "time": 0.622,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_utils",
                "name": "test_ethereum_utils",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_wallet",
                "name": "test_ethereum_wallet_from_entropy",
                "time": 3.467,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_wallet",
                "name": "test_ethereum_wallet_from_mnemonic",
                "time": 2.596,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_wallet",
                "name": "test_ethereum_wallet_from_seed",
                "time": 1.987,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_wallet",
                "name": "test_ethereum_wallet_from_root_xprivate_key",
                "time": 1.793,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.test_ethereum_wallet",
                "name": "test_ethereum_wallet_from_private_key",
                "time": 0.384,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_htlc",
                "name": "test_ethereum_erc20_htlc",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_signature",
                "name": "test_ethereum_erc20_normal_signature",
                "time": 3.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_signature",
                "name": "test_ethereum_erc20_fund_signature",
                "time": 2.853,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_signature",
                "name": "test_ethereum_erc20_withdraw_signature",
                "time": 2.835,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_signature",
                "name": "test_ethereum_erc20_refund_signature",
                "time": 2.873,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_solver",
                "name": "test_ethereum_erc20_normal_solver",
                "time": 1.419,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_solver",
                "name": "test_ethereum_erc20_fund_solver",
                "time": 1.637,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_solver",
                "name": "test_ethereum_erc20_withdraw_solver",
                "time": 1.722,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_solver",
                "name": "test_ethereum_erc20_refund_solver",
                "time": 1.514,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_transaction",
                "name": "test_ethereum_erc20_normal_transaction",
                "time": 0.608,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_transaction",
                "name": "test_ethereum_erc20_fund_transaction",
                "time": 0.625,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_transaction",
                "name": "test_ethereum_erc20_withdraw_transaction",
                "time": 0.629,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.ethereum.erc20.test_ethereum_erc20_transaction",
                "name": "test_ethereum_erc20_refund_transaction",
                "time": 0.624,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_htlc",
                "name": "test_vapor_htlc",
                "time": 5.708,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_rpc",
                "name": "test_vapor_rpc",
                "time": 1.389,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_signature",
                "name": "test_vapor_normal_signature",
                "time": 0.099,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_signature",
                "name": "test_vapor_fund_signature",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_signature",
                "name": "test_vapor_withdraw_signature",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_signature",
                "name": "test_vapor_refund_signature",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_solver",
                "name": "test_vapor_normal_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_solver",
                "name": "test_vapor_fund_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_solver",
                "name": "test_vapor_withdraw_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_solver",
                "name": "test_vapor_refund_solver",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_transaction",
                "name": "test_vapor_normal_transaction",
                "time": 2.785,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_transaction",
                "name": "test_vapor_fund_transaction",
                "time": 2.706,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_transaction",
                "name": "test_vapor_withdraw_transaction",
                "time": 2.256,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_transaction",
                "name": "test_vapor_refund_transaction",
                "time": 1.768,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_utils",
                "name": "test_vapor_utils",
                "time": 1.573,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_wallet",
                "name": "test_vapor_wallet_from_entropy",
                "time": 2.328,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_wallet",
                "name": "test_vapor_wallet_from_mnemonic",
                "time": 0.181,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_wallet",
                "name": "test_vapor_wallet_from_seed",
                "time": 0.169,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_wallet",
                "name": "test_vapor_wallet_from_xprivate_key",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.vapor.test_vapor_wallet",
                "name": "test_vapor_wallet_from_private_key",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_htlc",
                "name": "test_xinfin_htlc",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_rpc",
                "name": "test_xinfin_rpc",
                "time": 0.125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_signature",
                "name": "test_xinfin_normal_signature",
                "time": 4.42,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_signature",
                "name": "test_xinfin_fund_signature",
                "time": 4.464,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_signature",
                "name": "test_xinfin_withdraw_signature",
                "time": 3.807,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_signature",
                "name": "test_xinfin_refund_signature",
                "time": 4.346,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_solver",
                "name": "test_xinfin_normal_solver",
                "time": 2.315,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_solver",
                "name": "test_xinfin_fund_solver",
                "time": 2.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_solver",
                "name": "test_xinfin_withdraw_solver",
                "time": 2.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_solver",
                "name": "test_xinfin_refund_solver",
                "time": 2.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_transaction",
                "name": "test_xinfin_normal_transaction",
                "time": 2.366,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_transaction",
                "name": "test_xinfin_fund_transaction",
                "time": 2.675,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_transaction",
                "name": "test_xinfin_withdraw_transaction",
                "time": 2.854,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_transaction",
                "name": "test_xinfin_refund_transaction",
                "time": 2.705,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_utils",
                "name": "test_xinfin_utils",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_wallet",
                "name": "test_xinfin_wallet_from_entropy",
                "time": 2.687,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_wallet",
                "name": "test_xinfin_wallet_from_mnemonic",
                "time": 2.464,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_wallet",
                "name": "test_xinfin_wallet_from_seed",
                "time": 2.613,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_wallet",
                "name": "test_xinfin_wallet_from_root_xprivate_key",
                "time": 2.519,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.test_xinfin_wallet",
                "name": "test_xinfin_wallet_from_private_key",
                "time": 0.571,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_htlc",
                "name": "test_xinfin_xrc20_htlc",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_signature",
                "name": "test_xinfin_xrc20_normal_signature",
                "time": 4.57,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_signature",
                "name": "test_xinfin_xrc20_fund_signature",
                "time": 4.286,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_signature",
                "name": "test_xinfin_xrc20_withdraw_signature",
                "time": 4.222,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_signature",
                "name": "test_xinfin_xrc20_refund_signature",
                "time": 4.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_solver",
                "name": "test_xinfin_xrc20_normal_solver",
                "time": 2.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_solver",
                "name": "test_xinfin_xrc20_fund_solver",
                "time": 2.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_solver",
                "name": "test_xinfin_xrc20_withdraw_solver",
                "time": 2.165,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_solver",
                "name": "test_xinfin_xrc20_refund_solver",
                "time": 2.321,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_transaction",
                "name": "test_xinfin_xrc20_normal_transaction",
                "time": 2.345,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_transaction",
                "name": "test_xinfin_xrc20_fund_transaction",
                "time": 2.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_transaction",
                "name": "test_xinfin_xrc20_withdraw_transaction",
                "time": 3.613,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.providers.xinfin.xrc20.test_xinfin_xrc20_transaction",
                "name": "test_xinfin_xrc20_refund_transaction",
                "time": 3.244,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] \ud83d\ude80  Start image=crawlergpt:latest\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/movnetwork-swap] user=0 workdir=\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=master\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] \u2b50 Run Main actions/checkout@master\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2705  Success - Main actions/checkout@master\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] \u2b50 Run Main Set up Python 3.9\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker cp src=/tmp/act-cache/de15aafe-3f31-44e1-b116-be8df71305a6/act/actions-setup-python@master/ dst=/var/run/act/actions/actions-setup-python@master/\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@master/] user=0 workdir=\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@master/dist/index.js] user= workdir=\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? false\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? true\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? true\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? true\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? true\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? true\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::explicit? true\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::evaluating 6 versions\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::matched: 3.9.6\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2699  ::set-output:: python-version=3.9.6\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Successfully setup CPython (3.9.6)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2753 add-matcher /run/act/actions/actions-setup-python@master/.github/python.json\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2705  Success - Main Set up Python 3.9\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] \u2b50 Run Main Install dependencies\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pip\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Installing collected packages: pip\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Attempting uninstall: pip\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     Found existing installation: pip 21.2.4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     Uninstalling pip-21.2.4:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |       Successfully uninstalled pip-21.2.4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Successfully installed pip-23.1.2\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/movnetwork-swap\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Checking if build backend supports build_editable: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Checking if build backend supports build_editable: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build editable: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build editable: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing editable metadata (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting requests<3,>=2.25.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 837.9 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting cryptos<2,>=1.36 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading cryptos-1.36-py3-none-any.whl (69 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 69.1/69.1 kB 2.1 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting ecdsa<1,>=0.13.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading ecdsa-0.18.0-py2.py3-none-any.whl (142 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 142.9/142.9 kB 5.5 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting chainside-btcpy<1,>=0.6.5 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading chainside_btcpy-0.6.5-py3-none-any.whl (62 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.3/62.3 kB 11.5 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting py-solc-x<2,>=1.1.1 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading py_solc_x-1.1.1-py3-none-any.whl (15 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting hdwallet<3,>=2.0.1 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading hdwallet-2.2.1-py3-none-any.whl (71 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 71.3/71.3 kB 1.0 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting mnemonic<1,>=0.19 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading mnemonic-0.20-py3-none-any.whl (62 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.0/62.0 kB 1.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting py-equity<1,>=0.1.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading py_equity-0.1.0-py3-none-any.whl (20 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting click<9,>=8.0.3 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 4.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pybytom<2,>=1.5.4 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pybytom-1.5.4-py3-none-any.whl (43 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 43.5/43.5 kB 966.9 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting six<2,>=1.15.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting web3<6,>=5.25.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading web3-5.31.4-py3-none-any.whl (502 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.8/502.8 kB 6.1 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting hexbytes<1,>=0.2.1 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading hexbytes-0.3.1-py3-none-any.whl (5.9 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pyxdc==0.1.2a1 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pyxdc-0.1.2a1-py3-none-any.whl (32 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinx<5,>=4.3.1 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading Sphinx-4.5.0-py3-none-any.whl (3.1 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.1/3.1 MB 16.1 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinx-rtd-theme<2,>=1.0.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinx_rtd_theme-1.2.2-py2.py3-none-any.whl (2.8 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.8/2.8 MB 15.5 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinx-click<4,>=3.0.2 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinx_click-3.1.0-py3-none-any.whl (8.3 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pytest<7,>=6.2.5 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pytest-6.2.5-py3-none-any.whl (280 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 280.7/280.7 kB 2.6 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pytest-cov<4,>=3.0.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pytest_cov-3.0.0-py3-none-any.whl (20 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pysha3<2,>=1.0.2 (from pyxdc==0.1.2a1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pysha3-1.0.2.tar.gz (829 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 829.2/829.2 kB 11.3 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting ed25519<2,>=1.5 (from pyxdc==0.1.2a1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading ed25519-1.5.tar.gz (868 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 869.0/869.0 kB 14.6 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting base58<3,>=2.0.1 (from pyxdc==0.1.2a1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading base58-2.1.1-py3-none-any.whl (5.6 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting rlp<3,>=2.0.1 (from pyxdc==0.1.2a1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading rlp-2.0.1-py2.py3-none-any.whl (20 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting ecdsa<1,>=0.13.0 (from swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading ecdsa-0.13-py2.py3-none-any.whl (86 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 86.9/86.9 kB 7.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pycryptodome<4,>=3.15 (from hdwallet<3,>=2.0.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pycryptodome-3.18.0-cp35-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 16.9 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting semantic-version<3,>=2.8.1 (from py-solc-x<2,>=1.1.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting attrs>=19.2.0 (from pytest<7,>=6.2.5->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 7.4 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting iniconfig (from pytest<7,>=6.2.5->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting packaging (from pytest<7,>=6.2.5->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 6.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pluggy<2.0,>=0.12 (from pytest<7,>=6.2.5->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting py>=1.8.2 (from pytest<7,>=6.2.5->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 98.7/98.7 kB 10.9 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting toml (from pytest<7,>=6.2.5->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov<4,>=3.0.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading coverage-7.2.7-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 228.3/228.3 kB 4.0 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting charset-normalizer<4,>=2 (from requests<3,>=2.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading charset_normalizer-3.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (199 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 199.2/199.2 kB 14.7 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting idna<4,>=2.5 (from requests<3,>=2.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 2.9 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting urllib3<3,>=1.21.1 (from requests<3,>=2.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 3.0 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting certifi>=2017.4.17 (from requests<3,>=2.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 3.1 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-applehelp (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_applehelp-1.0.4-py3-none-any.whl (120 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 120.6/120.6 kB 5.4 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-devhelp (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_devhelp-1.0.2-py2.py3-none-any.whl (84 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 84.7/84.7 kB 816.3 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-jsmath (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_jsmath-1.0.1-py2.py3-none-any.whl (5.1 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-htmlhelp>=2.0.0 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_htmlhelp-2.0.1-py3-none-any.whl (99 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 99.8/99.8 kB 5.6 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-serializinghtml>=1.1.5 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_serializinghtml-1.1.5-py2.py3-none-any.whl (94 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 94.0/94.0 kB 3.2 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-qthelp (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_qthelp-1.0.3-py2.py3-none-any.whl (90 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 90.6/90.6 kB 2.3 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting Jinja2>=2.3 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 8.2 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting Pygments>=2.0 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.1/1.1 MB 7.4 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting docutils<0.18,>=0.14 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading docutils-0.17.1-py2.py3-none-any.whl (575 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 575.5/575.5 kB 10.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting snowballstemmer>=1.1 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading snowballstemmer-2.2.0-py2.py3-none-any.whl (93 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 93.0/93.0 kB 5.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting babel>=1.3 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading Babel-2.12.1-py3-none-any.whl (10.1 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 10.1/10.1 MB 20.0 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting alabaster<0.8,>=0.7 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading alabaster-0.7.13-py3-none-any.whl (13 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting imagesize (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading imagesize-1.4.1-py2.py3-none-any.whl (8.8 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting importlib-metadata>=4.4 (from sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting sphinxcontrib-jquery<5,>=4 (from sphinx-rtd-theme<2,>=1.0.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading sphinxcontrib_jquery-4.1-py2.py3-none-any.whl (121 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 121.1/121.1 kB 1.6 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting aiohttp<4,>=3.7.4.post0 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading aiohttp-3.8.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.0/1.0 MB 10.3 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-abi<3.0.0,>=2.2.0 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_abi-2.2.0-py3-none-any.whl (28 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-account<0.6.0,>=0.5.9 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_account-0.5.9-py3-none-any.whl (101 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 101.8/101.8 kB 2.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-hash[pycryptodome]<1.0.0,>=0.2.0 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_hash-0.5.2-py3-none-any.whl (8.6 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-rlp<0.3 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_rlp-0.2.1-py3-none-any.whl (5.0 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-typing<3.0.0,>=2.0.0 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_typing-2.3.0-py3-none-any.whl (6.2 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-utils<2.0.0,>=1.9.5 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_utils-1.10.0-py3-none-any.whl (24 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting ipfshttpclient==0.8.0a2 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading ipfshttpclient-0.8.0a2-py3-none-any.whl (82 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 82.6/82.6 kB 3.8 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting jsonschema<5,>=3.2.0 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading jsonschema-4.17.3-py3-none-any.whl (90 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 90.4/90.4 kB 9.0 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting lru-dict<2.0.0,>=1.1.6 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading lru_dict-1.2.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (28 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting protobuf==3.19.5 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading protobuf-3.19.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.1/1.1 MB 12.7 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting websockets<10,>=9.1 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading websockets-9.1-cp39-cp39-manylinux2010_x86_64.whl (102 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 102.2/102.2 kB 9.7 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting multiaddr>=0.0.7 (from ipfshttpclient==0.8.0a2->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading multiaddr-0.0.9-py2.py3-none-any.whl (16 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting multidict<7.0,>=4.5 (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading multidict-6.0.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (114 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 114.2/114.2 kB 22.0 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting async-timeout<5.0,>=4.0.0a3 (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting yarl<2.0,>=1.0 (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading yarl-1.9.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (269 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 269.4/269.4 kB 2.7 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting frozenlist>=1.1.1 (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading frozenlist-1.3.3-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (158 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 158.8/158.8 kB 689.0 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting aiosignal>=1.1.2 (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting tomli (from coverage[toml]>=5.2.1->pytest-cov<4,>=3.0.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting parsimonious<0.9.0,>=0.8.0 (from eth-abi<3.0.0,>=2.2.0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading parsimonious-0.8.1.tar.gz (45 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 45.1/45.1 kB 145.4 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting bitarray<3,>=1.2.1 (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading bitarray-2.7.6-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (270 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 270.7/270.7 kB 2.3 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-keyfile<0.6.0,>=0.5.0 (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_keyfile-0.5.1-py3-none-any.whl (8.3 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-keys<0.4.0,>=0.3.4 (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_keys-0.3.4-py3-none-any.whl (21 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | INFO: pip is looking at multiple versions of eth-utils to determine which version is compatible with other requirements. This could take a while.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting eth-utils<2.0.0,>=1.9.5 (from web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading eth_utils-1.9.5-py3-none-any.whl (23 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting cytoolz<1.0.0,>=0.10.1 (from eth-utils<2.0.0,>=1.9.5->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading cytoolz-0.12.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.8 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.8/1.8 MB 18.4 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting zipp>=0.5 (from importlib-metadata>=4.4->sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting MarkupSafe>=2.0 (from Jinja2>=2.3->sphinx<5,>=4.3.1->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading MarkupSafe-2.1.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 (from jsonschema<5,>=3.2.0->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading pyrsistent-0.19.3-py3-none-any.whl (57 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.5/57.5 kB 673.9 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting toolz>=0.8.0 (from cytoolz<1.0.0,>=0.10.1->eth-utils<2.0.0,>=1.9.5->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading toolz-0.12.0-py3-none-any.whl (55 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 55.8/55.8 kB 533.2 kB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting varint (from multiaddr>=0.0.7->ipfshttpclient==0.8.0a2->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading varint-1.0.2.tar.gz (1.9 kB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Installing build dependencies: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Getting requirements to build wheel: finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Collecting netaddr (from multiaddr>=0.0.7->ipfshttpclient==0.8.0a2->web3<6,>=5.25.0->swap==0.5.0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Downloading netaddr-0.8.0-py2.py3-none-any.whl (1.9 MB)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.9/1.9 MB 26.5 MB/s eta 0:00:00\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Building wheels for collected packages: swap, ed25519, pysha3, parsimonious, varint\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building editable for swap (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building editable for swap (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Created wheel for swap: filename=swap-0.5.0-0.editable-py3-none-any.whl size=18831 sha256=1254108070a952866c71fb47ea34bcdabadfaab181dcab4d0c628488c4a28069\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-hc5do0ie/wheels/f0/14/e5/693cfb11a944ec261a2944ef10e445ca7e7b8a98a227a20c8f\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for ed25519 (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for ed25519 (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Created wheel for ed25519: filename=ed25519-1.5-cp39-cp39-linux_x86_64.whl size=125299 sha256=7f5044a5c5023017d2ca4083d304b07e008f4d67de94a6ae08110f8858aad40a\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/7c/18/e6/5b7d4ee6059b8b3fddd8a20b5a3ae70309c8d839b25b2992e5\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for pysha3 (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for pysha3 (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Created wheel for pysha3: filename=pysha3-1.0.2-cp39-cp39-linux_x86_64.whl size=153968 sha256=6cf85a9068f583c4ec88b5d28bbb0718f826d8bf0f30659e91f2a132c4a9b51a\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/17/9d/00/86e22a32b0109bd3c8797adf13a74427aa38e6ad1135633d50\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for parsimonious (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for parsimonious (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Created wheel for parsimonious: filename=parsimonious-0.8.1-py3-none-any.whl size=42707 sha256=7de869cb94717317f6dce070463189f57ef2e230fa718e13bd60d374f8481732\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/ae/3f/87/24298980f6c0436680b8b64caac154f542e138487ed0f90f2a\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for varint (pyproject.toml): started\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Building wheel for varint (pyproject.toml): finished with status 'done'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Created wheel for varint: filename=varint-1.0.2-py3-none-any.whl size=1962 sha256=5f80c6eb94b424f2274d8a2f6a39bcbede23214c60b60711f2982bae330024af\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/4b/47/bb/e4fd5cf6101ed8d6a9c52ff50e37bfb908ffdf330ddbbf9550\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Successfully built swap ed25519 pysha3 parsimonious varint\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Installing collected packages: varint, snowballstemmer, pysha3, netaddr, lru-dict, ed25519, ecdsa, cryptos, bitarray, zipp, websockets, urllib3, toolz, tomli, toml, sphinxcontrib-serializinghtml, sphinxcontrib-qthelp, sphinxcontrib-jsmath, sphinxcontrib-htmlhelp, sphinxcontrib-devhelp, sphinxcontrib-applehelp, six, semantic-version, pyrsistent, Pygments, pycryptodome, py, protobuf, pluggy, packaging, multidict, mnemonic, MarkupSafe, iniconfig, imagesize, idna, hexbytes, frozenlist, eth-typing, eth-hash, docutils, coverage, click, charset-normalizer, chainside-btcpy, certifi, base58, babel, attrs, async-timeout, alabaster, yarl, requests, pytest, parsimonious, multiaddr, jsonschema, Jinja2, importlib-metadata, hdwallet, cytoolz, aiosignal, sphinx, pytest-cov, pybytom, py-solc-x, py-equity, ipfshttpclient, eth-utils, aiohttp, sphinxcontrib-jquery, sphinx-click, rlp, eth-keys, eth-abi, sphinx-rtd-theme, eth-rlp, eth-keyfile, eth-account, web3, pyxdc, swap\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Successfully installed Jinja2-3.1.2 MarkupSafe-2.1.3 Pygments-2.15.1 aiohttp-3.8.4 aiosignal-1.3.1 alabaster-0.7.13 async-timeout-4.0.2 attrs-23.1.0 babel-2.12.1 base58-2.1.1 bitarray-2.7.6 certifi-2023.5.7 chainside-btcpy-0.6.5 charset-normalizer-3.1.0 click-8.1.3 coverage-7.2.7 cryptos-1.36 cytoolz-0.12.1 docutils-0.17.1 ecdsa-0.13 ed25519-1.5 eth-abi-2.2.0 eth-account-0.5.9 eth-hash-0.5.2 eth-keyfile-0.5.1 eth-keys-0.3.4 eth-rlp-0.2.1 eth-typing-2.3.0 eth-utils-1.9.5 frozenlist-1.3.3 hdwallet-2.2.1 hexbytes-0.3.1 idna-3.4 imagesize-1.4.1 importlib-metadata-6.7.0 iniconfig-2.0.0 ipfshttpclient-0.8.0a2 jsonschema-4.17.3 lru-dict-1.2.0 mnemonic-0.20 multiaddr-0.0.9 multidict-6.0.4 netaddr-0.8.0 packaging-23.1 parsimonious-0.8.1 pluggy-1.2.0 protobuf-3.19.5 py-1.11.0 py-equity-0.1.0 py-solc-x-1.1.1 pybytom-1.5.4 pycryptodome-3.18.0 pyrsistent-0.19.3 pysha3-1.0.2 pytest-6.2.5 pytest-cov-3.0.0 pyxdc-0.1.2a1 requests-2.31.0 rlp-2.0.1 semantic-version-2.10.0 six-1.16.0 snowballstemmer-2.2.0 sphinx-4.5.0 sphinx-click-3.1.0 sphinx-rtd-theme-1.2.2 sphinxcontrib-applehelp-1.0.4 sphinxcontrib-devhelp-1.0.2 sphinxcontrib-htmlhelp-2.0.1 sphinxcontrib-jquery-4.1 sphinxcontrib-jsmath-1.0.1 sphinxcontrib-qthelp-1.0.3 sphinxcontrib-serializinghtml-1.1.5 swap-0.5.0 toml-0.10.2 tomli-2.0.1 toolz-0.12.0 urllib3-2.0.3 varint-1.0.2 web3-5.31.4 websockets-9.1 yarl-1.9.2 zipp-3.15.0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | [notice] To update, run: pip install --upgrade pip\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u2705  Success - Main Install dependencies\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] \u2b50 Run Main Test with pytest\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ============================= test session starts ==============================\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | platform linux -- Python 3.9.6, pytest-6.2.5, py-1.11.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cachedir: .pytest_cache\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/movnetwork-swap, configfile: pytest.ini, testpaths: tests/\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | plugins: web3-5.31.4, cov-3.0.0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | collecting ... collected 173 items\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/test_exceptions.py::test_exceptions PASSED                         [  0%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/test_utils.py::test_swap_utils PASSED                              [  1%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/test_cli.py::test_swap_cli PASSED                              [  1%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_decode.py::test_bitcoin_cli_decode PASSED [  2%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_fund.py::test_bitcoin_cli_fund PASSED [  2%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_htlc.py::test_bitcoin_cli_htlc PASSED [  3%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_refund.py::test_bitcoin_cli_refund PASSED [  4%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_signature.py::test_bitcoin_cli_signature PASSED [  4%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_submit.py::test_bitcoin_cli_submit PASSED [  5%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bitcoin/test_bitcoin_cli_withdraw.py::test_bitcoin_cli_withdraw PASSED [  5%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_decode.py::test_bytom_cli_decode PASSED   [  6%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_fund.py::test_bytom_cli_fund FAILED       [  6%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_htlc.py::test_bytom_cli_htlc PASSED       [  7%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_refund.py::test_bytom_cli_refund PASSED   [  8%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_signature.py::test_bytom_cli_signature PASSED [  8%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_submit.py::test_bytom_cli_submit PASSED   [  9%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_withdraw.py::test_bytom_cli_withdraw PASSED [  9%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_decode.py::test_ethereum_cli_decode PASSED [ 10%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_fund.py::test_ethereum_cli_fund FAILED [ 10%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_htlc.py::test_ethereum_cli_htlc PASSED [ 11%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_refund.py::test_ethereum_cli_refund FAILED [ 12%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_signature.py::test_ethereum_cli_signature PASSED [ 12%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_submit.py::test_ethereum_cli_submit PASSED [ 13%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_withdraw.py::test_ethereum_cli_withdraw FAILED [ 13%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_fund.py::test_ethereum_cli_erc20_fund FAILED [ 14%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_htlc.py::test_ethereum_cli_erc20_htlc PASSED [ 15%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_refund.py::test_ethereum_cli_erc20_refund FAILED [ 15%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_withdraw.py::test_ethereum_cli_erc20_withdraw FAILED [ 16%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_decode.py::test_vapor_cli_decode PASSED   [ 16%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_fund.py::test_vapor_cli_fund FAILED       [ 17%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_htlc.py::test_vapor_cli_htlc PASSED       [ 17%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_refund.py::test_vapor_cli_refund FAILED   [ 18%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_signature.py::test_vapor_cli_signature PASSED [ 19%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_submit.py::test_vapor_cli_submit FAILED   [ 19%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_withdraw.py::test_vapor_cli_withdraw FAILED [ 20%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_decode.py::test_xinfin_cli_decode PASSED [ 20%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_fund.py::test_xinfin_cli_fund PASSED    [ 21%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_htlc.py::test_xinfin_cli_htlc PASSED    [ 21%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_refund.py::test_xinfin_cli_refund PASSED [ 22%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_signature.py::test_xinfin_cli_signature PASSED [ 23%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_submit.py::test_xinfin_cli_submit PASSED [ 23%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_withdraw.py::test_xinfin_cli_withdraw PASSED [ 24%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_fund.py::test_xinfin_cli_xrc20_fund PASSED [ 24%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_htlc.py::test_xinfin_cli_xrc20_htlc PASSED [ 25%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_refund.py::test_xinfin_cli_xrc20_refund PASSED [ 26%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_withdraw.py::test_xinfin_cli_xrc20_withdraw PASSED [ 26%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/test_config.py::test_config PASSED                       [ 27%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_htlc.py::test_bitcoin_htlc PASSED   [ 27%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_rpc.py::test_bitcoin_rpc FAILED     [ 28%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_signature.py::test_bitcoin_normal_signature PASSED [ 28%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_signature.py::test_bitcoin_fund_signature PASSED [ 29%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_signature.py::test_bitcoin_withdraw_signature PASSED [ 30%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_signature.py::test_bitcoin_refund_signature PASSED [ 30%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_solver.py::test_bitcoin_normal_solver PASSED [ 31%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_solver.py::test_bitcoin_fund_solver PASSED [ 31%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_solver.py::test_bitcoin_withdraw_solver PASSED [ 32%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_solver.py::test_bitcoin_refund_solver PASSED [ 32%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_transaction.py::test_bitcoin_normal_transaction PASSED [ 33%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_transaction.py::test_bitcoin_fund_transaction PASSED [ 34%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_transaction.py::test_bitcoin_withdraw_transaction PASSED [ 34%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_transaction.py::test_bitcoin_refund_transaction PASSED [ 35%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_utils.py::test_bitcoin_utils FAILED [ 35%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_wallet.py::test_bitcoin_wallet_from_entropy PASSED [ 36%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_wallet.py::test_bitcoin_wallet_from_mnemonic PASSED [ 36%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_wallet.py::test_bitcoin_wallet_from_seed PASSED [ 37%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_wallet.py::test_bitcoin_wallet_from_root_xprivate_key PASSED [ 38%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_wallet.py::test_bitcoin_wallet_from_private_key PASSED [ 38%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_htlc.py::test_bytom_htlc PASSED         [ 39%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_rpc.py::test_bytom_rpc PASSED           [ 39%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_signature.py::test_bytom_normal_signature PASSED [ 40%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_signature.py::test_bytom_fund_signature PASSED [ 41%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_signature.py::test_bytom_withdraw_signature PASSED [ 41%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_signature.py::test_bytom_refund_signature PASSED [ 42%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_solver.py::test_bytom_normal_solver PASSED [ 42%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_solver.py::test_bytom_fund_solver PASSED [ 43%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_solver.py::test_bytom_withdraw_solver PASSED [ 43%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_solver.py::test_bytom_refund_solver PASSED [ 44%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_transaction.py::test_bytom_normal_transaction FAILED [ 45%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_transaction.py::test_bytom_fund_transaction FAILED [ 45%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_transaction.py::test_bytom_withdraw_transaction PASSED [ 46%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_transaction.py::test_bytom_refund_transaction PASSED [ 46%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_utils.py::test_bytom_utils PASSED       [ 47%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_wallet.py::test_bytom_wallet_from_entropy PASSED [ 47%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_wallet.py::test_bytom_wallet_from_mnemonic PASSED [ 48%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_wallet.py::test_bytom_wallet_from_seed PASSED [ 49%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_wallet.py::test_bytom_wallet_from_xprivate_key PASSED [ 49%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_wallet.py::test_bytom_wallet_from_private_key PASSED [ 50%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_htlc.py::test_ethereum_htlc PASSED [ 50%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_rpc.py::test_ethereum_rpc FAILED  [ 51%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_signature.py::test_ethereum_normal_signature PASSED [ 52%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_signature.py::test_ethereum_fund_signature PASSED [ 52%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_signature.py::test_ethereum_withdraw_signature PASSED [ 53%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_signature.py::test_ethereum_refund_signature PASSED [ 53%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_solver.py::test_ethereum_normal_solver PASSED [ 54%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_solver.py::test_ethereum_fund_solver PASSED [ 54%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_solver.py::test_ethereum_withdraw_solver PASSED [ 55%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_solver.py::test_ethereum_refund_solver PASSED [ 56%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_normal_transaction FAILED [ 56%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_fund_transaction FAILED [ 57%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_withdraw_transaction FAILED [ 57%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_refund_transaction FAILED [ 58%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_utils.py::test_ethereum_utils PASSED [ 58%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py::test_ethereum_wallet_from_entropy FAILED [ 59%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py::test_ethereum_wallet_from_mnemonic PASSED [ 60%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py::test_ethereum_wallet_from_seed PASSED [ 60%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py::test_ethereum_wallet_from_root_xprivate_key PASSED [ 61%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py::test_ethereum_wallet_from_private_key PASSED [ 61%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_htlc.py::test_ethereum_erc20_htlc PASSED [ 62%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_signature.py::test_ethereum_erc20_normal_signature PASSED [ 63%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_signature.py::test_ethereum_erc20_fund_signature PASSED [ 63%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_signature.py::test_ethereum_erc20_withdraw_signature PASSED [ 64%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_signature.py::test_ethereum_erc20_refund_signature PASSED [ 64%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_solver.py::test_ethereum_erc20_normal_solver PASSED [ 65%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_solver.py::test_ethereum_erc20_fund_solver PASSED [ 65%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_solver.py::test_ethereum_erc20_withdraw_solver PASSED [ 66%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_solver.py::test_ethereum_erc20_refund_solver PASSED [ 67%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_normal_transaction FAILED [ 67%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_fund_transaction FAILED [ 68%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_withdraw_transaction FAILED [ 68%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_refund_transaction FAILED [ 69%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_htlc.py::test_vapor_htlc FAILED         [ 69%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_rpc.py::test_vapor_rpc FAILED           [ 70%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_signature.py::test_vapor_normal_signature PASSED [ 71%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_signature.py::test_vapor_fund_signature PASSED [ 71%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_signature.py::test_vapor_withdraw_signature PASSED [ 72%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_signature.py::test_vapor_refund_signature PASSED [ 72%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_solver.py::test_vapor_normal_solver PASSED [ 73%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_solver.py::test_vapor_fund_solver PASSED [ 73%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_solver.py::test_vapor_withdraw_solver PASSED [ 74%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_solver.py::test_vapor_refund_solver PASSED [ 75%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py::test_vapor_normal_transaction FAILED [ 75%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py::test_vapor_fund_transaction FAILED [ 76%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py::test_vapor_withdraw_transaction FAILED [ 76%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py::test_vapor_refund_transaction FAILED [ 77%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_utils.py::test_vapor_utils FAILED       [ 78%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_wallet.py::test_vapor_wallet_from_entropy FAILED [ 78%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_wallet.py::test_vapor_wallet_from_mnemonic PASSED [ 79%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_wallet.py::test_vapor_wallet_from_seed PASSED [ 79%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_wallet.py::test_vapor_wallet_from_xprivate_key PASSED [ 80%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_wallet.py::test_vapor_wallet_from_private_key PASSED [ 80%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_htlc.py::test_xinfin_htlc PASSED      [ 81%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_rpc.py::test_xinfin_rpc PASSED        [ 82%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_signature.py::test_xinfin_normal_signature PASSED [ 82%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_signature.py::test_xinfin_fund_signature PASSED [ 83%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_signature.py::test_xinfin_withdraw_signature PASSED [ 83%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_signature.py::test_xinfin_refund_signature PASSED [ 84%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_solver.py::test_xinfin_normal_solver PASSED [ 84%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_solver.py::test_xinfin_fund_solver PASSED [ 85%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_solver.py::test_xinfin_withdraw_solver PASSED [ 86%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_solver.py::test_xinfin_refund_solver PASSED [ 86%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_normal_transaction PASSED [ 87%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_fund_transaction PASSED [ 87%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_withdraw_transaction PASSED [ 88%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_refund_transaction PASSED [ 89%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_utils.py::test_xinfin_utils PASSED    [ 89%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py::test_xinfin_wallet_from_entropy PASSED [ 90%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py::test_xinfin_wallet_from_mnemonic PASSED [ 90%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py::test_xinfin_wallet_from_seed PASSED [ 91%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py::test_xinfin_wallet_from_root_xprivate_key PASSED [ 91%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py::test_xinfin_wallet_from_private_key PASSED [ 92%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_htlc.py::test_xinfin_xrc20_htlc PASSED [ 93%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_signature.py::test_xinfin_xrc20_normal_signature PASSED [ 93%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_signature.py::test_xinfin_xrc20_fund_signature PASSED [ 94%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_signature.py::test_xinfin_xrc20_withdraw_signature PASSED [ 94%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_signature.py::test_xinfin_xrc20_refund_signature PASSED [ 95%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_solver.py::test_xinfin_xrc20_normal_solver PASSED [ 95%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_solver.py::test_xinfin_xrc20_fund_solver PASSED [ 96%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_solver.py::test_xinfin_xrc20_withdraw_solver PASSED [ 97%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_solver.py::test_xinfin_xrc20_refund_solver PASSED [ 97%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py::test_xinfin_xrc20_normal_transaction PASSED [ 98%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py::test_xinfin_xrc20_fund_transaction PASSED [ 98%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py::test_xinfin_xrc20_withdraw_transaction PASSED [ 99%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py::test_xinfin_xrc20_refund_transaction PASSED [100%]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | =================================== FAILURES ===================================\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _____________________________ test_bytom_cli_fund ______________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5e4fa00>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_bytom_cli_fund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         fund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"bytom\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"fund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"bytom\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--contract-address\", _[\"bytom\"][\"htlc\"][\"contract_address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--asset\", _[\"bytom\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--amount\", _[\"bytom\"][\"amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--unit\", _[\"bytom\"][\"unit\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"bytom\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert fund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert fund.output == clean_transaction_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_raw=_[\"bytom\"][\"fund\"][\"unsigned\"][\"transaction_raw\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ) + \"\\n\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       assert \"Error: Insufficient spend UTXO's, you don't have enough amount.\\n\" == 'eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogImJtMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2FldDd6dCIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZDc2Zjk3ZTI1N2E1ZGIwOTdhNDAzOWViZjkwOGU2ZDEwM2Q0MjVjMWVhYWVkZGMzZGRjMzU5ZjJmNjdlZTFjY2JmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzg4ZWQ3NDAwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNDhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMTIyMDAyMGE4NmFkZWE1NWJiYWJmMjc4Mjk1Yzg3NzdhYmRjNjMyMTYwNjNjYzE1ZmI5NTY5YTNjMWE0ODQ3YWMxNzRjMTAwMDAxM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZTBhZGQ5M2IwMTE2MDAxNDI4ZTIxMjhmZGQ2ZmI3MmNmNDYwZTE0OGQ4NmIzZjRmM2YzNGViNGUwMCIsICJoYXNoIjogImFiMDYyMDEwYmMzYjEyZGU4NDhiZGRmZjg2Y2Y5MWQ0M2I5ODJmYjA2YjRhMmNjMDhjNDY2NTgwYzgxNTdiZjIiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiOGRlMzE3YmRkNDlkMmJlYzNjOGU1ODA0MDEwYWVlYmNkYWZiNGE1NjM3ZWYzZGQ5ZmQ0M2FhZTA5ZDA3NGUxYSJdLCAicHVibGljX2tleSI6ICI1ZGU3MzNjZjVlMDg5YWQ2YTBkMThiZGVlNTg2MTFlZDYzZjc3ODk3YWEzNTI5OWM1OWI2ODM3ODg2OGUwNWI1IiwgIm5ldHdvcmsiOiAibWFpbm5ldCIsICJwYXRoIjogIm0vNDQvMTUzLzEvMC8xIn1dLCAic2lnbmF0dXJlcyI6IFtdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInR5cGUiOiAiYnl0b21fZnVuZF91bnNpZ25lZCJ9\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         - eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogImJtMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2FldDd6dCIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZDc2Zjk3ZTI1N2E1ZGIwOTdhNDAzOWViZjkwOGU2ZDEwM2Q0MjVjMWVhYWVkZGMzZGRjMzU5ZjJmNjdlZTFjY2JmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzg4ZWQ3NDAwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNDhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMTIyMDAyMGE4NmFkZWE1NWJiYWJmMjc4Mjk1Yzg3NzdhYmRjNjMyMTYwNjNjYzE1ZmI5NTY5YTNjMWE0ODQ3YWMxNzRjMTAwMDAxM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZTBhZGQ5M2IwMTE2MDAxNDI4ZTIxMjhmZGQ2ZmI3MmNmNDYwZTE0OGQ4NmIzZjRmM2YzNGViNGUwMCIsICJoYXNoIjogImFiMDYyMDEwYmMzYjEyZGU4NDhiZGRmZjg2Y2Y5MWQ0M2I5ODJmYjA2YjRhMmNjMDhjNDY2NTgwYzgxNTdiZjIiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiOGRlMzE3YmRkNDlkMmJlYzNjOGU1ODA0MDEwYWVlYmNkYWZiNGE1NjM3ZWYzZGQ5ZmQ0M2FhZTA5ZDA3NGUxYSJdLCAicHVibGljX2tleSI6ICI1ZGU3MzNjZjVlMDg5YWQ2YTBkMThiZGVlNTg2MTFlZDYzZjc3ODk3YWEzNTI5OWM1OWI2ODM3ODg2OGUwNWI1IiwgIm5ldHdvcmsiOiAibWFpbm5ldCIsICJwYXRoIjogIm0vNDQvMTUzLzEvMC8xIn1dLCAic2lnbmF0dXJlcyI6IFtdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInR5cGUiOiAiYnl0b21fZnVuZF91bnNpZ25lZCJ9\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         + Error: Insufficient spend UTXO's, you don't have enough amount.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/bytom/test_bytom_cli_fund.py:32: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ____________________________ test_ethereum_cli_fund ____________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5761d30>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_cli_fund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         fund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"ethereum\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"fund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--secret-hash\", _[\"ethereum\"][\"htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--recipient-address\", _[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--sender-address\", _[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--endtime\", get_current_timestamp(plus=3600),\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--amount\", _[\"ethereum\"][\"amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--unit\", _[\"ethereum\"][\"unit\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"ethereum\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert fund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert is_transaction_raw(fund.output)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert False\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_fund.py:34: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ___________________________ test_ethereum_cli_refund ___________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e62470d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_cli_refund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         refund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"ethereum\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"refund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-hash\", _[\"ethereum\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"ethereum\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert refund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert is_transaction_raw(refund.output)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert False\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_refund.py:30: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | __________________________ test_ethereum_cli_withdraw __________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5b6aa00>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_cli_withdraw(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         withdraw = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"ethereum\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"withdraw\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-hash\", _[\"ethereum\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--secret-key\", _[\"ethereum\"][\"htlc\"][\"secret\"][\"key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"ethereum\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert withdraw.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert is_transaction_raw(withdraw.output)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert False\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_withdraw.py:30: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _________________________ test_ethereum_cli_erc20_fund _________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5d7ce20>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_cli_erc20_fund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         erc20_fund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"ethereum\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"fund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--secret-hash\", _[\"ethereum\"][\"erc20_htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--recipient-address\", _[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--sender-address\", _[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--endtime\", get_current_timestamp(plus=3600),\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--amount\", _[\"ethereum\"][\"erc20_amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"ethereum\"][\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--token-address\", _[\"ethereum\"][\"erc20_htlc\"][\"agreements\"][\"token_address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--erc20\", True\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert erc20_fund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert is_transaction_raw(erc20_fund.output)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert False\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_fund.py:35: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________ test_ethereum_cli_erc20_refund ________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e53667f0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_cli_erc20_refund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         erc20_refund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"ethereum\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"refund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-hash\", _[\"ethereum\"][\"erc20_transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"ethereum\"][\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--erc20\", True\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert erc20_refund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert is_transaction_raw(erc20_refund.output)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert False\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_refund.py:31: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________ test_ethereum_cli_erc20_withdraw _______________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5761f40>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_cli_erc20_withdraw(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         erc20_withdraw = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"ethereum\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"withdraw\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-hash\", _[\"ethereum\"][\"erc20_transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--secret-key\", _[\"ethereum\"][\"erc20_htlc\"][\"secret\"][\"key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"ethereum\"][\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--erc20\", True\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert erc20_withdraw.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert is_transaction_raw(erc20_withdraw.output)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert False\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +  where False = is_transaction_raw('Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E        +    where 'Error: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\\n' = <Result okay>.output\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_withdraw.py:31: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _____________________________ test_vapor_cli_fund ______________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5e9e490>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_cli_fund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         fund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"vapor\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"fund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--contract-address\", _[\"vapor\"][\"htlc\"][\"contract_address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--asset\", _[\"vapor\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--amount\", _[\"vapor\"][\"amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--unit\", _[\"vapor\"][\"unit\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"vapor\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert fund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert fund.output == clean_transaction_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_raw=_[\"vapor\"][\"fund\"][\"unsigned\"][\"transaction_raw\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ) + \"\\n\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogInZwMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2tjbXI4YSIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZGMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzhkM2U3MzMwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNGEwMDQ4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjgwYWRlMjA0MDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDAwMTNlMDAzY2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlMGYyZTkyZTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTAwIiwgImhhc2giOiAiOTQ1NjUyZDJjNGY0ZWI4N2JmZjFkM2E1ZDY4YjgxMmFmOGJlOTdiZDM2NDVlYjBjYTlhYWJkMTQyZmE5YTlmYSIsICJ1bnNpZ25lZF9kYXRhcyI6IFt7ImRhdGFzIjogWyI1NmJkYTQ4MGJiYTQzNTFiYWEwMmU0NTZkZThiMTUyYTI3Y2RhNzM1NWE0OGRjZjVkYjMzMTExNzU4OGQ3M2VkIl0sICJwdWJsaWNfa2V5IjogIjVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUiLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiAibS80NC8xNTMvMS8wLzEifV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9mdW5kX3Vuc2lnbmVkIn0=\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         - eyJmZWUiOiA0NDkwMDAsICJhZGRyZXNzIjogInZwMXE5cjNwOXI3YWQ3bWplYXJxdTl5ZHM2ZWxmdWxuZjY2d2tjbXI4YSIsICJyYXciOiAiMDcwMTAwMDEwMTVmMDE1ZGMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYzhkM2U3MzMwMTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTIyMDEyMDVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUwMjAxNGEwMDQ4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjgwYWRlMjA0MDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDAwMTNlMDAzY2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlMGYyZTkyZTAxMTYwMDE0MjhlMjEyOGZkZDZmYjcyY2Y0NjBlMTQ4ZDg2YjNmNGYzZjM0ZWI0ZTAwIiwgImhhc2giOiAiOTQ1NjUyZDJjNGY0ZWI4N2JmZjFkM2E1ZDY4YjgxMmFmOGJlOTdiZDM2NDVlYjBjYTlhYWJkMTQyZmE5YTlmYSIsICJ1bnNpZ25lZF9kYXRhcyI6IFt7ImRhdGFzIjogWyI1NmJkYTQ4MGJiYTQzNTFiYWEwMmU0NTZkZThiMTUyYTI3Y2RhNzM1NWE0OGRjZjVkYjMzMTExNzU4OGQ3M2VkIl0sICJwdWJsaWNfa2V5IjogIjVkZTczM2NmNWUwODlhZDZhMGQxOGJkZWU1ODYxMWVkNjNmNzc4OTdhYTM1Mjk5YzU5YjY4Mzc4ODY4ZTA1YjUiLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiAibS80NC8xNTMvMS8wLzEifV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9mdW5kX3Vuc2lnbmVkIn0=\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         + Error: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_fund.py:32: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ____________________________ test_vapor_cli_refund _____________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5fe52b0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_cli_refund(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         refund = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"vapor\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"refund\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-hash\", _[\"vapor\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--asset\", _[\"vapor\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"vapor\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert refund.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert refund.output == clean_transaction_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_raw=_[\"vapor\"][\"refund\"][\"unsigned\"][\"transaction_raw\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ) + \"\\n\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgImhhc2giOiAiMmFmMTIwOWQ2Yzg0MGI1NjIzY2M2MWE2ODNiYzNlYWYwZTJmMmVjNGY3NjM4YzQ1MmI4ZmM3OWI0N2YzM2YxMyIsICJyYXciOiAiMDcwMTAwMDEwMTZiMDE2OWMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMDAxMjIwMDIwZTVkMWIzNDdmOGVmZWFhNDYxOGFlYzgyMmZhMzU1NTczNmViZTBlNzFlZWJlZTdlODAxNjcwNGM2MjJmYmNhZjAxMDAwMTAxM2UwMDNjZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmI4YTRjMzA0MDExNjAwMTQyOGUyMTI4ZmRkNmZiNzJjZjQ2MGUxNDhkODZiM2Y0ZjNmMzRlYjRlMDAiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiNGMzYzE1YTI5Mzg4MmQ5NWI4OTRkZDFiNDg1MzIwNmIyZTMyMDJkYmE1Njc1YTQxNzUyZDNjZTY5ZWNiZGJlNCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9yZWZ1bmRfdW5zaWduZWQifQ==\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         - eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgImhhc2giOiAiMmFmMTIwOWQ2Yzg0MGI1NjIzY2M2MWE2ODNiYzNlYWYwZTJmMmVjNGY3NjM4YzQ1MmI4ZmM3OWI0N2YzM2YxMyIsICJyYXciOiAiMDcwMTAwMDEwMTZiMDE2OWMwMDlhMmRiZjA5ZjRlNjI3NDM3MGZiNjIzODFjYjlhZDUwZDE0OTdjZWU3ZDlmZTI0ZWFhODdlNjg0ZDNjYmFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmODBhZGUyMDQwMDAxMjIwMDIwZTVkMWIzNDdmOGVmZWFhNDYxOGFlYzgyMmZhMzU1NTczNmViZTBlNzFlZWJlZTdlODAxNjcwNGM2MjJmYmNhZjAxMDAwMTAxM2UwMDNjZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmI4YTRjMzA0MDExNjAwMTQyOGUyMTI4ZmRkNmZiNzJjZjQ2MGUxNDhkODZiM2Y0ZjNmMzRlYjRlMDAiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiNGMzYzE1YTI5Mzg4MmQ5NWI4OTRkZDFiNDg1MzIwNmIyZTMyMDJkYmE1Njc1YTQxNzUyZDNjZTY5ZWNiZGJlNCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl9yZWZ1bmRfdW5zaWduZWQifQ==\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         + Error: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_refund.py:31: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ____________________________ test_vapor_cli_submit _____________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e5852970>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_cli_submit(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         submit = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"vapor\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"submit\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-raw\", _[\"vapor\"][\"refund\"][\"unsigned\"][\"transaction_raw\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert submit.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert submit.output == \"Error: (600), finalize tx fail\" + \"\\n\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'Error: (600), finalize tx fail\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         - Error: (600), finalize tx fail\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         + Error: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_submit.py:26: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ___________________________ test_vapor_cli_withdraw ____________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cli_tester = <click.testing.CliRunner object at 0x7f86e704b2e0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_cli_withdraw(cli_tester):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         withdraw = cli_tester.invoke(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             cli_main, [\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"vapor\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"withdraw\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--address\", _[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--transaction-hash\", _[\"vapor\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--asset\", _[\"vapor\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"--network\", _[\"vapor\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert withdraw.exit_code == 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert withdraw.output == clean_transaction_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_raw=_[\"vapor\"][\"withdraw\"][\"unsigned\"][\"transaction_raw\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ) + \"\\n\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E       AssertionError: assert 'Error: Expecting value: line 1 column 1 (char 0)\\n' == 'eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgInJhdyI6ICIwNzAxMDAwMTAxNmIwMTY5YzAwOWEyZGJmMDlmNGU2Mjc0MzcwZmI2MjM4MWNiOWFkNTBkMTQ5N2NlZTdkOWZlMjRlYWE4N2U2ODRkM2NiYWZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY4MGFkZTIwNDAwMDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDEwMDAxMDEzZTAwM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYjhhNGMzMDQwMTE2MDAxNGM5NWUwOTJjYWVhZWNlMzVjNTczZTcxZTExMDU1NTZkOTI5Y2ZjOTAwMCIsICJoYXNoIjogIjdmNDBkNjI2MDVkMjM4NTEyNjgzYTQ3M2M1MmY4NzE3MjQyZDYxZjI4MmQyOTA0NDA2ZWYzYTQ4YzM3NmNhNDMiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiMTI3YjY5YTljNmQ1ZWViZGZkM2JlYjA2NWY5MTExMDdiNzQwZmU0YWZhNWY3ZmIzNDZmYjcyY2I4MjU0YmI4NCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl93aXRoZHJhd191bnNpZ25lZCJ9\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         - eyJmZWUiOiA1MDkwMDAsICJhZGRyZXNzIjogInZwMXF1aGdteDNsY2FsNDJnY3YyYWpwemxnNjQydW13aGM4OHJtNDd1bDVxemVjeWNjMzBoamhzYzczdGowIiwgInJhdyI6ICIwNzAxMDAwMTAxNmIwMTY5YzAwOWEyZGJmMDlmNGU2Mjc0MzcwZmI2MjM4MWNiOWFkNTBkMTQ5N2NlZTdkOWZlMjRlYWE4N2U2ODRkM2NiYWZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY4MGFkZTIwNDAwMDEyMjAwMjBlNWQxYjM0N2Y4ZWZlYWE0NjE4YWVjODIyZmEzNTU1NzM2ZWJlMGU3MWVlYmVlN2U4MDE2NzA0YzYyMmZiY2FmMDEwMDAxMDEzZTAwM2NmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYjhhNGMzMDQwMTE2MDAxNGM5NWUwOTJjYWVhZWNlMzVjNTczZTcxZTExMDU1NTZkOTI5Y2ZjOTAwMCIsICJoYXNoIjogIjdmNDBkNjI2MDVkMjM4NTEyNjgzYTQ3M2M1MmY4NzE3MjQyZDYxZjI4MmQyOTA0NDA2ZWYzYTQ4YzM3NmNhNDMiLCAidW5zaWduZWRfZGF0YXMiOiBbeyJkYXRhcyI6IFsiMTI3YjY5YTljNmQ1ZWViZGZkM2JlYjA2NWY5MTExMDdiNzQwZmU0YWZhNWY3ZmIzNDZmYjcyY2I4MjU0YmI4NCJdLCAibmV0d29yayI6ICJtYWlubmV0IiwgInBhdGgiOiBudWxsfV0sICJzaWduYXR1cmVzIjogW10sICJuZXR3b3JrIjogIm1haW5uZXQiLCAidHlwZSI6ICJ2YXBvcl93aXRoZHJhd191bnNpZ25lZCJ9\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E         + Error: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/vapor/test_vapor_cli_withdraw.py:30: AssertionError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________________ test_bitcoin_rpc _______________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_bitcoin_rpc():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert decode_raw(raw=_[\"bitcoin\"][\"fund\"][\"unsigned\"][\"raw\"], network=_[\"bitcoin\"][\"network\"]) == _[\"bitcoin\"][\"fund\"][\"unsigned\"][\"json\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # (REQ_ERROR) 16: mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises((APIError, requests.exceptions.ConnectionError)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           submit_raw(raw=_[\"bitcoin\"][\"fund\"][\"unsigned\"][\"raw\"], network=_[\"bitcoin\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_rpc.py:27: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | raw = '02000000017abbda261788c5d502b48393605d58c190962318b9afcf98aac3491116b2c05f0100000000ffffffff0240420f000000000017a9143100a75724c7fa4807408276f4bc7cc3eb7b79d08768c90200000000001976a914d2a6caa592a2f799187f5eae9ea1591c136013de88ac00000000'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | network = 'testnet', endpoint = 'sochain'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | headers = {'accept': 'application/json', 'content-type': 'application/json; charset=utf-8', 'user-agent': 'Swap User-Agent 0.5.0'}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | timeout = 60\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def submit_raw(raw: str, network: str = config[\"network\"], endpoint: str = \"sochain\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                    headers: dict = config[\"headers\"], timeout: int = config[\"timeout\"]) -> str:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         Submit original Bitcoin raw into blockchain.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param raw: Bitcoin transaction raw.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type raw: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param network: Bitcoin network, defaults to ``mainnet``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type network: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param endpoint: Bitcoin transaction submiter endpoint api name, defaults to ``sochain``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type endpoint: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param headers: Request headers, default to ``common-headers``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type headers: dict\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param timeout: Request timeout, default to ``60``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type timeout: int\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :returns: dict -- Bitcoin submitted transaction id/hash.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> from swap.providers.bitcoin.rpc import submit_raw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> submit_raw(raw=\"02000000011823f39a8c5f6f27845dd13a65e03fe2ef5108d235e7a36edb6eb267b0459c5a010000006a47304402207018b7fd1ba6624fe9bb0f16cd65fa243d202e32fdff452699f56465b61ab648022009f0dc1a0a63109246c45e120fc0d34b40e789dfc4d05e64f269602c7d67d9210121027f0dc0894bd690635412af782d05e4f79d3d40bf568978c650f3f1ca1a96cf36ffffffff02102700000000000017a9149418feed4647e156d6663db3e0cef7c050d038678734330100000000001976a91433ecab3d67f0e2bde43e52f41ec1ecbdc73f11f888ac00000000\", network=\"testnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"167faa4043ff622e7860ee5228d1ad6d763c5a6cfce79dbc3b9b5fc7bded6394\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not is_network(network=network):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise NetworkError(f\"Invalid Bitcoin '{network}' network\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                \"choose only 'mainnet' or 'testnet' networks.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if endpoint == \"smartbit\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             url = f\"{config[network]['smartbit']}/pushtx\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             data = dict(hex=raw)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response = requests.post(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 url=url, data=json.dumps(data), headers=headers, timeout=timeout\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if \"success\" in response_json and not response_json[\"success\"]:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise APIError(response_json[\"error\"][\"message\"], response_json[\"error\"][\"code\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             elif \"success\" in response_json and response_json[\"success\"]:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 return response_json[\"txid\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise APIError(\"Unknown Bitcoin submit payment error.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif endpoint == \"sochain\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             url = str(config[network]['sochain']).format(links=\"send_tx\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             data = dict(tx_hex=raw)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response = requests.post(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 url=url, data=json.dumps(data), headers=headers, timeout=timeout\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if \"status\" in response_json and response_json[\"status\"] == \"success\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 return response_json[\"data\"][\"txid\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             elif \"status\" in response_json and response_json[\"status\"] == \"fail\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >               raise APIError(response_json[\"data\"][\"tx_hex\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E               KeyError: 'tx_hex'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/rpc.py:246: KeyError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ______________________________ test_bitcoin_utils ______________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_bitcoin_utils():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_network(network=_[\"bitcoin\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_network(network=\"unknown\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"bitcoin\"][\"wallet\"][\"sender\"][\"address\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_address(address=_[\"bitcoin\"][\"wallet\"][\"sender\"][\"address\"], network=\"mainnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"bitcoin\"][\"wallet\"][\"sender\"][\"address\"], network=_[\"bitcoin\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"bitcoin\"][\"wallet\"][\"recipient\"][\"address\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_address(address=_[\"bitcoin\"][\"wallet\"][\"recipient\"][\"address\"], network=\"mainnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"bitcoin\"][\"wallet\"][\"recipient\"][\"address\"], network=_[\"bitcoin\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_transaction_raw(transaction_raw=_[\"bitcoin\"][\"fund\"][\"unsigned\"][\"transaction_raw\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_transaction_raw(transaction_raw=\"unknown\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert get_address_type(address=_[\"bitcoin\"][\"wallet\"][\"sender\"][\"address\"]) == \"p2pkh\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert get_address_type(address=_[\"bitcoin\"][\"wallet\"][\"recipient\"][\"address\"]) == \"p2pkh\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert get_address_type(address=_[\"bitcoin\"][\"htlc\"][\"contract_address\"]) == \"p2sh\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert decode_transaction_raw(transaction_raw=_[\"bitcoin\"][\"fund\"][\"unsigned\"][\"transaction_raw\"]) == \\\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             {\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"fee\": _[\"bitcoin\"][\"fund\"][\"unsigned\"][\"fee\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"network\": _[\"bitcoin\"][\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"transaction\": _[\"bitcoin\"][\"fund\"][\"unsigned\"][\"json\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"type\": \"bitcoin_fund_unsigned\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             }\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # (REQ_ERROR) 16: mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises((APIError, requests.exceptions.ConnectionError)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           submit_transaction_raw(transaction_raw=_[\"bitcoin\"][\"fund\"][\"unsigned\"][\"transaction_raw\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bitcoin/test_bitcoin_utils.py:52: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | transaction_raw = 'eyJmZWUiOiA2NzgsICJyYXciOiAiMDIwMDAwMDAwMTdhYmJkYTI2MTc4OGM1ZDUwMmI0ODM5MzYwNWQ1OGMxOTA5NjIzMThiOWFmY2Y5OGFhYzM0OTExM...E4N2Y1ZWFlOWVhMTU5MWMxMzYwMTNkZTg4YWMifV0sICJuZXR3b3JrIjogInRlc3RuZXQiLCAidHlwZSI6ICJiaXRjb2luX2Z1bmRfdW5zaWduZWQifQ=='\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | endpoint = 'sochain'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | headers = {'accept': 'application/json', 'content-type': 'application/json; charset=utf-8', 'user-agent': 'Swap User-Agent 0.5.0'}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | timeout = 60\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def submit_transaction_raw(transaction_raw: str, endpoint: str = \"sochain\", headers: dict = config[\"headers\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                timeout: int = config[\"timeout\"]) -> dict:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         Submit transaction raw to Bitcoin blockchain.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param transaction_raw: Bitcoin transaction raw.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type transaction_raw: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param endpoint: Bitcoin transaction submiter endpoint api name, defaults to ``sochain``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type endpoint: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param headers: Request headers, default to ``common-headers``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type headers: dict\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param timeout: Request timeout, default to ``60``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type timeout: int\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :returns: dict -- Bitcoin submitted transaction id, fee, type and date.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> from swap.providers.bitcoin.utils import submit_transaction_raw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> transaction_raw = \"eyJmZWUiOiA2NzgsICJyYXciOiAiMDIwMDAwMDAwMTg4OGJlN2VjMDY1MDk3ZDk1NjY0NzYzZjI3NmQ0MjU1NTJkNzM1ZmIxZDk3NGFlNzhiZjcyMTA2ZGNhMGYzOTEwMTAwMDAwMDAwZmZmZmZmZmYwMjEwMjcwMDAwMDAwMDAwMDAxN2E5MTQyYmIwMTNjM2U0YmViMDg0MjFkZWRjZjgxNWNiNjVhNWMzODgxNzhiODdiY2RkMGUwMDAwMDAwMDAwMTk3NmE5MTQ2NGE4MzkwYjBiMTY4NWZjYmYyZDRiNDU3MTE4ZGM4ZGE5MmQ1NTM0ODhhYzAwMDAwMDAwIiwgIm91dHB1dHMiOiBbeyJhbW91bnQiOiA5ODQ5NDYsICJuIjogMSwgInNjcmlwdCI6ICI3NmE5MTQ2NGE4MzkwYjBiMTY4NWZjYmYyZDRiNDU3MTE4ZGM4ZGE5MmQ1NTM0ODhhYyJ9XSwgIm5ldHdvcmsiOiAidGVzdG5ldCIsICJ0eXBlIjogImJpdGNvaW5fZnVuZF91bnNpZ25lZCJ9\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> submit_transaction_raw(transaction_raw=transaction_raw)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         {'fee': '...', 'type': '...', 'transaction_id': '...', 'network': '...', 'date': '...'}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not is_transaction_raw(transaction_raw=transaction_raw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise TransactionRawError(\"Invalid Bitcoin transaction raw.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         transaction_raw = clean_transaction_raw(transaction_raw)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         decoded_transaction_raw = b64decode(transaction_raw.encode())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         loaded_transaction_raw = json.loads(decoded_transaction_raw.decode())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if endpoint == \"smartbit\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             url = f\"{config[loaded_transaction_raw['network']]['smartbit']}/pushtx\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             data = dict(hex=loaded_transaction_raw[\"raw\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response = requests.post(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 url=url, data=json.dumps(data), headers=headers, timeout=timeout\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if \"success\" in response_json and not response_json[\"success\"]:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise APIError(response_json[\"error\"][\"message\"], response_json[\"error\"][\"code\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             elif \"success\" in response_json and response_json[\"success\"]:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 return dict(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     fee=loaded_transaction_raw[\"fee\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     type=loaded_transaction_raw[\"type\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     transaction_hash=response_json[\"txid\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     network=loaded_transaction_raw[\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     date=str(datetime.datetime.now())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise APIError(\"Unknown Bitcoin submit payment error.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif endpoint == \"sochain\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             url = str(config[loaded_transaction_raw['network']]['sochain']).format(links=\"send_tx\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             data = dict(tx_hex=loaded_transaction_raw[\"raw\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response = requests.post(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 url=url, data=json.dumps(data), headers=headers, timeout=timeout\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if \"status\" in response_json and response_json[\"status\"] == \"success\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 return dict(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     fee=loaded_transaction_raw[\"fee\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     type=loaded_transaction_raw[\"type\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     transaction_hash=response_json[\"data\"][\"txid\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     network=loaded_transaction_raw[\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     date=str(datetime.datetime.now())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             elif \"status\" in response_json and response_json[\"status\"] == \"fail\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >               raise APIError(response_json[\"data\"][\"tx_hex\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E               KeyError: 'tx_hex'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/utils.py:333: KeyError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________ test_bytom_normal_transaction _________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_bytom_normal_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_normal_transaction = NormalTransaction(network=_[\"bytom\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_normal_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"bytom\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipients={\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 _[\"bytom\"][\"wallet\"][\"recipient\"][\"address\"]: _[\"bytom\"][\"amount\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             },\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             asset=_[\"bytom\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             unit=_['bytom']['unit']\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_transaction.py:27: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <swap.providers.bytom.transaction.NormalTransaction object at 0x7f86e50d5e80>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | address = 'bm1q9r3p9r7ad7mjearqu9yds6elfulnf66waet7zt'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | recipients = {'bm1qe90qjt9w4m8rt3tnuu0pzp24dkffelys8zcwye': 0.1}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | asset = 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | unit = 'BTM'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def build_transaction(self, address: str, recipients: dict, asset: Union[str, AssetNamespace] = config[\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                           unit: str = config[\"unit\"]) -> \"NormalTransaction\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         Build Bytom normal transaction.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param address: Bytom sender wallet address.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type address: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param recipients: Recipients Bytom address and amount.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type recipients: dict\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param asset: Bytom asset id, defaults to ``BTM``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type asset: str, bytom.assets.AssetNamespace\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param unit: Bytom unit, default to ``NEU``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type unit: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :returns: NormalTransaction -- Bytom normal transaction instance.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> from swap.providers.bytom.transaction import NormalTransaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> normal_transaction: NormalTransaction = NormalTransaction(network=\"mainnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> normal_transaction.build_transaction(address=\"bm1q9ndylx02syfwd7npehfxz4lddhzqsve2fu6vc7\", recipients={\"bm1qf78sazxs539nmzztq7md63fk2x8lew6ed2gu5rnt9um7jerrh07q3yf5q8\": 10000000}, asset=\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         <swap.providers.bytom.transaction.NormalTransaction object at 0x0409DAF0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # Check parameter instances\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not is_address(address, self._network):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise AddressError(f\"Invalid Bytom sender '{address}' {self._network} address.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if unit not in [\"BTM\", \"mBTM\", \"NEU\"]:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise UnitError(\"Invalid Bytom unit, choose only 'BTM', 'mBTM' or 'NEU' units.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # Set address, fee and confirmations\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         self._address, self._asset, self._confirmations, inputs, outputs, self._amount = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address, (str(asset.ID) if isinstance(asset, AssetNamespace) else asset),\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             config[\"confirmations\"], [], [], (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 sum(recipients.values()) if unit == \"NEU\" else\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 amount_unit_converter(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     amount=sum(recipients.values()), unit_from=f\"{unit}2NEU\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         amount: int = get_balance(self._address, self._asset)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if amount < self._amount:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise BalanceError(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"Insufficient spend UTXO's\", \"you don't have enough amount.\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           swap.exceptions.BalanceError: Insufficient spend UTXO's, you don't have enough amount.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/transaction.py:298: BalanceError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _________________________ test_bytom_fund_transaction __________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_bytom_fund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         htlc = HTLC(network=_[\"bytom\"][\"network\"]).build_htlc(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_hash=_[\"bytom\"][\"htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient_public_key=_[\"bytom\"][\"wallet\"][\"recipient\"][\"public_key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             sender_public_key=_[\"bytom\"][\"wallet\"][\"sender\"][\"public_key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             endblock=_[\"bytom\"][\"htlc\"][\"endblock\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_fund_transaction = FundTransaction(network=_[\"bytom\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_fund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"bytom\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             htlc=htlc,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             asset=_[\"bytom\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             amount=_[\"bytom\"][\"amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             unit=_['bytom']['unit']\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/bytom/test_bytom_transaction.py:80: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <swap.providers.bytom.transaction.FundTransaction object at 0x7f86e56464f0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | address = 'bm1q9r3p9r7ad7mjearqu9yds6elfulnf66waet7zt'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | htlc = <swap.providers.bytom.htlc.HTLC object at 0x7f86e5646bb0>, amount = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | asset = 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | unit = 'BTM'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def build_transaction(self, address: str, htlc: HTLC, amount: Union[int, float], asset: Union[str, AssetNamespace] = config[\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                           unit: str = config[\"unit\"]) -> \"FundTransaction\":\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         Build Bytom fund transaction.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param address: Bytom sender wallet address.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type address: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param htlc: Bytom Hash Time Lock Contract (HTLC) instance.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type htlc: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param amount: Bytom amount to fund.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type amount: int, float\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param asset: Bytom asset id, defaults to ``BTM``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type asset: str, bytom.assets.AssetNamespace\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param unit: Bytom unit, default to ``NEU``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :type unit: str\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :returns: FundTransaction -- Bytom fund transaction instance.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> from swap.providers.bytom.htlc import HTLC\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> from swap.providers.bytom.transaction import FundTransaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> htlc: HTLC = HTLC(network=\"mainnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> htlc.build_htlc(secret_hash=\"3a26da82ead15a80533a02696656b14b5dbfd84eb14790f2e1be5e9e45820eeb\", recipient_public_key=\"3e0a377ae4afa031d4551599d9bb7d5b27f4736d77f78cac4d476f0ffba5ae3e\", sender_public_key=\"fe6b3fd4458291b19605d92837ae1060cc0237e68022b2eb9faf01a118226212\", endblock=679208)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> fund_transaction: FundTransaction = FundTransaction(network=\"mainnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         >>> fund_transaction.build_transaction(address=\"bm1qk9vj4jaezlcnjdckds4fkm8fwv5kawmq9qrufx\", htlc=htlc, amount=0.1, asset=\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", unit=\"BTM\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         <swap.providers.bytom.transaction.FundTransaction object at 0x0409DAF0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # Check parameter instances\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not is_address(address, self._network):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise AddressError(f\"Invalid Bytom sender '{address}' {self._network} address.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not isinstance(htlc, HTLC):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise TypeError(\"Invalid Bytom HTLC instance, only takes Bytom HTLC class\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if unit not in [\"BTM\", \"mBTM\", \"NEU\"]:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raise UnitError(\"Invalid Bytom unit, choose only 'BTM', 'mBTM' or 'NEU' units.\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # Set address, fee and confirmations\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         self._address, self._asset, self._contract_address, self._confirmations, self._amount = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address, (str(asset.ID) if isinstance(asset, AssetNamespace) else asset),\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             htlc.contract_address(), config[\"confirmations\"], (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 amount if unit == \"NEU\" else amount_unit_converter(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     amount=amount, unit_from=f\"{unit}2NEU\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         amount: int = get_balance(self._address, self._asset)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if amount < self._amount:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise BalanceError(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 \"Insufficient spend UTXO's\", \"you don't have enough amount.\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           swap.exceptions.BalanceError: Insufficient spend UTXO's, you don't have enough amount.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/transaction.py:501: BalanceError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ______________________________ test_ethereum_rpc _______________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_rpc():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert decode_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             raw=_[\"ethereum\"][\"fund\"][\"signed\"][\"raw\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # (600) {'code': -32000, 'message': 'invalid sender'}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises(ValueError):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           submit_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raw=_[\"xinfin\"][\"fund\"][\"signed\"][\"raw\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 network=_[\"ethereum\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_rpc.py:27: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/rpc.py:342: in submit_raw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     transaction_hash: HexBytes = web3.eth.send_raw_transaction(raw)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/eth.py:831: in send_raw_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return self._send_raw_transaction(transaction)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________ test_ethereum_normal_transaction _______________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_normal_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_normal_transaction = NormalTransaction(network=_[\"ethereum\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_normal_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient={\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 _[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"]: _[\"ethereum\"][\"amount\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             },\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             unit=_[\"ethereum\"][\"unit\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py:27: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:339: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \"nonce\": self.web3.eth.get_transaction_count(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________ test_ethereum_fund_transaction ________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_fund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         htlc = HTLC(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contract_address=_[\"ethereum\"][\"htlc\"][\"contract_address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             network=_[\"ethereum\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ).build_htlc(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_hash=_[\"ethereum\"][\"htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient_address=_[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             sender_address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             endtime=get_current_timestamp(plus=3600)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_fund_transaction = FundTransaction(network=_[\"ethereum\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_fund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             htlc=htlc,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             amount=_[\"ethereum\"][\"amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             unit=_[\"ethereum\"][\"unit\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py:76: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:479: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \"nonce\": self.web3.eth.get_transaction_count(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ______________________ test_ethereum_withdraw_transaction ______________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_withdraw_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_withdraw_transaction = WithdrawTransaction(network=_[\"ethereum\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_withdraw_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_hash=_[\"ethereum\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_key=_[\"ethereum\"][\"htlc\"][\"secret\"][\"key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py:114: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:600: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     transaction_receipt: AttributeDict = self.web3.eth.get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/eth.py:795: in get_transaction_receipt\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return self._get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________ test_ethereum_refund_transaction _______________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_refund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_refund_transaction = RefundTransaction(network=_[\"ethereum\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_refund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_hash=_[\"ethereum\"][\"transaction_hash\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py:151: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:729: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     transaction_receipt: AttributeDict = self.web3.eth.get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/eth.py:795: in get_transaction_receipt\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return self._get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ______________________ test_ethereum_wallet_from_entropy _______________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_wallet_from_entropy():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         wallet = Wallet(network=_[\"ethereum\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         wallet.from_entropy(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             entropy=_[\"ethereum\"][\"wallet\"][\"sender\"][\"entropy\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             language=_[\"ethereum\"][\"wallet\"][\"sender\"][\"language\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             passphrase=_[\"ethereum\"][\"wallet\"][\"sender\"][\"passphrase\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         wallet.from_path(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             path=_[\"ethereum\"][\"wallet\"][\"sender\"][\"derivation\"][\"path\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.entropy() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"entropy\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.mnemonic() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"mnemonic\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.language() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"language\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.passphrase() is None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.seed() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"seed\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.root_xprivate_key() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"root_xprivate_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.root_xpublic_key() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"root_xpublic_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.xprivate_key() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"xprivate_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.xpublic_key() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"xpublic_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.uncompressed() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"uncompressed\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.compressed() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"compressed\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.chain_code() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"chain_code\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.private_key() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"private_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.public_key() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"public_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.wif() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"wif\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.hash() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"hash\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.finger_print() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"finger_print\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.path() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"derivation\"][\"path\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.address() == _[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert isinstance(wallet.balance(), int)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py:50: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/wallet.py:592: in balance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     balance: int = get_balance(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/rpc.py:109: in get_balance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     balance: int = web3.eth.get_balance(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ____________________ test_ethereum_erc20_normal_transaction ____________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_erc20_normal_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_erc20_normal_transaction = NormalTransaction(network=_[\"ethereum\"][\"network\"], erc20=True)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_erc20_normal_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient={\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 _[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"]: _[\"ethereum\"][\"erc20_amount\"] * (10 ** _[\"ethereum\"][\"decimals\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             },\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             token_address=_[\"ethereum\"][\"erc20_htlc\"][\"agreements\"][\"token_address\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py:27: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:319: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \"nonce\": self.web3.eth.get_transaction_count(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _____________________ test_ethereum_erc20_fund_transaction _____________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_erc20_fund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         erc20_htlc = HTLC(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contract_address=_[\"ethereum\"][\"erc20_htlc\"][\"contract_address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             network=_[\"ethereum\"][\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             erc20=True\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ).build_htlc(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_hash=_[\"ethereum\"][\"erc20_htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient_address=_[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             sender_address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             endtime=get_current_timestamp(plus=3600),\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             token_address=_[\"ethereum\"][\"erc20_htlc\"][\"agreements\"][\"token_address\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_erc20_fund_transaction = FundTransaction(network=_[\"ethereum\"][\"network\"], erc20=True)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_erc20_fund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             htlc=erc20_htlc,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             amount=_[\"ethereum\"][\"erc20_amount\"] * (10 ** _[\"ethereum\"][\"decimals\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py:78: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:479: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \"nonce\": self.web3.eth.get_transaction_count(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ___________________ test_ethereum_erc20_withdraw_transaction ___________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_erc20_withdraw_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_erc20_withdraw_transaction = WithdrawTransaction(network=_[\"ethereum\"][\"network\"], erc20=True)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_erc20_withdraw_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_hash=_[\"ethereum\"][\"erc20_transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_key=_[\"ethereum\"][\"erc20_htlc\"][\"secret\"][\"key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py:115: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:600: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     transaction_receipt: AttributeDict = self.web3.eth.get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/eth.py:795: in get_transaction_receipt\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return self._get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ____________________ test_ethereum_erc20_refund_transaction ____________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_ethereum_erc20_refund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_erc20_refund_transaction = RefundTransaction(network=_[\"ethereum\"][\"network\"], erc20=True)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_erc20_refund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"ethereum\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_hash=_[\"ethereum\"][\"erc20_transaction_hash\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py:152: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py:729: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     transaction_receipt: AttributeDict = self.web3.eth.get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/eth.py:795: in get_transaction_receipt\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return self._get_transaction_receipt(transaction_hash)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     result = w3.manager.request_blocking(method_str,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:197: in request_blocking\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = self._make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/manager.py:150: in _make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return request_func(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/attrdict.py:33: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/formatting.py:94: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response = make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return make_request(method, params)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/providers/rpc.py:88: in make_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raw_response = make_post_request(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/request.py:113: in make_post_request\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response.raise_for_status()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [410]>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raise_for_status(self):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         http_error_msg = \"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(self.reason, bytes):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # We attempt to decode utf-8 first because some servers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # choose to localize their reason strings. If the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # isn't utf-8, we fall back to iso-8859-1 for all other\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # encodings. (See PR #3538)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"utf-8\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 reason = self.reason.decode(\"iso-8859-1\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             reason = self.reason\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if 400 <= self.status_code < 500:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         elif 500 <= self.status_code < 600:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             http_error_msg = (\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if http_error_msg:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise HTTPError(http_error_msg, response=self)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.HTTPError: 410 Client Error: Gone for url: https://ropsten.infura.io/v3/4414fea5f7454211956b1627621450b4\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:1021: HTTPError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________________ test_vapor_htlc ________________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_htlc():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         htlc = HTLC(network=_[\"vapor\"][\"network\"]).build_htlc(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_hash=_[\"vapor\"][\"htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient_public_key=_[\"vapor\"][\"wallet\"][\"recipient\"][\"public_key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             sender_public_key=_[\"vapor\"][\"wallet\"][\"sender\"][\"public_key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             endblock=_[\"vapor\"][\"htlc\"][\"endblock\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.bytecode() == _[\"vapor\"][\"htlc\"][\"bytecode\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.opcode() == _[\"vapor\"][\"htlc\"][\"opcode\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.hash() == _[\"vapor\"][\"htlc\"][\"hash\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.contract_address() == _[\"vapor\"][\"htlc\"][\"contract_address\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         htlc = HTLC(network=_[\"vapor\"][\"network\"]).from_bytecode(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             bytecode=_[\"vapor\"][\"htlc\"][\"bytecode\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.bytecode() == _[\"vapor\"][\"htlc\"][\"bytecode\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.opcode() is None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.hash() == _[\"vapor\"][\"htlc\"][\"hash\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert htlc.contract_address() == _[\"vapor\"][\"htlc\"][\"contract_address\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert isinstance(htlc.balance(), int)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert isinstance(htlc.utxos(), list)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_htlc.py:40: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/htlc.py:292: in utxos\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return get_utxos(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:105: in get_utxos\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________________ test_vapor_rpc ________________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_rpc():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises(requests.exceptions.ConnectionError):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             assert decode_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raw=_[\"vapor\"][\"fund\"][\"unsigned\"][\"raw\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 network=_[\"vapor\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             ) == _[\"vapor\"][\"fund\"][\"unsigned\"][\"json\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # (600) finalize tx fail\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises(APIError):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           submit_raw(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raw=_[\"vapor\"][\"fund\"][\"unsigned\"][\"raw\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 signatures=_[\"vapor\"][\"fund\"][\"unsigned\"][\"signatures\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 network=_[\"vapor\"][\"network\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_rpc.py:31: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:413: in submit_raw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response_json: dict = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________ test_vapor_normal_transaction _________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_normal_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_normal_transaction = NormalTransaction(network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_normal_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipients={\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 _[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"]: _[\"vapor\"][\"amount\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             },\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             asset=_[\"vapor\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             unit=_[\"vapor\"][\"unit\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py:28: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/transaction.py:301: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     self._fee = estimate_transaction_fee(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:159: in estimate_transaction_fee\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raise APIError(response.json()[\"msg\"], response.json()[\"code\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _________________________ test_vapor_fund_transaction __________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_fund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         htlc = HTLC(network=_[\"vapor\"][\"network\"]).build_htlc(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             secret_hash=_[\"vapor\"][\"htlc\"][\"secret\"][\"hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             recipient_public_key=_[\"vapor\"][\"wallet\"][\"recipient\"][\"public_key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             sender_public_key=_[\"vapor\"][\"wallet\"][\"sender\"][\"public_key\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             endblock=_[\"vapor\"][\"htlc\"][\"endblock\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_fund_transaction = FundTransaction(network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_fund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             htlc=htlc,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             asset=_[\"vapor\"][\"asset\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             amount=_[\"vapor\"][\"amount\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             unit=_[\"vapor\"][\"unit\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py:81: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/transaction.py:502: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     self._fee = estimate_transaction_fee(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:159: in estimate_transaction_fee\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raise APIError(response.json()[\"msg\"], response.json()[\"code\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________ test_vapor_withdraw_transaction ________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_withdraw_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_withdraw_transaction = WithdrawTransaction(network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_withdraw_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_hash=_[\"vapor\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             asset=_[\"vapor\"][\"asset\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py:126: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/transaction.py:698: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     self._fee = estimate_transaction_fee(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:159: in estimate_transaction_fee\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raise APIError(response.json()[\"msg\"], response.json()[\"code\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________ test_vapor_refund_transaction _________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_refund_transaction():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         unsigned_refund_transaction = RefundTransaction(network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       unsigned_refund_transaction.build_transaction(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             transaction_hash=_[\"vapor\"][\"transaction_hash\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             asset=_[\"vapor\"][\"asset\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_transaction.py:171: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/transaction.py:884: in build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     self._fee = estimate_transaction_fee(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:159: in estimate_transaction_fee\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     raise APIError(response.json()[\"msg\"], response.json()[\"code\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _______________________________ test_vapor_utils _______________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_utils():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_network(network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_network(network=\"unknown\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_address(address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"], network=\"testnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"], network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_address(address=_[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"], network=\"testnet\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_address(address=_[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"], network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert is_transaction_raw(transaction_raw=_[\"vapor\"][\"fund\"][\"unsigned\"][\"transaction_raw\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert not is_transaction_raw(transaction_raw=\"unknown\")\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert get_address_type(address=_[\"vapor\"][\"wallet\"][\"sender\"][\"address\"]) == \"p2wpkh\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert get_address_type(address=_[\"vapor\"][\"wallet\"][\"recipient\"][\"address\"]) == \"p2wpkh\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert get_address_type(address=_[\"vapor\"][\"htlc\"][\"contract_address\"]) == \"p2wsh\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # HTTPConnectionPool(host='localhost', port=9888)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises(ConnectionError):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             assert decode_transaction_raw(transaction_raw=_[\"vapor\"][\"fund\"][\"unsigned\"][\"transaction_raw\"]) == \\\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                    {\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"address\": _[\"vapor\"][\"wallet\"][\"sender\"][\"address\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"fee\": 10000000,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"network\": _[\"vapor\"][\"network\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"signatures\": [],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"tx\": _[\"vapor\"][\"fund\"][\"unsigned\"][\"json\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"type\": \"vapor_fund_unsigned\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                        \"unsigned_datas\": _[\"vapor\"][\"fund\"][\"unsigned\"][\"unsigned_datas\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                    }\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # (600) finalize tx fail\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         with pytest.raises(APIError):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           submit_transaction_raw(transaction_raw=_[\"vapor\"][\"fund\"][\"unsigned\"][\"transaction_raw\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_utils.py:58: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/utils.py:292: in submit_transaction_raw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ________________________ test_vapor_wallet_from_entropy ________________________\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:971: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | cls = None, object_hook = None, parse_float = None, parse_int = None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | parse_constant = None, object_pairs_hook = None, kw = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def loads(s, *, cls=None, object_hook=None, parse_float=None,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document) to a Python object.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decode (a ``dict``). The return value of\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_hook`` will be used instead of the ``dict``. This feature\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``object_pairs_hook`` is an optional function that will be called with the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         result of any object literal decoded with an ordered list of pairs.  The\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This feature can be used to implement custom decoders.  If ``object_hook``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         is also defined, the ``object_pairs_hook`` takes priority.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_float``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON float to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         float(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON floats (e.g. decimal.Decimal).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_int``, if specified, will be called with the string\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         of every JSON int to be decoded. By default this is equivalent to\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         int(num_str). This can be used to use another datatype or parser\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         for JSON integers (e.g. float).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         ``parse_constant``, if specified, will be called with one of the\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         following strings: -Infinity, Infinity, NaN.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to raise an exception if invalid JSON numbers\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         are encountered.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         kwarg; otherwise ``JSONDecoder`` is used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if isinstance(s, str):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if s.startswith('\\ufeff'):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                       s, 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         else:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if not isinstance(s, (bytes, bytearray)):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                                 f'not {s.__class__.__name__}')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             s = s.decode(detect_encoding(s), 'surrogatepass')\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if (cls is None and object_hook is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_int is None and parse_float is None and\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 parse_constant is None and object_pairs_hook is None and not kw):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           return _default_decoder.decode(s)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/__init__.py:346: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _w = <built-in method match of re.Pattern object at 0x7f86ea625b70>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def decode(self, s, _w=WHITESPACE.match):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         containing a JSON document).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:337: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <json.decoder.JSONDecoder object at 0x7f86ea5f36d0>\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | s = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | idx = 0\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def raw_decode(self, s, idx=0):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         a JSON document) and return a 2-tuple of the Python\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         representation and the index in ``s`` where the document ended.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         This can be used to decode a JSON document from a string that may\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         have extraneous data at the end.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             obj, end = self.scan_once(s, idx)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except StopIteration as err:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | During handling of the above exception, another exception occurred:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def test_vapor_wallet_from_entropy():\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         wallet = Wallet(network=_[\"vapor\"][\"network\"])\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         wallet.from_entropy(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             entropy=_[\"vapor\"][\"wallet\"][\"sender\"][\"entropy\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             language=_[\"vapor\"][\"wallet\"][\"sender\"][\"language\"],\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             passphrase=_[\"bytom\"][\"wallet\"][\"sender\"][\"passphrase\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         wallet.from_path(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             path=_[\"vapor\"][\"wallet\"][\"sender\"][\"derivation\"][\"path\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         )\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.entropy() == _[\"vapor\"][\"wallet\"][\"sender\"][\"entropy\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.mnemonic() == _[\"vapor\"][\"wallet\"][\"sender\"][\"mnemonic\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.language() == _[\"vapor\"][\"wallet\"][\"sender\"][\"language\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.passphrase() is None\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.seed() == _[\"vapor\"][\"wallet\"][\"sender\"][\"seed\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.xprivate_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"xprivate_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.xpublic_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"xpublic_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.expand_xprivate_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"expand_xprivate_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.child_xprivate_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"child_xprivate_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.child_xpublic_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"child_xpublic_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         # assert wallet.guid() == _[\"vapor\"][\"wallet\"][\"sender\"][\"guid\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.private_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"private_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.public_key() == _[\"vapor\"][\"wallet\"][\"sender\"][\"public_key\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.program() == _[\"vapor\"][\"wallet\"][\"sender\"][\"program\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.indexes() == _[\"vapor\"][\"wallet\"][\"sender\"][\"derivation\"][\"indexes\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.path() == _[\"vapor\"][\"wallet\"][\"sender\"][\"derivation\"][\"path\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert wallet.address() == _[\"vapor\"][\"wallet\"][\"sender\"][\"address\"]\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         assert isinstance(wallet.balance(), int)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >       assert isinstance(wallet.utxos(), list)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/vapor/test_vapor_wallet.py:49: \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/wallet.py:578: in utxos\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     return get_utxos(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py:105: in get_utxos\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     response_json = response.json()\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | self = <Response [502]>, kwargs = {}\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     def json(self, **kwargs):\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         r\"\"\"Returns the json-encoded content of a response, if any.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         :raises requests.exceptions.JSONDecodeError: If the response body does not\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             contain valid json.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         \"\"\"\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         if not self.encoding and self.content and len(self.content) > 3:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # No encoding set. JSON RFC 4627 section 3 states we should expect\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # decoding fails, fall back to `self.text` (using charset_normalizer to make\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # a best guess).\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             encoding = guess_json_utf(self.content)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             if encoding is not None:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     return complexjson.loads(self.content.decode(encoding), **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except UnicodeDecodeError:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # Wrong UTF codec detected; usually because it's not UTF-8\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # but some other 8-bit codec.  This is an RFC violation,\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # and the server didn't bother to tell us what codec *was*\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     # used.\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     pass\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                 except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         try:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             return complexjson.loads(self.text, **kwargs)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |         except JSONDecodeError as e:\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # Catch JSON-related errors and raise as requests.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/requests/models.py:975: JSONDecodeError\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | =============================== warnings summary ===============================\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_fund.py: 11 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_htlc.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_refund.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_withdraw.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_fund.py: 9 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_htlc.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_refund.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_withdraw.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_fund.py: 26 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_htlc.py: 6 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_refund.py: 41 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_withdraw.py: 41 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_fund.py: 34 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_htlc.py: 6 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_refund.py: 65 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_withdraw.py: 65 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_htlc.py: 7 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py: 24 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_utils.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_htlc.py: 9 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py: 27 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_htlc.py: 11 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py: 116 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_utils.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py: 3 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_htlc.py: 14 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py: 175 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/decorators.py:48: DeprecationWarning: isAddress is deprecated in favor of is_address\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_fund.py: 7 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_htlc.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_refund.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/test_ethereum_cli_withdraw.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_fund.py: 5 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_htlc.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_refund.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/ethereum/erc20/test_ethereum_cli_erc20_withdraw.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_fund.py: 11 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_htlc.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_refund.py: 10 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_withdraw.py: 10 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_fund.py: 14 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_htlc.py: 2 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_refund.py: 12 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_withdraw.py: 12 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_htlc.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_rpc.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_transaction.py: 14 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_wallet.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_htlc.py: 5 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py: 16 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_htlc.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_rpc.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py: 34 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_wallet.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_htlc.py: 5 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py: 43 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/decorators.py:48: DeprecationWarning: toChecksumAddress is deprecated in favor of to_checksum_address\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_fund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_refund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_withdraw.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_fund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_refund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_withdraw.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py: 3 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/decorators.py:48: DeprecationWarning: estimateGas is deprecated in favor of estimate_gas\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_fund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_refund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_withdraw.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_fund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_refund.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_withdraw.py: 1 warning\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py: 3 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py: 4 warnings\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/decorators.py:48: DeprecationWarning: buildTransaction is deprecated in favor of build_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_refund.py::test_xinfin_cli_refund\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/test_xinfin_cli_withdraw.py::test_xinfin_cli_withdraw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_refund.py::test_xinfin_cli_xrc20_refund\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/cli/xinfin/xrc20/test_xinfin_cli_xrc20_withdraw.py::test_xinfin_cli_xrc20_withdraw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_withdraw_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_refund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py::test_xinfin_xrc20_withdraw_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/xrc20/test_xinfin_xrc20_transaction.py::test_xinfin_xrc20_refund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/decorators.py:48: DeprecationWarning: processLog is deprecated in favor of process_log\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_rpc.py::test_ethereum_rpc\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/ethereum/test_ethereum_rpc.py::test_ethereum_rpc\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_rpc.py::test_xinfin_rpc\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_rpc.py::test_xinfin_rpc\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/_utils/decorators.py:48: DeprecationWarning: toHex is deprecated in favor of to_hex\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | tests/providers/xinfin/test_xinfin_transaction.py::test_xinfin_normal_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/web3/method.py:215: DeprecationWarning: estimateGas is deprecated in favor of estimate_gas\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   |     warnings.warn(\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | -- Docs: https://docs.pytest.org/en/stable/warnings.html\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/movnetwork-swap/report.xml -\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | ----------- coverage: platform linux, python 3.9.6-final-0 -----------\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | Name                                       Stmts   Miss  Cover\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | --------------------------------------------------------------\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/__init__.py                               6      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/__init__.py                           4      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/__main__.py                          33      6    82%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/__init__.py                 0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/__init__.py        18      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/decode.py          14      3    79%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/fund.py            21      3    86%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/htlc.py            19      3    84%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/refund.py          15      3    80%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/signature.py       60     14    77%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/submit.py          12      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bitcoin/withdraw.py        15      3    80%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/__init__.py          18      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/decode.py            13      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/fund.py              21      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/htlc.py              19      3    84%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/refund.py            15      3    80%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/signature.py         55     12    78%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/submit.py            11      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/bytom/withdraw.py          15      3    80%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/__init__.py       18      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/decode.py         13      3    77%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/fund.py           33      1    97%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/htlc.py           17      3    82%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/refund.py         17      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/signature.py      44      6    86%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/submit.py         11      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/ethereum/withdraw.py       18      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/__init__.py          18      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/decode.py            13      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/fund.py              21      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/htlc.py              19      3    84%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/refund.py            15      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/signature.py         55     12    78%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/submit.py            11      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/vapor/withdraw.py          15      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/__init__.py         18      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/decode.py           13      3    77%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/fund.py             33      3    91%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/htlc.py             17      3    82%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/refund.py           17      3    82%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/signature.py        44      6    86%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/submit.py           11      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/cli/providers/xinfin/withdraw.py         18      3    83%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/exceptions.py                            82      6    93%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/__init__.py                     0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/__init__.py             0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/htlc.py                75     17    77%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/rpc.py                 80     25    69%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/signature.py          143     21    85%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/solver.py              64      4    94%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/transaction.py        212     34    84%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/utils.py              160     37    77%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bitcoin/wallet.py              98     12    88%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/__init__.py               0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/assets.py                15      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/htlc.py                  79     19    76%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/rpc.py                  118     36    69%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/signature.py            204     39    81%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/solver.py                59      4    93%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/transaction.py          270    104    61%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/utils.py                 98     31    68%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/bytom/wallet.py                99     16    84%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/config.py                       6      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/__init__.py            0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/htlc.py              123     49    60%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/rpc.py                94     50    47%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/signature.py         149     23    85%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/solver.py             51      4    92%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/transaction.py       175     85    51%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/utils.py              79     23    71%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/ethereum/wallet.py             94     14    85%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/__init__.py               0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/assets.py                15      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/htlc.py                  79     15    81%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/rpc.py                  115     54    53%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/signature.py            204     39    81%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/solver.py                59      4    93%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/transaction.py          270    179    34%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/utils.py                 98     33    66%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/vapor/wallet.py                99     17    83%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/__init__.py              0      0   100%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/htlc.py                123     49    60%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/rpc.py                 102     50    51%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/signature.py           149     23    85%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/solver.py               51      4    92%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/transaction.py         175     24    86%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/utils.py               113     28    75%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/providers/xinfin/wallet.py               94     13    86%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | swap/utils.py                                107     38    64%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | --------------------------------------------------------------\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | TOTAL                                       5373   1328    75%\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | \n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | =========================== short test summary info ============================\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/bytom/test_bytom_cli_fund.py::test_bytom_cli_fund - assert \"...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/ethereum/test_ethereum_cli_fund.py::test_ethereum_cli_fund\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/ethereum/test_ethereum_cli_refund.py::test_ethereum_cli_refund\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/ethereum/test_ethereum_cli_withdraw.py::test_ethereum_cli_withdraw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/ethereum/erc20/test_ethereum_cli_erc20_fund.py::test_ethereum_cli_erc20_fund\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/ethereum/erc20/test_ethereum_cli_erc20_refund.py::test_ethereum_cli_erc20_refund\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/ethereum/erc20/test_ethereum_cli_erc20_withdraw.py::test_ethereum_cli_erc20_withdraw\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/vapor/test_vapor_cli_fund.py::test_vapor_cli_fund - Assertio...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/vapor/test_vapor_cli_refund.py::test_vapor_cli_refund - Asse...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/vapor/test_vapor_cli_submit.py::test_vapor_cli_submit - Asse...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/cli/vapor/test_vapor_cli_withdraw.py::test_vapor_cli_withdraw - ...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/bitcoin/test_bitcoin_rpc.py::test_bitcoin_rpc - KeyErr...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/bitcoin/test_bitcoin_utils.py::test_bitcoin_utils - Ke...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/bytom/test_bytom_transaction.py::test_bytom_normal_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/bytom/test_bytom_transaction.py::test_bytom_fund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/test_ethereum_rpc.py::test_ethereum_rpc - req...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_normal_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_fund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_withdraw_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/test_ethereum_transaction.py::test_ethereum_refund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/test_ethereum_wallet.py::test_ethereum_wallet_from_entropy\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_normal_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_fund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_withdraw_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/ethereum/erc20/test_ethereum_erc20_transaction.py::test_ethereum_erc20_refund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_htlc.py::test_vapor_htlc - requests.e...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_rpc.py::test_vapor_rpc - requests.exc...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_transaction.py::test_vapor_normal_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_transaction.py::test_vapor_fund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_transaction.py::test_vapor_withdraw_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_transaction.py::test_vapor_refund_transaction\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_utils.py::test_vapor_utils - requests...\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | FAILED tests/providers/vapor/test_vapor_wallet.py::test_vapor_wallet_from_entropy\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   | =========== 33 failed, 140 passed, 985 warnings in 327.68s (0:05:27) ===========\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python]   \u274c  Failure - Main Test with pytest\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] exitcode '1': failure\n[592addaa-2d97-4ba9-bfdf-686fe8013ab8/python] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'python' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/movnetwork-swap/.github/workflows/pythonpackage-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 504.7715063095093
    }
}