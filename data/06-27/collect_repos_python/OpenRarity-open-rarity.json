{
    "repository": "OpenRarity/open-rarity",
    "stars": 203,
    "language": "python",
    "size": 10389,
    "clone_url": "https://github.com/OpenRarity/open-rarity.git",
    "timestamp": "2023-06-28T18:09:27.635910Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \ud83d\ude80  Start image=crawlergpt:latest\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/OpenRarity-open-rarity] user=0 workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2601  git clone 'https://github.com/psf/black' # ref=stable\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Pre Code Formatting\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Pre Code Formatting\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \ud83e\uddea  Matrix: map[python-version:3.10]\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main actions/checkout@v2\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Main actions/checkout@v2\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main Setup Python\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main actions/setup-python@v3\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/bb270cc5-97af-49a5-b9a2-7819a9d182a2/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Main actions/setup-python@v3\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main Install Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/bb270cc5-97af-49a5-b9a2-7819a9d182a2/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main Install and configure Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-1-composite-0.sh] user= workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Retrieving Poetry metadata\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | # Welcome to Poetry!\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | This will download and install the latest version of Poetry,\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | a dependency and package manager for Python.\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | /home/runneradmin/.local/bin\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | You can uninstall at any time by executing this script with the --uninstall option,\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | and these changes will be reverted.\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Installing Poetry (1.5.1)\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Installing Poetry (1.5.1): Creating environment\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Installing Poetry (1.5.1): Installing Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Installing Poetry (1.5.1): Creating script\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Installing Poetry (1.5.1): Done\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Poetry (1.5.1) is installed now. Great!\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | environment variable.\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | You can test that everything is set up by executing:\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | `poetry --version`\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \u001b[33mDone \u2705\u001b[0m\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Main Install and configure Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Main Install Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main Load cached venv\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/bb270cc5-97af-49a5-b9a2-7819a9d182a2/act/actions-cache@v2/ dst=/var/run/act/actions/actions-cache@v2/\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v2/] user=0 workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/restore/index.js] user= workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udcac  ::debug::Resolved Keys:\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udcac  ::debug::[\"venv-Linux--befcd42bb5d063fc38166f51ff3fa535e8181a57826925c7befe98df3a89d6de\"]\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udcac  ::debug::Checking zstd --version\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:34679/_apis/artifactcache/cache?keys=venv-Linux--befcd42bb5d063fc38166f51ff3fa535e8181a57826925c7befe98df3a89d6de&version=25e65b70d167147605b4332eb57b6d34df8e0303b88c4de252efb18cf3ed148a\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Cache not found for input keys: venv-Linux--befcd42bb5d063fc38166f51ff3fa535e8181a57826925c7befe98df3a89d6de\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Main Load cached venv\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Main Install dependencies\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-3.sh] user= workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | The currently activated Python version 3.8.10 is not supported by the project (>=3.10,<3.12).\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Trying to find and use a compatible version. \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | \n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   | Poetry was unable to find a compatible version. If you have one, you can explicitly use it via the \"env use\" command.\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u274c  Failure - Main Install dependencies\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] exitcode '1': failure\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u274c  Failure - Main Setup Python\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] exitcode '1': failure\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Post Setup Python\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \u2b50 Run Post Install Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/bb270cc5-97af-49a5-b9a2-7819a9d182a2/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Post Install Poetry\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests]   \u2705  Success - Post Setup Python\n[1f43531c-3af2-4cfa-80c5-26bd6fe86ec9/unit-tests] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'unit-tests' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/OpenRarity-open-rarity/.github/workflows/tests-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 525.435807466507
    }
}