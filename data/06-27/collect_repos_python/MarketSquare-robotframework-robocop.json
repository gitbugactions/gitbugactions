{
    "repository": "MarketSquare/robotframework-robocop",
    "stars": 149,
    "language": "python",
    "size": 5941,
    "clone_url": "https://github.com/MarketSquare/robotframework-robocop.git",
    "timestamp": "2023-07-01T15:12:46.821493Z",
    "clone_success": true,
    "number_of_actions": 6,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.atest.rules.comments.bom_encoding_in_file.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.173,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.ignored_data.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.121,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.invalid_comment.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.missing_space_after_comment.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.missing_space_after_comment.test_rule.TestRuleAcceptance",
                "name": "test_configured_block",
                "time": 0.112,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.todo_in_comment.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.todo_in_comment.test_rule.TestRuleAcceptance",
                "name": "test_added_terms",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.comments.todo_in_comment.test_rule.TestRuleAcceptance",
                "name": "test_phrases",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.documentation.missing_doc_keyword.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.documentation.missing_doc_resource_file.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.documentation.missing_doc_suite.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.documentation.missing_doc_test_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.documentation.missing_doc_test_case.test_rule.TestRuleAcceptance",
                "name": "test_templated",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.documentation.missing_doc_test_case.test_rule.TestRuleAcceptance",
                "name": "test_templated_turned_off",
                "time": 0.141,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.both_tests_and_tasks.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_argument_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_assigned_var_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_keyword.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_library.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_library.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf6",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_metadata.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_resource.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_setting.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_setting.test_rule.TestRuleAcceptance",
                "name": "test_unrecognized_header_bug",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_test_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_variable.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.135,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.duplicated_variables_import.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.section_already_defined.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.section_out_of_order.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.section_out_of_order.test_rule.TestRuleAcceptance",
                "name": "test_default_order",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.section_out_of_order.test_rule.TestRuleAcceptance",
                "name": "test_custom_order[settings,variables,testcases,keywords]",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.duplications.section_out_of_order.test_rule.TestRuleAcceptance",
                "name": "test_custom_order[settings,variables,testcases,tasks,keywords]",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_argument.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_continuation_mark.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_for_loop.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_for_loop.test_rule.TestRuleAcceptance",
                "name": "test_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_if.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.1",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_if.test_rule.TestRuleAcceptance",
                "name": "test_rf6",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_if.test_rule.TestRuleAcceptance",
                "name": "test_rf5",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==5.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_if.test_rule.TestRuleAcceptance",
                "name": "test_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_section_in_resource.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_section_in_resource.test_rule.TestRuleAcceptance",
                "name": "test_rule_pre6",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_setting_in_resource.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.invalid_setting_in_resource.test_rule.TestRuleAcceptance",
                "name": "test_rule_pre6",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.missing_keyword_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.non_existing_setting.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.not_enough_whitespace_after_newline_marker.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.152,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.not_enough_whitespace_after_setting.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.not_enough_whitespace_after_suite_setting.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.not_enough_whitespace_after_variable.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.parsing_error.test_rule.TestRule",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.1",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.parsing_error.test_rule.TestRule",
                "name": "test_rule_rf6",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.parsing_error.test_rule.TestRule",
                "name": "test_rule_rf5",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==5.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.parsing_error.test_rule.TestRule",
                "name": "test_rule_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.1.3",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.parsing_error.test_rule.TestRule",
                "name": "test_rule_rf3",
                "time": 0.122,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.return_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.setting_not_supported.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.unsupported_setting_in_init_file.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.unsupported_setting_in_init_file.test_rule.TestRuleAcceptance",
                "name": "test_pl_language",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.errors.variables_import_with_args.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_arguments.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_default_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_documentation.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_force_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_keyword_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_library_import.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_metadata.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_resource_import.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_section.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.093,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_setup.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.11,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_suite_setup.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_suite_teardown.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_teardown.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_template.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_test_setup.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.107,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_test_teardown.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_test_template.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_test_timeout.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_timeout.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.133,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.empty_variables_import.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.121,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.file_too_long.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.124,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.file_too_long.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold",
                "time": 0.143,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.line_too_long.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.line_too_long.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.number_of_returned_values.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.number_of_returned_values.test_rule.TestRuleAcceptance",
                "name": "test_rule_pre_rf5",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.number_of_returned_values.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.number_of_returned_values.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold_pre_rf5",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_bug629_rf3",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_bug629_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.1.3",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_bug629",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.096,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_templated",
                "time": 0.095,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_few_calls_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_bug629",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_long_keyword.test_rule.TestRule",
                "name": "test_rule",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_long_keyword.test_rule.TestRule",
                "name": "test_ignore_docs",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_long_keyword.test_rule.TestRule",
                "name": "test_severity_threshold",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_long_test_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_long_test_case.test_rule.TestRuleAcceptance",
                "name": "test_ignore_docs",
                "time": 0.194,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_long_test_case.test_rule.TestRuleAcceptance",
                "name": "test_severity",
                "time": 0.197,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_arguments.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.241,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_arguments.test_rule.TestRuleAcceptance",
                "name": "test_severity",
                "time": 0.163,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_arguments.test_rule.TestRuleAcceptance",
                "name": "test_disablers",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.163,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_calls_in_keyword.test_rule.TestRuleAcceptance",
                "name": "test_severity",
                "time": 0.161,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_calls_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.181,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_calls_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_ignore_templated",
                "time": 0.172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_calls_in_test_case.test_rule.TestRuleAcceptance",
                "name": "test_severity",
                "time": 0.167,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_test_cases.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.198,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.lengths.too_many_test_cases.test_rule.TestRuleAcceptance",
                "name": "test_severity",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.argument_overwritten_before_usage.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.argument_overwritten_before_usage.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf3_rf4",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.can_be_resource_file.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.13,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.empty_return.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.empty_variable.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.expression_can_be_simplified.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.expression_can_be_simplified.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.if_can_be_merged.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.if_can_be_merged.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.if_can_be_used.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.196,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment.test_rule.TestRuleAcceptance",
                "name": "test_golden",
                "time": 0.173,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment.test_rule.TestRuleAcceptance",
                "name": "test_configured_const_assignment",
                "time": 0.169,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment.test_rule.TestRuleAcceptance",
                "name": "test_autodetect",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment_in_variables.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment_in_variables.test_rule.TestRuleAcceptance",
                "name": "test_golden",
                "time": 0.16,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment_in_variables.test_rule.TestRuleAcceptance",
                "name": "test_configured_const_assignment",
                "time": 0.163,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inconsistent_assignment_in_variables.test_rule.TestRuleAcceptance",
                "name": "test_autodetect",
                "time": 0.216,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inline_if_can_be_used.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.inline_if_can_be_used.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.keyword_after_return.test_rule.TestRuleAcceptance",
                "name": "test_rule_before",
                "time": 0.184,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.multiline_inline_if.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.nested_for_loop.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.statement_outside_loop.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unnecessary_string_conversion.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf4",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unnecessary_string_conversion.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unreachable_code.test_rule.TestRuleAcceptance",
                "name": "test_rule_before",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unused_argument.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unused_argument.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf3",
                "time": 0.196,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unused_argument.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unused_variable.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.165,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.unused_variable.test_rule.TestRuleAcceptance",
                "name": "test_rule_on_loops",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.variable_overwritten_before_usage.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.variable_overwritten_before_usage.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf3",
                "time": 0.158,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.variable_overwritten_before_usage.test_rule.TestRuleAcceptance",
                "name": "test_rule_on_loops",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.misc.wrong_import_order.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.136,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.bdd_without_keyword_call.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.129,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_singular_header.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_singular_header.test_rule.TestRuleAcceptance",
                "name": "test_language",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_singular_header.test_rule.TestRuleAcceptance",
                "name": "test_pre_rf5",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_statement.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==5.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_statement.test_rule.TestRuleAcceptance",
                "name": "test_pre_rf5",
                "time": 0.165,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_statement.test_rule.TestRuleAcceptance",
                "name": "test_force_tags",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.deprecated_with_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.duplicated_library_alias.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.0",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.duplicated_library_alias.test_rule.TestRuleAcceptance",
                "name": "test_pre_rf6",
                "time": 0.158,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.else_not_upper_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.else_not_upper_case.test_rule.TestRuleAcceptance",
                "name": "test_rf_4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.else_not_upper_case.test_rule.TestRuleAcceptance",
                "name": "test_rf_3",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.empty_library_alias.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.empty_library_alias.test_rule.TestRuleAcceptance",
                "name": "test_pre_rf6",
                "time": 0.157,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.hyphen_in_variable_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.inconsistent_variable_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.174,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.invalid_section.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6.1",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.keyword_name_is_empty.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.168,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.keyword_name_is_reserved_word.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.keyword_name_is_reserved_word.test_rule.TestRuleAcceptance",
                "name": "test_rf4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.keyword_name_is_reserved_word.test_rule.TestRuleAcceptance",
                "name": "test_rf3",
                "time": 0.175,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.mixed-task-test-settings.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf6",
                "time": 0.012,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==6.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.mixed-task-test-settings.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.176,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.non_local_variables_should_be_uppercase.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.168,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_filename.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.161,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_filename.test_rule.TestRuleAcceptance",
                "name": "test_configure_pattern",
                "time": 0.158,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_name.test_rule.TestRuleAcceptance",
                "name": "test_configure_pattern[1-[$:{}]]",
                "time": 0.208,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_name.test_rule.TestRuleAcceptance",
                "name": "test_configure_pattern[2-[!.?/;+'\"()[]{}#$%^&=<>|\\\\]]",
                "time": 0.158,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_name.test_rule.TestRuleAcceptance",
                "name": "test_configure_pattern[3-[^a-zA-Z\\\\s]]",
                "time": 0.153,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_allowed_char_in_name.test_rule.TestRuleAcceptance",
                "name": "test_configure_pattern[4-(?:(?<!foo)\\\\.bar)|(?:foo\\\\.(?!bar))|(?:(?<!foo)\\\\.(?!bar))]",
                "time": 0.15,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.not_capitalized_test_case_title.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.135,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.overwriting_reserved_variable.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.134,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.possible_variable_overwriting.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.possible_variable_overwriting.test_rule.TestRuleAcceptance",
                "name": "test_rf3",
                "time": 0.126,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.section_name_invalid.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.section_variable_not_uppercase.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.section_variable_not_uppercase.test_rule.TestRuleAcceptance",
                "name": "test_rule_rf3",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.setting_name_not_in_title_case.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.test_case_name_is_empty.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.underscore_in_keyword_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.wrong_case_in_keyword_name.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.wrong_case_in_keyword_name.test_rule.TestRuleAcceptance",
                "name": "test_convention_first_word_capitalized",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.naming.wrong_case_in_keyword_name.test_rule.TestRuleAcceptance",
                "name": "test_configure_pattern",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_block_indent.test_rule.TestRuleAcceptance",
                "name": "test_rule[->=5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_block_indent.test_rule.TestRuleAcceptance",
                "name": "test_rule[_rf4-==4.*]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_block_indent.test_rule.TestRuleAcceptance",
                "name": "test_rule[_rf3-==3.*]",
                "time": 0.118,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_templated_suite[None]",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_templated_suite[-c bad-indent:indent:3]",
                "time": 0.163,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_strict_3_spaces[->=5]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_strict_3_spaces[_rf4-==4.*]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_strict_3_spaces[_rf3-==3.*]",
                "time": 0.24,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_rule[->=5]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=5",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_rule[_rf4-==4.*]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF ==4.*",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_rule[_rf3-==3.*]",
                "time": 0.234,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.bad_indent.test_rule.TestRuleAcceptance",
                "name": "test_758_bug",
                "time": 0.234,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.consecutive_empty_lines.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.185,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.consecutive_empty_lines.test_rule.TestRuleAcceptance",
                "name": "test_severity_threshold",
                "time": 0.149,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.empty_line_after_section.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.173,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.empty_line_after_section.test_rule.TestRuleAcceptance",
                "name": "test_severity",
                "time": 0.182,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.empty_lines_between_keywords.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.empty_lines_between_sections.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.183,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.empty_lines_between_test_cases.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.empty_lines_in_statement.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.205,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.misaligned_continuation.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.167,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.misaligned_continuation_row.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.misaligned_continuation_row.test_rule.TestRuleAcceptance",
                "name": "test_ignore_docs",
                "time": 0.149,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.missing_trailing_blank_line.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.138,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.mixed_tabs_and_spaces.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.suite_setting_should_be_left_aligned.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.too_many_trailing_blank_lines.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.11,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.trailing_whitespace.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.spacing.variable_should_be_left_aligned.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=4",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.could_be_keyword_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.could_be_test_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.duplicated_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.095,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.empty_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_already_set_in_keyword_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.012,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_already_set_in_test_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.093,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_already_set_in_test_tags.test_rule.TestRuleAcceptance",
                "name": "test_test_tags",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_with_or_and.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_with_or_and.test_rule.TestRuleAcceptance",
                "name": "test_keyword_tags",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test enabled only for RF >=6",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_with_reserved_word.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_with_reserved_word.test_rule.TestRuleAcceptance",
                "name": "test_keyword_doc",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.tag_with_space.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.atest.rules.tags.unnecessary_default_tags.test_rule.TestRuleAcceptance",
                "name": "test_rule",
                "time": 0.125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_run_all_checkers",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_run_all_checkers_not_cli",
                "time": 0.558,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_run_all_checkers_not_recursive",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_all_reports",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_no_issues_all_reports",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_list_all_reports",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_list_enabled_reports",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_list_disabled_reports",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_ignore_file_with_pattern",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_ignore_dir_with_pattern",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_include_one_rule",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_run_non_existing_file",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_run_with_return_status_0",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_run_with_return_status_bigger_than_zero",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_rule_severity",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_rule_option",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_invalid_rule[idontexist-Provided rule or report 'idontexist' does not exist.]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_invalid_rule[not-enough-whitespace-after-newline-mark-Provided rule or report 'not-enough-whitespace-after-newline-mark' does not exist. Did you mean:\\\\n    not-enough-whitespace-after-newline-marker]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_include_exclude_invalid_rule[invalid-Provided rule 'invalid' does not exist.]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_include_exclude_invalid_rule[parsing-error,invalid-Provided rule 'invalid' does not exist.]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_include_exclude_invalid_rule[line-toolong-Provided rule 'line-toolong' does not exist. Did you mean:\\\\n    line-too-long]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_invalid_param",
                "time": 0.01,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_invalid_config",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_return_status_invalid_value",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_return_status_with_non_exist",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_use_argument_file",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_use_circular_argument_file",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_threshold[i]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_threshold[I]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_threshold[e]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_threshold[error]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_threshold[W]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_threshold[WARNING]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_set_rule_invalid_threshold",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_configure_severity",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_diff_encoded_chars",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"SystemExit: 2\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_override_severity",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestE2E",
                "name": "test_handling_error_in_robot_module",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestTranslatedRobot",
                "name": "test_translated_default_lang",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Requires RF 6.0 with languages support",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestTranslatedRobot",
                "name": "test_translated_fi_lang",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Requires RF 6.0 with languages support",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestTranslatedRobot",
                "name": "test_translated_mixed_with_fi_lang",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Requires RF 6.0 with languages support",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestTranslatedRobot",
                "name": "test_translated_mixed_with_fi_and_pl_lang",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Requires RF 6.0 with languages support",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.e2e.test_e2e.TestTranslatedRobot",
                "name": "test_all_rules_have_added_in_version_info",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Requires RF 6.0 with languages support",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_run_check_in_memory",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_run_check_in_memory_with_windows_line_endings",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_run_check_in_memory_with_mac_line_endings",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_run_check_in_memory_with_config",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_invalid_config",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_lsp_diagnostic",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_ignore_sys_argv",
                "time": 0.2,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_robocop_api_no_trailing_blank_line_message",
                "time": 0.178,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_api.TestAPI",
                "name": "test_unicode_strings",
                "time": 0.188,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_prog_name",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_parser_default_help_disabled",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_default_args",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_default_args_after_parse",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_filetypes_duplicate_defaults",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_filetypes_duplicate_dot_prefixed_defaults",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_include_one_rule",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_include_two_same_rules_comma_separated",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_include_two_same_rules_provided_separately",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_include_two_different_rules_comma_separated",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_include_two_different_rules_provided_separately",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_exclude_one_rule",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_exclude_two_same_rules_comma_separated",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_exclude_two_same_rules_provided_separately",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_exclude_two_different_rules_comma_separated",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_exclude_two_different_rules_provided_separately",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_format_overwrite_default",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_format_empty",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_format_new_value",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_output_new_value",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_help_message[-h]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_help_message[--help]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_version_number[-v]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_version_number[--version]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_paths_new_value",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_paths_two_values",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_list_reports",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_single_language",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_argument_validation.TestArgumentValidation",
                "name": "test_two_languages",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_checker_invalid_conf.TestCheckerInvalidConf",
                "name": "test_get_param_with_non_existing_rule",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_checker_invalid_conf.TestCheckerInvalidConf",
                "name": "test_get_non_existing_param",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_find_project_root_same_dir",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_find_project_root_missing_but_git",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_from_default_file",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_format_option[default]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_format_option[option]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_comments",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_from_default_file_verbose",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_append_config_from_default_file",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_default_config_before_pyproject",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_from_option_not_default",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_pyproject",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_append_config_pyproject_file",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_pyproject_verbose[default]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_pyproject_verbose[option]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_not_supported_option_pyproject",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_invalid_toml_pyproject[default]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_invalid_toml_pyproject[option]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_empty_config[empty_config]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_empty_config[empty_config2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_utf8_encoding[1]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_utf8_encoding[2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_relative_paths_pyproject[default]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_relative_paths_pyproject[option]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_load_config_with_relative_paths_robocop",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_override_default_config",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_nested_argument_files",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_argument_file_not_existing",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_toml_file_not_existing",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configuration_file.TestConfigurationFile",
                "name": "test_argument_file_without_path",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configure_rule.TestConfigureRule",
                "name": "test_configure_with_two_semicolons[not-allowed-char-in-name:pattern:[:]-[:]]",
                "time": 0.173,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configure_rule.TestConfigureRule",
                "name": "test_configure_with_two_semicolons[not-allowed-char-in-name:pattern:[:%#]-[:%#]]",
                "time": 0.161,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_configure_rule.TestConfigureRule",
                "name": "test_configure_with_two_semicolons[not-allowed-char-in-name:pattern:[^a-z]-[^a-z]]",
                "time": 0.148,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_disabled_whole_file",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_is_line_disabled",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_is_rule_disabled",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_enabled_file",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_extended_disabling[1]",
                "time": 0.124,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_extended_disabling[2]",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_extended_disabling[3]",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_disabling_after_keyword",
                "time": 0.136,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_disablers.TestDisablers",
                "name": "test_disablers_in_scopes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test with RF 5.0 syntax",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_from_module",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_from_module_simple_import",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_with_robocop_import",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_from_dotted_module",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_in_robocop_config[config_robocop]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_in_robocop_config[config_pyproject]",
                "time": 0.094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_multiple_external_rules",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_external_rule_dir",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_non_existing_rule",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_loading_duplicated_rule",
                "time": 0.165,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_reports_not_existing_rule",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_load_disabled_by_default",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_load_disabled_by_default_include[params0]",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_load_disabled_by_default_include[params1]",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_load_disabled_by_default_include[params2]",
                "time": 0.133,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_load_disabled_by_default_include[params3]",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_external_rules.TestExternalRules",
                "name": "test_load_disabled_by_default_enable",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included[included0-excluded0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included[included1-excluded1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included[included2-excluded2]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included_patterns[patterns0-included0-excluded0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included_patterns[patterns1-included1-excluded1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included_patterns[patterns2-included2-excluded2]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_included_patterns[patterns3-included3-excluded3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded[included0-excluded0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded[included1-excluded1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded[included2-excluded2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded_patterns[patterns0-included0-excluded0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded_patterns[patterns1-included1-excluded1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded_patterns[patterns2-included2-excluded2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_only_excluded_patterns[patterns3-included3-excluded3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_including_excluding.TestIncludingExcluding",
                "name": "test_both_included_excluded",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_rule",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_disabled_rule",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_filter_enabled",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_filter_disabled",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_reports",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_multiple_checkers",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_filtered",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_configurables",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_configurables_filtered",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_configurables_mixed",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_configurables_no_config",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_ext_rules_disabled_by_default",
                "time": 0.082,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_listing_rules.TestListingRules",
                "name": "test_list_ext_rules_disabled_by_default_enable",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_get_fullname",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[e-E]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[error-E]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[i-I]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[info-I]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[w-W]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[warning-W]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[eRROr-E]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity[Warning-W]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity_invalid[invalid]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity_invalid[1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity_invalid[errorE]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity_invalid[None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_change_message_severity_invalid[severity4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_get_configurable_existing",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_parse_invalid_configurable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_parse_valid_configurable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message[path/to/file1.robot-range0-range_exp0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message[path/to/file1.robot-range1-range_exp1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message[path/to/file1.robot-range2-range_exp2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message[path/to/file2.robot-range3-range_exp3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs0-Some description {{ string }} and {{ number }}-Some description  and ]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs1-Some description {{ string }} and {{ number }}-Some description 1 and smth]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs2-Some description {{ string }} and {{ number }}-Some description smth and ]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs3-Some description {{ string }} and {{ number }}-Some description 1 and smth]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs4-Some description {{ string -}} and {{ number }}-Some description and 10]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs5-You can supply variables like {{ variable }} or {{ number }}. Basic {% if number==10 %}jinja {% endif %}syntax supported-You can supply variables like smth or 10. Basic jinja syntax supported]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_messages.TestMessage",
                "name": "test_prepare_message_with_jinja[kwargs6-You can supply variables like {{ variable }} or {{ number }}. Basic {% if number==10 %}jinja {% endif %}syntax supported-You can supply variables like smth or 11. Basic syntax supported]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_path_matching.TestPathMatching",
                "name": "test_paths_from_gitignore_ignored",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports",
                "name": "test_get_reports[configured0-expected0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports",
                "name": "test_get_reports[configured1-expected1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports",
                "name": "test_get_reports[configured2-expected2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports",
                "name": "test_get_reports_all",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports",
                "name": "test_get_unknown_report",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_file_stats_report[0-files_with_issues0-\\nNo files were processed.]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_file_stats_report[10-files_with_issues1-\\nProcessed 10 files but no issues were found.]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_file_stats_report[10-files_with_issues2-\\nProcessed 10 files from which 3 files contained issues.]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_version_report",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_report",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_report_configure[timezone-UTC-\\\\+0000]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_report_configure[format-hello-Reported: hello]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_report_configure[format-%Y-%m-%dT%H:%M:%S-.*([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2})]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_configure_invalid[--Provided param '' for report 'timestamp' does not exist]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_configure_invalid[BAD--Provided param 'BAD' for report 'timestamp' does not exist]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_configure_invalid[timezone-BAD-Provided timezone 'BAD' for report 'timestamp' is not valid.]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestReports",
                "name": "test_timestamp_default_warning[format--.*([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestJSONReport",
                "name": "test_json_report[JsonReport]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestJSONReport",
                "name": "test_json_report[InternalJsonReport]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestJSONReport",
                "name": "test_configure_output_dir",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestJSONReport",
                "name": "test_configure_filename",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestJSONReport",
                "name": "test_json_reports_saved_to_file",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestSarifReport",
                "name": "test_configure_output_dir",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestSarifReport",
                "name": "test_configure_filename",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_reports.TestSarifReport",
                "name": "test_sarif_report",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_quality_gates_configuration[quality_gate--quality_gates0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_quality_gates_configuration[quality_gates--quality_gates1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_quality_gates_configuration[quality_gates-e=-1:w=-1:i=-1-quality_gates2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_quality_gates_configuration[quality_gates-e=-1:w=-1:i=-1:r=0-quality_gates3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_quality_gates_configuration[quality_gates-i=0-quality_gates4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_quality_gates_configuration[quality_gates-E=100:W=100:I=100-quality_gates5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[-20]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=-1-10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[i=0-30]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=0:w=0:i=-1-20]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=0:w=0:i=0-30]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=0:w=-1:i=0-20]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=-1:w=0:i=0-20]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=-1:w=-1:i=-1-0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=-2:w=-2:i=-2-0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=10:w=10:i=10-0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_return_status.TestReturnStatus",
                "name": "test_return_status_with_quality_gates[e=20:w=20:i=20-0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_thresholds.TestThresholds",
                "name": "test_disable_rules_below_threshold[E-included0-excluded0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_thresholds.TestThresholds",
                "name": "test_disable_rules_below_threshold[W-included1-excluded1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_thresholds.TestThresholds",
                "name": "test_disable_rules_below_threshold[I-included2-excluded2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_thresholds.TestRuleSeverityThreshold",
                "name": "test_rule_threshold",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_thresholds.TestRuleSeverityThreshold",
                "name": "test_invalid_threshold_config",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestParseAssignmentSignType",
                "name": "test_happy_paths[none-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestParseAssignmentSignType",
                "name": "test_happy_paths[equal_sign-=]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestParseAssignmentSignType",
                "name": "test_happy_paths[space_and_equal_sign- =]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestParseAssignmentSignType",
                "name": "test_invalid_value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestAssignmentTypeDetector",
                "name": "test_empty_file",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestAssignmentTypeDetector",
                "name": "test_one_assignment",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestAssignmentTypeDetector",
                "name": "test_two_var_one_keyword_same_assignments",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestAssignmentTypeDetector",
                "name": "test_two_var_same_two_keyword_diff_assignments",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestAssignmentTypeDetector",
                "name": "test_five_var_diff_three_keyword_diff_assignments",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_normalize[justname-normalized0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_normalize[just_name-normalized1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_normalize[just-name-normalized2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_normalize[name-just-normalized3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[-candidates0-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[some-candidates1-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[is-this-candidates2-Did you mean:\\n    this-is]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[is-this1-candidates3-Did you mean:\\n    this-is]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[is-this-candidates4-Did you mean:\\n    is-this\\n    this-is]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[is this-candidates5-Did you mean:\\n    is-this]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestRecommendationFinder",
                "name": "test_find_similar[this-is-longernamewithout-candidates6-Did you mean:\\n    this-is-longer-name-without]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[Keyword With Embedded ${var} Variable-Keyword With Embedded  Variable]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[Keyword With Embedded ${var.attr} Variable-Keyword With Embedded  Variable]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[Keyword With Embedded ${var}['key'] Variable-Keyword With Embedded  Variable]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[Keyword With Embedded ${var}[${var}] Variable-Keyword With Embedded  Variable]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[${variable}-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[a${variable}-a]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[%{variable}b-b]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[a@{variable}b-ab]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[${variable${nested}suffix}-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[&{dict[\"key\"]}-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[this is ${variable not closed properly-this is ]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_robot_vars[this is \\\\${ escaped-this is \\\\${ escaped]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_find_robot_vars[${var}-exp_vars0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_find_robot_vars[${var}}-exp_vars1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_find_robot_vars[\\\\$${var}}-exp_vars2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_find_robot_vars[This is some ${var} and another ${var} but also ${${nested}}-exp_vars3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_invalid_pattern_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[var-var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[my_var-my_var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[my var-my var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[my_var${var}-my_var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[my_var${MY_VAR}-my_var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[my_var${my var}-my_var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[${VAR}var${var}-var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[${VAR${var}}var${var}-var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[@{VAR${var}}var&{var}-var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[@{VAR}[1]var&{var}-var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[@{VAR}[1]var&{var.param}-var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils.TestMisc",
                "name": "test_remove_nested_variables[my ${VAR} var-my  var]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0.2->=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.1a2.dev1->=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0rc2.dev1->=6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0pre2.dev1->=6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0.2-<5-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.1a2.dev1-<=5-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.1a2.dev1-~=5.0-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0rc2.dev1-<=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0rc2.dev-<=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.0-<=5dev1-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.0->5dev1-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.0->5.0.dev1-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0dev0->=6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0->=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6->=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.0.2->=6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.1b2.dev1->=6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.1alpha2.dev1->=6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.1beta2.dev1-<6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.1beta2.dev1-!=6-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[6.0.2-<4.0-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[3.2.1-<4.0-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.0-==5-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[5.1-==5-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[4.0-==4.*-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[4.0-~=4.0-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[4.0-~=5.0-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[4.0-!=4-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_specifier[4.0-!=5-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_version_parsing_and_comparison",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_invalid_version_specifier",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_find_escaped_variables[string-expected_variables0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_find_escaped_variables[$var-expected_variables1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_find_escaped_variables[$var != $var2-expected_variables2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_find_escaped_variables[$var is None-expected_variables3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utest.test_utils",
                "name": "test_find_escaped_variables[$item_access['item'] and $var('method')-expected_variables4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[8ed9222d-0259-46b6-a021-beceab00e445/build] \ud83d\ude80  Start image=crawlergpt:latest\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop] user=0 workdir=\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[8ed9222d-0259-46b6-a021-beceab00e445/build] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.7 rf-version:rf-stable3]\n[8ed9222d-0259-46b6-a021-beceab00e445/build] \u2b50 Run Main Checkout\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2705  Success - Main Checkout\n[8ed9222d-0259-46b6-a021-beceab00e445/build] \u2b50 Run Main Set up Python 3.7\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/80c2eb93-4667-4758-b2f8-21219f504ceb/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2753  ::group::Installed versions\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? false\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? true\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? true\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? true\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? true\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? true\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::explicit? true\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::matched: 3.7.11\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Successfully set up CPython (3.7.11)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2753  ::endgroup::\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2705  Success - Main Set up Python 3.7\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-output:: python-version=3.7.11\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[8ed9222d-0259-46b6-a021-beceab00e445/build] \u2b50 Run Main Install dependencies\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pip\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Installing collected packages: pip\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Attempting uninstall: pip\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     Found existing installation: pip 21.2.4\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     Uninstalling pip-21.2.4:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |       Successfully uninstalled pip-21.2.4\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Successfully installed pip-23.1.2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting robotframework==3.2.2 (from -r tests/packages/rf-stable3/requirements.txt (line 1))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading robotframework-3.2.2-py2.py3-none-any.whl (623 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 624.0/624.0 kB 17.3 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Installing collected packages: robotframework\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Successfully installed robotframework-3.2.2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | [notice] To update, run: pip install --upgrade pip\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Installing build dependencies: started\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Installing build dependencies: finished with status 'done'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Getting requirements to build wheel: started\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Getting requirements to build wheel: finished with status 'done'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Preparing metadata (pyproject.toml): started\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting jinja2<4.0,>=3.0 (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 10.6 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Requirement already satisfied: robotframework>=3.2.2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from robotframework-robocop==3.2.1) (3.2.2)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pathspec<0.12,>=0.9 (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting tomli>=2.0.0 (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pytz>=2022.7 (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 16.6 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting python-dateutil>=2.8.2 (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 11.9 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting black (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading black-23.3.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 37.0 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting coverage (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 4.1 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pytest (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 24.3 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pyyaml (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 596.3/596.3 kB 12.5 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pytest-benchmark (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading pytest_benchmark-4.0.0-py3-none-any.whl (43 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 44.0/44.0 kB 1.1 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting nox (from robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading nox-2023.4.22-py3-none-any.whl (54 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.1/54.1 kB 1.0 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting MarkupSafe>=2.0 (from jinja2<4.0,>=3.0->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading MarkupSafe-2.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting six>=1.5 (from python-dateutil>=2.8.2->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting click>=8.0.0 (from black->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 6.2 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting mypy-extensions>=0.4.3 (from black->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting packaging>=22.0 (from black->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 2.6 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting platformdirs>=2 (from black->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting typed-ast>=1.4.2 (from black->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 843.7/843.7 kB 15.8 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting typing-extensions>=3.10.0.0 (from black->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting argcomplete<4.0,>=1.9.4 (from nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading argcomplete-3.1.1-py3-none-any.whl (41 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.5/41.5 kB 1.1 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting colorlog<7.0.0,>=2.6.1 (from nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading colorlog-6.7.0-py2.py3-none-any.whl (11 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting importlib-metadata (from nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting virtualenv>=14 (from nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 43.0 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting iniconfig (from pytest->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting pluggy<2.0,>=0.12 (from pytest->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting py-cpuinfo (from pytest-benchmark->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading py_cpuinfo-9.0.0-py3-none-any.whl (22 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting zipp>=0.5 (from importlib-metadata->nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=14->nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 34.4 MB/s eta 0:00:00\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Collecting filelock<4,>=3.12 (from virtualenv>=14->nox->robotframework-robocop==3.2.1)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Building wheels for collected packages: robotframework-robocop\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Building wheel for robotframework-robocop (pyproject.toml): started\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Building wheel for robotframework-robocop (pyproject.toml): finished with status 'done'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Created wheel for robotframework-robocop: filename=robotframework_robocop-3.2.1-py3-none-any.whl size=103754 sha256=6a7ba99946520b24e9b68e84cf12e5acd667c0195df56eea81b7e7273d4cd00e\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/69/1a/56/7ecdf9a37ad0f499e648f287460f2338d8addcaf3e2c7aac4b\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Successfully built robotframework-robocop\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Installing collected packages: pytz, py-cpuinfo, distlib, zipp, typing-extensions, typed-ast, tomli, six, pyyaml, pathspec, packaging, mypy-extensions, MarkupSafe, iniconfig, filelock, exceptiongroup, coverage, colorlog, python-dateutil, platformdirs, jinja2, importlib-metadata, virtualenv, robotframework-robocop, pluggy, click, argcomplete, pytest, nox, black, pytest-benchmark\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | Successfully installed MarkupSafe-2.1.3 argcomplete-3.1.1 black-23.3.0 click-8.1.3 colorlog-6.7.0 coverage-7.2.7 distlib-0.3.6 exceptiongroup-1.1.1 filelock-3.12.2 importlib-metadata-6.7.0 iniconfig-2.0.0 jinja2-3.1.2 mypy-extensions-1.0.0 nox-2023.4.22 packaging-23.1 pathspec-0.11.1 platformdirs-3.8.0 pluggy-1.2.0 py-cpuinfo-9.0.0 pytest-7.4.0 pytest-benchmark-4.0.0 python-dateutil-2.8.2 pytz-2023.3 pyyaml-6.0 robotframework-robocop-3.2.1 six-1.16.0 tomli-2.0.1 typed-ast-1.5.4 typing-extensions-4.7.0 virtualenv-20.23.1 zipp-3.15.0\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | [notice] To update, run: pip install --upgrade pip\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u2705  Success - Main Install dependencies\n[8ed9222d-0259-46b6-a021-beceab00e445/build] \u2b50 Run Main Run unit tests with coverage\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ============================= test session starts ==============================\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | plugins: benchmark-4.0.0\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | collected 566 items\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/bom_encoding_in_file/test_rule.py .           [  0%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/ignored_data/test_rule.py .                   [  0%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/invalid_comment/test_rule.py .                [  0%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/missing_space_after_comment/test_rule.py ..   [  0%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/todo_in_comment/test_rule.py ...              [  1%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/documentation/missing_doc_keyword/test_rule.py .       [  1%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/documentation/missing_doc_resource_file/test_rule.py . [  1%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  1%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/documentation/missing_doc_suite/test_rule.py .         [  1%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/documentation/missing_doc_test_case/test_rule.py ...   [  2%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/both_tests_and_tasks/test_rule.py .       [  2%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_argument_name/test_rule.py .   [  2%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_assigned_var_name/test_rule.py . [  3%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  3%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_keyword/test_rule.py .         [  3%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_library/test_rule.py .s        [  3%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_metadata/test_rule.py .        [  3%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_resource/test_rule.py .        [  3%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_setting/test_rule.py ..        [  4%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_test_case/test_rule.py .       [  4%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_variable/test_rule.py .        [  4%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/duplicated_variables_import/test_rule.py . [  4%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  4%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/section_already_defined/test_rule.py .    [  4%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/duplications/section_out_of_order/test_rule.py ....    [  5%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/invalid_argument/test_rule.py s                 [  5%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/invalid_continuation_mark/test_rule.py .        [  6%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/invalid_for_loop/test_rule.py ss                [  6%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/invalid_if/test_rule.py ssss                    [  7%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/invalid_section_in_resource/test_rule.py s.     [  7%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/invalid_setting_in_resource/test_rule.py s.     [  7%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/missing_keyword_name/test_rule.py .             [  7%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/non_existing_setting/test_rule.py .             [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/not_enough_whitespace_after_newline_marker/test_rule.py . [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/not_enough_whitespace_after_setting/test_rule.py . [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/not_enough_whitespace_after_suite_setting/test_rule.py . [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/not_enough_whitespace_after_variable/test_rule.py s [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [  8%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/parsing_error/test_rule.py ssss.                [  9%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/return_in_test_case/test_rule.py s              [  9%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/setting_not_supported/test_rule.py .            [ 10%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/unsupported_setting_in_init_file/test_rule.py . [ 10%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | s                                                                        [ 10%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/errors/variables_import_with_args/test_rule.py .       [ 10%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_arguments/test_rule.py .                 [ 10%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_default_tags/test_rule.py .              [ 10%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_documentation/test_rule.py .             [ 11%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_force_tags/test_rule.py .                [ 11%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_keyword_tags/test_rule.py s              [ 11%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_library_import/test_rule.py .            [ 11%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_metadata/test_rule.py .                  [ 11%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_resource_import/test_rule.py .           [ 12%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_section/test_rule.py .                   [ 12%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_setup/test_rule.py .                     [ 12%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_suite_setup/test_rule.py .               [ 12%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_suite_teardown/test_rule.py .            [ 12%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_teardown/test_rule.py .                  [ 12%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_template/test_rule.py .                  [ 13%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_test_setup/test_rule.py .                [ 13%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_test_teardown/test_rule.py .             [ 13%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_test_template/test_rule.py .             [ 13%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_test_timeout/test_rule.py .              [ 13%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_timeout/test_rule.py .                   [ 13%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/empty_variables_import/test_rule.py .          [ 14%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/file_too_long/test_rule.py ..                  [ 14%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/line_too_long/test_rule.py ..                  [ 14%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/number_of_returned_values/test_rule.py s.s.    [ 15%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_few_calls_in_keyword/test_rule.py ..ss.    [ 16%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_few_calls_in_test_case/test_rule.py ...    [ 16%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_long_keyword/test_rule.py ...              [ 17%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_long_test_case/test_rule.py ...            [ 18%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_many_arguments/test_rule.py ...            [ 18%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_many_calls_in_keyword/test_rule.py ..      [ 18%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_many_calls_in_test_case/test_rule.py ...   [ 19%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/lengths/too_many_test_cases/test_rule.py ..            [ 19%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/argument_overwritten_before_usage/test_rule.py s. [ 20%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [ 20%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/can_be_resource_file/test_rule.py .               [ 20%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/empty_return/test_rule.py .                       [ 20%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/empty_variable/test_rule.py .                     [ 20%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/expression_can_be_simplified/test_rule.py ss      [ 21%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/if_can_be_merged/test_rule.py ss                  [ 21%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/if_can_be_used/test_rule.py s                     [ 21%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/inconsistent_assignment/test_rule.py ....         [ 22%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/inconsistent_assignment_in_variables/test_rule.py . [ 22%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ...                                                                      [ 22%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/inline_if_can_be_used/test_rule.py ss             [ 23%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/keyword_after_return/test_rule.py .               [ 23%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/multiline_inline_if/test_rule.py s                [ 23%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/nested_for_loop/test_rule.py .                    [ 23%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/statement_outside_loop/test_rule.py s             [ 24%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/unnecessary_string_conversion/test_rule.py ss     [ 24%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/unreachable_code/test_rule.py s                   [ 24%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/unused_argument/test_rule.py s.s                  [ 25%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/unused_variable/test_rule.py .s                   [ 25%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/variable_overwritten_before_usage/test_rule.py s. [ 25%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | s                                                                        [ 25%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/misc/wrong_import_order/test_rule.py .                 [ 26%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/bdd_without_keyword_call/test_rule.py .         [ 26%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/deprecated_singular_header/test_rule.py ss.     [ 26%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/deprecated_statement/test_rule.py s.s           [ 27%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/deprecated_with_name/test_rule.py s             [ 27%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/duplicated_library_alias/test_rule.py s.        [ 27%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/else_not_upper_case/test_rule.py ss.            [ 28%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/empty_library_alias/test_rule.py s.             [ 28%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/hyphen_in_variable_name/test_rule.py .          [ 28%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/inconsistent_variable_name/test_rule.py .       [ 29%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/invalid_section/test_rule.py s                  [ 29%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/keyword_name_is_empty/test_rule.py .            [ 29%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/keyword_name_is_reserved_word/test_rule.py ss.  [ 30%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/mixed-task-test-settings/test_rule.py s.        [ 30%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/non_local_variables_should_be_uppercase/test_rule.py . [ 30%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [ 30%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/not_allowed_char_in_filename/test_rule.py ..    [ 30%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/not_allowed_char_in_name/test_rule.py .....     [ 31%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/not_capitalized_test_case_title/test_rule.py .  [ 31%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/overwriting_reserved_variable/test_rule.py .    [ 32%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/possible_variable_overwriting/test_rule.py s.   [ 32%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/section_name_invalid/test_rule.py .             [ 32%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/section_variable_not_uppercase/test_rule.py s.  [ 33%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/setting_name_not_in_title_case/test_rule.py .   [ 33%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/test_case_name_is_empty/test_rule.py .          [ 33%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/underscore_in_keyword_name/test_rule.py .       [ 33%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/naming/wrong_case_in_keyword_name/test_rule.py ...     [ 34%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/bad_block_indent/test_rule.py ss.              [ 34%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/bad_indent/test_rule.py ..ss.ss..              [ 36%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/consecutive_empty_lines/test_rule.py ..        [ 36%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/empty_line_after_section/test_rule.py ..       [ 36%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/empty_lines_between_keywords/test_rule.py .    [ 37%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/empty_lines_between_sections/test_rule.py .    [ 37%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/empty_lines_between_test_cases/test_rule.py .  [ 37%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/empty_lines_in_statement/test_rule.py .        [ 37%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/misaligned_continuation/test_rule.py .         [ 37%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/misaligned_continuation_row/test_rule.py ..    [ 38%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/missing_trailing_blank_line/test_rule.py .     [ 38%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/mixed_tabs_and_spaces/test_rule.py .           [ 38%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/suite_setting_should_be_left_aligned/test_rule.py s [ 38%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [ 38%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/too_many_trailing_blank_lines/test_rule.py .   [ 38%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/trailing_whitespace/test_rule.py .             [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/spacing/variable_should_be_left_aligned/test_rule.py s [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                                                                          [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/could_be_keyword_tags/test_rule.py s              [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/could_be_test_tags/test_rule.py s                 [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/duplicated_tags/test_rule.py .                    [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/empty_tags/test_rule.py .                         [ 39%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/tag_already_set_in_keyword_tags/test_rule.py s    [ 40%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/tag_already_set_in_test_tags/test_rule.py .s      [ 40%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/tag_with_or_and/test_rule.py .s                   [ 40%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/tag_with_reserved_word/test_rule.py ..            [ 41%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/tag_with_space/test_rule.py .                     [ 41%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/tags/unnecessary_default_tags/test_rule.py .           [ 41%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py E.EEEEEEEEEEEEEEEEEEEEEEEE.EEEEEEEEE..sssss        [ 49%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_api.py .........                                        [ 50%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_argument_validation.py .............................    [ 55%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_checker_invalid_conf.py ..                              [ 56%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_configuration_file.py .............................     [ 61%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_configure_rule.py ...                                   [ 61%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_disablers.py ........s                                  [ 63%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_external_rules.py ..................                    [ 66%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_including_excluding.py ...............                  [ 69%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_listing_rules.py .............                          [ 71%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_messages.py ............................                [ 76%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_path_matching.py .                                      [ 76%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_reports.py .........................                    [ 81%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_return_status.py .................                      [ 84%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_thresholds.py .....                                     [ 84%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/utest/test_utils.py .............................................. [ 93%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | .......................................                                  [100%]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ==================================== ERRORS ====================================\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _______________ ERROR at setup of TestE2E.test_run_all_checkers ________________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ________ ERROR at setup of TestE2E.test_run_all_checkers_not_recursive _________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | __________________ ERROR at setup of TestE2E.test_all_reports __________________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_no_issues_all_reports _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _______________ ERROR at setup of TestE2E.test_list_all_reports ________________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_list_enabled_reports ______________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_list_disabled_reports _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ___________ ERROR at setup of TestE2E.test_ignore_file_with_pattern ____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ____________ ERROR at setup of TestE2E.test_ignore_dir_with_pattern ____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _______________ ERROR at setup of TestE2E.test_include_one_rule ________________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_run_non_existing_file _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ___________ ERROR at setup of TestE2E.test_run_with_return_status_0 ____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ____ ERROR at setup of TestE2E.test_run_with_return_status_bigger_than_zero ____\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ____________ ERROR at setup of TestE2E.test_configure_rule_severity ____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_configure_rule_option _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ ERROR at setup of TestE2E.test_configure_invalid_rule[idontexist-Provided rule or report 'idontexist' does not exist.] _\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ ERROR at setup of TestE2E.test_configure_invalid_rule[not-enough-whitespace-after-newline-mark-Provided rule or report 'not-enough-whitespace-after-newline-mark' does not exist. Did you mean:\\\\n    not-enough-whitespace-after-newline-marker] _\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ ERROR at setup of TestE2E.test_include_exclude_invalid_rule[invalid-Provided rule 'invalid' does not exist.] _\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ ERROR at setup of TestE2E.test_include_exclude_invalid_rule[parsing-error,invalid-Provided rule 'invalid' does not exist.] _\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ ERROR at setup of TestE2E.test_include_exclude_invalid_rule[line-toolong-Provided rule 'line-toolong' does not exist. Did you mean:\\\\n    line-too-long] _\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ____________ ERROR at setup of TestE2E.test_configure_invalid_param ____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ___________ ERROR at setup of TestE2E.test_configure_invalid_config ____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____ ERROR at setup of TestE2E.test_configure_return_status_invalid_value _____\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ____ ERROR at setup of TestE2E.test_configure_return_status_with_non_exist _____\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _______________ ERROR at setup of TestE2E.test_use_argument_file _______________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_set_rule_threshold[i] _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_set_rule_threshold[I] _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_set_rule_threshold[e] _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ___________ ERROR at setup of TestE2E.test_set_rule_threshold[error] ___________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _____________ ERROR at setup of TestE2E.test_set_rule_threshold[W] _____________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | __________ ERROR at setup of TestE2E.test_set_rule_threshold[WARNING] __________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | __________ ERROR at setup of TestE2E.test_set_rule_invalid_threshold ___________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ______________ ERROR at setup of TestE2E.test_configure_severity _______________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ______________ ERROR at setup of TestE2E.test_diff_encoded_chars _______________\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     @pytest.fixture\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def robocop_instance():\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       return Robocop(from_cli=True)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/e2e/test_e2e.py:20: \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/run.py:48: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.config = Config(from_cli=from_cli) if config is None else config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:206: in __init__\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse()\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:433: in parse\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:505: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.parse_args_to_config(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:490: in parse_args_to_config\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     args = parser.parse_args(args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:1758: in parse_args\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.error(msg % ' '.join(argv))\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop/config.py:80: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     super().error(message)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2508: in error\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | self = CustomArgParser(prog='robocop', usage=None, description='Static code analysis tool for Robot Framework', formatter_class=<class 'argparse.RawTextHelpFormatter'>, conflict_handler='error', add_help=False)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | status = 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | message = 'robocop: error: unrecognized arguments: --junitxml=report.xml\\n'\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     def exit(self, status=0, message=None):\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |         if message:\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |             self._print_message(message, _sys.stderr)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | >       _sys.exit(status)\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | E       SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/argparse.py:2495: SystemExit\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ---------------------------- Captured stderr setup -----------------------------\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | usage: robocop [-i RULES] [-e RULES] [-rules EXT_RULES] [-nr] [-r REPORTS]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-f FORMAT] [-c CONFIGURABLE] [-l [PATTERN]] [-lc [PATTERN]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-lr [ENABLED/DISABLED]] [-o PATH] [-ft FILETYPES]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-t THRESHOLD] [-A PATH] [--config PATH] [-g PATH]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [-gd PATTERN] [--language LANGUAGE] [-h] [-v] [-vv]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |                [paths [paths ...]]\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | robocop: error: unrecognized arguments: --junitxml=report.xml\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | =============================== warnings summary ===============================\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/bom_encoding_in_file/test_rule.py::TestRuleAcceptance::test_rule\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop/robocop/checkers/lengths.py:118: DeprecationWarning: invalid escape sequence \\S\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     \"\"\",\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/bom_encoding_in_file/test_rule.py::TestRuleAcceptance::test_rule\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop/robocop/checkers/misc.py:215: DeprecationWarning: invalid escape sequence \\ \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     \"\"\",\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/bom_encoding_in_file/test_rule.py::TestRuleAcceptance::test_rule\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop/robocop/checkers/naming.py:52: DeprecationWarning: invalid escape sequence \\[\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     \"\"\",\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | tests/atest/rules/comments/bom_encoding_in_file/test_rule.py::TestRuleAcceptance::test_rule\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop/robocop/checkers/naming.py:347: DeprecationWarning: invalid escape sequence \\[\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   |     \"\"\",\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | \n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop/report.xml -\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | =========================== short test summary info ============================\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_run_all_checkers - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_run_all_checkers_not_recursive - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_all_reports - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_no_issues_all_reports - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_list_all_reports - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_list_enabled_reports - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_list_disabled_reports - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_ignore_file_with_pattern - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_ignore_dir_with_pattern - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_include_one_rule - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_run_non_existing_file - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_run_with_return_status_0 - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_run_with_return_status_bigger_than_zero - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_rule_severity - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_rule_option - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_invalid_rule[idontexist-Provided rule or report 'idontexist' does not exist.] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_invalid_rule[not-enough-whitespace-after-newline-mark-Provided rule or report 'not-enough-whitespace-after-newline-mark' does not exist. Did you mean:\\\\n    not-enough-whitespace-after-newline-marker] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_include_exclude_invalid_rule[invalid-Provided rule 'invalid' does not exist.] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_include_exclude_invalid_rule[parsing-error,invalid-Provided rule 'invalid' does not exist.] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_include_exclude_invalid_rule[line-toolong-Provided rule 'line-toolong' does not exist. Did you mean:\\\\n    line-too-long] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_invalid_param - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_invalid_config - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_return_status_invalid_value - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_return_status_with_non_exist - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_use_argument_file - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_threshold[i] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_threshold[I] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_threshold[e] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_threshold[error] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_threshold[W] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_threshold[WARNING] - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_set_rule_invalid_threshold - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_configure_severity - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | ERROR tests/e2e/test_e2e.py::TestE2E::test_diff_encoded_chars - SystemExit: 2\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   | =========== 458 passed, 74 skipped, 4 warnings, 34 errors in 39.95s ============\n[8ed9222d-0259-46b6-a021-beceab00e445/build]   \u274c  Failure - Main Run unit tests with coverage\n[8ed9222d-0259-46b6-a021-beceab00e445/build] exitcode '1': failure\n[8ed9222d-0259-46b6-a021-beceab00e445/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/MarketSquare-robotframework-robocop/.github/workflows/unit-tests-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "8ed9222d-0259-46b6-a021-beceab00e445",
        "build_tool": "pytest",
        "elapsed_time": 311.837664604187
    }
}