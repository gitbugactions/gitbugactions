{
    "repository": "beelit94/python-terraform",
    "stars": 435,
    "language": "python",
    "size": 174,
    "clone_url": "https://github.com/beelit94/python-terraform.git",
    "timestamp": "2023-07-01T10:40:43.735361Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_generate_cmd_string[<lambda>-terraform apply -no-color the_folder]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_generate_cmd_string[<lambda>-terraform push -vcs=true -token=token -atlas-address=url path]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_cmd[<lambda>-Plan: 0 to add, 0 to change, 0 to destroy.-0-False--var_to_output]",
                "time": 1.981,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_cmd[<lambda>--1-False-Error: No Terraform configuration files-]",
                "time": 0.329,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_cmd[<lambda>--0-False--var_to_output]",
                "time": 0.113,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_cmd[<lambda>--0-False-Command: terraform workspace show -no-color-]",
                "time": 0.198,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_apply[var_to_output-variables0-None-test_output=test-options0]",
                "time": 0.1,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpcaaxp11f.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_apply[var_to_output-variables1-None-test_list_output=[\"c\",\"d\",]-options1]",
                "time": 0.102,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmp35sog8la.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_apply[var_to_output-variables2-None-test_map_output={\"c\"=\"c\"\"d\"=\"d\"}-options2]",
                "time": 0.118,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpw8qcxea2.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_apply[var_to_output-variables3-var_to_output/test_map_var.json-test_map_output={\"e\"=\"e\"\"f\"=\"f\"}-options3]",
                "time": 0.115,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmph40sc6u0.tfvars.json -var-file=var_to_output/test_map_var.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_apply[var_to_output-variables4-None-\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!-options4]",
                "time": 0.142,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_apply_with_var_file",
                "time": 0.104,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_options[fmt-args0-options0]",
                "time": 0.125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_state_data",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_state_default",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_state_default_backend",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_pre_load_state_data",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_override_default[var_to_output-variables0]",
                "time": 0.114,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpzl7rhy46.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_output[True]",
                "time": 0.109,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpifnoc93e.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_output[False]",
                "time": 0.116,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmp1ekxj93c.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_destroy",
                "time": 0.105,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpbm7ca51i.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_plan[vars_require_input-variables0-1]",
                "time": 0.105,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true vars_require_input' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_fmt",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_create_workspace",
                "time": 0.402,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_create_workspace_with_args",
                "time": 0.171,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_set_workspace",
                "time": 0.552,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_set_workspace_with_args",
                "time": 0.313,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform workspace select -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_show_workspace",
                "time": 0.194,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_show_workspace_with_no_color",
                "time": 0.176,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_delete_workspace",
                "time": 0.216,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_delete_workspace_with_args",
                "time": 0.213,
                "results": [
                    {
                        "result": "Failure",
                        "message": "python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_terraform.TestTerraform",
                "name": "test_list_workspace",
                "time": 0.113,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \ud83d\ude80  Start image=crawlergpt:latest\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform] user=0 workdir=\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.7]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \u2b50 Run Main actions/checkout@v2\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2705  Success - Main actions/checkout@v2\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \u2b50 Run Main Set up Python 3.7\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/ec4a7668-9cdb-4d18-8300-56ccc1b3f40b/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? true\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? true\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? true\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? true\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? true\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::explicit? true\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::matched: 3.7.11\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Successfully setup CPython (3.7.11)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2705  Success - Main Set up Python 3.7\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2699  ::set-output:: python-version=3.7.11\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \u2b50 Run Main Install dependencies\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting pip\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Installing collected packages: pip\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Attempting uninstall: pip\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     Found existing installation: pip 21.2.4\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     Uninstalling pip-21.2.4:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |       Successfully uninstalled pip-21.2.4\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Successfully installed pip-23.1.2\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting wheel (from -r requirements_dev.txt (line 1))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 7.5 MB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting flake8 (from -r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading flake8-5.0.4-py2.py3-none-any.whl (61 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.9/61.9 kB 1.7 MB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting pytest (from -r requirements_dev.txt (line 3))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 9.1 MB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting pytest-cov (from -r requirements_dev.txt (line 4))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8->-r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting pycodestyle<2.10.0,>=2.9.0 (from flake8->-r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading pycodestyle-2.9.1-py2.py3-none-any.whl (41 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.5/41.5 kB 1.9 MB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting pyflakes<2.6.0,>=2.5.0 (from flake8->-r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading pyflakes-2.5.0-py2.py3-none-any.whl (66 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 66.1/66.1 kB 7.6 MB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting importlib-metadata<4.3,>=1.1.0 (from flake8->-r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting iniconfig (from pytest->-r requirements_dev.txt (line 3))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting packaging (from pytest->-r requirements_dev.txt (line 3))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 3.5 MB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting pluggy<2.0,>=0.12 (from pytest->-r requirements_dev.txt (line 3))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->-r requirements_dev.txt (line 3))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting tomli>=1.0.0 (from pytest->-r requirements_dev.txt (line 3))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->-r requirements_dev.txt (line 4))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 396.6 kB/s eta 0:00:00\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting zipp>=0.5 (from importlib-metadata<4.3,>=1.1.0->flake8->-r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Collecting typing-extensions>=3.6.4 (from importlib-metadata<4.3,>=1.1.0->flake8->-r requirements_dev.txt (line 2))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Installing collected packages: zipp, wheel, typing-extensions, tomli, pyflakes, pycodestyle, packaging, mccabe, iniconfig, exceptiongroup, coverage, importlib-metadata, pluggy, flake8, pytest, pytest-cov\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | Successfully installed coverage-7.2.7 exceptiongroup-1.1.1 flake8-5.0.4 importlib-metadata-4.2.0 iniconfig-2.0.0 mccabe-0.7.0 packaging-23.1 pluggy-1.2.0 pycodestyle-2.9.1 pyflakes-2.5.0 pytest-7.4.0 pytest-cov-4.1.0 tomli-2.0.1 typing-extensions-4.7.0 wheel-0.40.0 zipp-3.15.0\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | [notice] To update, run: pip install --upgrade pip\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u2705  Success - Main Install dependencies\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \u2b50 Run Main Test with pytest\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ============================= test session starts ==============================\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cachedir: .pytest_cache\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | plugins: cov-4.1.0\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | collecting ... collected 32 items\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_generate_cmd_string[<lambda>-terraform apply -no-color the_folder] PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_generate_cmd_string[<lambda>-terraform push -vcs=true -token=token -atlas-address=url path] PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_cmd[<lambda>-Plan: 0 to add, 0 to change, 0 to destroy.-0-False--var_to_output] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_cmd[<lambda>--1-False-Error: No Terraform configuration files-] PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_cmd[<lambda>--0-False--var_to_output] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_cmd[<lambda>--0-False-Command: terraform workspace show -no-color-] PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables0-None-test_output=test-options0] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables1-None-test_list_output=[\"c\",\"d\",]-options1] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables2-None-test_map_output={\"c\"=\"c\"\"d\"=\"d\"}-options2] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables3-var_to_output/test_map_var.json-test_map_output={\"e\"=\"e\"\"f\"=\"f\"}-options3] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables4-None-\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!-options4] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_apply_with_var_file FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_options[fmt-args0-options0] PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_state_data PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_state_default PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_state_default_backend PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_pre_load_state_data PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_override_default[var_to_output-variables0] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_output[True] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_output[False] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_destroy FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_plan[vars_require_input-variables0-1] FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_fmt PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_create_workspace PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_create_workspace_with_args FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_set_workspace PASSED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_set_workspace_with_args FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_show_workspace FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_show_workspace_with_no_color FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_delete_workspace FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_delete_workspace_with_args FAILED\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py::TestTerraform::test_list_workspace PASSEDWARNING: Failed to generate report: No data to report.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | =================================== FAILURES ===================================\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ TestTerraform.test_cmd[<lambda>-Plan: 0 to add, 0 to change, 0 to destroy.-0-False--var_to_output] _\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980db1d10>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | method = <function <lambda> at 0x7f5980e185f0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | expected_output = 'Plan: 0 to add, 0 to change, 0 to destroy.'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | expected_ret_code = 0, expected_exception = False, expected_logs = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980daa310>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(*CMD_CASES)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         method: Callable[..., str],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_output: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_ret_code: int,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_exception: bool,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_logs: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         caplog: LogCaptureFixture,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         folder: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             tf = Terraform(working_dir=current_path)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:194: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980daa590>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-no-color', '-input=false', '-reconfigure', '-backend=true', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980da5650>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform init -no-color -input=false -reconfigure -backend=true var_to_output\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ___________ TestTerraform.test_cmd[<lambda>--0-False--var_to_output] ___________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980db16d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | method = <function <lambda> at 0x7f5980e180e0>, expected_output = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | expected_ret_code = 0, expected_exception = False, expected_logs = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980c0d7d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(*CMD_CASES)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         method: Callable[..., str],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_output: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_ret_code: int,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_exception: bool,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_logs: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         caplog: LogCaptureFixture,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         folder: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             tf = Terraform(working_dir=current_path)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:194: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c0d190>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-no-color', '-input=false', '-reconfigure', '-backend=true', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c0d150>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform init -no-color -input=false -reconfigure -backend=true var_to_output\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ TestTerraform.test_apply[var_to_output-variables0-None-test_output=test-options0] _\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980db1810>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output', variables = {'test_var': 'test'}, var_files = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | expected_output = 'test_output=test', options = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"folder\", \"variables\", \"var_files\", \"expected_output\", \"options\"),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         [\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\"var_to_output\", {\"test_var\": \"test\"}, None, \"test_output=test\", {}),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_list_var\": [\"c\", \"d\"]},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_list_output=[\"c\",\"d\",]',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"c\"=\"c\"\"d\"=\"d\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output/test_map_var.json\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 # Values are overriden\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"e\"=\"e\"\"f\"=\"f\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"no_color\": IsNotFlagged},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_apply(self, folder, variables, var_files, expected_output, options):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             working_dir=current_path, variables=variables, var_file=var_files\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:246: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c67710>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmpcaaxp11f.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c67410>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpcaaxp11f.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmpcaaxp11f.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ TestTerraform.test_apply[var_to_output-variables1-None-test_list_output=[\"c\",\"d\",]-options1] _\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980db1910>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output', variables = {'test_list_var': ['c', 'd']}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | var_files = None, expected_output = 'test_list_output=[\"c\",\"d\",]', options = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"folder\", \"variables\", \"var_files\", \"expected_output\", \"options\"),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         [\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\"var_to_output\", {\"test_var\": \"test\"}, None, \"test_output=test\", {}),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_list_var\": [\"c\", \"d\"]},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_list_output=[\"c\",\"d\",]',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"c\"=\"c\"\"d\"=\"d\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output/test_map_var.json\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 # Values are overriden\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"e\"=\"e\"\"f\"=\"f\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"no_color\": IsNotFlagged},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_apply(self, folder, variables, var_files, expected_output, options):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             working_dir=current_path, variables=variables, var_file=var_files\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:246: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c7d0d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmp35sog8la.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c7d6d0>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmp35sog8la.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmp35sog8la.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ TestTerraform.test_apply[var_to_output-variables2-None-test_map_output={\"c\"=\"c\"\"d\"=\"d\"}-options2] _\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980db1350>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output', variables = {'test_map_var': {'c': 'c', 'd': 'd'}}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | var_files = None, expected_output = 'test_map_output={\"c\"=\"c\"\"d\"=\"d\"}'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | options = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"folder\", \"variables\", \"var_files\", \"expected_output\", \"options\"),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         [\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\"var_to_output\", {\"test_var\": \"test\"}, None, \"test_output=test\", {}),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_list_var\": [\"c\", \"d\"]},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_list_output=[\"c\",\"d\",]',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"c\"=\"c\"\"d\"=\"d\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output/test_map_var.json\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 # Values are overriden\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"e\"=\"e\"\"f\"=\"f\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"no_color\": IsNotFlagged},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_apply(self, folder, variables, var_files, expected_output, options):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             working_dir=current_path, variables=variables, var_file=var_files\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:246: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980cd0a50>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmpw8qcxea2.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980cd0e50>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpw8qcxea2.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmpw8qcxea2.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ TestTerraform.test_apply[var_to_output-variables3-var_to_output/test_map_var.json-test_map_output={\"e\"=\"e\"\"f\"=\"f\"}-options3] _\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980daddd0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output', variables = {'test_map_var': {'c': 'c', 'd': 'd'}}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | var_files = 'var_to_output/test_map_var.json'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | expected_output = 'test_map_output={\"e\"=\"e\"\"f\"=\"f\"}', options = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"folder\", \"variables\", \"var_files\", \"expected_output\", \"options\"),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         [\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\"var_to_output\", {\"test_var\": \"test\"}, None, \"test_output=test\", {}),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_list_var\": [\"c\", \"d\"]},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_list_output=[\"c\",\"d\",]',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"c\"=\"c\"\"d\"=\"d\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output/test_map_var.json\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 # Values are overriden\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"e\"=\"e\"\"f\"=\"f\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"no_color\": IsNotFlagged},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_apply(self, folder, variables, var_files, expected_output, options):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             working_dir=current_path, variables=variables, var_file=var_files\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:246: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c0be90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmph40sc6u0.tfvars.json', '-var-file=var_to_output/test_map_var.json', '-no-color', '-input=false', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c7d7d0>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmph40sc6u0.tfvars.json -var-file=var_to_output/test_map_var.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmph40sc6u0.tfvars.json -var-file=var_to_output/test_map_var.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ TestTerraform.test_apply[var_to_output-variables4-None-\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!-options4] _\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980dade50>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output', variables = {}, var_files = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | expected_output = '\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | options = {'no_color': <class 'python_terraform.terraform.IsNotFlagged'>}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"folder\", \"variables\", \"var_files\", \"expected_output\", \"options\"),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         [\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\"var_to_output\", {\"test_var\": \"test\"}, None, \"test_output=test\", {}),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_list_var\": [\"c\", \"d\"]},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_list_output=[\"c\",\"d\",]',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"c\"=\"c\"\"d\"=\"d\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"test_map_var\": {\"c\": \"c\", \"d\": \"d\"}},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output/test_map_var.json\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 # Values are overriden\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 'test_map_output={\"e\"=\"e\"\"f\"=\"f\"}',\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             (\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"var_to_output\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 None,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 \"\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!\",\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 {\"no_color\": IsNotFlagged},\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ],\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_apply(self, folder, variables, var_files, expected_output, options):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             working_dir=current_path, variables=variables, var_file=var_files\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:246: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c8d150>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-no-color', '-input=false', '-reconfigure', '-backend=true', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c8d910>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ____________________ TestTerraform.test_apply_with_var_file ____________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980dadf50>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980c869d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_apply_with_var_file(self, caplog: LogCaptureFixture):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             tf = Terraform(working_dir=current_path)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             folder = \"var_to_output\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:257: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c86390>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-no-color', '-input=false', '-reconfigure', '-backend=true', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c86690>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform init -no-color -input=false -reconfigure -backend=true var_to_output\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ________ TestTerraform.test_override_default[var_to_output-variables0] _________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da09d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | folder = 'var_to_output', variables = {'test_var': 'test'}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"folder\", \"variables\"), [(\"var_to_output\", {\"test_var\": \"test\"})]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_override_default(self, folder, variables):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(working_dir=current_path, variables=variables)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(folder)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:307: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980b77250>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmpzl7rhy46.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980b77bd0>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpzl7rhy46.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmpzl7rhy46.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _______________________ TestTerraform.test_output[True] ________________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0310>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980c61bd0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | output_all = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\"output_all\", [True, False])\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_output(self, caplog: LogCaptureFixture, output_all: bool):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_value = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         required_output = \"test_output\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 working_dir=current_path, variables={\"test_var\": expected_value}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           tf.init(\"var_to_output\")\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:324: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c616d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmpifnoc93e.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c61250>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpifnoc93e.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform init -var-file=/tmp/tmpifnoc93e.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmpifnoc93e.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _______________________ TestTerraform.test_output[False] _______________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0190>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980b5e610>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | output_all = False\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\"output_all\", [True, False])\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_output(self, caplog: LogCaptureFixture, output_all: bool):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         expected_value = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         required_output = \"test_output\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             tf = Terraform(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 working_dir=current_path, variables={\"test_var\": expected_value}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           tf.init(\"var_to_output\")\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:324: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980b5e090>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmp1ekxj93c.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980b5e450>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmp1ekxj93c.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform init -var-file=/tmp/tmp1ekxj93c.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmp1ekxj93c.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | __________________________ TestTerraform.test_destroy __________________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0090>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_destroy(self):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(working_dir=current_path, variables={\"test_var\": \"test\"})\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(\"var_to_output\")\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:336: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980cb8d50>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('var_to_output',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-var-file=/tmp/tmpbm7ca51i.tfvars.json', '-no-color', '-input=false', '-reconfigure', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980d9aa50>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpbm7ca51i.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -var-file=/tmp/tmpbm7ca51i.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ___________ TestTerraform.test_plan[vars_require_input-variables0-1] ___________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0810>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | plan = 'vars_require_input', variables = {}, expected_ret = 1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     @pytest.mark.parametrize(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         (\"plan\", \"variables\", \"expected_ret\"), [(\"vars_require_input\", {}, 1)]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_plan(self, plan, variables, expected_ret):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         tf = Terraform(working_dir=current_path, variables=variables)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       tf.init(plan)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:346: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:212: in init\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"init\", *args, **options)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c906d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'init', capture_output = True, raise_on_error = True, synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('vars_require_input',)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'backend': True, 'backend_config': None, 'input': False, 'no_color': <class 'python_terraform.terraform.IsFlagged'>, ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'init', '-no-color', '-input=false', '-reconfigure', '-backend=true', ...]\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c90850>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true vars_require_input' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Too many command line arguments. Did you mean to use -chdir?\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform init -no-color -input=false -reconfigure -backend=true vars_require_input. Reason: Too many command line arguments. Did you mean to use -chdir?\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ________________ TestTerraform.test_create_workspace_with_args _________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980dad1d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | workspace_setup_teardown = <function workspace_setup_teardown.<locals>.wrapper at 0x7f5980c15b90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980ce3ed0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_create_workspace_with_args(self, workspace_setup_teardown, caplog):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         workspace_name = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         state_file_path = os.path.join(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             current_path, \"test_tfstate_file2\", \"terraform.tfstate\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with workspace_setup_teardown(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             workspace_name, create=False\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ) as tf, caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ret, out, err = tf.create_workspace(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >               \"test\", current_path, no_color=IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:375: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:442: in create_workspace\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"workspace\", \"new\", workspace, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980ce3c90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'workspace', capture_output = True, raise_on_error = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('new', 'test', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test')\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'no_color': <class 'python_terraform.terraform.IsFlagged'>}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'workspace', 'new', '-no-color', 'test', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test']\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980ce35d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | out = 'Usage: terraform [global options] workspace new [OPTIONS] NAME\\n\\n  Create a new Terraform workspace.\\n\\nOptions:\\n\\n...0s    Duration to retry a state lock.\\n\\n    -state=path         Copy an existing state file into the new workspace.\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform workspace new -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b\"Usage: terraform [global options] workspace new [OPTIONS] NAME\\n\\n  Create a new Terraform workspace.\\n\\nOptions:\\n\\n    -lock=false         Don't hold a state lock during the operation. This is\\n                        dangerous if others might concurrently run commands\\n                        against the same workspace.\\n\\n    -lock-timeout=0s    Duration to retry a state lock.\\n\\n    -state=path         Copy an existing state file into the new workspace.\\n\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Expected a single argument: NAME.\\n\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform workspace new -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test. Reason: Expected a single argument: NAME.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | __________________ TestTerraform.test_set_workspace_with_args __________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0690>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | workspace_setup_teardown = <function workspace_setup_teardown.<locals>.wrapper at 0x7f5980c159e0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980d9ab10>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_set_workspace_with_args(self, workspace_setup_teardown, caplog):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         workspace_name = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with workspace_setup_teardown(workspace_name) as tf, caplog.at_level(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logging.INFO\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             ret, out, err = tf.set_workspace(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >               workspace_name, current_path, no_color=IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:398: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:434: in set_workspace\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"workspace\", \"select\", workspace, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980d9aa10>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'workspace', capture_output = True, raise_on_error = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | synchronous = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | args = ('select', 'test', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test')\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | kwargs = {'no_color': <class 'python_terraform.terraform.IsFlagged'>}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stderr = -1, stdout = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmds = ['terraform', 'workspace', 'select', '-no-color', 'test', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test']\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980d9aa90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | out = 'Usage: terraform [global options] workspace select NAME\\n\\n  Select a different Terraform workspace.\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform workspace select -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:332 Command: terraform workspace select -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | INFO     python_terraform.terraform:terraform.py:349 output: b'Usage: terraform [global options] workspace select NAME\\n\\n  Select a different Terraform workspace.\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'Expected a single argument: NAME.\\n\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform workspace select -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test. Reason: Expected a single argument: NAME.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ______________________ TestTerraform.test_show_workspace _______________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0b90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | workspace_setup_teardown = <function workspace_setup_teardown.<locals>.wrapper at 0x7f5980d45a70>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_show_workspace(self, workspace_setup_teardown):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         workspace_name = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       with workspace_setup_teardown(workspace_name) as tf:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:410: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return next(self.gen)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:143: in wrapper\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     tf.create_workspace(workspace_name, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:442: in create_workspace\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"workspace\", \"new\", workspace, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980b8ddd0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'workspace', capture_output = True, raise_on_error = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | synchronous = True, args = ('new', 'test'), kwargs = {}, stderr = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stdout = -1, cmds = ['terraform', 'workspace', 'new', 'test']\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980b8d610>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'\\x1b[31mWorkspace \"test\" already exists\\x1b[0m\\x1b[0m\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform workspace new test. Reason: \u001b[31mWorkspace \"test\" already exists\u001b[0m\u001b[0m\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _______________ TestTerraform.test_show_workspace_with_no_color ________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da0f90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | workspace_setup_teardown = <function workspace_setup_teardown.<locals>.wrapper at 0x7f5980c7cef0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980cd0790>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_show_workspace_with_no_color(self, workspace_setup_teardown, caplog):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         workspace_name = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       with workspace_setup_teardown(workspace_name) as tf, caplog.at_level(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logging.INFO\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:417: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return next(self.gen)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:143: in wrapper\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     tf.create_workspace(workspace_name, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:442: in create_workspace\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"workspace\", \"new\", workspace, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980cd02d0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'workspace', capture_output = True, raise_on_error = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | synchronous = True, args = ('new', 'test'), kwargs = {}, stderr = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stdout = -1, cmds = ['terraform', 'workspace', 'new', 'test']\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c0a050>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'\\x1b[31mWorkspace \"test\" already exists\\x1b[0m\\x1b[0m\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform workspace new test. Reason: \u001b[31mWorkspace \"test\" already exists\u001b[0m\u001b[0m\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _____________________ TestTerraform.test_delete_workspace ______________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da5050>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | workspace_setup_teardown = <function workspace_setup_teardown.<locals>.wrapper at 0x7f5980b81050>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_delete_workspace(self, workspace_setup_teardown):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         workspace_name = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >       with workspace_setup_teardown(workspace_name, delete=False) as tf:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:428: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return next(self.gen)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:143: in wrapper\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     tf.create_workspace(workspace_name, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:442: in create_workspace\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"workspace\", \"new\", workspace, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980b80810>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'workspace', capture_output = True, raise_on_error = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | synchronous = True, args = ('new', 'test'), kwargs = {}, stderr = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stdout = -1, cmds = ['terraform', 'workspace', 'new', 'test']\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980b80e10>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'\\x1b[31mWorkspace \"test\" already exists\\x1b[0m\\x1b[0m\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform workspace new test. Reason: \u001b[31mWorkspace \"test\" already exists\u001b[0m\u001b[0m\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ________________ TestTerraform.test_delete_workspace_with_args _________________\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <test_terraform.TestTerraform object at 0x7f5980da5110>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | workspace_setup_teardown = <function workspace_setup_teardown.<locals>.wrapper at 0x7f5980bff8c0>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7f5980c27e50>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def test_delete_workspace_with_args(self, workspace_setup_teardown, caplog):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         workspace_name = \"test\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         with workspace_setup_teardown(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           workspace_name, delete=False\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ) as tf, caplog.at_level(logging.INFO):\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:437: \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return next(self.gen)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | test/test_terraform.py:143: in wrapper\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     tf.create_workspace(workspace_name, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:442: in create_workspace\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     return self.cmd(\"workspace\", \"new\", workspace, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | self = <python_terraform.terraform.Terraform object at 0x7f5980c27e90>\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | cmd = 'workspace', capture_output = True, raise_on_error = True\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | synchronous = True, args = ('new', 'test'), kwargs = {}, stderr = -1\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | stdout = -1, cmds = ['terraform', 'workspace', 'new', 'test']\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | working_folder = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | environ_vars = {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:38587/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | p = <subprocess.Popen object at 0x7f5980c905d0>, out = ''\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     def cmd(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmd: str,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         *args,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         capture_output: Union[bool, str] = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         raise_on_error: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         synchronous: bool = True,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         **kwargs,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     ) -> CommandOutput:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"Run a terraform command, if success, will try to read state file\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param cmd: command and sub-command of terraform, seperated with space\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     refer to https://www.terraform.io/docs/commands/index.html\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param args: arguments of a command\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :param kwargs:  any option flag with key value without prefixed dash character\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if there's a dash in the option name, use under line instead of dash,\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. -no-color --> no_color\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a simple flag with no value, value should be IsFlagged\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     ex. cmd('taint', allow\uff3fmissing=IsFlagged)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a boolean value flag, assign True or false\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a flag could be used multiple times, assign list to it's value\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if it's a \"var\" variable flag, assign dictionary to it\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if a value is None, will skip this option\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'capture_output' is passed (with any value other than\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     True), terraform output will be printed to stdout/stderr and\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     \"None\" will be returned as out and err.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                 if the option 'raise_on_error' is passed (with any value that evaluates to True),\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     and the terraform command returns a nonzerop return code, then\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     a TerraformCommandError exception will be raised. The exception object will\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                     have the following properties:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       returncode: The command's return code\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       out: The captured stdout, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |                       err: The captured stderr, or None if not captured\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         :return: ret_code, out, err\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         \"\"\"\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = subprocess.PIPE\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         elif capture_output == \"framework\":\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stderr = sys.stderr\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             stdout = sys.stdout\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         cmds = self.generate_cmd_string(cmd, *args, **kwargs)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"Command: %s\", \" \".join(cmds))\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         working_folder = self.working_dir if self.working_dir else None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         environ_vars = {}\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if self.is_env_vars_included:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             environ_vars = os.environ.copy()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         p = subprocess.Popen(\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             cmds, stdout=stdout, stderr=stderr, cwd=working_folder, env=environ_vars\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         )\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if not synchronous:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             return None, None, None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         out, err = p.communicate()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         ret_code = p.returncode\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         logger.info(\"output: %s\", out)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code == 0:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             self.read_state_file()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             logger.warning(\"error: %s\", err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         self.temp_var_files.clean_up()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if capture_output is True:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = out.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = err.decode()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         else:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             out = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |             err = None\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |     \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |         if ret_code and raise_on_error:\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | >           raise TerraformCommandError(ret_code, \" \".join(cmds), out=out, err=err)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | E           python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | python_terraform/terraform.py:365: TerraformCommandError\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ------------------------------ Captured log call -------------------------------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | WARNING  python_terraform.terraform:terraform.py:354 error: b'\\x1b[31mWorkspace \"test\" already exists\\x1b[0m\\x1b[0m\\n'\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ERROR    python_terraform.terraform:terraform.py:36 Error with command terraform workspace new test. Reason: \u001b[31mWorkspace \"test\" already exists\u001b[0m\u001b[0m\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/report.xml -\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | =========================== short test summary info ============================\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_cmd[<lambda>-Plan: 0 to add, 0 to change, 0 to destroy.-0-False--var_to_output] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_cmd[<lambda>--0-False--var_to_output] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables0-None-test_output=test-options0] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpcaaxp11f.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables1-None-test_list_output=[\"c\",\"d\",]-options1] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmp35sog8la.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables2-None-test_map_output={\"c\"=\"c\"\"d\"=\"d\"}-options2] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpw8qcxea2.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables3-var_to_output/test_map_var.json-test_map_output={\"e\"=\"e\"\"f\"=\"f\"}-options3] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmph40sc6u0.tfvars.json -var-file=var_to_output/test_map_var.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_apply[var_to_output-variables4-None-\\x1b[0m\\x1b[1m\\x1b[32mApplycomplete!-options4] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_apply_with_var_file - python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_override_default[var_to_output-variables0] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpzl7rhy46.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_output[True] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpifnoc93e.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_output[False] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmp1ekxj93c.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_destroy - python_terraform.terraform.TerraformCommandError: Command 'terraform init -var-file=/tmp/tmpbm7ca51i.tfvars.json -no-color -input=false -reconfigure -backend=true var_to_output' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_plan[vars_require_input-variables0-1] - python_terraform.terraform.TerraformCommandError: Command 'terraform init -no-color -input=false -reconfigure -backend=true vars_require_input' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_create_workspace_with_args - python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_set_workspace_with_args - python_terraform.terraform.TerraformCommandError: Command 'terraform workspace select -no-color test /tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_show_workspace - python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_show_workspace_with_no_color - python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_delete_workspace - python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | FAILED test/test_terraform.py::TestTerraform::test_delete_workspace_with_args - python_terraform.terraform.TerraformCommandError: Command 'terraform workspace new test' returned non-zero exit status 1.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | ======================== 19 failed, 13 passed in 8.04s =========================\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coverage/inorout.py:507: CoverageWarning: Module python-terraform was never imported. (module-not-imported)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   self.warn(f\"Module {pkg} was never imported.\", slug=\"module-not-imported\")\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coverage/control.py:860: CoverageWarning: No data was collected. (no-data-collected)\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   self._warn(\"No data was collected.\", slug=\"no-data-collected\")\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pytest_cov/plugin.py:298: CovReportWarning: Failed to generate report: No data to report.\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   | \n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   |   self.cov_controller.finish()\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build]   \u274c  Failure - Main Test with pytest\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] exitcode '1': failure\n[15495175-d5c6-49ec-97fc-a19f7f9623b9/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/beelit94-python-terraform/.github/workflows/pytest-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "15495175-d5c6-49ec-97fc-a19f7f9623b9",
        "build_tool": "pytest",
        "elapsed_time": 162.55361676216125
    }
}